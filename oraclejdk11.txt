[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 12 лип. 2018 4:29:16
[info] Updating jsoniter-scala-core...
[info] Done updating.
[info] Updating jsoniter-scala-macros...
[info] Done updating.
[info] Updating jsoniter-scala-benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:991:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1077:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:8:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]     private static final sun.misc.Unsafe UNSAFE;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:13:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]         sun.misc.Unsafe u = null;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:16:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             Field f = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:18:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             u = (sun.misc.Unsafe) f.get(null);
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/target/scala-2.12/jsoniter-scala-core_2.12-0.29.3-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-macros/target/scala-2.12/jsoniter-scala-macros_2.12-0.29.3-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(1))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(1))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = c0;
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(1))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: scala.collection.immutable.IndexedSeq[(Double, Double)]): scala.collection.immutable.IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[(Double, Double)] = c1;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[(Double, Double)] = c1;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = c2;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d10(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]): scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[scala.collection.immutable.IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, c1))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d12(in: JsonReader, default: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]]): scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d13(in, c4))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]] = c3;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = c4;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d13(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = c4;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d13(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = c0;
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(2))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = c5;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e5(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: scala.collection.immutable.IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e12(x: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e13(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]       private[this] val c1: scala.collection.immutable.IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]       private[this] val c2: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]       private[this] val c3: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]];
[info]       private[this] val c4: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = IndexedSeq.empty[scala.collection.immutable.IndexedSeq[(Double, Double)]];
[info]       private[this] val c5: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new scala.collection.mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: List[Boolean] = List.empty[Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.BitSet = BitSet.empty
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = c0;
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IndexedSeq[String]): scala.collection.immutable.IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(7))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = c2;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: scala.collection.immutable.IndexedSeq[String] = c0;
[info]           var _origin_addresses: scala.collection.immutable.IndexedSeq[String] = c0;
[info]           var _rows: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = c1;
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(8))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       };
[info]       private[this] val c0: scala.collection.immutable.IndexedSeq[String] = IndexedSeq.empty[String];
[info]       private[this] val c1: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]       private[this] val c2: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = c0;
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(255))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Set[Int] = Set.empty[Int]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.Seq[String]): scala.collection.immutable.Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: scala.collection.immutable.Seq[Int]): scala.collection.immutable.Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: scala.collection.immutable.Seq[Int] = c4;
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(15))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: scala.collection.immutable.Seq[Int] = c4;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0.&(7))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: scala.collection.immutable.Seq[String] = c1;
[info]           var _symbols: scala.collection.immutable.Seq[String] = c1;
[info]           var _user_mentions: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = c2;
[info]           var _urls: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = c3;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = c3;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0.&(-1))))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1.&(1023)).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0.&(16650367))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(33427583))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: scala.collection.immutable.Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: scala.collection.immutable.Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       private[this] val c1: scala.collection.immutable.Seq[String] = Seq.empty[String];
[info]       private[this] val c2: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]       private[this] val c3: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]       private[this] val c4: scala.collection.immutable.Seq[Int] = Seq.empty[Int]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:40:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:47:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 63 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/jsoniter-scala-benchmark_2.12-0.29.3-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 693 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/jsoniter-scala-benchmark_2.12-0.29.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/jsoniter-scala-benchmark_2.12-0.29.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/oraclejdk-11/bin/java -prof gc -rf json -rff oraclejdk11.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 01:22:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472194,140 ops/s
[info] # Warmup Iteration   2: 853952,532 ops/s
[info] # Warmup Iteration   3: 864746,648 ops/s
[info] # Warmup Iteration   4: 867752,799 ops/s
[info] # Warmup Iteration   5: 868995,290 ops/s
[info] Iteration   1: 865579,118 ops/s
[info]                  ·gc.alloc.rate:                   2274,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4891,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 862956,016 ops/s
[info]                  ·gc.alloc.rate:                   2267,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3686,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,190 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 865772,636 ops/s
[info]                  ·gc.alloc.rate:                   2275,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4909,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 853901,452 ops/s
[info]                  ·gc.alloc.rate:                   2244,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3739,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 857723,629 ops/s
[info]                  ·gc.alloc.rate:                   2253,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3728,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   861186,570 ±(99.9%) 20056,858 ops/s [Average]
[info]   (min, avg, max) = (853901,452, 861186,570, 865772,636), stdev = 5208,702
[info]   CI (99.9%): [841129,712, 881243,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2263,110 ±(99.9%) 52,886 MB/sec [Average]
[info]   (min, avg, max) = (2244,092, 2263,110, 2275,280), stdev = 13,734
[info]   CI (99.9%): [2210,224, 2315,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4136,000, 4136,000, 4136,001), stdev = 0,001
[info]   CI (99.9%): [4136,000, 4136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2294,472 ±(99.9%) 1408,795 MB/sec [Average]
[info]   (min, avg, max) = (2021,672, 2294,472, 2700,625), stdev = 365,859
[info]   CI (99.9%): [885,678, 3703,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4190,907 ±(99.9%) 2494,245 B/op [Average]
[info]   (min, avg, max) = (3686,813, 4190,907, 4909,191), stdev = 647,748
[info]   CI (99.9%): [1696,662, 6685,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,114 ±(99.9%) 0,178 B/op [Average]
[info]   (min, avg, max) = (0,076, 0,114, 0,190), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0,20% complete, ETA 02:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 763027,137 ops/s
[info] # Warmup Iteration   2: 1848608,196 ops/s
[info] # Warmup Iteration   3: 1863187,454 ops/s
[info] # Warmup Iteration   4: 1857726,171 ops/s
[info] # Warmup Iteration   5: 1857054,919 ops/s
[info] Iteration   1: 1855034,427 ops/s
[info]                  ·gc.alloc.rate:                   1235,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1146,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1849150,307 ops/s
[info]                  ·gc.alloc.rate:                   1231,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1150,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1857385,356 ops/s
[info]                  ·gc.alloc.rate:               1236,699 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 573,450 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1849561,414 ops/s
[info]                  ·gc.alloc.rate:                   1231,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1152,374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1830482,271 ops/s
[info]                  ·gc.alloc.rate:                   1218,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1165,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1848322,755 ±(99.9%) 40736,795 ops/s [Average]
[info]   (min, avg, max) = (1830482,271, 1848322,755, 1857385,356), stdev = 10579,216
[info]   CI (99.9%): [1807585,961, 1889059,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1230,702 ±(99.9%) 27,297 MB/sec [Average]
[info]   (min, avg, max) = (1218,707, 1230,702, 1236,699), stdev = 7,089
[info]   CI (99.9%): [1203,406, 1257,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,828 ±(99.9%) 1164,830 MB/sec [Average]
[info]   (min, avg, max) = (676,703, 1217,828, 1355,030), stdev = 302,503
[info]   CI (99.9%): [52,998, 2382,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1037,631 ±(99.9%) 999,554 B/op [Average]
[info]   (min, avg, max) = (573,450, 1037,631, 1165,228), stdev = 259,581
[info]   CI (99.9%): [38,077, 2037,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,043 ±(99.9%) 0,124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,043, 0,071), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0,40% complete, ETA 02:11:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2866127,169 ops/s
[info] # Warmup Iteration   2: 4043512,135 ops/s
[info] # Warmup Iteration   3: 4029813,873 ops/s
[info] # Warmup Iteration   4: 4062340,357 ops/s
[info] # Warmup Iteration   5: 4026619,681 ops/s
[info] Iteration   1: 4050544,281 ops/s
[info]                  ·gc.alloc.rate:               267,632 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198,767 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 4072404,448 ops/s
[info]                  ·gc.alloc.rate:      269,123 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4058554,161 ops/s
[info]                  ·gc.alloc.rate:               268,169 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198,374 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 4071988,464 ops/s
[info]                  ·gc.alloc.rate:      269,085 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4059024,244 ops/s
[info]                  ·gc.alloc.rate:               268,174 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198,360 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4062503,120 ±(99.9%) 36465,350 ops/s [Average]
[info]   (min, avg, max) = (4050544,281, 4062503,120, 4072404,448), stdev = 9469,936
[info]   CI (99.9%): [4026037,769, 4098968,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   268,437 ±(99.9%) 2,495 MB/sec [Average]
[info]   (min, avg, max) = (267,632, 268,437, 269,123), stdev = 0,648
[info]   CI (99.9%): [265,942, 270,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,902 ±(99.9%) 1078,804 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,902, 511,518), stdev = 280,162
[info]   CI (99.9%): [≈ 0, 1385,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   119,100 ±(99.9%) 418,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 119,100, 198,767), stdev = 108,723
[info]   CI (99.9%): [≈ 0, 537,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0,60% complete, ETA 02:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62764,235 ops/s
[info] # Warmup Iteration   2: 189796,620 ops/s
[info] # Warmup Iteration   3: 191542,684 ops/s
[info] # Warmup Iteration   4: 191308,963 ops/s
[info] # Warmup Iteration   5: 191814,734 ops/s
[info] Iteration   1: 189677,762 ops/s
[info]                  ·gc.alloc.rate:                   1513,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11220,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 189172,109 ops/s
[info]                  ·gc.alloc.rate:               1509,641 MB/sec
[info]                  ·gc.alloc.rate.norm:          12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11261,364 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 192112,385 ops/s
[info]                  ·gc.alloc.rate:                   1533,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11099,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,341 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 189574,543 ops/s
[info]                  ·gc.alloc.rate:               1513,022 MB/sec
[info]                  ·gc.alloc.rate.norm:          12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2033,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16882,548 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 191424,266 ops/s
[info]                  ·gc.alloc.rate:                   1527,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11155,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   190392,213 ±(99.9%) 4980,523 ops/s [Average]
[info]   (min, avg, max) = (189172,109, 190392,213, 192112,385), stdev = 1293,426
[info]   CI (99.9%): [185411,690, 195372,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1519,368 ±(99.9%) 39,456 MB/sec [Average]
[info]   (min, avg, max) = (1509,641, 1519,368, 1533,026), stdev = 10,247
[info]   CI (99.9%): [1479,912, 1558,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12560,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12560,002, 12560,002, 12560,002), stdev = 0,001
[info]   CI (99.9%): [12560,002, 12560,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,192 ±(99.9%) 1170,027 MB/sec [Average]
[info]   (min, avg, max) = (1352,226, 1490,192, 2033,731), stdev = 303,852
[info]   CI (99.9%): [320,164, 2660,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12323,880 ±(99.9%) 9815,763 B/op [Average]
[info]   (min, avg, max) = (11099,276, 12323,880, 16882,548), stdev = 2549,123
[info]   CI (99.9%): [2508,117, 22139,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,137 ±(99.9%) 0,550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,137, 0,341), stdev = 0,143
[info]   CI (99.9%): [≈ 0, 0,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0,80% complete, ETA 02:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232726,646 ops/s
[info] # Warmup Iteration   2: 644905,095 ops/s
[info] # Warmup Iteration   3: 645620,622 ops/s
[info] # Warmup Iteration   4: 651716,186 ops/s
[info] # Warmup Iteration   5: 644430,313 ops/s
[info] Iteration   1: 650964,735 ops/s
[info]                  ·gc.alloc.rate:               1919,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3246,600 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 646835,353 ops/s
[info]                  ·gc.alloc.rate:                   1907,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4907,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,203 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 649023,004 ops/s
[info]                  ·gc.alloc.rate:                   1913,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4897,940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 646231,966 ops/s
[info]                  ·gc.alloc.rate:                   1905,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4929,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 649502,092 ops/s
[info]                  ·gc.alloc.rate:                   1914,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4910,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   648511,430 ±(99.9%) 7522,815 ops/s [Average]
[info]   (min, avg, max) = (646231,966, 648511,430, 650964,735), stdev = 1953,651
[info]   CI (99.9%): [640988,615, 656034,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1911,797 ±(99.9%) 21,853 MB/sec [Average]
[info]   (min, avg, max) = (1905,184, 1911,797, 1919,063), stdev = 5,675
[info]   CI (99.9%): [1889,943, 1933,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4640,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4640,001, 4640,001, 4640,001), stdev = 0,001
[info]   CI (99.9%): [4640,001, 4640,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1885,939 ±(99.9%) 1169,305 MB/sec [Average]
[info]   (min, avg, max) = (1342,765, 1885,939, 2026,204), stdev = 303,665
[info]   CI (99.9%): [716,635, 3055,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4578,523 ±(99.9%) 2867,398 B/op [Average]
[info]   (min, avg, max) = (3246,600, 4578,523, 4929,347), stdev = 744,654
[info]   CI (99.9%): [1711,125, 7445,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,091 ±(99.9%) 0,289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,091, 0,203), stdev = 0,075
[info]   CI (99.9%): [≈ 0, 0,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1,01% complete, ETA 02:10:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_7fe6a5a1/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 928325,546 ops/s
[info] # Warmup Iteration   2: 2339695,782 ops/s
[info] # Warmup Iteration   3: 2330660,204 ops/s
[info] # Warmup Iteration   4: 2345801,778 ops/s
[info] # Warmup Iteration   5: 2342206,204 ops/s
[info] Iteration   1: 2358478,924 ops/s
[info]                  ·gc.alloc.rate:                   767,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2351798,547 ops/s
[info]                  ·gc.alloc.rate:               765,039 MB/sec
[info]                  ·gc.alloc.rate.norm:          512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 451,598 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2362785,314 ops/s
[info]                  ·gc.alloc.rate:               768,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449,461 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2350807,622 ops/s
[info]                  ·gc.alloc.rate:                   764,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2351655,212 ops/s
[info]                  ·gc.alloc.rate:               764,945 MB/sec
[info]                  ·gc.alloc.rate.norm:          512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 452,031 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2355105,124 ±(99.9%) 20345,809 ops/s [Average]
[info]   (min, avg, max) = (2350807,622, 2355105,124, 2362785,314), stdev = 5283,742
[info]   CI (99.9%): [2334759,315, 2375450,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   766,133 ±(99.9%) 6,600 MB/sec [Average]
[info]   (min, avg, max) = (764,810, 766,133, 768,607), stdev = 1,714
[info]   CI (99.9%): [759,533, 772,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (512,000, 512,000, 512,000), stdev = 0,001
[info]   CI (99.9%): [512,000, 512,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,885 ±(99.9%) 2,005 MB/sec [Average]
[info]   (min, avg, max) = (674,146, 674,885, 675,420), stdev = 0,521
[info]   CI (99.9%): [672,880, 676,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   451,022 ±(99.9%) 4,879 B/op [Average]
[info]   (min, avg, max) = (449,461, 451,022, 452,159), stdev = 1,267
[info]   CI (99.9%): [446,143, 455,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,008 ±(99.9%) 0,048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,028), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1,21% complete, ETA 02:10:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4907307,319 ops/s
[info] # Warmup Iteration   2: 14461196,601 ops/s
[info] # Warmup Iteration   3: 14424392,378 ops/s
[info] # Warmup Iteration   4: 14710770,192 ops/s
[info] # Warmup Iteration   5: 14385958,296 ops/s
[info] Iteration   1: 14361945,070 ops/s
[info]                  ·gc.alloc.rate:                   730,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 14572190,942 ops/s
[info]                  ·gc.alloc.rate:                   740,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 14523909,863 ops/s
[info]                  ·gc.alloc.rate:               738,203 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72,902 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 14556798,128 ops/s
[info]                  ·gc.alloc.rate:                   739,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 14937469,906 ops/s
[info]                  ·gc.alloc.rate:                   759,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14590462,782 ±(99.9%) 813504,348 ops/s [Average]
[info]   (min, avg, max) = (14361945,070, 14590462,782, 14937469,906), stdev = 211264,496
[info]   CI (99.9%): [13776958,434, 15403967,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   741,668 ±(99.9%) 41,356 MB/sec [Average]
[info]   (min, avg, max) = (730,068, 741,668, 759,308), stdev = 10,740
[info]   CI (99.9%): [700,312, 783,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,471 ±(99.9%) 5,005 MB/sec [Average]
[info]   (min, avg, max) = (672,128, 673,471, 674,868), stdev = 1,300
[info]   CI (99.9%): [668,466, 678,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   72,657 ±(99.9%) 4,384 B/op [Average]
[info]   (min, avg, max) = (70,815, 72,657, 73,951), stdev = 1,139
[info]   CI (99.9%): [68,273, 77,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,131), stdev = 1,389
[info]   CI (99.9%): [≈ 0, 5,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,071 ±(99.9%) 0,586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,343), stdev = 0,152
[info]   CI (99.9%): [≈ 0, 0,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1,41% complete, ETA 02:09:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12901870,096 ops/s
[info] # Warmup Iteration   2: 17733824,257 ops/s
[info] # Warmup Iteration   3: 18953712,231 ops/s
[info] # Warmup Iteration   4: 18358832,123 ops/s
[info] # Warmup Iteration   5: 19155280,953 ops/s
[info] Iteration   1: 17776763,106 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19242294,548 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18404752,554 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18878678,827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19227567,007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   18706011,208 ±(99.9%) 2392124,942 ops/s [Average]
[info]   (min, avg, max) = (17776763,106, 18706011,208, 19242294,548), stdev = 621227,251
[info]   CI (99.9%): [16313886,266, 21098136,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1,61% complete, ETA 02:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125713,074 ops/s
[info] # Warmup Iteration   2: 356785,558 ops/s
[info] # Warmup Iteration   3: 341875,997 ops/s
[info] # Warmup Iteration   4: 341662,032 ops/s
[info] # Warmup Iteration   5: 356560,801 ops/s
[info] Iteration   1: 358004,495 ops/s
[info]                  ·gc.alloc.rate:                   1131,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5937,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 358540,887 ops/s
[info]                  ·gc.alloc.rate:               1133,564 MB/sec
[info]                  ·gc.alloc.rate.norm:          4976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2964,813 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 358101,747 ops/s
[info]                  ·gc.alloc.rate:                   1132,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5942,865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,274 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 358084,223 ops/s
[info]                  ·gc.alloc.rate:               1132,164 MB/sec
[info]                  ·gc.alloc.rate.norm:          4976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5949,135 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 358332,590 ops/s
[info]                  ·gc.alloc.rate:                   1132,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              4976,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          677,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2973,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   358212,788 ±(99.9%) 848,555 ops/s [Average]
[info]   (min, avg, max) = (358004,495, 358212,788, 358540,887), stdev = 220,367
[info]   CI (99.9%): [357364,233, 359061,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1132,511 ±(99.9%) 2,725 MB/sec [Average]
[info]   (min, avg, max) = (1131,809, 1132,511, 1133,564), stdev = 0,708
[info]   CI (99.9%): [1129,786, 1135,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4976,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4976,001, 4976,001, 4976,001), stdev = 0,001
[info]   CI (99.9%): [4976,001, 4976,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1081,713 ±(99.9%) 1425,319 MB/sec [Average]
[info]   (min, avg, max) = (675,403, 1081,713, 1353,577), stdev = 370,151
[info]   CI (99.9%): [≈ 0, 2507,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4753,554 ±(99.9%) 6271,731 B/op [Average]
[info]   (min, avg, max) = (2964,813, 4753,554, 5949,135), stdev = 1628,749
[info]   CI (99.9%): [≈ 0, 11025,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,110 ±(99.9%) 0,459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,110, 0,274), stdev = 0,119
[info]   CI (99.9%): [≈ 0, 0,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1,81% complete, ETA 02:09:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1268202,158 ops/s
[info] # Warmup Iteration   2: 1806176,680 ops/s
[info] # Warmup Iteration   3: 1796927,580 ops/s
[info] # Warmup Iteration   4: 1812705,156 ops/s
[info] # Warmup Iteration   5: 1816453,712 ops/s
[info] Iteration   1: 1828250,710 ops/s
[info]                  ·gc.alloc.rate:                   2824,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2322,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1819421,386 ops/s
[info]                  ·gc.alloc.rate:                   2811,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2339,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1825385,988 ops/s
[info]                  ·gc.alloc.rate:                   2820,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2336,535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1825106,713 ops/s
[info]                  ·gc.alloc.rate:                   2820,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2340,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1831055,890 ops/s
[info]                  ·gc.alloc.rate:               2828,685 MB/sec
[info]                  ·gc.alloc.rate.norm:          2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2716,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2335,448 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1825844,137 ±(99.9%) 16669,262 ops/s [Average]
[info]   (min, avg, max) = (1819421,386, 1825844,137, 1831055,890), stdev = 4328,954
[info]   CI (99.9%): [1809174,875, 1842513,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2821,048 ±(99.9%) 25,368 MB/sec [Average]
[info]   (min, avg, max) = (2811,073, 2821,048, 2828,685), stdev = 6,588
[info]   CI (99.9%): [2795,680, 2846,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2432,000, 2432,000, 2432,000), stdev = 0,001
[info]   CI (99.9%): [2432,000, 2432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2708,362 ±(99.9%) 28,692 MB/sec [Average]
[info]   (min, avg, max) = (2697,927, 2708,362, 2716,384), stdev = 7,451
[info]   CI (99.9%): [2679,670, 2737,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2334,862 ±(99.9%) 27,235 B/op [Average]
[info]   (min, avg, max) = (2322,708, 2334,862, 2340,182), stdev = 7,073
[info]   CI (99.9%): [2307,627, 2362,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,054), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2,01% complete, ETA 02:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1020464,020 ops/s
[info] # Warmup Iteration   2: 10923169,554 ops/s
[info] # Warmup Iteration   3: 11292670,597 ops/s
[info] # Warmup Iteration   4: 11275780,282 ops/s
[info] # Warmup Iteration   5: 11583837,930 ops/s
[info] Iteration   1: 11470339,204 ops/s
[info]                  ·gc.alloc.rate:                   1399,310 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11210625,686 ops/s
[info]                  ·gc.alloc.rate:                   1367,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11491292,897 ops/s
[info]                  ·gc.alloc.rate:               1401,780 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184,192 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 11529840,304 ops/s
[info]                  ·gc.alloc.rate:                   1406,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11596039,899 ops/s
[info]                  ·gc.alloc.rate:                   1414,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11459627,598 ±(99.9%) 566769,534 ops/s [Average]
[info]   (min, avg, max) = (11210625,686, 11459627,598, 11596039,899), stdev = 147188,248
[info]   CI (99.9%): [10892858,064, 12026397,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1397,943 ±(99.9%) 68,694 MB/sec [Average]
[info]   (min, avg, max) = (1367,706, 1397,943, 1414,258), stdev = 17,840
[info]   CI (99.9%): [1329,249, 1466,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,000, 192,000, 192,000), stdev = 0,001
[info]   CI (99.9%): [192,000, 192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1480,260 ±(99.9%) 1162,072 MB/sec [Average]
[info]   (min, avg, max) = (1344,165, 1480,260, 2020,105), stdev = 301,786
[info]   CI (99.9%): [318,187, 2642,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   203,214 ±(99.9%) 156,323 B/op [Average]
[info]   (min, avg, max) = (182,987, 203,214, 275,731), stdev = 40,597
[info]   CI (99.9%): [46,891, 359,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,015), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2,21% complete, ETA 02:08:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1349985,700 ops/s
[info] # Warmup Iteration   2: 2818452,637 ops/s
[info] # Warmup Iteration   3: 2859689,322 ops/s
[info] # Warmup Iteration   4: 2841125,965 ops/s
[info] # Warmup Iteration   5: 2806324,544 ops/s
[info] Iteration   1: 2848521,195 ops/s
[info]                  ·gc.alloc.rate:                   1867,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1122,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2859331,265 ops/s
[info]                  ·gc.alloc.rate:                   1874,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1119,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2844821,601 ops/s
[info]                  ·gc.alloc.rate:                   1865,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2797222,973 ops/s
[info]                  ·gc.alloc.rate:                   1834,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2833578,810 ops/s
[info]                  ·gc.alloc.rate:                   1857,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1131,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2836695,169 ±(99.9%) 92054,807 ops/s [Average]
[info]   (min, avg, max) = (2797222,973, 2836695,169, 2859331,265), stdev = 23906,341
[info]   CI (99.9%): [2744640,361, 2928749,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1859,971 ±(99.9%) 60,283 MB/sec [Average]
[info]   (min, avg, max) = (1834,204, 1859,971, 1874,895), stdev = 15,655
[info]   CI (99.9%): [1799,688, 1920,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1032,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1032,000, 1032,000, 1032,000), stdev = 0,001
[info]   CI (99.9%): [1032,000, 1032,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1898,837 ±(99.9%) 1168,470 MB/sec [Average]
[info]   (min, avg, max) = (1356,034, 1898,837, 2037,611), stdev = 303,448
[info]   CI (99.9%): [730,367, 3067,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1053,848 ±(99.9%) 654,709 B/op [Average]
[info]   (min, avg, max) = (750,272, 1053,848, 1145,873), stdev = 170,026
[info]   CI (99.9%): [399,138, 1708,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (0,023, 0,025, 0,035), stdev = 0,005
[info]   CI (99.9%): [0,006, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2,41% complete, ETA 02:08:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9218253,680 ops/s
[info] # Warmup Iteration   2: 11278338,997 ops/s
[info] # Warmup Iteration   3: 11405249,292 ops/s
[info] # Warmup Iteration   4: 11469226,998 ops/s
[info] # Warmup Iteration   5: 11449411,786 ops/s
[info] Iteration   1: 11425881,873 ops/s
[info]                  ·gc.alloc.rate:                   1451,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11394970,586 ops/s
[info]                  ·gc.alloc.rate:                   1448,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11444501,251 ops/s
[info]                  ·gc.alloc.rate:                   1454,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 11448434,282 ops/s
[info]                  ·gc.alloc.rate:                   1455,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11393577,559 ops/s
[info]                  ·gc.alloc.rate:                   1448,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11421473,110 ±(99.9%) 101096,506 ops/s [Average]
[info]   (min, avg, max) = (11393577,559, 11421473,110, 11448434,282), stdev = 26254,442
[info]   CI (99.9%): [11320376,604, 11522569,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1451,528 ±(99.9%) 12,538 MB/sec [Average]
[info]   (min, avg, max) = (1448,194, 1451,528, 1455,123), stdev = 3,256
[info]   CI (99.9%): [1438,989, 1464,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,194 ±(99.9%) 1153,592 MB/sec [Average]
[info]   (min, avg, max) = (1344,427, 1480,194, 2016,099), stdev = 299,584
[info]   CI (99.9%): [326,601, 2633,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   203,947 ±(99.9%) 158,836 B/op [Average]
[info]   (min, avg, max) = (185,045, 203,947, 277,730), stdev = 41,249
[info]   CI (99.9%): [45,110, 362,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,007, 0,011), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2,62% complete, ETA 02:08:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259752,165 ops/s
[info] # Warmup Iteration   2: 719771,802 ops/s
[info] # Warmup Iteration   3: 724325,816 ops/s
[info] # Warmup Iteration   4: 722499,408 ops/s
[info] # Warmup Iteration   5: 722536,554 ops/s
[info] Iteration   1: 721425,156 ops/s
[info]                  ·gc.alloc.rate:                   1888,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4429,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 722868,304 ops/s
[info]                  ·gc.alloc.rate:                   1892,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4425,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 724742,338 ops/s
[info]                  ·gc.alloc.rate:                   1897,131 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2945,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 722747,074 ops/s
[info]                  ·gc.alloc.rate:                   1892,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4434,901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 720596,377 ops/s
[info]                  ·gc.alloc.rate:                   1886,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4451,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   722475,850 ±(99.9%) 6088,685 ops/s [Average]
[info]   (min, avg, max) = (720596,377, 722475,850, 724742,338), stdev = 1581,212
[info]   CI (99.9%): [716387,165, 728564,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1891,217 ±(99.9%) 16,246 MB/sec [Average]
[info]   (min, avg, max) = (1886,107, 1891,217, 1897,131), stdev = 4,219
[info]   CI (99.9%): [1874,971, 1907,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4120,001, 4120,001, 4120,001), stdev = 0,001
[info]   CI (99.9%): [4120,001, 4120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,762 ±(99.9%) 1168,154 MB/sec [Average]
[info]   (min, avg, max) = (1356,110, 1898,762, 2037,714), stdev = 303,366
[info]   CI (99.9%): [730,608, 3066,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4137,377 ±(99.9%) 2566,810 B/op [Average]
[info]   (min, avg, max) = (2945,064, 4137,377, 4451,170), stdev = 666,592
[info]   CI (99.9%): [1570,567, 6704,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,091 ±(99.9%) 0,124 B/op [Average]
[info]   (min, avg, max) = (0,045, 0,091, 0,136), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2,82% complete, ETA 02:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1321460,565 ops/s
[info] # Warmup Iteration   2: 2070091,346 ops/s
[info] # Warmup Iteration   3: 2114688,660 ops/s
[info] # Warmup Iteration   4: 2121456,479 ops/s
[info] # Warmup Iteration   5: 2119705,627 ops/s
[info] Iteration   1: 2112182,886 ops/s
[info]                  ·gc.alloc.rate:                   1803,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1500,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2118097,762 ops/s
[info]                  ·gc.alloc.rate:                   1808,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1498,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2123886,153 ops/s
[info]                  ·gc.alloc.rate:                   1813,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1496,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2127550,267 ops/s
[info]                  ·gc.alloc.rate:                   1816,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2122742,695 ops/s
[info]                  ·gc.alloc.rate:                   1812,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1502,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2120891,952 ±(99.9%) 22811,530 ops/s [Average]
[info]   (min, avg, max) = (2112182,886, 2120891,952, 2127550,267), stdev = 5924,082
[info]   CI (99.9%): [2098080,423, 2143703,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1810,996 ±(99.9%) 19,585 MB/sec [Average]
[info]   (min, avg, max) = (1803,548, 1810,996, 1816,885), stdev = 5,086
[info]   CI (99.9%): [1791,411, 1830,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1344,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1344,000, 1344,000, 1344,000), stdev = 0,001
[info]   CI (99.9%): [1344,000, 1344,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1884,967 ±(99.9%) 1153,962 MB/sec [Average]
[info]   (min, avg, max) = (1348,935, 1884,967, 2025,406), stdev = 299,680
[info]   CI (99.9%): [731,005, 3038,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1399,224 ±(99.9%) 864,037 B/op [Average]
[info]   (min, avg, max) = (997,845, 1399,224, 1502,128), stdev = 224,388
[info]   CI (99.9%): [535,186, 2263,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,037 ±(99.9%) 0,053 B/op [Average]
[info]   (min, avg, max) = (0,031, 0,037, 0,062), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3,02% complete, ETA 02:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2945083,636 ops/s
[info] # Warmup Iteration   2: 19804554,049 ops/s
[info] # Warmup Iteration   3: 20776202,731 ops/s
[info] # Warmup Iteration   4: 20805361,058 ops/s
[info] # Warmup Iteration   5: 20560119,551 ops/s
[info] Iteration   1: 20777239,169 ops/s
[info]                  ·gc.alloc.rate:                   633,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 20853833,880 ops/s
[info]                  ·gc.alloc.rate:               636,071 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50,878 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 20819460,761 ops/s
[info]                  ·gc.alloc.rate:               634,895 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50,860 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 20541628,961 ops/s
[info]                  ·gc.alloc.rate:      626,503 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20543478,648 ops/s
[info]                  ·gc.alloc.rate:                   626,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   20707128,284 ±(99.9%) 587863,202 ops/s [Average]
[info]   (min, avg, max) = (20541628,961, 20707128,284, 20853833,880), stdev = 152666,207
[info]   CI (99.9%): [20119265,082, 21294991,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   631,517 ±(99.9%) 17,990 MB/sec [Average]
[info]   (min, avg, max) = (626,470, 631,517, 636,071), stdev = 4,672
[info]   CI (99.9%): [613,527, 649,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,736 ±(99.9%) 1159,674 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,736, 674,207), stdev = 301,164
[info]   CI (99.9%): [≈ 0, 1698,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   40,868 ±(99.9%) 87,978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40,868, 51,541), stdev = 22,848
[info]   CI (99.9%): [≈ 0, 128,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,542 ±(99.9%) 4,491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,542, 2,627), stdev = 1,166
[info]   CI (99.9%): [≈ 0, 5,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,041 ±(99.9%) 0,340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,041, 0,199), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3,22% complete, ETA 02:07:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_7fe6a5a1/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3233152,713 ops/s
[info] # Warmup Iteration   2: 6587282,255 ops/s
[info] # Warmup Iteration   3: 6641088,282 ops/s
[info] # Warmup Iteration   4: 6575912,871 ops/s
[info] # Warmup Iteration   5: 6619469,243 ops/s
[info] Iteration   1: 6561246,280 ops/s
[info]                  ·gc.alloc.rate:                   1800,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6645793,884 ops/s
[info]                  ·gc.alloc.rate:                   1824,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6625490,763 ops/s
[info]                  ·gc.alloc.rate:                   1818,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6549186,440 ops/s
[info]                  ·gc.alloc.rate:                   1797,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     489,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6460209,620 ops/s
[info]                  ·gc.alloc.rate:                   1772,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     330,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6568385,397 ±(99.9%) 281483,535 ops/s [Average]
[info]   (min, avg, max) = (6460209,620, 6568385,397, 6645793,884), stdev = 73100,380
[info]   CI (99.9%): [6286901,863, 6849868,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1802,840 ±(99.9%) 77,629 MB/sec [Average]
[info]   (min, avg, max) = (1772,967, 1802,840, 1824,109), stdev = 20,160
[info]   CI (99.9%): [1725,212, 1880,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1761,778 ±(99.9%) 1426,576 MB/sec [Average]
[info]   (min, avg, max) = (1354,256, 1761,778, 2035,126), stdev = 370,477
[info]   CI (99.9%): [335,202, 3188,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   422,043 ±(99.9%) 338,815 B/op [Average]
[info]   (min, avg, max) = (320,726, 422,043, 489,042), stdev = 87,989
[info]   CI (99.9%): [83,229, 760,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,011, 0,020), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3,42% complete, ETA 02:07:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17668471,873 ops/s
[info] # Warmup Iteration   2: 26857468,390 ops/s
[info] # Warmup Iteration   3: 26646560,943 ops/s
[info] # Warmup Iteration   4: 26637898,179 ops/s
[info] # Warmup Iteration   5: 25167722,340 ops/s
[info] Iteration   1: 26177537,094 ops/s
[info]                  ·gc.alloc.rate:                   798,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26334800,337 ops/s
[info]                  ·gc.alloc.rate:               803,114 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40,210 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 26315526,846 ops/s
[info]                  ·gc.alloc.rate:               802,436 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40,240 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 26311576,879 ops/s
[info]                  ·gc.alloc.rate:                   802,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 26134604,961 ops/s
[info]                  ·gc.alloc.rate:                   796,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   26254809,223 ±(99.9%) 353587,994 ops/s [Average]
[info]   (min, avg, max) = (26134604,961, 26254809,223, 26334800,337), stdev = 91825,679
[info]   CI (99.9%): [25901221,230, 26608397,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   800,592 ±(99.9%) 11,108 MB/sec [Average]
[info]   (min, avg, max) = (796,786, 800,592, 803,114), stdev = 2,885
[info]   CI (99.9%): [789,484, 811,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,187 ±(99.9%) 1155,032 MB/sec [Average]
[info]   (min, avg, max) = (672,085, 807,187, 1343,766), stdev = 299,958
[info]   CI (99.9%): [≈ 0, 1962,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48,434 ±(99.9%) 69,997 B/op [Average]
[info]   (min, avg, max) = (40,204, 48,434, 80,951), stdev = 18,178
[info]   CI (99.9%): [≈ 0, 118,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3,62% complete, ETA 02:06:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16758372,128 ops/s
[info] # Warmup Iteration   2: 26600876,555 ops/s
[info] # Warmup Iteration   3: 26774270,961 ops/s
[info] # Warmup Iteration   4: 26766991,707 ops/s
[info] # Warmup Iteration   5: 26818258,883 ops/s
[info] Iteration   1: 26938179,216 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 26928283,231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26861516,368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26771446,524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 26832362,238 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   26866357,515 ±(99.9%) 266643,975 ops/s [Average]
[info]   (min, avg, max) = (26771446,524, 26866357,515, 26938179,216), stdev = 69246,593
[info]   CI (99.9%): [26599713,541, 27133001,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3,82% complete, ETA 02:06:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626244,102 ops/s
[info] # Warmup Iteration   2: 1437115,403 ops/s
[info] # Warmup Iteration   3: 1441660,064 ops/s
[info] # Warmup Iteration   4: 1438566,521 ops/s
[info] # Warmup Iteration   5: 1447302,691 ops/s
[info] Iteration   1: 1445329,042 ops/s
[info]                  ·gc.alloc.rate:                   2211,319 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2950,601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1443309,276 ops/s
[info]                  ·gc.alloc.rate:                   2208,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2218,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1450349,315 ops/s
[info]                  ·gc.alloc.rate:                   2218,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2210,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1436268,412 ops/s
[info]                  ·gc.alloc.rate:                   2198,212 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2233,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1424659,960 ops/s
[info]                  ·gc.alloc.rate:                   2179,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3005,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1439983,201 ±(99.9%) 38298,834 ops/s [Average]
[info]   (min, avg, max) = (1424659,960, 1439983,201, 1450349,315), stdev = 9946,086
[info]   CI (99.9%): [1401684,367, 1478282,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2203,281 ±(99.9%) 58,207 MB/sec [Average]
[info]   (min, avg, max) = (2179,721, 2203,281, 2218,895), stdev = 15,116
[info]   CI (99.9%): [2145,075, 2261,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2408,000, 2408,000, 2408,000), stdev = 0,001
[info]   CI (99.9%): [2408,000, 2408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2308,168 ±(99.9%) 1429,962 MB/sec [Average]
[info]   (min, avg, max) = (2034,917, 2308,168, 2720,289), stdev = 371,357
[info]   CI (99.9%): [878,206, 3738,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2523,800 ±(99.9%) 1598,251 B/op [Average]
[info]   (min, avg, max) = (2210,371, 2523,800, 3005,181), stdev = 415,061
[info]   CI (99.9%): [925,549, 4122,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,059 ±(99.9%) 0,078 B/op [Average]
[info]   (min, avg, max) = (0,023, 0,059, 0,069), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4,02% complete, ETA 02:06:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333879,093 ops/s
[info] # Warmup Iteration   2: 389651,708 ops/s
[info] # Warmup Iteration   3: 391772,018 ops/s
[info] # Warmup Iteration   4: 389943,176 ops/s
[info] # Warmup Iteration   5: 391075,163 ops/s
[info] Iteration   1: 391474,671 ops/s
[info]                  ·gc.alloc.rate:                   2154,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8116,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 391808,417 ops/s
[info]                  ·gc.alloc.rate:                   2156,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8123,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 389899,502 ops/s
[info]                  ·gc.alloc.rate:                   2146,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8176,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 390976,535 ops/s
[info]                  ·gc.alloc.rate:                   2152,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8167,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 390785,733 ops/s
[info]                  ·gc.alloc.rate:                   2150,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10912,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   390988,972 ±(99.9%) 2813,737 ops/s [Average]
[info]   (min, avg, max) = (389899,502, 390988,972, 391808,417), stdev = 730,718
[info]   CI (99.9%): [388175,235, 393802,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2152,223 ±(99.9%) 15,570 MB/sec [Average]
[info]   (min, avg, max) = (2146,248, 2152,223, 2156,711), stdev = 4,043
[info]   CI (99.9%): [2136,653, 2167,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8664,001, 8664,001, 8664,001), stdev = 0,001
[info]   CI (99.9%): [8664,001, 8664,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2160,937 ±(99.9%) 1180,034 MB/sec [Average]
[info]   (min, avg, max) = (2018,852, 2160,937, 2709,092), stdev = 306,451
[info]   CI (99.9%): [980,903, 3340,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8699,480 ±(99.9%) 4765,706 B/op [Average]
[info]   (min, avg, max) = (8116,767, 8699,480, 10912,942), stdev = 1237,639
[info]   CI (99.9%): [3933,774, 13465,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,151 ±(99.9%) 0,270 B/op [Average]
[info]   (min, avg, max) = (0,084, 0,151, 0,251), stdev = 0,070
[info]   CI (99.9%): [≈ 0, 0,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,23% complete, ETA 02:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305501,050 ops/s
[info] # Warmup Iteration   2: 517904,228 ops/s
[info] # Warmup Iteration   3: 520424,680 ops/s
[info] # Warmup Iteration   4: 518691,522 ops/s
[info] # Warmup Iteration   5: 520304,267 ops/s
[info] Iteration   1: 517406,292 ops/s
[info]                  ·gc.alloc.rate:                   691,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2051,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 519942,548 ops/s
[info]                  ·gc.alloc.rate:                   695,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2042,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 517839,547 ops/s
[info]                  ·gc.alloc.rate:               692,206 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2050,740 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 444868,617 ops/s
[info]                  ·gc.alloc.rate:                   594,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2389,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 514672,743 ops/s
[info]                  ·gc.alloc.rate:                   688,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2065,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   502945,949 ±(99.9%) 125224,386 ops/s [Average]
[info]   (min, avg, max) = (444868,617, 502945,949, 519942,548), stdev = 32520,375
[info]   CI (99.9%): [377721,563, 628170,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   672,354 ±(99.9%) 167,406 MB/sec [Average]
[info]   (min, avg, max) = (594,715, 672,354, 695,122), stdev = 43,475
[info]   CI (99.9%): [504,949, 839,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2104,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2104,001, 2104,001, 2104,001), stdev = 0,001
[info]   CI (99.9%): [2104,001, 2104,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,966 ±(99.9%) 1,769 MB/sec [Average]
[info]   (min, avg, max) = (674,415, 674,966, 675,441), stdev = 0,459
[info]   CI (99.9%): [673,197, 676,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2119,980 ±(99.9%) 581,207 B/op [Average]
[info]   (min, avg, max) = (2042,648, 2119,980, 2389,586), stdev = 150,938
[info]   CI (99.9%): [1538,773, 2701,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,053 ±(99.9%) 0,115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,053, 0,074), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,43% complete, ETA 02:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117783,684 ops/s
[info] # Warmup Iteration   2: 1197159,710 ops/s
[info] # Warmup Iteration   3: 1220561,356 ops/s
[info] # Warmup Iteration   4: 1216531,856 ops/s
[info] # Warmup Iteration   5: 1221038,623 ops/s
[info] Iteration   1: 1222179,810 ops/s
[info]                  ·gc.alloc.rate:                   813,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868,940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1217636,732 ops/s
[info]                  ·gc.alloc.rate:               810,777 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 869,557 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1218625,034 ops/s
[info]                  ·gc.alloc.rate:                   811,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1736,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1215498,492 ops/s
[info]                  ·gc.alloc.rate:               809,362 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 870,288 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1214151,771 ops/s
[info]                  ·gc.alloc.rate:               808,458 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 871,181 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1217618,368 ±(99.9%) 11920,159 ops/s [Average]
[info]   (min, avg, max) = (1214151,771, 1217618,368, 1222179,810), stdev = 3095,628
[info]   CI (99.9%): [1205698,209, 1229538,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   810,740 ±(99.9%) 7,836 MB/sec [Average]
[info]   (min, avg, max) = (808,458, 810,740, 813,754), stdev = 2,035
[info]   CI (99.9%): [802,904, 818,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,253 ±(99.9%) 1156,794 MB/sec [Average]
[info]   (min, avg, max) = (672,054, 807,253, 1344,649), stdev = 300,416
[info]   CI (99.9%): [≈ 0, 1964,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1043,364 ±(99.9%) 1492,789 B/op [Average]
[info]   (min, avg, max) = (868,940, 1043,364, 1736,852), stdev = 387,673
[info]   CI (99.9%): [≈ 0, 2536,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,038, 0,108), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4,63% complete, ETA 02:05:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92841,324 ops/s
[info] # Warmup Iteration   2: 127118,086 ops/s
[info] # Warmup Iteration   3: 128172,934 ops/s
[info] # Warmup Iteration   4: 128469,184 ops/s
[info] # Warmup Iteration   5: 127871,344 ops/s
[info] Iteration   1: 127873,027 ops/s
[info]                  ·gc.alloc.rate:                   4421,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              54416,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50216,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,512 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 127634,420 ops/s
[info]                  ·gc.alloc.rate:                   4413,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              54416,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4765,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58755,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,513 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 128060,901 ops/s
[info]                  ·gc.alloc.rate:                   4427,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              54416,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50223,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,767 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 126395,746 ops/s
[info]                  ·gc.alloc.rate:                   4371,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              54416,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4771,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59394,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,778 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 123289,316 ops/s
[info]                  ·gc.alloc.rate:                   4262,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              54416,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52195,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,329 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   126650,682 ±(99.9%) 7656,480 ops/s [Average]
[info]   (min, avg, max) = (123289,316, 126650,682, 128060,901), stdev = 1988,363
[info]   CI (99.9%): [118994,202, 134307,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4379,114 ±(99.9%) 264,518 MB/sec [Average]
[info]   (min, avg, max) = (4262,692, 4379,114, 4427,396), stdev = 68,694
[info]   CI (99.9%): [4114,596, 4643,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54416,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54416,003, 54416,003, 54416,004), stdev = 0,001
[info]   CI (99.9%): [54416,003, 54416,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4358,234 ±(99.9%) 1440,625 MB/sec [Average]
[info]   (min, avg, max) = (4080,030, 4358,234, 4771,060), stdev = 374,126
[info]   CI (99.9%): [2917,609, 5798,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54157,122 ±(99.9%) 17584,373 B/op [Average]
[info]   (min, avg, max) = (50216,974, 54157,122, 59394,203), stdev = 4566,606
[info]   CI (99.9%): [36572,750, 71741,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,780 ±(99.9%) 1,283 B/op [Average]
[info]   (min, avg, max) = (0,512, 0,780, 1,329), stdev = 0,333
[info]   CI (99.9%): [≈ 0, 2,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 5,000), stdev = 1,304
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4,83% complete, ETA 02:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637817,567 ops/s
[info] # Warmup Iteration   2: 686107,546 ops/s
[info] # Warmup Iteration   3: 693213,377 ops/s
[info] # Warmup Iteration   4: 689908,064 ops/s
[info] # Warmup Iteration   5: 690937,070 ops/s
[info] Iteration   1: 690358,403 ops/s
[info]                  ·gc.alloc.rate:                   2112,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4604,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 690570,289 ops/s
[info]                  ·gc.alloc.rate:                   2113,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4610,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 691789,290 ops/s
[info]                  ·gc.alloc.rate:                   2116,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4608,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 687716,689 ops/s
[info]                  ·gc.alloc.rate:                   2104,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4643,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,143 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 672119,113 ops/s
[info]                  ·gc.alloc.rate:                   2056,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4757,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   686510,757 ±(99.9%) 31502,456 ops/s [Average]
[info]   (min, avg, max) = (672119,113, 686510,757, 691789,290), stdev = 8181,088
[info]   CI (99.9%): [655008,301, 718013,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2100,578 ±(99.9%) 96,678 MB/sec [Average]
[info]   (min, avg, max) = (2056,376, 2100,578, 2116,598), stdev = 25,107
[info]   CI (99.9%): [2003,900, 2197,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,001, 4816,001, 4816,001), stdev = 0,001
[info]   CI (99.9%): [4816,001, 4816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2025,559 ±(99.9%) 18,065 MB/sec [Average]
[info]   (min, avg, max) = (2019,479, 2025,559, 2031,254), stdev = 4,692
[info]   CI (99.9%): [2007,494, 2043,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4644,621 ±(99.9%) 249,568 B/op [Average]
[info]   (min, avg, max) = (4604,159, 4644,621, 4757,166), stdev = 64,812
[info]   CI (99.9%): [4395,053, 4894,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,124 ±(99.9%) 0,098 B/op [Average]
[info]   (min, avg, max) = (0,095, 0,124, 0,143), stdev = 0,025
[info]   CI (99.9%): [0,026, 0,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5,03% complete, ETA 02:05:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343940,441 ops/s
[info] # Warmup Iteration   2: 427533,408 ops/s
[info] # Warmup Iteration   3: 414426,952 ops/s
[info] # Warmup Iteration   4: 416778,894 ops/s
[info] # Warmup Iteration   5: 416262,625 ops/s
[info] Iteration   1: 415639,917 ops/s
[info]                  ·gc.alloc.rate:                   644,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2555,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,681 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 415973,446 ops/s
[info]                  ·gc.alloc.rate:                   644,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2552,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 417079,926 ops/s
[info]                  ·gc.alloc.rate:               646,603 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2536,125 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 416803,966 ops/s
[info]                  ·gc.alloc.rate:                   646,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2537,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,157 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 417624,141 ops/s
[info]                  ·gc.alloc.rate:               647,363 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2530,318 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   416624,279 ±(99.9%) 3123,640 ops/s [Average]
[info]   (min, avg, max) = (415639,917, 416624,279, 417624,141), stdev = 811,200
[info]   CI (99.9%): [413500,639, 419747,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   645,894 ±(99.9%) 4,744 MB/sec [Average]
[info]   (min, avg, max) = (644,374, 645,894, 647,363), stdev = 1,232
[info]   CI (99.9%): [641,150, 650,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2440,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2440,001, 2440,001, 2440,001), stdev = 0,001
[info]   CI (99.9%): [2440,001, 2440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,009 ±(99.9%) 6,260 MB/sec [Average]
[info]   (min, avg, max) = (671,326, 673,009, 674,758), stdev = 1,626
[info]   CI (99.9%): [666,750, 679,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2542,450 ±(99.9%) 42,086 B/op [Average]
[info]   (min, avg, max) = (2530,318, 2542,450, 2555,054), stdev = 10,930
[info]   CI (99.9%): [2500,364, 2584,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,691 ±(99.9%) 5,723 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,691, 3,349), stdev = 1,486
[info]   CI (99.9%): [≈ 0, 6,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,615 ±(99.9%) 21,671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,615, 12,681), stdev = 5,628
[info]   CI (99.9%): [≈ 0, 24,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,23% complete, ETA 02:04:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477110,884 ops/s
[info] # Warmup Iteration   2: 713631,087 ops/s
[info] # Warmup Iteration   3: 713566,137 ops/s
[info] # Warmup Iteration   4: 712738,663 ops/s
[info] # Warmup Iteration   5: 713246,503 ops/s
[info] Iteration   1: 703515,221 ops/s
[info]                  ·gc.alloc.rate:                   518,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1144,372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 714356,581 ops/s
[info]                  ·gc.alloc.rate:                   526,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1485,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,642 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 714886,641 ops/s
[info]                  ·gc.alloc.rate:                   526,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1484,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 714260,228 ops/s
[info]                  ·gc.alloc.rate:               526,483 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1486,907 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 714392,225 ops/s
[info]                  ·gc.alloc.rate:      526,500 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   712282,179 ±(99.9%) 18894,746 ops/s [Average]
[info]   (min, avg, max) = (703515,221, 712282,179, 714886,641), stdev = 4906,906
[info]   CI (99.9%): [693387,433, 731176,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   524,982 ±(99.9%) 13,999 MB/sec [Average]
[info]   (min, avg, max) = (518,486, 524,982, 526,907), stdev = 3,635
[info]   CI (99.9%): [510,983, 538,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,001, 1160,001, 1160,001), stdev = 0,001
[info]   CI (99.9%): [1160,000, 1160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   506,926 ±(99.9%) 1124,484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,926, 674,854), stdev = 292,025
[info]   CI (99.9%): [≈ 0, 1631,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1120,120 ±(99.9%) 2477,291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1120,120, 1486,907), stdev = 643,345
[info]   CI (99.9%): [≈ 0, 3597,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,478 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,291), stdev = 0,124
[info]   CI (99.9%): [≈ 0, 0,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,184 ±(99.9%) 1,052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,184, 0,642), stdev = 0,273
[info]   CI (99.9%): [≈ 0, 1,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,43% complete, ETA 02:04:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2897812,107 ops/s
[info] # Warmup Iteration   2: 3100953,674 ops/s
[info] # Warmup Iteration   3: 3117059,196 ops/s
[info] # Warmup Iteration   4: 3133907,285 ops/s
[info] # Warmup Iteration   5: 3076070,085 ops/s
[info] Iteration   1: 3098818,432 ops/s
[info]                  ·gc.alloc.rate:                   1433,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     682,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 3128752,664 ops/s
[info]                  ·gc.alloc.rate:                   1447,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3089237,974 ops/s
[info]                  ·gc.alloc.rate:                   1428,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     685,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3119444,431 ops/s
[info]                  ·gc.alloc.rate:                   1443,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3124783,082 ops/s
[info]                  ·gc.alloc.rate:                   1445,437 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   3112207,317 ±(99.9%) 66448,079 ops/s [Average]
[info]   (min, avg, max) = (3089237,974, 3112207,317, 3128752,664), stdev = 17256,355
[info]   CI (99.9%): [3045759,238, 3178655,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1439,563 ±(99.9%) 31,011 MB/sec [Average]
[info]   (min, avg, max) = (1428,842, 1439,563, 1447,204), stdev = 8,053
[info]   CI (99.9%): [1408,552, 1470,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,773 ±(99.9%) 6,868 MB/sec [Average]
[info]   (min, avg, max) = (1344,131, 1345,773, 1348,209), stdev = 1,784
[info]   CI (99.9%): [1338,905, 1352,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   680,585 ±(99.9%) 13,874 B/op [Average]
[info]   (min, avg, max) = (676,150, 680,585, 685,492), stdev = 3,603
[info]   CI (99.9%): [666,712, 694,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,055 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,025, 0,042), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5,63% complete, ETA 02:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3108067,023 ops/s
[info] # Warmup Iteration   2: 3326743,067 ops/s
[info] # Warmup Iteration   3: 3345239,051 ops/s
[info] # Warmup Iteration   4: 3345815,694 ops/s
[info] # Warmup Iteration   5: 3346301,390 ops/s
[info] Iteration   1: 3352566,022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3346425,417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3356352,282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3347136,989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3354740,894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3351444,321 ±(99.9%) 17215,887 ops/s [Average]
[info]   (min, avg, max) = (3346425,417, 3351444,321, 3356352,282), stdev = 4470,911
[info]   CI (99.9%): [3334228,434, 3368660,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5,84% complete, ETA 02:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377144,226 ops/s
[info] # Warmup Iteration   2: 448709,060 ops/s
[info] # Warmup Iteration   3: 445691,889 ops/s
[info] # Warmup Iteration   4: 444581,983 ops/s
[info] # Warmup Iteration   5: 442201,129 ops/s
[info] Iteration   1: 446570,341 ops/s
[info]                  ·gc.alloc.rate:                   642,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2373,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,473 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 448601,881 ops/s
[info]                  ·gc.alloc.rate:                   645,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2362,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 448232,056 ops/s
[info]                  ·gc.alloc.rate:                   644,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2355,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 448025,032 ops/s
[info]                  ·gc.alloc.rate:               644,470 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2356,366 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 447319,201 ops/s
[info]                  ·gc.alloc.rate:                   643,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2357,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   447749,702 ±(99.9%) 3110,992 ops/s [Average]
[info]   (min, avg, max) = (446570,341, 447749,702, 448601,881), stdev = 807,915
[info]   CI (99.9%): [444638,710, 450860,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   644,041 ±(99.9%) 4,538 MB/sec [Average]
[info]   (min, avg, max) = (642,352, 644,041, 645,357), stdev = 1,179
[info]   CI (99.9%): [639,502, 648,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   671,656 ±(99.9%) 6,381 MB/sec [Average]
[info]   (min, avg, max) = (670,026, 671,656, 673,515), stdev = 1,657
[info]   CI (99.9%): [665,275, 678,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2361,082 ±(99.9%) 28,654 B/op [Average]
[info]   (min, avg, max) = (2355,173, 2361,082, 2373,342), stdev = 7,441
[info]   CI (99.9%): [2332,429, 2389,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,785 ±(99.9%) 6,538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,785, 3,823), stdev = 1,698
[info]   CI (99.9%): [≈ 0, 7,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,768 ±(99.9%) 23,045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,768, 13,473), stdev = 5,985
[info]   CI (99.9%): [≈ 0, 25,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6,04% complete, ETA 02:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188141,508 ops/s
[info] # Warmup Iteration   2: 197232,209 ops/s
[info] # Warmup Iteration   3: 197067,342 ops/s
[info] # Warmup Iteration   4: 196987,585 ops/s
[info] # Warmup Iteration   5: 196238,176 ops/s
[info] Iteration   1: 195764,467 ops/s
[info]                  ·gc.alloc.rate:                   499,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4112,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 195867,234 ops/s
[info]                  ·gc.alloc.rate:      499,846 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 196283,769 ops/s
[info]                  ·gc.alloc.rate:                   500,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5410,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 197093,060 ops/s
[info]                  ·gc.alloc.rate:                   502,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5388,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,499 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 195259,009 ops/s
[info]                  ·gc.alloc.rate:      498,264 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   196053,508 ±(99.9%) 2642,087 ops/s [Average]
[info]   (min, avg, max) = (195259,009, 196053,508, 197093,060), stdev = 686,142
[info]   CI (99.9%): [193411,421, 198695,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   500,267 ±(99.9%) 6,723 MB/sec [Average]
[info]   (min, avg, max) = (498,264, 500,267, 502,943), stdev = 1,746
[info]   CI (99.9%): [493,544, 506,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   372,191 ±(99.9%) 1333,214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,191, 674,776), stdev = 346,231
[info]   CI (99.9%): [≈ 0, 1705,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2982,228 ±(99.9%) 10676,285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2982,228, 5410,317), stdev = 2772,597
[info]   CI (99.9%): [≈ 0, 13658,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,638 ±(99.9%) 5,342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,638, 3,119), stdev = 1,387
[info]   CI (99.9%): [≈ 0, 5,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,118 ±(99.9%) 42,838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,118, 25,016), stdev = 11,125
[info]   CI (99.9%): [≈ 0, 47,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6,24% complete, ETA 02:03:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23568,778 ops/s
[info] # Warmup Iteration   2: 27871,908 ops/s
[info] # Warmup Iteration   3: 27876,802 ops/s
[info] # Warmup Iteration   4: 27660,839 ops/s
[info] # Warmup Iteration   5: 28091,553 ops/s
[info] Iteration   1: 28025,633 ops/s
[info]                  ·gc.alloc.rate:                   1717,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113237,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,507 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 28039,917 ops/s
[info]                  ·gc.alloc.rate:               1717,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          96432,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113274,176 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 27769,758 ops/s
[info]                  ·gc.alloc.rate:                   1701,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76330,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,539 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 27964,415 ops/s
[info]                  ·gc.alloc.rate:                   1713,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113865,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,171 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 28137,348 ops/s
[info]                  ·gc.alloc.rate:               1723,769 MB/sec
[info]                  ·gc.alloc.rate.norm:          96432,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75560,961 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   27987,414 ±(99.9%) 525,866 ops/s [Average]
[info]   (min, avg, max) = (27769,758, 27987,414, 28137,348), stdev = 136,566
[info]   CI (99.9%): [27461,549, 28513,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1714,772 ±(99.9%) 31,971 MB/sec [Average]
[info]   (min, avg, max) = (1701,448, 1714,772, 1723,769), stdev = 8,303
[info]   CI (99.9%): [1682,800, 1746,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   96432,015 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (96432,014, 96432,015, 96432,016), stdev = 0,001
[info]   CI (99.9%): [96432,013, 96432,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,036 ±(99.9%) 1414,208 MB/sec [Average]
[info]   (min, avg, max) = (1346,769, 1751,036, 2023,337), stdev = 367,265
[info]   CI (99.9%): [336,827, 3165,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   98453,617 ±(99.9%) 79131,882 B/op [Average]
[info]   (min, avg, max) = (75560,961, 98453,617, 113865,637), stdev = 20550,298
[info]   CI (99.9%): [19321,735, 177585,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,644 ±(99.9%) 6,859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,644, 3,539), stdev = 1,781
[info]   CI (99.9%): [≈ 0, 8,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,44% complete, ETA 02:03:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26420,768 ops/s
[info] # Warmup Iteration   2: 38514,622 ops/s
[info] # Warmup Iteration   3: 38266,761 ops/s
[info] # Warmup Iteration   4: 38478,041 ops/s
[info] # Warmup Iteration   5: 37953,808 ops/s
[info] Iteration   1: 38487,465 ops/s
[info]                  ·gc.alloc.rate:               963,076 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27605,574 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 38529,790 ops/s
[info]                  ·gc.alloc.rate:                   964,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27604,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,850 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 38333,284 ops/s
[info]                  ·gc.alloc.rate:                   959,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55514,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,564 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38429,279 ops/s
[info]                  ·gc.alloc.rate:               961,746 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27701,065 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 38399,323 ops/s
[info]                  ·gc.alloc.rate:               960,820 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55501,445 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   38435,828 ±(99.9%) 294,429 ops/s [Average]
[info]   (min, avg, max) = (38333,284, 38435,828, 38529,790), stdev = 76,462
[info]   CI (99.9%): [38141,399, 38730,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   961,807 ±(99.9%) 7,455 MB/sec [Average]
[info]   (min, avg, max) = (959,209, 961,807, 964,185), stdev = 1,936
[info]   CI (99.9%): [954,352, 969,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39384,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (39384,011, 39384,011, 39384,012), stdev = 0,001
[info]   CI (99.9%): [39384,008, 39384,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,681 ±(99.9%) 1428,459 MB/sec [Average]
[info]   (min, avg, max) = (675,052, 946,681, 1354,024), stdev = 370,966
[info]   CI (99.9%): [≈ 0, 2375,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38785,430 ±(99.9%) 58783,060 B/op [Average]
[info]   (min, avg, max) = (27604,130, 38785,430, 55514,938), stdev = 15265,774
[info]   CI (99.9%): [≈ 0, 97568,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,683 ±(99.9%) 4,290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 2,564), stdev = 1,114
[info]   CI (99.9%): [≈ 0, 4,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,64% complete, ETA 02:03:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40556,845 ops/s
[info] # Warmup Iteration   2: 48960,586 ops/s
[info] # Warmup Iteration   3: 48740,744 ops/s
[info] # Warmup Iteration   4: 48869,083 ops/s
[info] # Warmup Iteration   5: 48972,518 ops/s
[info] Iteration   1: 49009,289 ops/s
[info]                  ·gc.alloc.rate:                   730,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21668,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 49263,009 ops/s
[info]                  ·gc.alloc.rate:                   733,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21558,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,660 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 49200,657 ops/s
[info]                  ·gc.alloc.rate:               732,999 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43039,044 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 49135,223 ops/s
[info]                  ·gc.alloc.rate:                   732,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21527,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,667 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 49199,679 ops/s
[info]                  ·gc.alloc.rate:               732,886 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21499,089 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   49161,571 ±(99.9%) 371,111 ops/s [Average]
[info]   (min, avg, max) = (49009,289, 49161,571, 49263,009), stdev = 96,376
[info]   CI (99.9%): [48790,460, 49532,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   732,388 ±(99.9%) 5,698 MB/sec [Average]
[info]   (min, avg, max) = (730,039, 732,388, 733,971), stdev = 1,480
[info]   CI (99.9%): [726,690, 738,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23448,008, 23448,009, 23448,009), stdev = 0,001
[info]   CI (99.9%): [23448,007, 23448,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,792 ±(99.9%) 1157,313 MB/sec [Average]
[info]   (min, avg, max) = (671,971, 807,792, 1345,427), stdev = 300,550
[info]   CI (99.9%): [≈ 0, 1965,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25858,597 ±(99.9%) 36983,032 B/op [Average]
[info]   (min, avg, max) = (21499,089, 25858,597, 43039,044), stdev = 9604,376
[info]   CI (99.9%): [≈ 0, 62841,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,656 ±(99.9%) 5,428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,656, 3,177), stdev = 1,410
[info]   CI (99.9%): [≈ 0, 6,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21,073 ±(99.9%) 174,337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21,073, 102,040), stdev = 45,275
[info]   CI (99.9%): [≈ 0, 195,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6,84% complete, ETA 02:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19443,342 ops/s
[info] # Warmup Iteration   2: 30846,237 ops/s
[info] # Warmup Iteration   3: 30921,996 ops/s
[info] # Warmup Iteration   4: 30677,542 ops/s
[info] # Warmup Iteration   5: 30483,274 ops/s
[info] Iteration   1: 30921,262 ops/s
[info]                  ·gc.alloc.rate:                   1637,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102948,817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,297 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31034,059 ops/s
[info]                  ·gc.alloc.rate:               1643,894 MB/sec
[info]                  ·gc.alloc.rate.norm:          83360,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68510,974 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 30974,923 ops/s
[info]                  ·gc.alloc.rate:                   1640,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68704,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,173 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30688,665 ops/s
[info]                  ·gc.alloc.rate:                   1625,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104157,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,135 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30736,728 ops/s
[info]                  ·gc.alloc.rate:               1627,778 MB/sec
[info]                  ·gc.alloc.rate.norm:          83360,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69387,799 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30871,127 ±(99.9%) 581,401 ops/s [Average]
[info]   (min, avg, max) = (30688,665, 30871,127, 31034,059), stdev = 150,988
[info]   CI (99.9%): [30289,727, 31452,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1635,116 ±(99.9%) 30,943 MB/sec [Average]
[info]   (min, avg, max) = (1625,592, 1635,116, 1643,894), stdev = 8,036
[info]   CI (99.9%): [1604,173, 1666,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83360,014 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (83360,013, 83360,014, 83360,015), stdev = 0,001
[info]   CI (99.9%): [83360,011, 83360,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1622,381 ±(99.9%) 1421,911 MB/sec [Average]
[info]   (min, avg, max) = (1351,065, 1622,381, 2031,157), stdev = 369,266
[info]   CI (99.9%): [200,470, 3044,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82741,919 ±(99.9%) 73183,328 B/op [Average]
[info]   (min, avg, max) = (68510,974, 82741,919, 104157,297), stdev = 19005,478
[info]   CI (99.9%): [9558,592, 155925,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,121 ±(99.9%) 8,652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,121, 5,297), stdev = 2,247
[info]   CI (99.9%): [≈ 0, 10,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7,04% complete, ETA 02:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19557,114 ops/s
[info] # Warmup Iteration   2: 33444,435 ops/s
[info] # Warmup Iteration   3: 34116,596 ops/s
[info] # Warmup Iteration   4: 34149,410 ops/s
[info] # Warmup Iteration   5: 34213,661 ops/s
[info] Iteration   1: 34123,794 ops/s
[info]                  ·gc.alloc.rate:                   1905,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92934,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,880 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33696,007 ops/s
[info]                  ·gc.alloc.rate:                   1881,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94244,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,917 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 34312,391 ops/s
[info]                  ·gc.alloc.rate:                   1915,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92710,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,910 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33971,460 ops/s
[info]                  ·gc.alloc.rate:               1896,803 MB/sec
[info]                  ·gc.alloc.rate.norm:          87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62519,570 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 34272,265 ops/s
[info]                  ·gc.alloc.rate:                   1913,346 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93068,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,868 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   34075,184 ±(99.9%) 966,514 ops/s [Average]
[info]   (min, avg, max) = (33696,007, 34075,184, 34312,391), stdev = 251,001
[info]   CI (99.9%): [33108,670, 35041,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1902,613 ±(99.9%) 53,621 MB/sec [Average]
[info]   (min, avg, max) = (1881,487, 1902,613, 1915,670), stdev = 13,925
[info]   CI (99.9%): [1848,992, 1956,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87872,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87872,012, 87872,012, 87872,013), stdev = 0,001
[info]   CI (99.9%): [87872,011, 87872,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1886,134 ±(99.9%) 1155,154 MB/sec [Average]
[info]   (min, avg, max) = (1349,546, 1886,134, 2026,493), stdev = 299,990
[info]   CI (99.9%): [730,980, 3041,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   87095,409 ±(99.9%) 52950,823 B/op [Average]
[info]   (min, avg, max) = (62519,570, 87095,409, 94244,583), stdev = 13751,161
[info]   CI (99.9%): [34144,586, 140046,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,115 ±(99.9%) 4,837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,115, 2,917), stdev = 1,256
[info]   CI (99.9%): [≈ 0, 6,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 6,000), stdev = 2,236
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,24% complete, ETA 02:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15093,142 ops/s
[info] # Warmup Iteration   2: 32732,614 ops/s
[info] # Warmup Iteration   3: 32934,681 ops/s
[info] # Warmup Iteration   4: 32841,798 ops/s
[info] # Warmup Iteration   5: 32773,986 ops/s
[info] Iteration   1: 32680,076 ops/s
[info]                  ·gc.alloc.rate:               1758,110 MB/sec
[info]                  ·gc.alloc.rate.norm:          84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65183,139 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 32655,522 ops/s
[info]                  ·gc.alloc.rate:                   1757,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97967,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 32921,048 ops/s
[info]                  ·gc.alloc.rate:               1771,050 MB/sec
[info]                  ·gc.alloc.rate.norm:          84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64817,530 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 32536,440 ops/s
[info]                  ·gc.alloc.rate:                   1750,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98462,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,021 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 32894,758 ops/s
[info]                  ·gc.alloc.rate:                   1769,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97486,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,992 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   32737,569 ±(99.9%) 635,248 ops/s [Average]
[info]   (min, avg, max) = (32536,440, 32737,569, 32921,048), stdev = 164,972
[info]   CI (99.9%): [32102,321, 33372,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1761,282 ±(99.9%) 33,753 MB/sec [Average]
[info]   (min, avg, max) = (1750,585, 1761,282, 1771,050), stdev = 8,766
[info]   CI (99.9%): [1727,529, 1795,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84672,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84672,012, 84672,013, 84672,013), stdev = 0,001
[info]   CI (99.9%): [84672,011, 84672,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1763,058 ±(99.9%) 1435,788 MB/sec [Average]
[info]   (min, avg, max) = (1353,448, 1763,058, 2037,435), stdev = 372,870
[info]   CI (99.9%): [327,271, 3198,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   84783,403 ±(99.9%) 69554,741 B/op [Average]
[info]   (min, avg, max) = (64817,530, 84783,403, 98462,076), stdev = 18063,145
[info]   CI (99.9%): [15228,662, 154338,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,203 ±(99.9%) 5,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,203, 3,021), stdev = 1,310
[info]   CI (99.9%): [≈ 0, 6,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,44% complete, ETA 02:02:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27584,482 ops/s
[info] # Warmup Iteration   2: 37223,989 ops/s
[info] # Warmup Iteration   3: 37500,057 ops/s
[info] # Warmup Iteration   4: 37009,167 ops/s
[info] # Warmup Iteration   5: 36980,413 ops/s
[info] Iteration   1: 36605,557 ops/s
[info]                  ·gc.alloc.rate:                   1853,468 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86722,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,580 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37373,502 ops/s
[info]                  ·gc.alloc.rate:                   1892,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85053,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,877 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37497,797 ops/s
[info]                  ·gc.alloc.rate:                   1898,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84907,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,621 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37503,332 ops/s
[info]                  ·gc.alloc.rate:                   1899,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85003,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,874 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37346,472 ops/s
[info]                  ·gc.alloc.rate:                   1890,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56983,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,877 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   37265,332 ±(99.9%) 1446,262 ops/s [Average]
[info]   (min, avg, max) = (36605,557, 37265,332, 37503,332), stdev = 375,590
[info]   CI (99.9%): [35819,069, 38711,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1886,831 ±(99.9%) 73,206 MB/sec [Average]
[info]   (min, avg, max) = (1853,468, 1886,831, 1899,077), stdev = 19,011
[info]   CI (99.9%): [1813,626, 1960,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79688,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (79688,011, 79688,011, 79688,012), stdev = 0,001
[info]   CI (99.9%): [79688,010, 79688,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1887,500 ±(99.9%) 1152,830 MB/sec [Average]
[info]   (min, avg, max) = (1351,973, 1887,500, 2025,742), stdev = 299,386
[info]   CI (99.9%): [734,670, 3040,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   79733,807 ±(99.9%) 49058,066 B/op [Average]
[info]   (min, avg, max) = (56983,249, 79733,807, 86722,608), stdev = 12740,224
[info]   CI (99.9%): [30675,741, 128791,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,766 ±(99.9%) 4,870 B/op [Average]
[info]   (min, avg, max) = (0,874, 1,766, 3,580), stdev = 1,265
[info]   CI (99.9%): [≈ 0, 6,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7,65% complete, ETA 02:02:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27564,070 ops/s
[info] # Warmup Iteration   2: 37178,544 ops/s
[info] # Warmup Iteration   3: 36376,724 ops/s
[info] # Warmup Iteration   4: 37402,484 ops/s
[info] # Warmup Iteration   5: 37801,534 ops/s
[info] Iteration   1: 37744,715 ops/s
[info]                  ·gc.alloc.rate:                   1837,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              76608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84097,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,868 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37835,958 ops/s
[info]                  ·gc.alloc.rate:               1841,657 MB/sec
[info]                  ·gc.alloc.rate.norm:          76608,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55982,238 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 37926,262 ops/s
[info]                  ·gc.alloc.rate:                   1845,830 MB/sec
[info]                  ·gc.alloc.rate.norm:              76608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83875,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37730,469 ops/s
[info]                  ·gc.alloc.rate:                   1836,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              76608,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84463,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,868 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37805,850 ops/s
[info]                  ·gc.alloc.rate:                   1840,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              76608,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84405,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,733 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   37808,651 ±(99.9%) 303,114 ops/s [Average]
[info]   (min, avg, max) = (37730,469, 37808,651, 37926,262), stdev = 78,718
[info]   CI (99.9%): [37505,537, 38111,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1840,278 ±(99.9%) 14,309 MB/sec [Average]
[info]   (min, avg, max) = (1836,636, 1840,278, 1845,830), stdev = 3,716
[info]   CI (99.9%): [1825,970, 1854,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   76608,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76608,011, 76608,011, 76608,012), stdev = 0,001
[info]   CI (99.9%): [76608,009, 76608,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1887,177 ±(99.9%) 1165,426 MB/sec [Average]
[info]   (min, avg, max) = (1345,814, 1887,177, 2027,295), stdev = 302,657
[info]   CI (99.9%): [721,751, 3052,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   78564,824 ±(99.9%) 48619,378 B/op [Average]
[info]   (min, avg, max) = (55982,238, 78564,824, 84463,992), stdev = 12626,298
[info]   CI (99.9%): [29945,445, 127184,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,867 ±(99.9%) 2,359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,867, 1,733), stdev = 0,613
[info]   CI (99.9%): [≈ 0, 3,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7,85% complete, ETA 02:01:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5075,904 ops/s
[info] # Warmup Iteration   2: 9867,583 ops/s
[info] # Warmup Iteration   3: 9949,516 ops/s
[info] # Warmup Iteration   4: 10030,535 ops/s
[info] # Warmup Iteration   5: 10024,377 ops/s
[info] Iteration   1: 9872,064 ops/s
[info]                  ·gc.alloc.rate:                   1272,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213644,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,637 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 10072,918 ops/s
[info]                  ·gc.alloc.rate:               1298,192 MB/sec
[info]                  ·gc.alloc.rate.norm:          202832,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209402,969 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 10077,256 ops/s
[info]                  ·gc.alloc.rate:                   1298,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209299,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,502 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 10068,115 ops/s
[info]                  ·gc.alloc.rate:               1297,556 MB/sec
[info]                  ·gc.alloc.rate.norm:          202832,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104847,188 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 10051,743 ops/s
[info]                  ·gc.alloc.rate:                   1295,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210132,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,259 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   10028,419 ±(99.9%) 338,616 ops/s [Average]
[info]   (min, avg, max) = (9872,064, 10028,419, 10077,256), stdev = 87,937
[info]   CI (99.9%): [9689,804, 10367,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1292,349 ±(99.9%) 43,847 MB/sec [Average]
[info]   (min, avg, max) = (1272,114, 1292,349, 1298,638), stdev = 11,387
[info]   CI (99.9%): [1248,502, 1336,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202832,041 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (202832,040, 202832,041, 202832,041), stdev = 0,001
[info]   CI (99.9%): [202832,039, 202832,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,562 ±(99.9%) 1153,426 MB/sec [Average]
[info]   (min, avg, max) = (670,728, 1206,562, 1341,865), stdev = 299,541
[info]   CI (99.9%): [53,136, 2359,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   189465,127 ±(99.9%) 182274,746 B/op [Average]
[info]   (min, avg, max) = (104847,188, 189465,127, 213644,042), stdev = 47336,173
[info]   CI (99.9%): [7190,381, 371739,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,279 ±(99.9%) 12,649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,279, 6,637), stdev = 3,285
[info]   CI (99.9%): [≈ 0, 15,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8,05% complete, ETA 02:01:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19489,593 ops/s
[info] # Warmup Iteration   2: 25251,484 ops/s
[info] # Warmup Iteration   3: 25514,712 ops/s
[info] # Warmup Iteration   4: 25500,944 ops/s
[info] # Warmup Iteration   5: 25528,828 ops/s
[info] Iteration   1: 25501,738 ops/s
[info]                  ·gc.alloc.rate:                   1981,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124474,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,285 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 25585,889 ops/s
[info]                  ·gc.alloc.rate:                   1988,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124259,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,842 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25539,396 ops/s
[info]                  ·gc.alloc.rate:                   1984,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124683,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,283 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 25480,207 ops/s
[info]                  ·gc.alloc.rate:                   1979,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125198,806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,286 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 25518,877 ops/s
[info]                  ·gc.alloc.rate:                   1982,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125166,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,284 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   25525,222 ±(99.9%) 155,218 ops/s [Average]
[info]   (min, avg, max) = (25480,207, 25525,222, 25585,889), stdev = 40,310
[info]   CI (99.9%): [25370,003, 25680,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1983,286 ±(99.9%) 12,337 MB/sec [Average]
[info]   (min, avg, max) = (1979,847, 1983,286, 1988,204), stdev = 3,204
[info]   CI (99.9%): [1970,949, 1995,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122288,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (122288,016, 122288,017, 122288,017), stdev = 0,001
[info]   CI (99.9%): [122288,014, 122288,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,317 ±(99.9%) 19,076 MB/sec [Average]
[info]   (min, avg, max) = (2016,909, 2023,317, 2029,183), stdev = 4,954
[info]   CI (99.9%): [2004,241, 2042,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   124756,712 ±(99.9%) 1606,025 B/op [Average]
[info]   (min, avg, max) = (124259,739, 124756,712, 125198,806), stdev = 417,080
[info]   CI (99.9%): [123150,687, 126362,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,796 ±(99.9%) 4,404 B/op [Average]
[info]   (min, avg, max) = (1,283, 1,796, 3,842), stdev = 1,144
[info]   CI (99.9%): [≈ 0, 6,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,25% complete, ETA 02:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36239,979 ops/s
[info] # Warmup Iteration   2: 50630,254 ops/s
[info] # Warmup Iteration   3: 50671,881 ops/s
[info] # Warmup Iteration   4: 50922,632 ops/s
[info] # Warmup Iteration   5: 50825,470 ops/s
[info] Iteration   1: 50723,155 ops/s
[info]                  ·gc.alloc.rate:               1248,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20966,973 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 48296,452 ops/s
[info]                  ·gc.alloc.rate:                   1189,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44086,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,713 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 48973,099 ops/s
[info]                  ·gc.alloc.rate:                   1205,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43520,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,669 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50735,901 ops/s
[info]                  ·gc.alloc.rate:                   1249,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42027,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 48150,919 ops/s
[info]                  ·gc.alloc.rate:                   1185,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44329,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,680 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   49375,905 ±(99.9%) 4905,883 ops/s [Average]
[info]   (min, avg, max) = (48150,919, 49375,905, 50735,901), stdev = 1274,042
[info]   CI (99.9%): [44470,023, 54281,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1215,794 ±(99.9%) 120,818 MB/sec [Average]
[info]   (min, avg, max) = (1185,540, 1215,794, 1249,336), stdev = 31,376
[info]   CI (99.9%): [1094,976, 1336,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38752,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38752,008, 38752,008, 38752,009), stdev = 0,001
[info]   CI (99.9%): [38752,008, 38752,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,822 ±(99.9%) 1169,053 MB/sec [Average]
[info]   (min, avg, max) = (675,731, 1218,822, 1356,168), stdev = 303,599
[info]   CI (99.9%): [49,770, 2387,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38986,154 ±(99.9%) 38940,300 B/op [Average]
[info]   (min, avg, max) = (20966,973, 38986,154, 44329,334), stdev = 10112,672
[info]   CI (99.9%): [45,854, 77926,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,071 ±(99.9%) 3,949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,071, 2,713), stdev = 1,026
[info]   CI (99.9%): [≈ 0, 5,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,45% complete, ETA 02:01:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63782,590 ops/s
[info] # Warmup Iteration   2: 71420,589 ops/s
[info] # Warmup Iteration   3: 70531,206 ops/s
[info] # Warmup Iteration   4: 71743,475 ops/s
[info] # Warmup Iteration   5: 71755,230 ops/s
[info] Iteration   1: 70919,803 ops/s
[info]                  ·gc.alloc.rate:               916,324 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14929,610 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 71418,952 ops/s
[info]                  ·gc.alloc.rate:                   922,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29636,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,835 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 71717,029 ops/s
[info]                  ·gc.alloc.rate:               926,540 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14749,117 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 71571,366 ops/s
[info]                  ·gc.alloc.rate:               924,837 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14778,578 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 71351,488 ops/s
[info]                  ·gc.alloc.rate:                   921,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29649,512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,918 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   71395,728 ±(99.9%) 1160,131 ops/s [Average]
[info]   (min, avg, max) = (70919,803, 71395,728, 71717,029), stdev = 301,282
[info]   CI (99.9%): [70235,597, 72555,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   922,495 ±(99.9%) 14,950 MB/sec [Average]
[info]   (min, avg, max) = (916,324, 922,495, 926,540), stdev = 3,882
[info]   CI (99.9%): [907,545, 937,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20336,006, 20336,006, 20336,007), stdev = 0,001
[info]   CI (99.9%): [20336,004, 20336,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,171 ±(99.9%) 1417,845 MB/sec [Average]
[info]   (min, avg, max) = (671,993, 941,171, 1344,827), stdev = 368,210
[info]   CI (99.9%): [≈ 0, 2359,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20748,640 ±(99.9%) 31265,859 B/op [Average]
[info]   (min, avg, max) = (14749,117, 20748,640, 29649,512), stdev = 8119,644
[info]   CI (99.9%): [≈ 0, 52014,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,551 ±(99.9%) 3,160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,551, 1,835), stdev = 0,821
[info]   CI (99.9%): [≈ 0, 3,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8,65% complete, ETA 02:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20521,173 ops/s
[info] # Warmup Iteration   2: 38670,544 ops/s
[info] # Warmup Iteration   3: 38566,891 ops/s
[info] # Warmup Iteration   4: 38784,661 ops/s
[info] # Warmup Iteration   5: 33923,097 ops/s
[info] Iteration   1: 38676,576 ops/s
[info]                  ·gc.alloc.rate:                   2582,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82764,484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,541 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38921,055 ops/s
[info]                  ·gc.alloc.rate:                   2599,255 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109822,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,209 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38865,157 ops/s
[info]                  ·gc.alloc.rate:                   2595,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110055,568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,686 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38699,728 ops/s
[info]                  ·gc.alloc.rate:                   2584,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110627,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,693 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38963,103 ops/s
[info]                  ·gc.alloc.rate:                   2601,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109937,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,682 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   38825,124 ±(99.9%) 500,710 ops/s [Average]
[info]   (min, avg, max) = (38676,576, 38825,124, 38963,103), stdev = 130,033
[info]   CI (99.9%): [38324,414, 39325,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2592,770 ±(99.9%) 33,362 MB/sec [Average]
[info]   (min, avg, max) = (2582,611, 2592,770, 2601,849), stdev = 8,664
[info]   CI (99.9%): [2559,408, 2626,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105104,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (105104,010, 105104,011, 105104,011), stdev = 0,001
[info]   CI (99.9%): [105104,009, 105104,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2581,871 ±(99.9%) 1180,042 MB/sec [Average]
[info]   (min, avg, max) = (2033,686, 2581,871, 2721,500), stdev = 306,453
[info]   CI (99.9%): [1401,830, 3761,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104641,382 ±(99.9%) 47106,755 B/op [Average]
[info]   (min, avg, max) = (82764,484, 104641,382, 110627,341), stdev = 12233,475
[info]   CI (99.9%): [57534,627, 151748,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,362 ±(99.9%) 4,223 B/op [Average]
[info]   (min, avg, max) = (1,682, 2,362, 4,209), stdev = 1,097
[info]   CI (99.9%): [≈ 0, 6,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,85% complete, ETA 02:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23669,851 ops/s
[info] # Warmup Iteration   2: 37042,937 ops/s
[info] # Warmup Iteration   3: 36800,550 ops/s
[info] # Warmup Iteration   4: 36874,336 ops/s
[info] # Warmup Iteration   5: 36673,220 ops/s
[info] Iteration   1: 36955,402 ops/s
[info]                  ·gc.alloc.rate:                   2020,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86561,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,773 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37034,338 ops/s
[info]                  ·gc.alloc.rate:                   2025,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86433,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,654 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 36815,562 ops/s
[info]                  ·gc.alloc.rate:                   2013,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87060,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,669 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 36966,625 ops/s
[info]                  ·gc.alloc.rate:                   2021,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86762,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,772 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 36949,912 ops/s
[info]                  ·gc.alloc.rate:                   2020,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86873,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,773 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   36944,368 ±(99.9%) 306,444 ops/s [Average]
[info]   (min, avg, max) = (36815,562, 36944,368, 37034,338), stdev = 79,583
[info]   CI (99.9%): [36637,923, 37250,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2020,313 ±(99.9%) 16,820 MB/sec [Average]
[info]   (min, avg, max) = (2013,300, 2020,313, 2025,289), stdev = 4,368
[info]   CI (99.9%): [2003,494, 2037,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (86072,011, 86072,012, 86072,013), stdev = 0,001
[info]   CI (99.9%): [86072,009, 86072,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2035,938 ±(99.9%) 10,766 MB/sec [Average]
[info]   (min, avg, max) = (2032,428, 2035,938, 2039,117), stdev = 2,796
[info]   CI (99.9%): [2025,172, 2046,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   86738,064 ±(99.9%) 957,691 B/op [Average]
[info]   (min, avg, max) = (86433,075, 86738,064, 87060,994), stdev = 248,709
[info]   CI (99.9%): [85780,374, 87695,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,128 ±(99.9%) 1,875 B/op [Average]
[info]   (min, avg, max) = (1,772, 2,128, 2,669), stdev = 0,487
[info]   CI (99.9%): [0,254, 4,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,05% complete, ETA 02:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46840,639 ops/s
[info] # Warmup Iteration   2: 52132,330 ops/s
[info] # Warmup Iteration   3: 52781,031 ops/s
[info] # Warmup Iteration   4: 52891,770 ops/s
[info] # Warmup Iteration   5: 52933,900 ops/s
[info] Iteration   1: 53065,570 ops/s
[info]                  ·gc.alloc.rate:                   2211,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59898,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,617 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 52738,940 ops/s
[info]                  ·gc.alloc.rate:                   2198,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60370,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,242 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 52804,075 ops/s
[info]                  ·gc.alloc.rate:                   2200,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80523,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,482 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 52950,781 ops/s
[info]                  ·gc.alloc.rate:               2207,233 MB/sec
[info]                  ·gc.alloc.rate.norm:          65600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2029,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60324,203 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 53051,979 ops/s
[info]                  ·gc.alloc.rate:                   2210,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60308,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,618 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   52922,269 ±(99.9%) 563,801 ops/s [Average]
[info]   (min, avg, max) = (52738,940, 52922,269, 53065,570), stdev = 146,417
[info]   CI (99.9%): [52358,468, 53486,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2205,688 ±(99.9%) 22,998 MB/sec [Average]
[info]   (min, avg, max) = (2198,138, 2205,688, 2211,732), stdev = 5,972
[info]   CI (99.9%): [2182,691, 2228,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (65600,008, 65600,008, 65600,009), stdev = 0,001
[info]   CI (99.9%): [65600,006, 65600,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2161,163 ±(99.9%) 1163,316 MB/sec [Average]
[info]   (min, avg, max) = (2019,497, 2161,163, 2701,516), stdev = 302,110
[info]   CI (99.9%): [997,846, 3324,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   64284,924 ±(99.9%) 34963,015 B/op [Average]
[info]   (min, avg, max) = (59898,309, 64284,924, 80523,776), stdev = 9079,784
[info]   CI (99.9%): [29321,909, 99247,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,992 ±(99.9%) 3,626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,992, 2,482), stdev = 0,942
[info]   CI (99.9%): [≈ 0, 4,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9,26% complete, ETA 02:00:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46841,454 ops/s
[info] # Warmup Iteration   2: 53064,467 ops/s
[info] # Warmup Iteration   3: 53418,800 ops/s
[info] # Warmup Iteration   4: 53382,011 ops/s
[info] # Warmup Iteration   5: 53584,231 ops/s
[info] Iteration   1: 53648,873 ops/s
[info]                  ·gc.alloc.rate:                   2142,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59253,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,832 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 53448,759 ops/s
[info]                  ·gc.alloc.rate:                   2134,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59573,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,839 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 53502,091 ops/s
[info]                  ·gc.alloc.rate:                   2136,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59587,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,837 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 53360,475 ops/s
[info]                  ·gc.alloc.rate:                   2131,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59843,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,228 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 53414,563 ops/s
[info]                  ·gc.alloc.rate:                   2132,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59860,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,227 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   53474,952 ±(99.9%) 423,671 ops/s [Average]
[info]   (min, avg, max) = (53360,475, 53474,952, 53648,873), stdev = 110,026
[info]   CI (99.9%): [53051,281, 53898,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2135,532 ±(99.9%) 17,064 MB/sec [Average]
[info]   (min, avg, max) = (2131,197, 2135,532, 2142,594), stdev = 4,432
[info]   CI (99.9%): [2118,468, 2152,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (62856,008, 62856,008, 62856,008), stdev = 0,001
[info]   CI (99.9%): [62856,007, 62856,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   2025,701 ±(99.9%) 17,244 MB/sec [Average]
[info]   (min, avg, max) = (2019,779, 2025,701, 2030,994), stdev = 4,478
[info]   CI (99.9%): [2008,457, 2042,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   59623,698 ±(99.9%) 953,754 B/op [Average]
[info]   (min, avg, max) = (59253,065, 59623,698, 59860,310), stdev = 247,687
[info]   CI (99.9%): [58669,944, 60577,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,593 ±(99.9%) 1,284 B/op [Average]
[info]   (min, avg, max) = (1,227, 1,593, 1,839), stdev = 0,333
[info]   CI (99.9%): [0,309, 2,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9,46% complete, ETA 01:59:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360653,703 ops/s
[info] # Warmup Iteration   2: 418655,149 ops/s
[info] # Warmup Iteration   3: 419286,847 ops/s
[info] # Warmup Iteration   4: 420263,916 ops/s
[info] # Warmup Iteration   5: 417667,655 ops/s
[info] Iteration   1: 418834,691 ops/s
[info]                  ·gc.alloc.rate:                   2118,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10114,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 422320,836 ops/s
[info]                  ·gc.alloc.rate:                   2136,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7536,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 421623,846 ops/s
[info]                  ·gc.alloc.rate:                   2132,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7561,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 421365,140 ops/s
[info]                  ·gc.alloc.rate:                   2131,179 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7578,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 421002,057 ops/s
[info]                  ·gc.alloc.rate:                   2128,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7594,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   421029,314 ±(99.9%) 5076,205 ops/s [Average]
[info]   (min, avg, max) = (418834,691, 421029,314, 422320,836), stdev = 1318,274
[info]   CI (99.9%): [415953,109, 426105,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2129,344 ±(99.9%) 26,034 MB/sec [Average]
[info]   (min, avg, max) = (2118,210, 2129,344, 2136,193), stdev = 6,761
[info]   CI (99.9%): [2103,311, 2155,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7960,001, 7960,001, 7960,001), stdev = 0,001
[info]   CI (99.9%): [7960,001, 7960,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2159,962 ±(99.9%) 1144,486 MB/sec [Average]
[info]   (min, avg, max) = (2022,644, 2159,962, 2691,612), stdev = 297,219
[info]   CI (99.9%): [1015,476, 3304,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8077,141 ±(99.9%) 4386,947 B/op [Average]
[info]   (min, avg, max) = (7536,890, 8077,141, 10114,784), stdev = 1139,276
[info]   CI (99.9%): [3690,194, 12464,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,187 ±(99.9%) 0,163 B/op [Average]
[info]   (min, avg, max) = (0,155, 0,187, 0,233), stdev = 0,042
[info]   CI (99.9%): [0,024, 0,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9,66% complete, ETA 01:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484558,089 ops/s
[info] # Warmup Iteration   2: 1677553,382 ops/s
[info] # Warmup Iteration   3: 1684154,138 ops/s
[info] # Warmup Iteration   4: 1683649,719 ops/s
[info] # Warmup Iteration   5: 1677430,406 ops/s
[info] Iteration   1: 1674514,039 ops/s
[info]                  ·gc.alloc.rate:                   527,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     480,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1681878,121 ops/s
[info]                  ·gc.alloc.rate:                   530,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     630,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,489 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1683733,151 ops/s
[info]                  ·gc.alloc.rate:               530,606 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 630,084 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1680797,740 ops/s
[info]                  ·gc.alloc.rate:      529,755 MB/sec
[info]                  ·gc.alloc.rate.norm: 496,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1679638,276 ops/s
[info]                  ·gc.alloc.rate:               529,279 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 630,396 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1680112,265 ±(99.9%) 13375,617 ops/s [Average]
[info]   (min, avg, max) = (1674514,039, 1680112,265, 1683733,151), stdev = 3473,605
[info]   CI (99.9%): [1666736,648, 1693487,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   529,480 ±(99.9%) 4,260 MB/sec [Average]
[info]   (min, avg, max) = (527,699, 529,480, 530,606), stdev = 1,106
[info]   CI (99.9%): [525,220, 533,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (496,000, 496,000, 496,000), stdev = 0,001
[info]   CI (99.9%): [496,000, 496,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,489 ±(99.9%) 1123,260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,489, 674,169), stdev = 291,707
[info]   CI (99.9%): [≈ 0, 1629,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   474,428 ±(99.9%) 1051,276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 474,428, 630,847), stdev = 273,013
[info]   CI (99.9%): [≈ 0, 1525,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,533 ±(99.9%) 4,579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,533, 2,660), stdev = 1,189
[info]   CI (99.9%): [≈ 0, 5,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,499 ±(99.9%) 4,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,499, 2,489), stdev = 1,113
[info]   CI (99.9%): [≈ 0, 4,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,86% complete, ETA 01:59:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 516038,201 ops/s
[info] # Warmup Iteration   2: 712435,630 ops/s
[info] # Warmup Iteration   3: 697124,070 ops/s
[info] # Warmup Iteration   4: 720224,652 ops/s
[info] # Warmup Iteration   5: 721324,760 ops/s
[info] Iteration   1: 721209,539 ops/s
[info]                  ·gc.alloc.rate:                   579,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,273 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 720081,662 ops/s
[info]                  ·gc.alloc.rate:                   578,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1474,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 721606,190 ops/s
[info]                  ·gc.alloc.rate:      579,499 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 720753,706 ops/s
[info]                  ·gc.alloc.rate:                   578,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1474,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 723278,886 ops/s
[info]                  ·gc.alloc.rate:               580,696 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1469,030 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   721385,997 ±(99.9%) 4622,270 ops/s [Average]
[info]   (min, avg, max) = (720081,662, 721385,997, 723278,886), stdev = 1200,389
[info]   CI (99.9%): [716763,726, 726008,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   579,285 ±(99.9%) 3,494 MB/sec [Average]
[info]   (min, avg, max) = (578,273, 579,285, 580,696), stdev = 0,907
[info]   CI (99.9%): [575,791, 582,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,755 ±(99.9%) 1161,863 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,755, 675,081), stdev = 301,732
[info]   CI (99.9%): [≈ 0, 1701,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1177,856 ±(99.9%) 2535,438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1177,856, 1474,212), stdev = 658,445
[info]   CI (99.9%): [≈ 0, 3713,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,073 ±(99.9%) 0,439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,073, 0,273), stdev = 0,114
[info]   CI (99.9%): [≈ 0, 0,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10,06% complete, ETA 01:58:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1588726,034 ops/s
[info] # Warmup Iteration   2: 1797506,485 ops/s
[info] # Warmup Iteration   3: 1908479,746 ops/s
[info] # Warmup Iteration   4: 1910104,767 ops/s
[info] # Warmup Iteration   5: 1903083,807 ops/s
[info] Iteration   1: 1903139,137 ops/s
[info]                  ·gc.alloc.rate:               367,591 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 423,049 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1902383,759 ops/s
[info]                  ·gc.alloc.rate:               367,447 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 423,247 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1910239,064 ops/s
[info]                  ·gc.alloc.rate:      368,963 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1808716,507 ops/s
[info]                  ·gc.alloc.rate:               349,363 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 445,140 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1622684,851 ops/s
[info]                  ·gc.alloc.rate:      313,414 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1829432,664 ±(99.9%) 473402,173 ops/s [Average]
[info]   (min, avg, max) = (1622684,851, 1829432,664, 1910239,064), stdev = 122941,041
[info]   CI (99.9%): [1356030,491, 2302834,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   353,356 ±(99.9%) 91,450 MB/sec [Average]
[info]   (min, avg, max) = (313,414, 353,356, 368,963), stdev = 23,749
[info]   CI (99.9%): [261,906, 444,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,937 ±(99.9%) 1078,928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,937, 511,581), stdev = 280,194
[info]   CI (99.9%): [≈ 0, 1385,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   258,287 ±(99.9%) 908,574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 258,287, 445,140), stdev = 235,954
[info]   CI (99.9%): [≈ 0, 1166,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10,26% complete, ETA 01:58:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78924,672 ops/s
[info] # Warmup Iteration   2: 115449,457 ops/s
[info] # Warmup Iteration   3: 115852,962 ops/s
[info] # Warmup Iteration   4: 113898,153 ops/s
[info] # Warmup Iteration   5: 115515,814 ops/s
[info] Iteration   1: 115498,790 ops/s
[info]                  ·gc.alloc.rate:                   4192,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55575,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,418 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 115977,938 ops/s
[info]                  ·gc.alloc.rate:                   4210,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55408,952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,695 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 115951,243 ops/s
[info]                  ·gc.alloc.rate:                   4208,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55443,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,565 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 116004,963 ops/s
[info]                  ·gc.alloc.rate:                   4211,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64711,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,847 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 115693,971 ops/s
[info]                  ·gc.alloc.rate:                   4199,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55620,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,283 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   115825,381 ±(99.9%) 850,842 ops/s [Average]
[info]   (min, avg, max) = (115498,790, 115825,381, 116004,963), stdev = 220,961
[info]   CI (99.9%): [114974,539, 116676,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4204,746 ±(99.9%) 30,866 MB/sec [Average]
[info]   (min, avg, max) = (4192,962, 4204,746, 4211,563), stdev = 8,016
[info]   CI (99.9%): [4173,880, 4235,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57136,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57136,004, 57136,004, 57136,004), stdev = 0,001
[info]   CI (99.9%): [57136,003, 57136,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4220,865 ±(99.9%) 1182,119 MB/sec [Average]
[info]   (min, avg, max) = (4078,418, 4220,865, 4769,992), stdev = 306,993
[info]   CI (99.9%): [3038,746, 5402,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57352,155 ±(99.9%) 15846,055 B/op [Average]
[info]   (min, avg, max) = (55408,952, 57352,155, 64711,907), stdev = 4115,170
[info]   CI (99.9%): [41506,101, 73198,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,962 ±(99.9%) 2,259 B/op [Average]
[info]   (min, avg, max) = (0,283, 0,962, 1,695), stdev = 0,587
[info]   CI (99.9%): [≈ 0, 3,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 4,000), stdev = 0,894
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10,46% complete, ETA 01:58:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645722,577 ops/s
[info] # Warmup Iteration   2: 709097,810 ops/s
[info] # Warmup Iteration   3: 707494,840 ops/s
[info] # Warmup Iteration   4: 714863,734 ops/s
[info] # Warmup Iteration   5: 711386,548 ops/s
[info] Iteration   1: 711546,866 ops/s
[info]                  ·gc.alloc.rate:               1858,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2974,602 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 714880,595 ops/s
[info]                  ·gc.alloc.rate:                   1867,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4446,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 708994,770 ops/s
[info]                  ·gc.alloc.rate:                   1852,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4490,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 713847,714 ops/s
[info]                  ·gc.alloc.rate:                   1865,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4465,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 715021,852 ops/s
[info]                  ·gc.alloc.rate:                   1867,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2976,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   712858,359 ±(99.9%) 9891,788 ops/s [Average]
[info]   (min, avg, max) = (708994,770, 712858,359, 715021,852), stdev = 2568,866
[info]   CI (99.9%): [702966,571, 722750,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1862,386 ±(99.9%) 25,749 MB/sec [Average]
[info]   (min, avg, max) = (1852,312, 1862,386, 1867,841), stdev = 6,687
[info]   CI (99.9%): [1836,637, 1888,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1752,947 ±(99.9%) 1422,216 MB/sec [Average]
[info]   (min, avg, max) = (1344,753, 1752,947, 2025,657), stdev = 369,345
[info]   CI (99.9%): [330,731, 3175,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3870,728 ±(99.9%) 3147,523 B/op [Average]
[info]   (min, avg, max) = (2974,602, 3870,728, 4490,541), stdev = 817,402
[info]   CI (99.9%): [723,205, 7018,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,092 ±(99.9%) 0,250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,092, 0,183), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10,66% complete, ETA 01:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304172,209 ops/s
[info] # Warmup Iteration   2: 364903,854 ops/s
[info] # Warmup Iteration   3: 362934,734 ops/s
[info] # Warmup Iteration   4: 364516,521 ops/s
[info] # Warmup Iteration   5: 363245,474 ops/s
[info] Iteration   1: 362271,327 ops/s
[info]                  ·gc.alloc.rate:               557,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2222,436 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 360848,813 ops/s
[info]                  ·gc.alloc.rate:                   555,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2943,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,924 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 362055,644 ops/s
[info]                  ·gc.alloc.rate:                   557,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2933,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,181 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 363330,210 ops/s
[info]                  ·gc.alloc.rate:      559,632 MB/sec
[info]                  ·gc.alloc.rate.norm: 2424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 362896,839 ops/s
[info]                  ·gc.alloc.rate:               558,857 MB/sec
[info]                  ·gc.alloc.rate.norm:          2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2914,789 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   362280,567 ±(99.9%) 3643,967 ops/s [Average]
[info]   (min, avg, max) = (360848,813, 362280,567, 363330,210), stdev = 946,327
[info]   CI (99.9%): [358636,600, 365924,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   557,961 ±(99.9%) 5,604 MB/sec [Average]
[info]   (min, avg, max) = (555,783, 557,961, 559,632), stdev = 1,455
[info]   CI (99.9%): [552,357, 563,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2424,001, 2424,001, 2424,001), stdev = 0,001
[info]   CI (99.9%): [2424,001, 2424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,612 ±(99.9%) 1123,601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,612, 674,782), stdev = 291,796
[info]   CI (99.9%): [≈ 0, 1630,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2202,684 ±(99.9%) 4886,305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2202,684, 2943,006), stdev = 1268,958
[info]   CI (99.9%): [≈ 0, 7088,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,693 ±(99.9%) 5,875 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,693, 3,422), stdev = 1,526
[info]   CI (99.9%): [≈ 0, 6,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,021 ±(99.9%) 25,624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,021, 14,924), stdev = 6,654
[info]   CI (99.9%): [≈ 0, 28,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10,87% complete, ETA 01:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339564,496 ops/s
[info] # Warmup Iteration   2: 1290775,748 ops/s
[info] # Warmup Iteration   3: 1299441,590 ops/s
[info] # Warmup Iteration   4: 1304228,594 ops/s
[info] # Warmup Iteration   5: 1073474,873 ops/s
[info] Iteration   1: 1295556,464 ops/s
[info]                  ·gc.alloc.rate:                   599,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1306936,787 ops/s
[info]                  ·gc.alloc.rate:                   604,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811,827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,148 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1309408,816 ops/s
[info]                  ·gc.alloc.rate:               605,681 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 810,232 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1306525,646 ops/s
[info]                  ·gc.alloc.rate:               604,377 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 810,414 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1305675,752 ops/s
[info]                  ·gc.alloc.rate:                   603,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1304820,693 ±(99.9%) 20646,119 ops/s [Average]
[info]   (min, avg, max) = (1295556,464, 1304820,693, 1309408,816), stdev = 5361,731
[info]   CI (99.9%): [1284174,574, 1325466,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   603,553 ±(99.9%) 9,558 MB/sec [Average]
[info]   (min, avg, max) = (599,272, 603,553, 605,681), stdev = 2,482
[info]   CI (99.9%): [593,995, 613,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   641,066 ±(99.9%) 278,719 MB/sec [Average]
[info]   (min, avg, max) = (511,591, 641,066, 674,162), stdev = 72,382
[info]   CI (99.9%): [362,347, 919,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   772,980 ±(99.9%) 326,113 B/op [Average]
[info]   (min, avg, max) = (621,485, 772,980, 811,827), stdev = 84,691
[info]   CI (99.9%): [446,867, 1099,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,537 ±(99.9%) 4,473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,537, 2,614), stdev = 1,162
[info]   CI (99.9%): [≈ 0, 5,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,646 ±(99.9%) 5,386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 3,148), stdev = 1,399
[info]   CI (99.9%): [≈ 0, 6,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,07% complete, ETA 01:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 865973,609 ops/s
[info] # Warmup Iteration   2: 1139418,580 ops/s
[info] # Warmup Iteration   3: 1127267,569 ops/s
[info] # Warmup Iteration   4: 1093663,268 ops/s
[info] # Warmup Iteration   5: 1139688,854 ops/s
[info] Iteration   1: 1136893,628 ops/s
[info]                  ·gc.alloc.rate:                   803,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1868,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1131702,654 ops/s
[info]                  ·gc.alloc.rate:               799,579 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 939,294 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1140595,214 ops/s
[info]                  ·gc.alloc.rate:               805,780 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932,930 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1141631,248 ops/s
[info]                  ·gc.alloc.rate:                   806,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1143121,766 ops/s
[info]                  ·gc.alloc.rate:               807,579 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931,291 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1138788,902 ±(99.9%) 17637,713 ops/s [Average]
[info]   (min, avg, max) = (1131702,654, 1138788,902, 1143121,766), stdev = 4580,458
[info]   CI (99.9%): [1121151,189, 1156426,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   804,572 ±(99.9%) 12,401 MB/sec [Average]
[info]   (min, avg, max) = (799,579, 804,572, 807,579), stdev = 3,221
[info]   CI (99.9%): [792,170, 816,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1112,000, 1112,000, 1112,000), stdev = 0,001
[info]   CI (99.9%): [1112,000, 1112,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   810,736 ±(99.9%) 1160,454 MB/sec [Average]
[info]   (min, avg, max) = (675,395, 810,736, 1349,836), stdev = 301,366
[info]   CI (99.9%): [≈ 0, 1971,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1120,834 ±(99.9%) 1609,773 B/op [Average]
[info]   (min, avg, max) = (931,291, 1120,834, 1868,649), stdev = 418,053
[info]   CI (99.9%): [≈ 0, 2730,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,035 ±(99.9%) 0,198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,035, 0,115), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,27% complete, ETA 01:57:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1552118,906 ops/s
[info] # Warmup Iteration   2: 1700470,955 ops/s
[info] # Warmup Iteration   3: 1748283,127 ops/s
[info] # Warmup Iteration   4: 1745046,636 ops/s
[info] # Warmup Iteration   5: 1742301,771 ops/s
[info] Iteration   1: 1753050,930 ops/s
[info]                  ·gc.alloc.rate:                   810,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     605,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1749790,435 ops/s
[info]                  ·gc.alloc.rate:               809,447 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 605,165 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1752781,329 ops/s
[info]                  ·gc.alloc.rate:                   810,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1207,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1747579,789 ops/s
[info]                  ·gc.alloc.rate:               808,378 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 605,280 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1746759,947 ops/s
[info]                  ·gc.alloc.rate:               807,988 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 605,562 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   1749992,486 ±(99.9%) 11134,116 ops/s [Average]
[info]   (min, avg, max) = (1746759,947, 1749992,486, 1753050,930), stdev = 2891,495
[info]   CI (99.9%): [1738858,370, 1761126,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   809,459 ±(99.9%) 4,959 MB/sec [Average]
[info]   (min, avg, max) = (807,988, 809,459, 810,822), stdev = 1,288
[info]   CI (99.9%): [804,500, 814,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,297 ±(99.9%) 1156,781 MB/sec [Average]
[info]   (min, avg, max) = (672,097, 807,297, 1344,687), stdev = 300,412
[info]   CI (99.9%): [≈ 0, 1964,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   725,877 ±(99.9%) 1036,892 B/op [Average]
[info]   (min, avg, max) = (605,165, 725,877, 1207,575), stdev = 269,278
[info]   CI (99.9%): [≈ 0, 1762,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,075), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11,47% complete, ETA 01:57:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1649369,998 ops/s
[info] # Warmup Iteration   2: 1798443,634 ops/s
[info] # Warmup Iteration   3: 1801481,761 ops/s
[info] # Warmup Iteration   4: 1803238,864 ops/s
[info] # Warmup Iteration   5: 1801918,655 ops/s
[info] Iteration   1: 1807326,650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1808139,092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1806861,655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1801938,621 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1805944,946 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1806042,193 ±(99.9%) 9346,659 ops/s [Average]
[info]   (min, avg, max) = (1801938,621, 1806042,193, 1808139,092), stdev = 2427,298
[info]   CI (99.9%): [1796695,534, 1815388,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11,67% complete, ETA 01:56:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444180,559 ops/s
[info] # Warmup Iteration   2: 573821,367 ops/s
[info] # Warmup Iteration   3: 572878,089 ops/s
[info] # Warmup Iteration   4: 572458,136 ops/s
[info] # Warmup Iteration   5: 572679,971 ops/s
[info] Iteration   1: 572859,648 ops/s
[info]                  ·gc.alloc.rate:                   675,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1850,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,478 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 574758,274 ops/s
[info]                  ·gc.alloc.rate:                   677,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1844,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 574467,798 ops/s
[info]                  ·gc.alloc.rate:               677,436 MB/sec
[info]                  ·gc.alloc.rate.norm:          1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1837,779 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 573350,128 ops/s
[info]                  ·gc.alloc.rate:               676,181 MB/sec
[info]                  ·gc.alloc.rate.norm:          1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1841,310 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 573917,028 ops/s
[info]                  ·gc.alloc.rate:                   676,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1837,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   573870,575 ±(99.9%) 3007,253 ops/s [Average]
[info]   (min, avg, max) = (572859,648, 573870,575, 574758,274), stdev = 780,974
[info]   CI (99.9%): [570863,322, 576877,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   676,735 ±(99.9%) 3,527 MB/sec [Average]
[info]   (min, avg, max) = (675,533, 676,735, 677,790), stdev = 0,916
[info]   CI (99.9%): [673,209, 680,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1856,001, 1856,001, 1856,001), stdev = 0,001
[info]   CI (99.9%): [1856,001, 1856,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   671,714 ±(99.9%) 6,193 MB/sec [Average]
[info]   (min, avg, max) = (670,068, 671,714, 673,448), stdev = 1,608
[info]   CI (99.9%): [665,522, 677,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1842,234 ±(99.9%) 20,100 B/op [Average]
[info]   (min, avg, max) = (1837,713, 1842,234, 1850,254), stdev = 5,220
[info]   CI (99.9%): [1822,134, 1862,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,784 ±(99.9%) 6,524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,784, 3,814), stdev = 1,694
[info]   CI (99.9%): [≈ 0, 7,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,153 ±(99.9%) 17,923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,153, 10,478), stdev = 4,655
[info]   CI (99.9%): [≈ 0, 20,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11,87% complete, ETA 01:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198501,858 ops/s
[info] # Warmup Iteration   2: 208244,266 ops/s
[info] # Warmup Iteration   3: 206526,837 ops/s
[info] # Warmup Iteration   4: 208573,138 ops/s
[info] # Warmup Iteration   5: 208138,828 ops/s
[info] Iteration   1: 207738,641 ops/s
[info]                  ·gc.alloc.rate:                   530,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3875,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 202062,213 ops/s
[info]                  ·gc.alloc.rate:                   515,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5256,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,141 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 199916,306 ops/s
[info]                  ·gc.alloc.rate:      510,107 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207493,870 ops/s
[info]                  ·gc.alloc.rate:                   529,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5118,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,632 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 206629,832 ops/s
[info]                  ·gc.alloc.rate:               527,155 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5124,335 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   204768,172 ±(99.9%) 13693,048 ops/s [Average]
[info]   (min, avg, max) = (199916,306, 204768,172, 207738,641), stdev = 3556,041
[info]   CI (99.9%): [191075,124, 218461,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   522,496 ±(99.9%) 34,858 MB/sec [Average]
[info]   (min, avg, max) = (510,107, 522,496, 530,055), stdev = 9,052
[info]   CI (99.9%): [487,639, 557,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,791 ±(99.9%) 1124,094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,791, 674,937), stdev = 291,924
[info]   CI (99.9%): [≈ 0, 1630,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3874,961 ±(99.9%) 8616,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3874,961, 5256,319), stdev = 2237,776
[info]   CI (99.9%): [≈ 0, 12491,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,639 ±(99.9%) 5,300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,639, 3,100), stdev = 1,376
[info]   CI (99.9%): [≈ 0, 5,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,969 ±(99.9%) 41,282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,969, 24,141), stdev = 10,721
[info]   CI (99.9%): [≈ 0, 46,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12,07% complete, ETA 01:56:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139102,072 ops/s
[info] # Warmup Iteration   2: 160247,294 ops/s
[info] # Warmup Iteration   3: 160866,868 ops/s
[info] # Warmup Iteration   4: 161845,220 ops/s
[info] # Warmup Iteration   5: 161822,901 ops/s
[info] Iteration   1: 161221,895 ops/s
[info]                  ·gc.alloc.rate:                   1935,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19695,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,610 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 161327,961 ops/s
[info]                  ·gc.alloc.rate:                   1937,179 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19710,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,609 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 161687,391 ops/s
[info]                  ·gc.alloc.rate:                   1941,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19697,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,810 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 161553,057 ops/s
[info]                  ·gc.alloc.rate:                   1939,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19746,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 160871,063 ops/s
[info]                  ·gc.alloc.rate:                   1931,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13235,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   161332,273 ±(99.9%) 1217,332 ops/s [Average]
[info]   (min, avg, max) = (160871,063, 161332,273, 161687,391), stdev = 316,137
[info]   CI (99.9%): [160114,942, 162549,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1937,016 ±(99.9%) 14,877 MB/sec [Average]
[info]   (min, avg, max) = (1931,281, 1937,016, 1941,178), stdev = 3,864
[info]   CI (99.9%): [1922,139, 1951,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18896,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18896,003, 18896,003, 18896,003), stdev = 0,001
[info]   CI (99.9%): [18896,002, 18896,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,318 ±(99.9%) 1152,905 MB/sec [Average]
[info]   (min, avg, max) = (1352,761, 1888,318, 2027,050), stdev = 299,406
[info]   CI (99.9%): [735,413, 3041,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18417,106 ±(99.9%) 11153,721 B/op [Average]
[info]   (min, avg, max) = (13235,663, 18417,106, 19746,131), stdev = 2896,586
[info]   CI (99.9%): [7263,386, 29570,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,649 ±(99.9%) 1,156 B/op [Average]
[info]   (min, avg, max) = (0,204, 0,649, 1,014), stdev = 0,300
[info]   CI (99.9%): [≈ 0, 1,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,27% complete, ETA 01:56:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349132,871 ops/s
[info] # Warmup Iteration   2: 490569,005 ops/s
[info] # Warmup Iteration   3: 490867,445 ops/s
[info] # Warmup Iteration   4: 489269,500 ops/s
[info] # Warmup Iteration   5: 491837,919 ops/s
[info] Iteration   1: 490677,838 ops/s
[info]                  ·gc.alloc.rate:                   394,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1640,817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,134 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 487425,013 ops/s
[info]                  ·gc.alloc.rate:               391,472 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1651,775 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 492117,557 ops/s
[info]                  ·gc.alloc.rate:      395,225 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 489796,057 ops/s
[info]                  ·gc.alloc.rate:                   393,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2167,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,334 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 491059,974 ops/s
[info]                  ·gc.alloc.rate:                   394,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,067 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   490215,288 ±(99.9%) 6809,073 ops/s [Average]
[info]   (min, avg, max) = (487425,013, 490215,288, 492117,557), stdev = 1768,295
[info]   CI (99.9%): [483406,214, 497024,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   393,694 ±(99.9%) 5,417 MB/sec [Average]
[info]   (min, avg, max) = (391,472, 393,694, 395,225), stdev = 1,407
[info]   CI (99.9%): [388,277, 399,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,366 ±(99.9%) 1068,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,366, 674,431), stdev = 277,395
[info]   CI (99.9%): [≈ 0, 1542,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1524,204 ±(99.9%) 3429,190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1524,204, 2167,019), stdev = 890,550
[info]   CI (99.9%): [≈ 0, 4953,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,107 ±(99.9%) 0,534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,107, 0,334), stdev = 0,139
[info]   CI (99.9%): [≈ 0, 0,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,47% complete, ETA 01:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 856666,855 ops/s
[info] # Warmup Iteration   2: 913616,357 ops/s
[info] # Warmup Iteration   3: 904654,308 ops/s
[info] # Warmup Iteration   4: 906385,532 ops/s
[info] # Warmup Iteration   5: 916459,517 ops/s
[info] Iteration   1: 911070,464 ops/s
[info]                  ·gc.alloc.rate:               175,952 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 883,749 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 916667,581 ops/s
[info]                  ·gc.alloc.rate:      177,056 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 916163,424 ops/s
[info]                  ·gc.alloc.rate:      176,976 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 912551,838 ops/s
[info]                  ·gc.alloc.rate:               176,256 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 882,308 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 915317,563 ops/s
[info]                  ·gc.alloc.rate:      176,758 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   914354,174 ±(99.9%) 9350,115 ops/s [Average]
[info]   (min, avg, max) = (911070,464, 914354,174, 916667,581), stdev = 2428,195
[info]   CI (99.9%): [905004,060, 923704,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   176,600 ±(99.9%) 1,840 MB/sec [Average]
[info]   (min, avg, max) = (175,952, 176,600, 177,056), stdev = 0,478
[info]   CI (99.9%): [174,759, 178,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,611 ±(99.9%) 1078,853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,611, 511,551), stdev = 280,175
[info]   CI (99.9%): [≈ 0, 1283,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   353,211 ±(99.9%) 1862,383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 353,211, 883,749), stdev = 483,655
[info]   CI (99.9%): [≈ 0, 2215,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12,68% complete, ETA 01:55:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64256,485 ops/s
[info] # Warmup Iteration   2: 96146,431 ops/s
[info] # Warmup Iteration   3: 97944,782 ops/s
[info] # Warmup Iteration   4: 98161,804 ops/s
[info] # Warmup Iteration   5: 97380,239 ops/s
[info] Iteration   1: 97270,641 ops/s
[info]                  ·gc.alloc.rate:                   4141,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              67008,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4757,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76983,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,021 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 98214,733 ops/s
[info]                  ·gc.alloc.rate:                   4181,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              67008,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65424,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,334 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 98048,138 ops/s
[info]                  ·gc.alloc.rate:                   4174,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              67008,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65564,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,337 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 97730,760 ops/s
[info]                  ·gc.alloc.rate:                   4161,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              67008,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65821,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,341 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 97836,718 ops/s
[info]                  ·gc.alloc.rate:                   4164,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              67008,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65769,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,344 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   97820,198 ±(99.9%) 1385,563 ops/s [Average]
[info]   (min, avg, max) = (97270,641, 97820,198, 98214,733), stdev = 359,826
[info]   CI (99.9%): [96434,635, 99205,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4164,719 ±(99.9%) 59,045 MB/sec [Average]
[info]   (min, avg, max) = (4141,369, 4164,719, 4181,753), stdev = 15,334
[info]   CI (99.9%): [4105,674, 4223,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67008,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67008,004, 67008,004, 67008,005), stdev = 0,001
[info]   CI (99.9%): [67008,004, 67008,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4220,153 ±(99.9%) 1157,590 MB/sec [Average]
[info]   (min, avg, max) = (4082,937, 4220,153, 4757,910), stdev = 300,622
[info]   CI (99.9%): [3062,564, 5377,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67912,877 ±(99.9%) 19535,360 B/op [Average]
[info]   (min, avg, max) = (65424,584, 67912,877, 76983,733), stdev = 5073,271
[info]   CI (99.9%): [48377,518, 87448,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,104, 0,146), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,675 ±(99.9%) 1,836 B/op [Average]
[info]   (min, avg, max) = (1,334, 1,675, 2,344), stdev = 0,477
[info]   CI (99.9%): [≈ 0, 3,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12,88% complete, ETA 01:55:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251281,599 ops/s
[info] # Warmup Iteration   2: 272275,472 ops/s
[info] # Warmup Iteration   3: 269143,982 ops/s
[info] # Warmup Iteration   4: 267632,945 ops/s
[info] # Warmup Iteration   5: 272017,111 ops/s
[info] Iteration   1: 271928,097 ops/s
[info]                  ·gc.alloc.rate:                   1241,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7779,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 272578,109 ops/s
[info]                  ·gc.alloc.rate:                   1244,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7761,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 272543,079 ops/s
[info]                  ·gc.alloc.rate:                   1243,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7762,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 272526,932 ops/s
[info]                  ·gc.alloc.rate:                   1244,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7770,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 272522,532 ops/s
[info]                  ·gc.alloc.rate:               1243,805 MB/sec
[info]                  ·gc.alloc.rate.norm:          7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3889,357 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   272419,750 ±(99.9%) 1061,657 ops/s [Average]
[info]   (min, avg, max) = (271928,097, 272419,750, 272578,109), stdev = 275,709
[info]   CI (99.9%): [271358,093, 273481,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1243,420 ±(99.9%) 4,801 MB/sec [Average]
[info]   (min, avg, max) = (1241,197, 1243,420, 1244,062), stdev = 1,247
[info]   CI (99.9%): [1238,618, 1248,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7184,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7184,001, 7184,002, 7184,002), stdev = 0,001
[info]   CI (99.9%): [7184,001, 7184,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,290 ±(99.9%) 1155,731 MB/sec [Average]
[info]   (min, avg, max) = (673,385, 1210,290, 1345,702), stdev = 300,140
[info]   CI (99.9%): [54,559, 2366,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6992,835 ±(99.9%) 6680,530 B/op [Average]
[info]   (min, avg, max) = (3889,357, 6992,835, 7779,795), stdev = 1734,913
[info]   CI (99.9%): [312,304, 13673,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,241 ±(99.9%) 0,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,241, 0,361), stdev = 0,170
[info]   CI (99.9%): [≈ 0, 0,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13,08% complete, ETA 01:55:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249556,160 ops/s
[info] # Warmup Iteration   2: 304251,560 ops/s
[info] # Warmup Iteration   3: 293802,214 ops/s
[info] # Warmup Iteration   4: 294278,250 ops/s
[info] # Warmup Iteration   5: 295279,051 ops/s
[info] Iteration   1: 295815,123 ops/s
[info]                  ·gc.alloc.rate:                   1309,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7144,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 296656,468 ops/s
[info]                  ·gc.alloc.rate:               1313,441 MB/sec
[info]                  ·gc.alloc.rate.norm:          6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3562,354 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 295360,831 ops/s
[info]                  ·gc.alloc.rate:                   1307,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7155,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 295983,663 ops/s
[info]                  ·gc.alloc.rate:                   1310,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7147,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,332 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 295991,258 ops/s
[info]                  ·gc.alloc.rate:                   1310,203 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7154,566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,443 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   295961,469 ±(99.9%) 1792,294 ops/s [Average]
[info]   (min, avg, max) = (295360,831, 295961,469, 296656,468), stdev = 465,453
[info]   CI (99.9%): [294169,175, 297753,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1310,242 ±(99.9%) 8,153 MB/sec [Average]
[info]   (min, avg, max) = (1307,553, 1310,242, 1313,441), stdev = 2,117
[info]   CI (99.9%): [1302,089, 1318,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6968,001, 6968,001, 6968,001), stdev = 0,001
[info]   CI (99.9%): [6968,001, 6968,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,300 ±(99.9%) 1157,684 MB/sec [Average]
[info]   (min, avg, max) = (671,490, 1209,300, 1345,283), stdev = 300,647
[info]   CI (99.9%): [51,616, 2366,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6432,935 ±(99.9%) 6179,168 B/op [Average]
[info]   (min, avg, max) = (3562,354, 6432,935, 7155,626), stdev = 1604,710
[info]   CI (99.9%): [253,767, 12612,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,244 ±(99.9%) 0,632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,244, 0,443), stdev = 0,164
[info]   CI (99.9%): [≈ 0, 0,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,28% complete, ETA 01:54:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1175183,598 ops/s
[info] # Warmup Iteration   2: 2203677,828 ops/s
[info] # Warmup Iteration   3: 2211386,153 ops/s
[info] # Warmup Iteration   4: 2216435,399 ops/s
[info] # Warmup Iteration   5: 2208541,021 ops/s
[info] Iteration   1: 2213548,870 ops/s
[info]                  ·gc.alloc.rate:                   1136,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     960,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2216952,771 ops/s
[info]                  ·gc.alloc.rate:                   1138,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     960,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2207972,429 ops/s
[info]                  ·gc.alloc.rate:                   1133,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964,780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2211279,794 ops/s
[info]                  ·gc.alloc.rate:               1135,291 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 481,900 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2207143,364 ops/s
[info]                  ·gc.alloc.rate:                   1132,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     966,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2211379,445 ±(99.9%) 15561,846 ops/s [Average]
[info]   (min, avg, max) = (2207143,364, 2211379,445, 2216952,771), stdev = 4041,362
[info]   CI (99.9%): [2195817,599, 2226941,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1135,261 ±(99.9%) 8,212 MB/sec [Average]
[info]   (min, avg, max) = (1132,967, 1135,261, 1138,159), stdev = 2,133
[info]   CI (99.9%): [1127,048, 1143,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (808,000, 808,000, 808,000), stdev = 0,001
[info]   CI (99.9%): [808,000, 808,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,986 ±(99.9%) 1164,309 MB/sec [Average]
[info]   (min, avg, max) = (677,100, 1217,986, 1355,312), stdev = 302,367
[info]   CI (99.9%): [53,677, 2382,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   866,885 ±(99.9%) 828,770 B/op [Average]
[info]   (min, avg, max) = (481,900, 866,885, 966,570), stdev = 215,229
[info]   CI (99.9%): [38,115, 1695,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,045), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,48% complete, ETA 01:54:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1943264,256 ops/s
[info] # Warmup Iteration   2: 2116154,334 ops/s
[info] # Warmup Iteration   3: 2143582,645 ops/s
[info] # Warmup Iteration   4: 2148248,368 ops/s
[info] # Warmup Iteration   5: 2139377,917 ops/s
[info] Iteration   1: 2139746,941 ops/s
[info]                  ·gc.alloc.rate:                   576,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376,273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2150423,371 ops/s
[info]                  ·gc.alloc.rate:                   579,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     493,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,284 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2154246,164 ops/s
[info]                  ·gc.alloc.rate:                   580,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492,958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2152187,062 ops/s
[info]                  ·gc.alloc.rate:               579,824 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 491,977 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2151305,527 ops/s
[info]                  ·gc.alloc.rate:                   579,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2149581,813 ±(99.9%) 21863,013 ops/s [Average]
[info]   (min, avg, max) = (2139746,941, 2149581,813, 2154246,164), stdev = 5677,755
[info]   CI (99.9%): [2127718,800, 2171444,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   579,084 ±(99.9%) 5,917 MB/sec [Average]
[info]   (min, avg, max) = (576,421, 579,084, 580,339), stdev = 1,537
[info]   CI (99.9%): [573,167, 585,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,000, 424,000, 424,000), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,306 ±(99.9%) 279,365 MB/sec [Average]
[info]   (min, avg, max) = (511,537, 641,306, 674,819), stdev = 72,550
[info]   CI (99.9%): [361,941, 920,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   469,451 ±(99.9%) 200,594 B/op [Average]
[info]   (min, avg, max) = (376,273, 469,451, 493,874), stdev = 52,094
[info]   CI (99.9%): [268,857, 670,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,646 ±(99.9%) 5,326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 3,120), stdev = 1,383
[info]   CI (99.9%): [≈ 0, 5,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,473 ±(99.9%) 3,898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,473, 2,284), stdev = 1,012
[info]   CI (99.9%): [≈ 0, 4,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13,68% complete, ETA 01:54:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1971500,778 ops/s
[info] # Warmup Iteration   2: 2111909,937 ops/s
[info] # Warmup Iteration   3: 2132060,942 ops/s
[info] # Warmup Iteration   4: 2131867,006 ops/s
[info] # Warmup Iteration   5: 2131806,754 ops/s
[info] Iteration   1: 2135993,819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2132736,371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2132592,150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2131767,241 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2135176,358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2133653,188 ±(99.9%) 7027,227 ops/s [Average]
[info]   (min, avg, max) = (2131767,241, 2133653,188, 2135993,819), stdev = 1824,949
[info]   CI (99.9%): [2126625,960, 2140680,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13,88% complete, ETA 01:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38523,867 ops/s
[info] # Warmup Iteration   2: 51043,816 ops/s
[info] # Warmup Iteration   3: 51525,241 ops/s
[info] # Warmup Iteration   4: 51075,874 ops/s
[info] # Warmup Iteration   5: 51413,507 ops/s
[info] Iteration   1: 51508,324 ops/s
[info]                  ·gc.alloc.rate:                   2170,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82042,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,544 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 51615,773 ops/s
[info]                  ·gc.alloc.rate:                   2175,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61543,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,539 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 51436,814 ops/s
[info]                  ·gc.alloc.rate:                   2167,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61876,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,911 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 51537,498 ops/s
[info]                  ·gc.alloc.rate:                   2172,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61867,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,271 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 51502,752 ops/s
[info]                  ·gc.alloc.rate:                   2170,495 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82691,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,908 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   51520,232 ±(99.9%) 249,789 ops/s [Average]
[info]   (min, avg, max) = (51436,814, 51520,232, 51615,773), stdev = 64,869
[info]   CI (99.9%): [51270,443, 51770,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2171,449 ±(99.9%) 11,355 MB/sec [Average]
[info]   (min, avg, max) = (2167,646, 2171,449, 2175,729), stdev = 2,949
[info]   CI (99.9%): [2160,094, 2182,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66336,008, 66336,008, 66336,009), stdev = 0,001
[info]   CI (99.9%): [66336,007, 66336,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2291,427 ±(99.9%) 1420,053 MB/sec [Average]
[info]   (min, avg, max) = (2018,542, 2291,427, 2705,634), stdev = 368,783
[info]   CI (99.9%): [871,374, 3711,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70004,054 ±(99.9%) 43468,440 B/op [Average]
[info]   (min, avg, max) = (61543,541, 70004,054, 82691,255), stdev = 11288,616
[info]   CI (99.9%): [26535,614, 113472,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,035 ±(99.9%) 2,045 B/op [Average]
[info]   (min, avg, max) = (1,271, 2,035, 2,544), stdev = 0,531
[info]   CI (99.9%): [≈ 0, 4,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14,08% complete, ETA 01:53:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156453,181 ops/s
[info] # Warmup Iteration   2: 167313,817 ops/s
[info] # Warmup Iteration   3: 167577,607 ops/s
[info] # Warmup Iteration   4: 168413,971 ops/s
[info] # Warmup Iteration   5: 167909,804 ops/s
[info] Iteration   1: 168177,432 ops/s
[info]                  ·gc.alloc.rate:               895,860 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6295,807 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 168556,220 ops/s
[info]                  ·gc.alloc.rate:               897,953 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6282,213 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 168083,028 ops/s
[info]                  ·gc.alloc.rate:                   895,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12586,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,390 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 167607,457 ops/s
[info]                  ·gc.alloc.rate:               892,810 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6311,372 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 168252,799 ops/s
[info]                  ·gc.alloc.rate:                   896,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6286,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,389 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   168135,387 ±(99.9%) 1325,686 ops/s [Average]
[info]   (min, avg, max) = (167607,457, 168135,387, 168556,220), stdev = 344,277
[info]   CI (99.9%): [166809,701, 169461,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   895,627 ±(99.9%) 7,134 MB/sec [Average]
[info]   (min, avg, max) = (892,810, 895,627, 897,953), stdev = 1,853
[info]   CI (99.9%): [888,493, 902,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8384,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8384,002, 8384,003, 8384,003), stdev = 0,001
[info]   CI (99.9%): [8384,002, 8384,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806,763 ±(99.9%) 1156,825 MB/sec [Average]
[info]   (min, avg, max) = (671,969, 806,763, 1344,177), stdev = 300,424
[info]   CI (99.9%): [≈ 0, 1963,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7552,521 ±(99.9%) 10836,060 B/op [Average]
[info]   (min, avg, max) = (6282,213, 7552,521, 12586,480), stdev = 2814,090
[info]   CI (99.9%): [≈ 0, 18388,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,156 ±(99.9%) 0,822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,156, 0,390), stdev = 0,213
[info]   CI (99.9%): [≈ 0, 0,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14,29% complete, ETA 01:53:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213498,412 ops/s
[info] # Warmup Iteration   2: 251659,802 ops/s
[info] # Warmup Iteration   3: 252298,694 ops/s
[info] # Warmup Iteration   4: 251975,030 ops/s
[info] # Warmup Iteration   5: 252175,353 ops/s
[info] Iteration   1: 252870,637 ops/s
[info]                  ·gc.alloc.rate:                   2602,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16790,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 252831,131 ops/s
[info]                  ·gc.alloc.rate:                   2602,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16827,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,389 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 253847,934 ops/s
[info]                  ·gc.alloc.rate:                   2612,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12591,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 252806,764 ops/s
[info]                  ·gc.alloc.rate:                   2602,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16883,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,389 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 252944,068 ops/s
[info]                  ·gc.alloc.rate:                   2603,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16895,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   253060,107 ±(99.9%) 1707,630 ops/s [Average]
[info]   (min, avg, max) = (252806,764, 253060,107, 253847,934), stdev = 443,466
[info]   CI (99.9%): [251352,477, 254767,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2604,713 ±(99.9%) 17,516 MB/sec [Average]
[info]   (min, avg, max) = (2602,321, 2604,713, 2612,833), stdev = 4,549
[info]   CI (99.9%): [2587,197, 2622,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16200,002, 16200,002, 16200,002), stdev = 0,001
[info]   CI (99.9%): [16200,001, 16200,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2571,767 ±(99.9%) 1164,690 MB/sec [Average]
[info]   (min, avg, max) = (2030,840, 2571,767, 2714,856), stdev = 302,466
[info]   CI (99.9%): [1407,078, 3736,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15997,753 ±(99.9%) 7333,936 B/op [Average]
[info]   (min, avg, max) = (12591,551, 15997,753, 16895,269), stdev = 1904,600
[info]   CI (99.9%): [8663,818, 23331,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,337 ±(99.9%) 0,272 B/op [Average]
[info]   (min, avg, max) = (0,259, 0,337, 0,389), stdev = 0,071
[info]   CI (99.9%): [0,064, 0,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,49% complete, ETA 01:53:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268429,748 ops/s
[info] # Warmup Iteration   2: 377047,039 ops/s
[info] # Warmup Iteration   3: 380206,331 ops/s
[info] # Warmup Iteration   4: 375939,245 ops/s
[info] # Warmup Iteration   5: 366301,046 ops/s
[info] Iteration   1: 379026,337 ops/s
[info]                  ·gc.alloc.rate:                   1816,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8436,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 380433,536 ops/s
[info]                  ·gc.alloc.rate:                   1823,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8412,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 380359,679 ops/s
[info]                  ·gc.alloc.rate:                   1823,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5617,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 379331,792 ops/s
[info]                  ·gc.alloc.rate:                   1818,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8451,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 379824,988 ops/s
[info]                  ·gc.alloc.rate:                   1820,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8445,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   379795,266 ±(99.9%) 2383,743 ops/s [Average]
[info]   (min, avg, max) = (379026,337, 379795,266, 380433,536), stdev = 619,050
[info]   CI (99.9%): [377411,523, 382179,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1820,442 ±(99.9%) 11,199 MB/sec [Average]
[info]   (min, avg, max) = (1816,840, 1820,442, 1823,545), stdev = 2,908
[info]   CI (99.9%): [1809,243, 1831,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7544,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7544,001, 7544,001, 7544,001), stdev = 0,001
[info]   CI (99.9%): [7544,001, 7544,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,535 ±(99.9%) 1167,055 MB/sec [Average]
[info]   (min, avg, max) = (1357,387, 1899,535, 2038,008), stdev = 303,080
[info]   CI (99.9%): [732,480, 3066,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7872,587 ±(99.9%) 4855,619 B/op [Average]
[info]   (min, avg, max) = (5617,012, 7872,587, 8451,021), stdev = 1260,989
[info]   CI (99.9%): [3016,968, 12728,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,207 ±(99.9%) 0,297 B/op [Average]
[info]   (min, avg, max) = (0,086, 0,207, 0,259), stdev = 0,077
[info]   CI (99.9%): [≈ 0, 0,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,69% complete, ETA 01:52:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1324719,578 ops/s
[info] # Warmup Iteration   2: 1242643,831 ops/s
[info] # Warmup Iteration   3: 1404251,281 ops/s
[info] # Warmup Iteration   4: 1401382,127 ops/s
[info] # Warmup Iteration   5: 1407988,112 ops/s
[info] Iteration   1: 1402658,846 ops/s
[info]                  ·gc.alloc.rate:               484,786 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 573,979 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1407519,994 ops/s
[info]                  ·gc.alloc.rate:               486,526 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 572,079 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1408714,355 ops/s
[info]                  ·gc.alloc.rate:                   486,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     753,937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,533 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1407159,847 ops/s
[info]                  ·gc.alloc.rate:      486,409 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1406768,932 ops/s
[info]                  ·gc.alloc.rate:                   486,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     754,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1406564,395 ±(99.9%) 8861,755 ops/s [Average]
[info]   (min, avg, max) = (1402658,846, 1406564,395, 1408714,355), stdev = 2301,370
[info]   CI (99.9%): [1397702,639, 1415426,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   486,173 ±(99.9%) 3,179 MB/sec [Average]
[info]   (min, avg, max) = (484,786, 486,173, 486,961), stdev = 0,825
[info]   CI (99.9%): [482,995, 489,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,539 ±(99.9%) 1068,719 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,539, 674,885), stdev = 277,543
[info]   CI (99.9%): [≈ 0, 1543,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   530,978 ±(99.9%) 1195,136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 530,978, 754,896), stdev = 310,373
[info]   CI (99.9%): [≈ 0, 1726,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 5,429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 3,163), stdev = 1,410
[info]   CI (99.9%): [≈ 0, 6,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,716 ±(99.9%) 6,065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,716, 3,533), stdev = 1,575
[info]   CI (99.9%): [≈ 0, 6,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14,89% complete, ETA 01:52:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48785,356 ops/s
[info] # Warmup Iteration   2: 90856,286 ops/s
[info] # Warmup Iteration   3: 91325,384 ops/s
[info] # Warmup Iteration   4: 91697,618 ops/s
[info] # Warmup Iteration   5: 91597,478 ops/s
[info] Iteration   1: 91918,330 ops/s
[info]                  ·gc.alloc.rate:                   3860,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58211,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,069 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 91409,260 ops/s
[info]                  ·gc.alloc.rate:                   3839,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70308,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,151 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 91542,343 ops/s
[info]                  ·gc.alloc.rate:                   3844,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70230,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,432 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 91160,802 ops/s
[info]                  ·gc.alloc.rate:                   3829,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58811,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,078 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 84109,576 ops/s
[info]                  ·gc.alloc.rate:                   3532,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63751,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,389 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   90028,062 ±(99.9%) 12783,535 ops/s [Average]
[info]   (min, avg, max) = (84109,576, 90028,062, 91918,330), stdev = 3319,843
[info]   CI (99.9%): [77244,527, 102811,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3781,205 ±(99.9%) 537,365 MB/sec [Average]
[info]   (min, avg, max) = (3532,400, 3781,205, 3860,552), stdev = 139,552
[info]   CI (99.9%): [3243,840, 4318,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66104,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66104,004, 66104,005, 66104,005), stdev = 0,001
[info]   CI (99.9%): [66104,004, 66104,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3676,230 ±(99.9%) 1433,590 MB/sec [Average]
[info]   (min, avg, max) = (3399,636, 3676,230, 4084,921), stdev = 372,299
[info]   CI (99.9%): [2242,640, 5109,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64262,696 ±(99.9%) 22678,315 B/op [Average]
[info]   (min, avg, max) = (58211,770, 64262,696, 70308,028), stdev = 5889,487
[info]   CI (99.9%): [41584,381, 86941,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,224 ±(99.9%) 2,468 B/op [Average]
[info]   (min, avg, max) = (0,389, 1,224, 2,151), stdev = 0,641
[info]   CI (99.9%): [≈ 0, 3,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15,09% complete, ETA 01:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236158,013 ops/s
[info] # Warmup Iteration   2: 258727,393 ops/s
[info] # Warmup Iteration   3: 258319,688 ops/s
[info] # Warmup Iteration   4: 259502,365 ops/s
[info] # Warmup Iteration   5: 258795,016 ops/s
[info] Iteration   1: 257342,313 ops/s
[info]                  ·gc.alloc.rate:                   2725,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16506,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,382 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 259509,470 ops/s
[info]                  ·gc.alloc.rate:                   2749,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16402,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,505 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 259935,996 ops/s
[info]                  ·gc.alloc.rate:                   2753,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16406,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 258531,176 ops/s
[info]                  ·gc.alloc.rate:                   2738,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16520,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 259320,275 ops/s
[info]                  ·gc.alloc.rate:                   2746,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16489,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   258927,846 ±(99.9%) 3936,290 ops/s [Average]
[info]   (min, avg, max) = (257342,313, 258927,846, 259935,996), stdev = 1022,242
[info]   CI (99.9%): [254991,556, 262864,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2742,703 ±(99.9%) 41,775 MB/sec [Average]
[info]   (min, avg, max) = (2725,803, 2742,703, 2753,277), stdev = 10,849
[info]   CI (99.9%): [2700,929, 2784,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   16672,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16672,002, 16672,002, 16672,002), stdev = 0,001
[info]   CI (99.9%): [16672,002, 16672,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2708,629 ±(99.9%) 27,497 MB/sec [Average]
[info]   (min, avg, max) = (2698,728, 2708,629, 2716,612), stdev = 7,141
[info]   CI (99.9%): [2681,132, 2736,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16465,008 ±(99.9%) 217,648 B/op [Average]
[info]   (min, avg, max) = (16402,306, 16465,008, 16520,288), stdev = 56,523
[info]   CI (99.9%): [16247,360, 16682,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,329 ±(99.9%) 0,436 B/op [Average]
[info]   (min, avg, max) = (0,252, 0,329, 0,505), stdev = 0,113
[info]   CI (99.9%): [≈ 0, 0,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15,29% complete, ETA 01:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200354,691 ops/s
[info] # Warmup Iteration   2: 249788,304 ops/s
[info] # Warmup Iteration   3: 252455,713 ops/s
[info] # Warmup Iteration   4: 252557,765 ops/s
[info] # Warmup Iteration   5: 252236,063 ops/s
[info] Iteration   1: 252326,557 ops/s
[info]                  ·gc.alloc.rate:                   2138,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16776,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,390 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 253599,421 ops/s
[info]                  ·gc.alloc.rate:                   2148,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12544,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,646 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 253071,580 ops/s
[info]                  ·gc.alloc.rate:                   2144,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12590,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 252654,270 ops/s
[info]                  ·gc.alloc.rate:                   2140,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12632,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,130 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 249290,147 ops/s
[info]                  ·gc.alloc.rate:                   2112,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12819,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   252188,395 ±(99.9%) 6502,625 ops/s [Average]
[info]   (min, avg, max) = (249290,147, 252188,395, 253599,421), stdev = 1688,711
[info]   CI (99.9%): [245685,770, 258691,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2136,883 ±(99.9%) 55,550 MB/sec [Average]
[info]   (min, avg, max) = (2112,101, 2136,883, 2148,920), stdev = 14,426
[info]   CI (99.9%): [2081,333, 2192,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,002, 13336,002, 13336,002), stdev = 0,001
[info]   CI (99.9%): [13336,002, 13336,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2158,804 ±(99.9%) 1142,924 MB/sec [Average]
[info]   (min, avg, max) = (2021,382, 2158,804, 2689,725), stdev = 296,814
[info]   CI (99.9%): [1015,880, 3301,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13472,891 ±(99.9%) 7122,759 B/op [Average]
[info]   (min, avg, max) = (12544,516, 13472,891, 16776,551), stdev = 1849,758
[info]   CI (99.9%): [6350,133, 20595,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,337 ±(99.9%) 0,753 B/op [Average]
[info]   (min, avg, max) = (0,130, 0,337, 0,646), stdev = 0,195
[info]   CI (99.9%): [≈ 0, 1,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,49% complete, ETA 01:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002367,063 ops/s
[info] # Warmup Iteration   2: 1387511,338 ops/s
[info] # Warmup Iteration   3: 1389087,371 ops/s
[info] # Warmup Iteration   4: 1390821,143 ops/s
[info] # Warmup Iteration   5: 1389392,468 ops/s
[info] Iteration   1: 1387692,961 ops/s
[info]                  ·gc.alloc.rate:                   811,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1388106,082 ops/s
[info]                  ·gc.alloc.rate:                   811,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1389498,084 ops/s
[info]                  ·gc.alloc.rate:               812,203 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 765,779 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1389204,884 ops/s
[info]                  ·gc.alloc.rate:                   812,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1391731,314 ops/s
[info]                  ·gc.alloc.rate:                   813,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1529,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1389246,665 ±(99.9%) 6074,189 ops/s [Average]
[info]   (min, avg, max) = (1387692,961, 1389246,665, 1391731,314), stdev = 1577,447
[info]   CI (99.9%): [1383172,476, 1395320,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   812,055 ±(99.9%) 3,189 MB/sec [Average]
[info]   (min, avg, max) = (811,172, 812,055, 813,324), stdev = 0,828
[info]   CI (99.9%): [808,866, 815,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   811,138 ±(99.9%) 1165,414 MB/sec [Average]
[info]   (min, avg, max) = (675,443, 811,138, 1352,542), stdev = 302,654
[info]   CI (99.9%): [≈ 0, 1976,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   918,722 ±(99.9%) 1315,699 B/op [Average]
[info]   (min, avg, max) = (765,779, 918,722, 1529,943), stdev = 341,683
[info]   CI (99.9%): [≈ 0, 2234,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,024 ±(99.9%) 0,064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,047), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,69% complete, ETA 01:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2518403,773 ops/s
[info] # Warmup Iteration   2: 2729456,468 ops/s
[info] # Warmup Iteration   3: 2714264,802 ops/s
[info] # Warmup Iteration   4: 2699522,423 ops/s
[info] # Warmup Iteration   5: 2445942,875 ops/s
[info] Iteration   1: 2755638,873 ops/s
[info]                  ·gc.alloc.rate:               938,473 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384,257 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 2721145,156 ops/s
[info]                  ·gc.alloc.rate:               926,681 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 389,131 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2752398,460 ops/s
[info]                  ·gc.alloc.rate:                   937,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2749662,134 ops/s
[info]                  ·gc.alloc.rate:               936,676 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 384,688 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2727717,873 ops/s
[info]                  ·gc.alloc.rate:                   928,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2741312,499 ±(99.9%) 60560,343 ops/s [Average]
[info]   (min, avg, max) = (2721145,156, 2741312,499, 2755638,873), stdev = 15727,329
[info]   CI (99.9%): [2680752,156, 2801872,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   933,612 ±(99.9%) 20,838 MB/sec [Average]
[info]   (min, avg, max) = (926,681, 933,612, 938,473), stdev = 5,412
[info]   CI (99.9%): [912,774, 954,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,219 ±(99.9%) 1416,343 MB/sec [Average]
[info]   (min, avg, max) = (672,254, 941,219, 1344,181), stdev = 367,820
[info]   CI (99.9%): [≈ 0, 2357,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   540,464 ±(99.9%) 814,398 B/op [Average]
[info]   (min, avg, max) = (384,257, 540,464, 775,632), stdev = 211,497
[info]   CI (99.9%): [≈ 0, 1354,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,024), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 5,000), stdev = 2,074
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15,90% complete, ETA 01:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2859659,301 ops/s
[info] # Warmup Iteration   2: 3106933,642 ops/s
[info] # Warmup Iteration   3: 3106259,583 ops/s
[info] # Warmup Iteration   4: 3098916,089 ops/s
[info] # Warmup Iteration   5: 3098143,706 ops/s
[info] Iteration   1: 3105487,902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3097209,771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3108788,071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3099199,474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3103608,150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3102858,673 ±(99.9%) 18054,157 ops/s [Average]
[info]   (min, avg, max) = (3097209,771, 3102858,673, 3108788,071), stdev = 4688,607
[info]   CI (99.9%): [3084804,516, 3120912,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16,10% complete, ETA 01:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226031,145 ops/s
[info] # Warmup Iteration   2: 341573,395 ops/s
[info] # Warmup Iteration   3: 340781,351 ops/s
[info] # Warmup Iteration   4: 342116,695 ops/s
[info] # Warmup Iteration   5: 341131,877 ops/s
[info] Iteration   1: 341127,059 ops/s
[info]                  ·gc.alloc.rate:                   2791,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12524,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 340985,152 ops/s
[info]                  ·gc.alloc.rate:                   2790,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12543,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 341737,310 ops/s
[info]                  ·gc.alloc.rate:                   2796,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12526,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 339292,129 ops/s
[info]                  ·gc.alloc.rate:                   2776,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15782,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,193 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 341091,205 ops/s
[info]                  ·gc.alloc.rate:                   2791,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12564,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   340846,571 ±(99.9%) 3533,073 ops/s [Average]
[info]   (min, avg, max) = (339292,129, 340846,571, 341737,310), stdev = 917,528
[info]   CI (99.9%): [337313,498, 344379,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2789,310 ±(99.9%) 28,553 MB/sec [Average]
[info]   (min, avg, max) = (2776,774, 2789,310, 2796,589), stdev = 7,415
[info]   CI (99.9%): [2760,757, 2817,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12880,001, 12880,001, 12880,001), stdev = 0,001
[info]   CI (99.9%): [12880,001, 12880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2855,472 ±(99.9%) 1177,748 MB/sec [Average]
[info]   (min, avg, max) = (2714,586, 2855,472, 3402,581), stdev = 305,857
[info]   CI (99.9%): [1677,724, 4033,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13188,433 ±(99.9%) 5584,887 B/op [Average]
[info]   (min, avg, max) = (12524,608, 13188,433, 15782,789), stdev = 1450,377
[info]   CI (99.9%): [7603,546, 18773,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,250 ±(99.9%) 0,202 B/op [Average]
[info]   (min, avg, max) = (0,192, 0,250, 0,288), stdev = 0,052
[info]   CI (99.9%): [0,048, 0,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16,30% complete, ETA 01:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96040,709 ops/s
[info] # Warmup Iteration   2: 101554,495 ops/s
[info] # Warmup Iteration   3: 101061,266 ops/s
[info] # Warmup Iteration   4: 100658,231 ops/s
[info] # Warmup Iteration   5: 100797,377 ops/s
[info] Iteration   1: 101338,699 ops/s
[info]                  ·gc.alloc.rate:                   751,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10479,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,970 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 101590,328 ops/s
[info]                  ·gc.alloc.rate:               754,004 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10423,323 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 101314,258 ops/s
[info]                  ·gc.alloc.rate:               751,781 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10450,889 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 101121,962 ops/s
[info]                  ·gc.alloc.rate:                   750,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10460,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 101070,940 ops/s
[info]                  ·gc.alloc.rate:                   750,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10465,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   101287,237 ±(99.9%) 792,294 ops/s [Average]
[info]   (min, avg, max) = (101070,940, 101287,237, 101590,328), stdev = 205,756
[info]   CI (99.9%): [100494,943, 102079,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   751,663 ±(99.9%) 5,953 MB/sec [Average]
[info]   (min, avg, max) = (750,090, 751,663, 754,004), stdev = 1,546
[info]   CI (99.9%): [745,710, 757,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11680,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11680,004, 11680,004, 11680,004), stdev = 0,001
[info]   CI (99.9%): [11680,004, 11680,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   672,892 ±(99.9%) 4,108 MB/sec [Average]
[info]   (min, avg, max) = (672,097, 672,892, 674,700), stdev = 1,067
[info]   CI (99.9%): [668,784, 677,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10456,015 ±(99.9%) 80,737 B/op [Average]
[info]   (min, avg, max) = (10423,323, 10456,015, 10479,450), stdev = 20,967
[info]   CI (99.9%): [10375,278, 10536,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,324 ±(99.9%) 1,525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,324, 0,970), stdev = 0,396
[info]   CI (99.9%): [≈ 0, 1,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16,50% complete, ETA 01:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24973,892 ops/s
[info] # Warmup Iteration   2: 31004,196 ops/s
[info] # Warmup Iteration   3: 31198,278 ops/s
[info] # Warmup Iteration   4: 31395,073 ops/s
[info] # Warmup Iteration   5: 31451,335 ops/s
[info] Iteration   1: 31333,778 ops/s
[info]                  ·gc.alloc.rate:                   1794,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101287,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,136 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31530,857 ops/s
[info]                  ·gc.alloc.rate:                   1805,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67165,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,078 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31534,212 ops/s
[info]                  ·gc.alloc.rate:                   1806,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100845,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31047,693 ops/s
[info]                  ·gc.alloc.rate:                   1778,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102612,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,110 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31413,947 ops/s
[info]                  ·gc.alloc.rate:               1799,015 MB/sec
[info]                  ·gc.alloc.rate.norm:          90144,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67709,271 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   31372,097 ±(99.9%) 769,993 ops/s [Average]
[info]   (min, avg, max) = (31047,693, 31372,097, 31534,212), stdev = 199,965
[info]   CI (99.9%): [30602,104, 32142,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1796,782 ±(99.9%) 44,037 MB/sec [Average]
[info]   (min, avg, max) = (1778,234, 1796,782, 1806,053), stdev = 11,436
[info]   CI (99.9%): [1752,745, 1840,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90144,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (90144,013, 90144,013, 90144,014), stdev = 0,001
[info]   CI (99.9%): [90144,011, 90144,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,607 ±(99.9%) 1417,282 MB/sec [Average]
[info]   (min, avg, max) = (1345,579, 1751,607, 2024,189), stdev = 368,064
[info]   CI (99.9%): [334,326, 3168,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   87923,934 ±(99.9%) 72060,847 B/op [Average]
[info]   (min, avg, max) = (67165,256, 87923,934, 102612,219), stdev = 18713,973
[info]   CI (99.9%): [15863,087, 159984,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,673 ±(99.9%) 4,596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,673, 3,136), stdev = 1,194
[info]   CI (99.9%): [≈ 0, 6,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16,70% complete, ETA 01:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21150,887 ops/s
[info] # Warmup Iteration   2: 105932,937 ops/s
[info] # Warmup Iteration   3: 106439,974 ops/s
[info] # Warmup Iteration   4: 106839,885 ops/s
[info] # Warmup Iteration   5: 106101,544 ops/s
[info] Iteration   1: 106369,322 ops/s
[info]                  ·gc.alloc.rate:               958,070 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9953,588 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 106665,724 ops/s
[info]                  ·gc.alloc.rate:                   960,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19843,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,921 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 106897,283 ops/s
[info]                  ·gc.alloc.rate:               962,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9895,187 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 106747,717 ops/s
[info]                  ·gc.alloc.rate:                   961,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19819,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,228 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 106627,717 ops/s
[info]                  ·gc.alloc.rate:               960,275 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9925,154 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   106661,553 ±(99.9%) 744,564 ops/s [Average]
[info]   (min, avg, max) = (106369,322, 106661,553, 106897,283), stdev = 193,361
[info]   CI (99.9%): [105916,988, 107406,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   960,668 ±(99.9%) 6,731 MB/sec [Average]
[info]   (min, avg, max) = (958,070, 960,668, 962,808), stdev = 1,748
[info]   CI (99.9%): [953,937, 967,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14176,004, 14176,004, 14176,004), stdev = 0,001
[info]   CI (99.9%): [14176,004, 14176,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   941,227 ±(99.9%) 1417,640 MB/sec [Average]
[info]   (min, avg, max) = (672,063, 941,227, 1344,758), stdev = 368,157
[info]   CI (99.9%): [≈ 0, 2358,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   13887,403 ±(99.9%) 20894,668 B/op [Average]
[info]   (min, avg, max) = (9895,187, 13887,403, 19843,981), stdev = 5426,279
[info]   CI (99.9%): [≈ 0, 34782,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,430 ±(99.9%) 2,304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,430, 1,228), stdev = 0,598
[info]   CI (99.9%): [≈ 0, 2,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16,90% complete, ETA 01:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48700,912 ops/s
[info] # Warmup Iteration   2: 67765,466 ops/s
[info] # Warmup Iteration   3: 68718,335 ops/s
[info] # Warmup Iteration   4: 68927,040 ops/s
[info] # Warmup Iteration   5: 68784,330 ops/s
[info] Iteration   1: 68892,935 ops/s
[info]                  ·gc.alloc.rate:               1135,283 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15446,644 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 68994,842 ops/s
[info]                  ·gc.alloc.rate:                   1136,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30853,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 69200,895 ops/s
[info]                  ·gc.alloc.rate:               1140,189 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30785,662 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 69305,047 ops/s
[info]                  ·gc.alloc.rate:               1142,114 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15376,412 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 68961,575 ops/s
[info]                  ·gc.alloc.rate:                   1136,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30921,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   69071,059 ±(99.9%) 670,089 ops/s [Average]
[info]   (min, avg, max) = (68892,935, 69071,059, 69305,047), stdev = 174,020
[info]   CI (99.9%): [68400,970, 69741,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1138,197 ±(99.9%) 10,959 MB/sec [Average]
[info]   (min, avg, max) = (1135,283, 1138,197, 1142,114), stdev = 2,846
[info]   CI (99.9%): [1127,238, 1149,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25936,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25936,006, 25936,006, 25936,007), stdev = 0,001
[info]   CI (99.9%): [25936,006, 25936,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,814 ±(99.9%) 1427,813 MB/sec [Average]
[info]   (min, avg, max) = (676,138, 1082,814, 1354,911), stdev = 370,798
[info]   CI (99.9%): [≈ 0, 2510,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24676,799 ±(99.9%) 32569,399 B/op [Average]
[info]   (min, avg, max) = (15376,412, 24676,799, 30921,400), stdev = 8458,169
[info]   CI (99.9%): [≈ 0, 57246,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,570 ±(99.9%) 3,005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,570, 1,425), stdev = 0,780
[info]   CI (99.9%): [≈ 0, 3,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,10% complete, ETA 01:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126142,344 ops/s
[info] # Warmup Iteration   2: 145738,984 ops/s
[info] # Warmup Iteration   3: 146460,631 ops/s
[info] # Warmup Iteration   4: 135784,922 ops/s
[info] # Warmup Iteration   5: 145868,075 ops/s
[info] Iteration   1: 147199,195 ops/s
[info]                  ·gc.alloc.rate:               948,764 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7193,003 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 147572,814 ops/s
[info]                  ·gc.alloc.rate:                   951,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14343,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,666 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 146421,530 ops/s
[info]                  ·gc.alloc.rate:               943,651 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7224,053 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 146854,463 ops/s
[info]                  ·gc.alloc.rate:               946,574 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7202,709 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 146620,048 ops/s
[info]                  ·gc.alloc.rate:                   945,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14428,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   146933,610 ±(99.9%) 1770,802 ops/s [Average]
[info]   (min, avg, max) = (146421,530, 146933,610, 147572,814), stdev = 459,872
[info]   CI (99.9%): [145162,807, 148704,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   947,046 ±(99.9%) 11,523 MB/sec [Average]
[info]   (min, avg, max) = (943,651, 947,046, 951,187), stdev = 2,992
[info]   CI (99.9%): [935,523, 958,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10144,003, 10144,003, 10144,003), stdev = 0,001
[info]   CI (99.9%): [10144,002, 10144,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,218 ±(99.9%) 1417,945 MB/sec [Average]
[info]   (min, avg, max) = (672,021, 941,218, 1344,987), stdev = 368,236
[info]   CI (99.9%): [≈ 0, 2359,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10078,396 ±(99.9%) 15142,716 B/op [Average]
[info]   (min, avg, max) = (7193,003, 10078,396, 14428,502), stdev = 3932,515
[info]   CI (99.9%): [≈ 0, 25221,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,223 ±(99.9%) 1,211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,223, 0,666), stdev = 0,314
[info]   CI (99.9%): [≈ 0, 1,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17,30% complete, ETA 01:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24818,320 ops/s
[info] # Warmup Iteration   2: 40548,225 ops/s
[info] # Warmup Iteration   3: 40672,153 ops/s
[info] # Warmup Iteration   4: 40385,274 ops/s
[info] # Warmup Iteration   5: 40666,345 ops/s
[info] Iteration   1: 40441,745 ops/s
[info]                  ·gc.alloc.rate:                   2111,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79136,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,430 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 40450,828 ops/s
[info]                  ·gc.alloc.rate:                   2112,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79200,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,810 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37568,407 ops/s
[info]                  ·gc.alloc.rate:                   1961,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85337,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,872 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 40288,726 ops/s
[info]                  ·gc.alloc.rate:               2103,763 MB/sec
[info]                  ·gc.alloc.rate.norm:          82176,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2038,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79626,825 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 39094,831 ops/s
[info]                  ·gc.alloc.rate:                   2041,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82138,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,514 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   39568,907 ±(99.9%) 4826,578 ops/s [Average]
[info]   (min, avg, max) = (37568,407, 39568,907, 40450,828), stdev = 1253,447
[info]   CI (99.9%): [34742,329, 44395,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2066,011 ±(99.9%) 252,297 MB/sec [Average]
[info]   (min, avg, max) = (1961,521, 2066,011, 2112,120), stdev = 65,521
[info]   CI (99.9%): [1813,714, 2318,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82176,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82176,010, 82176,010, 82176,011), stdev = 0,001
[info]   CI (99.9%): [82176,009, 82176,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,948 ±(99.9%) 9,829 MB/sec [Average]
[info]   (min, avg, max) = (2033,500, 2036,948, 2040,118), stdev = 2,553
[info]   CI (99.9%): [2027,118, 2046,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81087,899 ±(99.9%) 10308,434 B/op [Average]
[info]   (min, avg, max) = (79136,344, 81087,899, 85337,203), stdev = 2677,068
[info]   CI (99.9%): [70779,465, 91396,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,325 ±(99.9%) 4,245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,325, 2,514), stdev = 1,102
[info]   CI (99.9%): [≈ 0, 5,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17,51% complete, ETA 01:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67400,797 ops/s
[info] # Warmup Iteration   2: 75332,414 ops/s
[info] # Warmup Iteration   3: 75494,101 ops/s
[info] # Warmup Iteration   4: 76132,171 ops/s
[info] # Warmup Iteration   5: 75295,778 ops/s
[info] Iteration   1: 75990,419 ops/s
[info]                  ·gc.alloc.rate:                   1366,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27839,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,431 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 76088,707 ops/s
[info]                  ·gc.alloc.rate:                   1368,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27805,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,861 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 75899,409 ops/s
[info]                  ·gc.alloc.rate:               1365,292 MB/sec
[info]                  ·gc.alloc.rate.norm:          28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27886,704 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 75779,942 ops/s
[info]                  ·gc.alloc.rate:                   1363,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27957,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,297 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 76004,915 ops/s
[info]                  ·gc.alloc.rate:                   1367,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27902,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,431 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   75952,678 ±(99.9%) 452,890 ops/s [Average]
[info]   (min, avg, max) = (75779,942, 75952,678, 76088,707), stdev = 117,614
[info]   CI (99.9%): [75499,788, 76405,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1366,273 ±(99.9%) 7,969 MB/sec [Average]
[info]   (min, avg, max) = (1363,301, 1366,273, 1368,771), stdev = 2,069
[info]   CI (99.9%): [1358,304, 1374,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28312,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28312,005, 28312,005, 28312,006), stdev = 0,001
[info]   CI (99.9%): [28312,005, 28312,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1345,346 ±(99.9%) 5,470 MB/sec [Average]
[info]   (min, avg, max) = (1344,044, 1345,346, 1347,377), stdev = 1,421
[info]   CI (99.9%): [1339,876, 1350,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27878,427 ±(99.9%) 226,040 B/op [Average]
[info]   (min, avg, max) = (27805,500, 27878,427, 27957,784), stdev = 58,702
[info]   CI (99.9%): [27652,387, 28104,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,604 ±(99.9%) 1,897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,604, 1,297), stdev = 0,493
[info]   CI (99.9%): [≈ 0, 2,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17,71% complete, ETA 01:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29306,374 ops/s
[info] # Warmup Iteration   2: 41624,031 ops/s
[info] # Warmup Iteration   3: 43614,545 ops/s
[info] # Warmup Iteration   4: 41888,886 ops/s
[info] # Warmup Iteration   5: 41818,875 ops/s
[info] Iteration   1: 41688,596 ops/s
[info]                  ·gc.alloc.rate:               547,768 MB/sec
[info]                  ·gc.alloc.rate.norm:          20680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19312,830 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 42046,245 ops/s
[info]                  ·gc.alloc.rate:      552,467 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41868,264 ops/s
[info]                  ·gc.alloc.rate:                   550,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25363,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126,960 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41752,043 ops/s
[info]                  ·gc.alloc.rate:                   548,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25434,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,569 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 41896,406 ops/s
[info]                  ·gc.alloc.rate:               550,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25246,693 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   41850,311 ±(99.9%) 533,023 ops/s [Average]
[info]   (min, avg, max) = (41688,596, 41850,311, 42046,245), stdev = 138,424
[info]   CI (99.9%): [41317,287, 42383,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   549,882 ±(99.9%) 6,949 MB/sec [Average]
[info]   (min, avg, max) = (547,768, 549,882, 552,467), stdev = 1,805
[info]   CI (99.9%): [542,933, 556,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20680,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20680,010, 20680,010, 20680,011), stdev = 0,001
[info]   CI (99.9%): [20680,008, 20680,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,603 ±(99.9%) 1123,571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,603, 674,788), stdev = 291,788
[info]   CI (99.9%): [≈ 0, 1630,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19071,607 ±(99.9%) 42269,341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19071,607, 25434,785), stdev = 10977,214
[info]   CI (99.9%): [≈ 0, 61340,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,684 ±(99.9%) 5,798 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,684, 3,377), stdev = 1,506
[info]   CI (99.9%): [≈ 0, 6,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25,706 ±(99.9%) 217,973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25,706, 126,960), stdev = 56,607
[info]   CI (99.9%): [≈ 0, 243,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,91% complete, ETA 01:48:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30784,619 ops/s
[info] # Warmup Iteration   2: 47790,372 ops/s
[info] # Warmup Iteration   3: 44767,659 ops/s
[info] # Warmup Iteration   4: 47748,920 ops/s
[info] # Warmup Iteration   5: 44514,118 ops/s
[info] Iteration   1: 46219,647 ops/s
[info]                  ·gc.alloc.rate:      428,737 MB/sec
[info]                  ·gc.alloc.rate.norm: 14600,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47824,887 ops/s
[info]                  ·gc.alloc.rate:               443,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          14600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16835,791 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 47731,312 ops/s
[info]                  ·gc.alloc.rate:                   442,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              14600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22238,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47796,975 ops/s
[info]                  ·gc.alloc.rate:      443,431 MB/sec
[info]                  ·gc.alloc.rate.norm: 14600,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47675,429 ops/s
[info]                  ·gc.alloc.rate:                   442,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              14600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22264,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   47449,650 ±(99.9%) 2657,121 ops/s [Average]
[info]   (min, avg, max) = (46219,647, 47449,650, 47824,887), stdev = 690,046
[info]   CI (99.9%): [44792,529, 50106,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   440,170 ±(99.9%) 24,701 MB/sec [Average]
[info]   (min, avg, max) = (428,737, 440,170, 443,664), stdev = 6,415
[info]   CI (99.9%): [415,469, 464,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14600,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (14600,009, 14600,009, 14600,010), stdev = 0,001
[info]   CI (99.9%): [14600,007, 14600,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   372,093 ±(99.9%) 1332,768 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,093, 674,504), stdev = 346,116
[info]   CI (99.9%): [≈ 0, 1704,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12267,926 ±(99.9%) 43955,989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12267,926, 22264,978), stdev = 11415,231
[info]   CI (99.9%): [≈ 0, 56223,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,824 ±(99.9%) 4,345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,824, 2,062), stdev = 1,129
[info]   CI (99.9%): [≈ 0, 5,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,11% complete, ETA 01:48:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39961,936 ops/s
[info] # Warmup Iteration   2: 47827,572 ops/s
[info] # Warmup Iteration   3: 48873,081 ops/s
[info] # Warmup Iteration   4: 48867,120 ops/s
[info] # Warmup Iteration   5: 48887,042 ops/s
[info] Iteration   1: 48703,872 ops/s
[info]                  ·gc.alloc.rate:               427,998 MB/sec
[info]                  ·gc.alloc.rate.norm:          13832,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16530,973 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 48699,484 ops/s
[info]                  ·gc.alloc.rate:      428,032 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 46370,478 ops/s
[info]                  ·gc.alloc.rate:                   407,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17362,476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,782 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 48669,468 ops/s
[info]                  ·gc.alloc.rate:                   427,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21810,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101,329 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 48896,544 ops/s
[info]                  ·gc.alloc.rate:      429,692 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   48267,969 ±(99.9%) 4099,172 ops/s [Average]
[info]   (min, avg, max) = (46370,478, 48267,969, 48896,544), stdev = 1064,542
[info]   CI (99.9%): [44168,797, 52367,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   424,202 ±(99.9%) 36,105 MB/sec [Average]
[info]   (min, avg, max) = (407,484, 424,202, 429,692), stdev = 9,376
[info]   CI (99.9%): [388,097, 460,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832,009 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (13832,008, 13832,009, 13832,010), stdev = 0,001
[info]   CI (99.9%): [13832,006, 13832,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,515 ±(99.9%) 1220,664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,515, 674,573), stdev = 317,003
[info]   CI (99.9%): [≈ 0, 1560,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11140,849 ±(99.9%) 39917,216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11140,849, 21810,794), stdev = 10366,374
[info]   CI (99.9%): [≈ 0, 51058,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,631 ±(99.9%) 5,387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,631, 3,134), stdev = 1,399
[info]   CI (99.9%): [≈ 0, 6,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20,422 ±(99.9%) 174,163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,422, 101,329), stdev = 45,230
[info]   CI (99.9%): [≈ 0, 194,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18,31% complete, ETA 01:48:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40901,391 ops/s
[info] # Warmup Iteration   2: 49101,386 ops/s
[info] # Warmup Iteration   3: 49055,082 ops/s
[info] # Warmup Iteration   4: 49393,138 ops/s
[info] # Warmup Iteration   5: 49210,370 ops/s
[info] Iteration   1: 49102,289 ops/s
[info]                  ·gc.alloc.rate:                   375,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16397,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,775 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 43398,514 ops/s
[info]                  ·gc.alloc.rate:                   331,819 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18554,164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,255 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 49333,549 ops/s
[info]                  ·gc.alloc.rate:      377,144 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49012,292 ops/s
[info]                  ·gc.alloc.rate:               374,676 MB/sec
[info]                  ·gc.alloc.rate.norm:          12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16427,448 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 49222,521 ops/s
[info]                  ·gc.alloc.rate:      376,259 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   48013,833 ±(99.9%) 9945,811 ops/s [Average]
[info]   (min, avg, max) = (43398,514, 48013,833, 49333,549), stdev = 2582,896
[info]   CI (99.9%): [38068,022, 57959,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   367,051 ±(99.9%) 75,923 MB/sec [Average]
[info]   (min, avg, max) = (331,819, 367,051, 377,144), stdev = 19,717
[info]   CI (99.9%): [291,128, 442,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (12032,008, 12032,009, 12032,009), stdev = 0,001
[info]   CI (99.9%): [12032,007, 12032,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306,953 ±(99.9%) 1078,985 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,953, 511,688), stdev = 280,209
[info]   CI (99.9%): [≈ 0, 1385,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   10275,724 ±(99.9%) 36277,247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10275,724, 18554,164), stdev = 9421,086
[info]   CI (99.9%): [≈ 0, 46552,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,024), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,206 ±(99.9%) 1,297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,206, 0,775), stdev = 0,337
[info]   CI (99.9%): [≈ 0, 1,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18,51% complete, ETA 01:47:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28823,734 ops/s
[info] # Warmup Iteration   2: 36029,201 ops/s
[info] # Warmup Iteration   3: 36523,446 ops/s
[info] # Warmup Iteration   4: 36569,745 ops/s
[info] # Warmup Iteration   5: 36561,051 ops/s
[info] Iteration   1: 36551,841 ops/s
[info]                  ·gc.alloc.rate:               546,090 MB/sec
[info]                  ·gc.alloc.rate.norm:          23520,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22026,979 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 36601,477 ops/s
[info]                  ·gc.alloc.rate:                   546,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29016,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136,244 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 36604,348 ops/s
[info]                  ·gc.alloc.rate:      547,032 MB/sec
[info]                  ·gc.alloc.rate.norm: 23520,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36442,311 ops/s
[info]                  ·gc.alloc.rate:                   544,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29140,695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,798 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 36614,309 ops/s
[info]                  ·gc.alloc.rate:                   547,067 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28918,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,895 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   36562,857 ±(99.9%) 275,752 ops/s [Average]
[info]   (min, avg, max) = (36442,311, 36562,857, 36614,309), stdev = 71,612
[info]   CI (99.9%): [36287,106, 36838,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   546,358 ±(99.9%) 4,016 MB/sec [Average]
[info]   (min, avg, max) = (544,638, 546,358, 547,067), stdev = 1,043
[info]   CI (99.9%): [542,342, 550,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   23520,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23520,011, 23520,011, 23520,012), stdev = 0,001
[info]   CI (99.9%): [23520,010, 23520,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,729 ±(99.9%) 1123,984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,729, 674,793), stdev = 291,895
[info]   CI (99.9%): [≈ 0, 1630,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   21820,584 ±(99.9%) 48399,148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21820,584, 29140,695), stdev = 12569,105
[info]   CI (99.9%): [≈ 0, 70219,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,646 ±(99.9%) 5,430 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 3,168), stdev = 1,410
[info]   CI (99.9%): [≈ 0, 6,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   27,787 ±(99.9%) 233,479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,787, 136,244), stdev = 60,634
[info]   CI (99.9%): [≈ 0, 261,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18,71% complete, ETA 01:47:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20350,109 ops/s
[info] # Warmup Iteration   2: 23421,210 ops/s
[info] # Warmup Iteration   3: 23499,257 ops/s
[info] # Warmup Iteration   4: 23469,287 ops/s
[info] # Warmup Iteration   5: 23532,217 ops/s
[info] Iteration   1: 23606,411 ops/s
[info]                  ·gc.alloc.rate:                   885,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89838,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,551 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23692,040 ops/s
[info]                  ·gc.alloc.rate:               888,845 MB/sec
[info]                  ·gc.alloc.rate.norm:          59040,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44693,693 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 23730,287 ops/s
[info]                  ·gc.alloc.rate:               890,100 MB/sec
[info]                  ·gc.alloc.rate.norm:          59040,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44574,199 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 23645,877 ops/s
[info]                  ·gc.alloc.rate:                   887,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89465,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,385 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23659,942 ops/s
[info]                  ·gc.alloc.rate:                   887,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44706,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,385 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   23666,911 ±(99.9%) 180,603 ops/s [Average]
[info]   (min, avg, max) = (23606,411, 23666,911, 23730,287), stdev = 46,902
[info]   CI (99.9%): [23486,308, 23847,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   887,800 ±(99.9%) 6,696 MB/sec [Average]
[info]   (min, avg, max) = (885,555, 887,800, 890,100), stdev = 1,739
[info]   CI (99.9%): [881,104, 894,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040,018 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (59040,017, 59040,018, 59040,019), stdev = 0,001
[info]   CI (99.9%): [59040,015, 59040,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   941,711 ±(99.9%) 1420,620 MB/sec [Average]
[info]   (min, avg, max) = (671,980, 941,711, 1347,510), stdev = 368,931
[info]   CI (99.9%): [≈ 0, 2362,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   62655,510 ±(99.9%) 94897,363 B/op [Average]
[info]   (min, avg, max) = (44574,199, 62655,510, 89838,610), stdev = 24644,544
[info]   CI (99.9%): [≈ 0, 157552,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,664 ±(99.9%) 8,781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,664, 5,551), stdev = 2,281
[info]   CI (99.9%): [≈ 0, 10,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,91% complete, ETA 01:47:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17095,225 ops/s
[info] # Warmup Iteration   2: 23335,043 ops/s
[info] # Warmup Iteration   3: 23533,056 ops/s
[info] # Warmup Iteration   4: 23516,362 ops/s
[info] # Warmup Iteration   5: 22822,345 ops/s
[info] Iteration   1: 23353,334 ops/s
[info]                  ·gc.alloc.rate:                   662,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              44610,508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45448,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23138,174 ops/s
[info]                  ·gc.alloc.rate:                   655,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45876,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,832 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23381,663 ops/s
[info]                  ·gc.alloc.rate:               662,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          44608,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45461,607 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 23363,911 ops/s
[info]                  ·gc.alloc.rate:                   662,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45496,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,804 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23363,043 ops/s
[info]                  ·gc.alloc.rate:                   662,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45543,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,609 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   23320,025 ±(99.9%) 393,421 ops/s [Average]
[info]   (min, avg, max) = (23138,174, 23320,025, 23381,663), stdev = 102,170
[info]   CI (99.9%): [22926,604, 23713,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   660,999 ±(99.9%) 11,091 MB/sec [Average]
[info]   (min, avg, max) = (655,862, 660,999, 662,664), stdev = 2,880
[info]   CI (99.9%): [649,908, 672,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44608,516 ±(99.9%) 4,287 B/op [Average]
[info]   (min, avg, max) = (44608,017, 44608,516, 44610,508), stdev = 1,113
[info]   CI (99.9%): [44604,229, 44612,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,170 ±(99.9%) 2,381 MB/sec [Average]
[info]   (min, avg, max) = (674,518, 675,170, 675,981), stdev = 0,618
[info]   CI (99.9%): [672,789, 677,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45565,467 ±(99.9%) 685,102 B/op [Average]
[info]   (min, avg, max) = (45448,767, 45565,467, 45876,899), stdev = 177,919
[info]   CI (99.9%): [44880,365, 46250,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,652 ±(99.9%) 10,520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,652, 7,014), stdev = 2,732
[info]   CI (99.9%): [≈ 0, 14,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,11% complete, ETA 01:47:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93951,437 ops/s
[info] # Warmup Iteration   2: 99852,903 ops/s
[info] # Warmup Iteration   3: 100257,873 ops/s
[info] # Warmup Iteration   4: 99548,896 ops/s
[info] # Warmup Iteration   5: 95247,112 ops/s
[info] Iteration   1: 97389,569 ops/s
[info]                  ·gc.alloc.rate:               253,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8267,608 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 99173,843 ops/s
[info]                  ·gc.alloc.rate:      258,144 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 90795,414 ops/s
[info]                  ·gc.alloc.rate:                   236,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8868,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,733 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 97607,649 ops/s
[info]                  ·gc.alloc.rate:      254,053 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90289,678 ops/s
[info]                  ·gc.alloc.rate:               234,959 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8917,529 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   95051,230 ±(99.9%) 16083,457 ops/s [Average]
[info]   (min, avg, max) = (90289,678, 95051,230, 99173,843), stdev = 4176,823
[info]   CI (99.9%): [78967,774, 111134,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   247,379 ±(99.9%) 41,932 MB/sec [Average]
[info]   (min, avg, max) = (234,959, 247,379, 258,144), stdev = 10,890
[info]   CI (99.9%): [205,447, 289,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,004, 4096,004, 4096,005), stdev = 0,001
[info]   CI (99.9%): [4096,004, 4096,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,938 ±(99.9%) 1078,932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,938, 511,589), stdev = 280,195
[info]   CI (99.9%): [≈ 0, 1385,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5210,635 ±(99.9%) 18342,586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5210,635, 8917,529), stdev = 4763,511
[info]   CI (99.9%): [≈ 0, 23553,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,147 ±(99.9%) 1,263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,147, 0,733), stdev = 0,328
[info]   CI (99.9%): [≈ 0, 1,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19,32% complete, ETA 01:46:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11981,843 ops/s
[info] # Warmup Iteration   2: 18210,225 ops/s
[info] # Warmup Iteration   3: 18398,556 ops/s
[info] # Warmup Iteration   4: 18479,937 ops/s
[info] # Warmup Iteration   5: 18347,368 ops/s
[info] Iteration   1: 18136,836 ops/s
[info]                  ·gc.alloc.rate:                   1151,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              99944,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116810,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,806 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18417,505 ops/s
[info]                  ·gc.alloc.rate:               1169,499 MB/sec
[info]                  ·gc.alloc.rate.norm:          99944,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57577,473 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 18506,112 ops/s
[info]                  ·gc.alloc.rate:                   1175,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              99944,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114673,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18211,952 ops/s
[info]                  ·gc.alloc.rate:               1156,568 MB/sec
[info]                  ·gc.alloc.rate.norm:          99944,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116674,730 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18412,904 ops/s
[info]                  ·gc.alloc.rate:                   1169,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              99944,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115521,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,338 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   18337,062 ±(99.9%) 598,228 ops/s [Average]
[info]   (min, avg, max) = (18136,836, 18337,062, 18506,112), stdev = 155,358
[info]   CI (99.9%): [17738,834, 18935,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1164,428 ±(99.9%) 37,851 MB/sec [Average]
[info]   (min, avg, max) = (1151,736, 1164,428, 1175,177), stdev = 9,830
[info]   CI (99.9%): [1126,577, 1202,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99944,024 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (99944,022, 99944,024, 99944,028), stdev = 0,002
[info]   CI (99.9%): [99944,015, 99944,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1213,957 ±(99.9%) 1162,871 MB/sec [Average]
[info]   (min, avg, max) = (673,745, 1213,957, 1351,386), stdev = 301,994
[info]   CI (99.9%): [51,086, 2376,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104251,578 ±(99.9%) 100526,220 B/op [Average]
[info]   (min, avg, max) = (57577,473, 104251,578, 116810,280), stdev = 26106,340
[info]   CI (99.9%): [3725,358, 204777,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,491 ±(99.9%) 10,356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,491, 5,338), stdev = 2,689
[info]   CI (99.9%): [≈ 0, 12,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19,52% complete, ETA 01:46:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19696,615 ops/s
[info] # Warmup Iteration   2: 22312,446 ops/s
[info] # Warmup Iteration   3: 22429,768 ops/s
[info] # Warmup Iteration   4: 22665,114 ops/s
[info] # Warmup Iteration   5: 22712,067 ops/s
[info] Iteration   1: 22729,713 ops/s
[info]                  ·gc.alloc.rate:                   783,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46765,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,882 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 22770,845 ops/s
[info]                  ·gc.alloc.rate:               784,988 MB/sec
[info]                  ·gc.alloc.rate.norm:          54256,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46543,019 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 22772,599 ops/s
[info]                  ·gc.alloc.rate:               785,015 MB/sec
[info]                  ·gc.alloc.rate.norm:          54256,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46540,975 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 22872,789 ops/s
[info]                  ·gc.alloc.rate:                   788,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46289,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,297 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 22888,668 ops/s
[info]                  ·gc.alloc.rate:                   788,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92514,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,862 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   22806,923 ±(99.9%) 268,592 ops/s [Average]
[info]   (min, avg, max) = (22729,713, 22806,923, 22888,668), stdev = 69,753
[info]   CI (99.9%): [22538,331, 23075,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   786,203 ±(99.9%) 9,221 MB/sec [Average]
[info]   (min, avg, max) = (783,537, 786,203, 788,952), stdev = 2,395
[info]   CI (99.9%): [776,982, 795,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   54256,019 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (54256,018, 54256,019, 54256,021), stdev = 0,001
[info]   CI (99.9%): [54256,015, 54256,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   808,034 ±(99.9%) 1156,473 MB/sec [Average]
[info]   (min, avg, max) = (672,746, 808,034, 1345,282), stdev = 300,332
[info]   CI (99.9%): [≈ 0, 1964,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   55730,733 ±(99.9%) 79182,864 B/op [Average]
[info]   (min, avg, max) = (46289,687, 55730,733, 92514,677), stdev = 20563,538
[info]   CI (99.9%): [≈ 0, 134913,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,008 ±(99.9%) 7,406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,008, 4,297), stdev = 1,923
[info]   CI (99.9%): [≈ 0, 9,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19,72% complete, ETA 01:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52582,460 ops/s
[info] # Warmup Iteration   2: 66194,437 ops/s
[info] # Warmup Iteration   3: 66310,688 ops/s
[info] # Warmup Iteration   4: 66292,830 ops/s
[info] # Warmup Iteration   5: 66722,787 ops/s
[info] Iteration   1: 65647,878 ops/s
[info]                  ·gc.alloc.rate:                   995,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32225,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,499 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 66982,827 ops/s
[info]                  ·gc.alloc.rate:               1015,041 MB/sec
[info]                  ·gc.alloc.rate.norm:          23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15777,240 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 66181,435 ops/s
[info]                  ·gc.alloc.rate:                   1002,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31934,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,990 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 66744,025 ops/s
[info]                  ·gc.alloc.rate:               1011,398 MB/sec
[info]                  ·gc.alloc.rate.norm:          23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15832,304 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 66635,229 ops/s
[info]                  ·gc.alloc.rate:                   1009,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31716,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,983 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   66438,279 ±(99.9%) 2037,119 ops/s [Average]
[info]   (min, avg, max) = (65647,878, 66438,279, 66982,827), stdev = 529,033
[info]   CI (99.9%): [64401,160, 68475,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1006,783 ±(99.9%) 30,653 MB/sec [Average]
[info]   (min, avg, max) = (995,006, 1006,783, 1015,041), stdev = 7,961
[info]   CI (99.9%): [976,130, 1037,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23848,006, 23848,006, 23848,007), stdev = 0,001
[info]   CI (99.9%): [23848,005, 23848,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,625 ±(99.9%) 1417,085 MB/sec [Average]
[info]   (min, avg, max) = (671,451, 1074,625, 1344,520), stdev = 368,012
[info]   CI (99.9%): [≈ 0, 2491,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25497,078 ±(99.9%) 34076,990 B/op [Average]
[info]   (min, avg, max) = (15777,240, 25497,078, 32225,060), stdev = 8849,686
[info]   CI (99.9%): [≈ 0, 59574,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,494 ±(99.9%) 1,900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,494, 0,990), stdev = 0,493
[info]   CI (99.9%): [≈ 0, 2,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 6,000), stdev = 2,387
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,92% complete, ETA 01:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72192,482 ops/s
[info] # Warmup Iteration   2: 99431,213 ops/s
[info] # Warmup Iteration   3: 99524,223 ops/s
[info] # Warmup Iteration   4: 99940,354 ops/s
[info] # Warmup Iteration   5: 99572,273 ops/s
[info] Iteration   1: 99235,275 ops/s
[info]                  ·gc.alloc.rate:                   1176,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21445,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,660 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 99244,936 ops/s
[info]                  ·gc.alloc.rate:                   1176,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21453,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,330 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 97985,956 ops/s
[info]                  ·gc.alloc.rate:               1161,926 MB/sec
[info]                  ·gc.alloc.rate.norm:          18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10875,191 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 99295,752 ops/s
[info]                  ·gc.alloc.rate:                   1177,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21468,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,990 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 99346,177 ops/s
[info]                  ·gc.alloc.rate:               1177,961 MB/sec
[info]                  ·gc.alloc.rate.norm:          18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21473,590 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   99021,619 ±(99.9%) 2235,864 ops/s [Average]
[info]   (min, avg, max) = (97985,956, 99021,619, 99346,177), stdev = 580,647
[info]   CI (99.9%): [96785,755, 101257,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1174,203 ±(99.9%) 26,494 MB/sec [Average]
[info]   (min, avg, max) = (1161,926, 1174,203, 1177,961), stdev = 6,881
[info]   CI (99.9%): [1147,708, 1200,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18664,004, 18664,004, 18664,004), stdev = 0,001
[info]   CI (99.9%): [18664,004, 18664,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,328 ±(99.9%) 1165,185 MB/sec [Average]
[info]   (min, avg, max) = (677,034, 1218,328, 1355,285), stdev = 302,595
[info]   CI (99.9%): [53,143, 2383,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19343,236 ±(99.9%) 18228,160 B/op [Average]
[info]   (min, avg, max) = (10875,191, 19343,236, 21473,590), stdev = 4733,795
[info]   CI (99.9%): [1115,077, 37571,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,396 ±(99.9%) 1,657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,396, 0,990), stdev = 0,430
[info]   CI (99.9%): [≈ 0, 2,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20,12% complete, ETA 01:45:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215952,318 ops/s
[info] # Warmup Iteration   2: 232008,653 ops/s
[info] # Warmup Iteration   3: 229501,220 ops/s
[info] # Warmup Iteration   4: 230146,930 ops/s
[info] # Warmup Iteration   5: 229125,582 ops/s
[info] Iteration   1: 228811,197 ops/s
[info]                  ·gc.alloc.rate:               362,852 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3518,819 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 194953,338 ops/s
[info]                  ·gc.alloc.rate:      309,220 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 194201,907 ops/s
[info]                  ·gc.alloc.rate:               307,984 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4146,127 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 222577,396 ops/s
[info]                  ·gc.alloc.rate:               353,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3617,469 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 229419,176 ops/s
[info]                  ·gc.alloc.rate:      363,811 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   213992,603 ±(99.9%) 69028,467 ops/s [Average]
[info]   (min, avg, max) = (194201,907, 213992,603, 229419,176), stdev = 17926,474
[info]   CI (99.9%): [144964,136, 283021,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   339,374 ±(99.9%) 109,400 MB/sec [Average]
[info]   (min, avg, max) = (307,984, 339,374, 363,811), stdev = 28,411
[info]   CI (99.9%): [229,974, 448,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2496,002, 2496,002, 2496,002), stdev = 0,001
[info]   CI (99.9%): [2496,001, 2496,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,949 ±(99.9%) 1078,968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,949, 511,606), stdev = 280,205
[info]   CI (99.9%): [≈ 0, 1385,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2256,483 ±(99.9%) 7984,856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2256,483, 4146,127), stdev = 2073,642
[info]   CI (99.9%): [≈ 0, 10241,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20,32% complete, ETA 01:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253473,295 ops/s
[info] # Warmup Iteration   2: 275766,977 ops/s
[info] # Warmup Iteration   3: 275954,558 ops/s
[info] # Warmup Iteration   4: 276347,098 ops/s
[info] # Warmup Iteration   5: 276307,451 ops/s
[info] Iteration   1: 276498,339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 276391,414 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 277077,275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 276406,755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 276248,377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   276524,432 ±(99.9%) 1238,903 ops/s [Average]
[info]   (min, avg, max) = (276248,377, 276524,432, 277077,275), stdev = 321,739
[info]   CI (99.9%): [275285,529, 277763,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20,52% complete, ETA 01:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62282,113 ops/s
[info] # Warmup Iteration   2: 76895,838 ops/s
[info] # Warmup Iteration   3: 75430,149 ops/s
[info] # Warmup Iteration   4: 78039,110 ops/s
[info] # Warmup Iteration   5: 75159,930 ops/s
[info] Iteration   1: 78115,002 ops/s
[info]                  ·gc.alloc.rate:               1218,138 MB/sec
[info]                  ·gc.alloc.rate.norm:          24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13501,612 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 70703,893 ops/s
[info]                  ·gc.alloc.rate:                   1102,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29835,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 78385,301 ops/s
[info]                  ·gc.alloc.rate:                   1222,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26909,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,254 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 78271,056 ops/s
[info]                  ·gc.alloc.rate:                   1220,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26961,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,419 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 78382,839 ops/s
[info]                  ·gc.alloc.rate:                   1222,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26956,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,418 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   76771,618 ±(99.9%) 13068,141 ops/s [Average]
[info]   (min, avg, max) = (70703,893, 76771,618, 78385,301), stdev = 3393,755
[info]   CI (99.9%): [63703,477, 89839,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1197,213 ±(99.9%) 203,689 MB/sec [Average]
[info]   (min, avg, max) = (1102,638, 1197,213, 1222,378), stdev = 52,897
[info]   CI (99.9%): [993,524, 1400,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24544,005, 24544,005, 24544,006), stdev = 0,001
[info]   CI (99.9%): [24544,004, 24544,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,780 ±(99.9%) 1155,260 MB/sec [Average]
[info]   (min, avg, max) = (670,095, 1206,780, 1342,414), stdev = 300,017
[info]   CI (99.9%): [51,521, 2362,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24832,822 ±(99.9%) 24863,724 B/op [Average]
[info]   (min, avg, max) = (13501,612, 24832,822, 29835,178), stdev = 6457,030
[info]   CI (99.9%): [≈ 0, 49696,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,511 ±(99.9%) 1,757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,511, 1,254), stdev = 0,456
[info]   CI (99.9%): [≈ 0, 2,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20,72% complete, ETA 01:45:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19083,827 ops/s
[info] # Warmup Iteration   2: 20892,185 ops/s
[info] # Warmup Iteration   3: 20942,599 ops/s
[info] # Warmup Iteration   4: 20950,432 ops/s
[info] # Warmup Iteration   5: 20849,796 ops/s
[info] Iteration   1: 20782,265 ops/s
[info]                  ·gc.alloc.rate:               359,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          27224,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38739,002 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20915,503 ops/s
[info]                  ·gc.alloc.rate:                   361,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              27224,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38496,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,327 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20966,451 ops/s
[info]                  ·gc.alloc.rate:      362,708 MB/sec
[info]                  ·gc.alloc.rate.norm: 27224,021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20820,024 ops/s
[info]                  ·gc.alloc.rate:                   360,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              27224,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38668,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,255 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 20913,222 ops/s
[info]                  ·gc.alloc.rate:      361,704 MB/sec
[info]                  ·gc.alloc.rate.norm: 27224,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   20879,493 ±(99.9%) 291,900 ops/s [Average]
[info]   (min, avg, max) = (20782,265, 20879,493, 20966,451), stdev = 75,805
[info]   CI (99.9%): [20587,593, 21171,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   361,156 ±(99.9%) 5,120 MB/sec [Average]
[info]   (min, avg, max) = (359,444, 361,156, 362,708), stdev = 1,330
[info]   CI (99.9%): [356,037, 366,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   27224,020 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (27224,020, 27224,020, 27224,021), stdev = 0,001
[info]   CI (99.9%): [27224,017, 27224,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,920 ±(99.9%) 1078,867 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,920, 511,588), stdev = 280,178
[info]   CI (99.9%): [≈ 0, 1385,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   23180,745 ±(99.9%) 81484,294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23180,745, 38739,002), stdev = 21161,213
[info]   CI (99.9%): [≈ 0, 104665,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,316 ±(99.9%) 2,216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,316, 1,327), stdev = 0,575
[info]   CI (99.9%): [≈ 0, 2,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20,93% complete, ETA 01:44:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22203,012 ops/s
[info] # Warmup Iteration   2: 30491,105 ops/s
[info] # Warmup Iteration   3: 30389,646 ops/s
[info] # Warmup Iteration   4: 30319,081 ops/s
[info] # Warmup Iteration   5: 30233,923 ops/s
[info] Iteration   1: 30410,456 ops/s
[info]                  ·gc.alloc.rate:      632,475 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 30410,560 ops/s
[info]                  ·gc.alloc.rate:                   632,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34921,507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173,550 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 30450,113 ops/s
[info]                  ·gc.alloc.rate:                   633,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34874,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,228 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 30312,892 ops/s
[info]                  ·gc.alloc.rate:               630,522 MB/sec
[info]                  ·gc.alloc.rate.norm:          32736,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34894,894 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 30363,452 ops/s
[info]                  ·gc.alloc.rate:               631,473 MB/sec
[info]                  ·gc.alloc.rate.norm:          32736,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34836,297 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   30389,495 ±(99.9%) 202,881 ops/s [Average]
[info]   (min, avg, max) = (30312,892, 30389,495, 30450,113), stdev = 52,688
[info]   CI (99.9%): [30186,613, 30592,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   632,065 ±(99.9%) 4,193 MB/sec [Average]
[info]   (min, avg, max) = (630,522, 632,065, 633,350), stdev = 1,089
[info]   CI (99.9%): [627,872, 636,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (32736,013, 32736,014, 32736,015), stdev = 0,001
[info]   CI (99.9%): [32736,012, 32736,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   538,709 ±(99.9%) 1159,623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,709, 674,731), stdev = 301,150
[info]   CI (99.9%): [≈ 0, 1698,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27905,439 ±(99.9%) 60068,682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27905,439, 34921,507), stdev = 15599,646
[info]   CI (99.9%): [≈ 0, 87974,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,683 ±(99.9%) 5,749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 3,353), stdev = 1,493
[info]   CI (99.9%): [≈ 0, 6,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35,356 ±(99.9%) 297,523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35,356, 173,550), stdev = 77,266
[info]   CI (99.9%): [≈ 0, 332,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,13% complete, ETA 01:44:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68720,941 ops/s
[info] # Warmup Iteration   2: 107413,762 ops/s
[info] # Warmup Iteration   3: 107614,536 ops/s
[info] # Warmup Iteration   4: 107533,986 ops/s
[info] # Warmup Iteration   5: 100700,654 ops/s
[info] Iteration   1: 107161,232 ops/s
[info]                  ·gc.alloc.rate:                   1403,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19859,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,917 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 107084,839 ops/s
[info]                  ·gc.alloc.rate:                   1402,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29843,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,306 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 107506,481 ops/s
[info]                  ·gc.alloc.rate:                   1408,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19834,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,305 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 100570,958 ops/s
[info]                  ·gc.alloc.rate:                   1317,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21223,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,326 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 100953,122 ops/s
[info]                  ·gc.alloc.rate:               1322,355 MB/sec
[info]                  ·gc.alloc.rate.norm:          20616,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21152,830 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   104655,326 ±(99.9%) 13708,990 ops/s [Average]
[info]   (min, avg, max) = (100570,958, 104655,326, 107506,481), stdev = 3560,181
[info]   CI (99.9%): [90946,336, 118364,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1370,880 ±(99.9%) 179,682 MB/sec [Average]
[info]   (min, avg, max) = (1317,347, 1370,880, 1408,261), stdev = 46,663
[info]   CI (99.9%): [1191,198, 1550,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20616,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20616,004, 20616,004, 20616,004), stdev = 0,001
[info]   CI (99.9%): [20616,003, 20616,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,114 ±(99.9%) 1163,506 MB/sec [Average]
[info]   (min, avg, max) = (1352,152, 1490,114, 2030,623), stdev = 302,159
[info]   CI (99.9%): [326,608, 2653,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22382,651 ±(99.9%) 16267,590 B/op [Average]
[info]   (min, avg, max) = (19834,314, 22382,651, 29843,936), stdev = 4224,641
[info]   CI (99.9%): [6115,062, 38650,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,371 ±(99.9%) 1,287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,371, 0,917), stdev = 0,334
[info]   CI (99.9%): [≈ 0, 1,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,33% complete, ETA 01:44:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119524,482 ops/s
[info] # Warmup Iteration   2: 135617,727 ops/s
[info] # Warmup Iteration   3: 134540,543 ops/s
[info] # Warmup Iteration   4: 133219,913 ops/s
[info] # Warmup Iteration   5: 123587,996 ops/s
[info] Iteration   1: 135501,685 ops/s
[info]                  ·gc.alloc.rate:               528,961 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5941,773 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 136200,689 ops/s
[info]                  ·gc.alloc.rate:      531,750 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 136040,580 ops/s
[info]                  ·gc.alloc.rate:                   531,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7806,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,697 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 126714,041 ops/s
[info]                  ·gc.alloc.rate:                   494,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8381,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,517 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 136150,512 ops/s
[info]                  ·gc.alloc.rate:                   531,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7777,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   134121,501 ±(99.9%) 15981,118 ops/s [Average]
[info]   (min, avg, max) = (126714,041, 134121,501, 136200,689), stdev = 4150,246
[info]   CI (99.9%): [118140,384, 150102,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   523,615 ±(99.9%) 62,153 MB/sec [Average]
[info]   (min, avg, max) = (494,809, 523,615, 531,750), stdev = 16,141
[info]   CI (99.9%): [461,462, 585,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6144,003, 6144,003, 6144,003), stdev = 0,001
[info]   CI (99.9%): [6144,003, 6144,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,824 ±(99.9%) 1124,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,824, 675,003), stdev = 291,946
[info]   CI (99.9%): [≈ 0, 1631,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5981,447 ±(99.9%) 13352,350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5981,447, 8381,459), stdev = 3467,563
[info]   CI (99.9%): [≈ 0, 19333,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,436 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,172), stdev = 1,412
[info]   CI (99.9%): [≈ 0, 6,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7,491 ±(99.9%) 62,874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,491, 36,697), stdev = 16,328
[info]   CI (99.9%): [≈ 0, 70,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21,53% complete, ETA 01:43:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13879,209 ops/s
[info] # Warmup Iteration   2: 24611,908 ops/s
[info] # Warmup Iteration   3: 24678,223 ops/s
[info] # Warmup Iteration   4: 24800,115 ops/s
[info] # Warmup Iteration   5: 24433,603 ops/s
[info] Iteration   1: 24861,739 ops/s
[info]                  ·gc.alloc.rate:                   1372,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85554,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,635 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 24900,486 ops/s
[info]                  ·gc.alloc.rate:               1374,609 MB/sec
[info]                  ·gc.alloc.rate.norm:          86880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85511,257 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 24894,931 ops/s
[info]                  ·gc.alloc.rate:                   1374,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85591,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,632 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 24894,900 ops/s
[info]                  ·gc.alloc.rate:               1374,254 MB/sec
[info]                  ·gc.alloc.rate.norm:          86880,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85647,883 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 24902,106 ops/s
[info]                  ·gc.alloc.rate:               1374,588 MB/sec
[info]                  ·gc.alloc.rate.norm:          86880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85686,958 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   24890,832 ±(99.9%) 63,857 ops/s [Average]
[info]   (min, avg, max) = (24861,739, 24890,832, 24902,106), stdev = 16,584
[info]   CI (99.9%): [24826,975, 24954,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1374,008 ±(99.9%) 3,438 MB/sec [Average]
[info]   (min, avg, max) = (1372,454, 1374,008, 1374,609), stdev = 0,893
[info]   CI (99.9%): [1370,571, 1377,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86880,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (86880,016, 86880,017, 86880,018), stdev = 0,001
[info]   CI (99.9%): [86880,014, 86880,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,739 ±(99.9%) 6,248 MB/sec [Average]
[info]   (min, avg, max) = (1351,510, 1353,739, 1355,712), stdev = 1,623
[info]   CI (99.9%): [1347,491, 1359,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85598,370 ±(99.9%) 271,526 B/op [Average]
[info]   (min, avg, max) = (85511,257, 85598,370, 85686,958), stdev = 70,514
[info]   CI (99.9%): [85326,844, 85869,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,053 ±(99.9%) 5,555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,053, 2,635), stdev = 1,443
[info]   CI (99.9%): [≈ 0, 6,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21,73% complete, ETA 01:43:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24355,526 ops/s
[info] # Warmup Iteration   2: 28944,982 ops/s
[info] # Warmup Iteration   3: 29475,391 ops/s
[info] # Warmup Iteration   4: 29472,967 ops/s
[info] # Warmup Iteration   5: 29526,094 ops/s
[info] Iteration   1: 29471,214 ops/s
[info]                  ·gc.alloc.rate:                   562,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27317,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29527,716 ops/s
[info]                  ·gc.alloc.rate:                   563,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35968,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170,910 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 29603,897 ops/s
[info]                  ·gc.alloc.rate:                   565,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35870,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,320 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 29049,201 ops/s
[info]                  ·gc.alloc.rate:      554,477 MB/sec
[info]                  ·gc.alloc.rate.norm: 30040,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 29580,140 ops/s
[info]                  ·gc.alloc.rate:               564,523 MB/sec
[info]                  ·gc.alloc.rate.norm:          30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35794,834 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   29446,434 ±(99.9%) 877,420 ops/s [Average]
[info]   (min, avg, max) = (29049,201, 29446,434, 29603,897), stdev = 227,863
[info]   CI (99.9%): [28569,013, 30323,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   562,036 ±(99.9%) 16,690 MB/sec [Average]
[info]   (min, avg, max) = (554,477, 562,036, 565,037), stdev = 4,334
[info]   CI (99.9%): [545,345, 578,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30040,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (30040,014, 30040,014, 30040,016), stdev = 0,001
[info]   CI (99.9%): [30040,011, 30040,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   506,757 ±(99.9%) 1124,013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,757, 674,887), stdev = 291,903
[info]   CI (99.9%): [≈ 0, 1630,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   26990,333 ±(99.9%) 59826,634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26990,333, 35968,017), stdev = 15536,787
[info]   CI (99.9%): [≈ 0, 86816,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,654 ±(99.9%) 5,496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,207), stdev = 1,427
[info]   CI (99.9%): [≈ 0, 6,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   34,871 ±(99.9%) 292,885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34,871, 170,910), stdev = 76,061
[info]   CI (99.9%): [≈ 0, 327,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21,93% complete, ETA 01:43:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171708,830 ops/s
[info] # Warmup Iteration   2: 207350,205 ops/s
[info] # Warmup Iteration   3: 208723,994 ops/s
[info] # Warmup Iteration   4: 207680,022 ops/s
[info] # Warmup Iteration   5: 209356,247 ops/s
[info] Iteration   1: 209828,777 ops/s
[info]                  ·gc.alloc.rate:                   729,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5061,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 210834,117 ops/s
[info]                  ·gc.alloc.rate:                   733,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5037,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 210774,526 ops/s
[info]                  ·gc.alloc.rate:                   732,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10037,552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 209818,510 ops/s
[info]                  ·gc.alloc.rate:                   729,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5036,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 210665,672 ops/s
[info]                  ·gc.alloc.rate:                   732,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5016,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   210384,321 ±(99.9%) 1984,582 ops/s [Average]
[info]   (min, avg, max) = (209818,510, 210384,321, 210834,117), stdev = 515,390
[info]   CI (99.9%): [208399,739, 212368,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   731,463 ±(99.9%) 6,903 MB/sec [Average]
[info]   (min, avg, max) = (729,507, 731,463, 733,097), stdev = 1,793
[info]   CI (99.9%): [724,559, 738,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   807,330 ±(99.9%) 1155,788 MB/sec [Average]
[info]   (min, avg, max) = (671,336, 807,330, 1344,254), stdev = 300,154
[info]   CI (99.9%): [≈ 0, 1963,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6037,718 ±(99.9%) 8610,163 B/op [Average]
[info]   (min, avg, max) = (5016,110, 6037,718, 10037,552), stdev = 2236,032
[info]   CI (99.9%): [≈ 0, 14647,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,693 ±(99.9%) 5,694 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,693, 3,338), stdev = 1,479
[info]   CI (99.9%): [≈ 0, 6,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,194 ±(99.9%) 42,715 B/op [Average]
[info]   (min, avg, max) = (0,155, 5,194, 25,036), stdev = 11,093
[info]   CI (99.9%): [≈ 0, 47,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,13% complete, ETA 01:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227563,456 ops/s
[info] # Warmup Iteration   2: 310894,217 ops/s
[info] # Warmup Iteration   3: 311590,500 ops/s
[info] # Warmup Iteration   4: 306904,816 ops/s
[info] # Warmup Iteration   5: 309589,912 ops/s
[info] Iteration   1: 310180,394 ops/s
[info]                  ·gc.alloc.rate:      313,720 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 308930,327 ops/s
[info]                  ·gc.alloc.rate:               312,489 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2606,169 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 310430,982 ops/s
[info]                  ·gc.alloc.rate:      313,966 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 309767,361 ops/s
[info]                  ·gc.alloc.rate:                   313,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2599,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 310261,983 ops/s
[info]                  ·gc.alloc.rate:      313,778 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   309914,210 ±(99.9%) 2317,150 ops/s [Average]
[info]   (min, avg, max) = (308930,327, 309914,210, 310430,982), stdev = 601,757
[info]   CI (99.9%): [307597,059, 312231,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   313,458 ±(99.9%) 2,263 MB/sec [Average]
[info]   (min, avg, max) = (312,489, 313,458, 313,966), stdev = 0,588
[info]   CI (99.9%): [311,194, 315,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,622 ±(99.9%) 1078,914 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,622, 511,558), stdev = 280,191
[info]   CI (99.9%): [≈ 0, 1283,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1041,056 ±(99.9%) 5489,198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1041,056, 2606,169), stdev = 1425,527
[info]   CI (99.9%): [≈ 0, 6530,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,106), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,33% complete, ETA 01:42:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532885,207 ops/s
[info] # Warmup Iteration   2: 564887,798 ops/s
[info] # Warmup Iteration   3: 575007,822 ops/s
[info] # Warmup Iteration   4: 534579,179 ops/s
[info] # Warmup Iteration   5: 561075,357 ops/s
[info] Iteration   1: 572467,655 ops/s
[info]                  ·gc.alloc.rate:                   439,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1406,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 514003,674 ops/s
[info]                  ·gc.alloc.rate:      394,543 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 572861,003 ops/s
[info]                  ·gc.alloc.rate:               439,662 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1405,426 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 571651,949 ops/s
[info]                  ·gc.alloc.rate:                   438,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1857,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,653 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 574106,265 ops/s
[info]                  ·gc.alloc.rate:      440,573 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   561018,109 ±(99.9%) 101259,520 ops/s [Average]
[info]   (min, avg, max) = (514003,674, 561018,109, 574106,265), stdev = 26296,776
[info]   CI (99.9%): [459758,589, 662277,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   430,576 ±(99.9%) 77,604 MB/sec [Average]
[info]   (min, avg, max) = (394,543, 430,576, 440,573), stdev = 20,154
[info]   CI (99.9%): [352,971, 508,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,550 ±(99.9%) 1220,827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,550, 674,717), stdev = 317,045
[info]   CI (99.9%): [≈ 0, 1560,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   933,907 ±(99.9%) 3358,764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 933,907, 1857,708), stdev = 872,260
[info]   CI (99.9%): [≈ 0, 4292,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,633 ±(99.9%) 5,403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,633, 3,143), stdev = 1,403
[info]   CI (99.9%): [≈ 0, 6,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,742 ±(99.9%) 14,877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,742, 8,653), stdev = 3,863
[info]   CI (99.9%): [≈ 0, 16,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22,54% complete, ETA 01:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576318,976 ops/s
[info] # Warmup Iteration   2: 623653,287 ops/s
[info] # Warmup Iteration   3: 620511,221 ops/s
[info] # Warmup Iteration   4: 622025,988 ops/s
[info] # Warmup Iteration   5: 615223,363 ops/s
[info] Iteration   1: 622364,292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 621093,758 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 622960,585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 621150,568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 622555,487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   622024,938 ±(99.9%) 3280,795 ops/s [Average]
[info]   (min, avg, max) = (621093,758, 622024,938, 622960,585), stdev = 852,012
[info]   CI (99.9%): [618744,143, 625305,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22,74% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227822,186 ops/s
[info] # Warmup Iteration   2: 326459,477 ops/s
[info] # Warmup Iteration   3: 344081,360 ops/s
[info] # Warmup Iteration   4: 293985,319 ops/s
[info] # Warmup Iteration   5: 345652,856 ops/s
[info] Iteration   1: 344853,468 ops/s
[info]                  ·gc.alloc.rate:                   953,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6162,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,475 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 345547,969 ops/s
[info]                  ·gc.alloc.rate:               955,471 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3078,148 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 346518,154 ops/s
[info]                  ·gc.alloc.rate:               958,209 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3069,533 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 345480,136 ops/s
[info]                  ·gc.alloc.rate:                   955,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6160,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,284 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 344383,870 ops/s
[info]                  ·gc.alloc.rate:               952,139 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3092,929 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   345356,719 ±(99.9%) 3104,750 ops/s [Average]
[info]   (min, avg, max) = (344383,870, 345356,719, 346518,154), stdev = 806,294
[info]   CI (99.9%): [342251,969, 348461,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   954,902 ±(99.9%) 8,911 MB/sec [Average]
[info]   (min, avg, max) = (952,139, 954,902, 958,209), stdev = 2,314
[info]   CI (99.9%): [945,991, 963,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4352,001, 4352,001, 4352,001), stdev = 0,001
[info]   CI (99.9%): [4352,001, 4352,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   946,092 ±(99.9%) 1423,564 MB/sec [Average]
[info]   (min, avg, max) = (675,800, 946,092, 1352,229), stdev = 369,695
[info]   CI (99.9%): [≈ 0, 2369,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4312,584 ±(99.9%) 6498,066 B/op [Average]
[info]   (min, avg, max) = (3069,533, 4312,584, 6162,175), stdev = 1687,527
[info]   CI (99.9%): [≈ 0, 10810,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,152 ±(99.9%) 0,842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,152, 0,475), stdev = 0,219
[info]   CI (99.9%): [≈ 0, 0,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22,94% complete, ETA 01:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44686,284 ops/s
[info] # Warmup Iteration   2: 47594,832 ops/s
[info] # Warmup Iteration   3: 46634,534 ops/s
[info] # Warmup Iteration   4: 47268,414 ops/s
[info] # Warmup Iteration   5: 47454,147 ops/s
[info] Iteration   1: 47479,393 ops/s
[info]                  ·gc.alloc.rate:      220,092 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47492,621 ops/s
[info]                  ·gc.alloc.rate:                   220,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16953,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,586 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 47607,270 ops/s
[info]                  ·gc.alloc.rate:      220,676 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47550,681 ops/s
[info]                  ·gc.alloc.rate:      220,409 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47245,894 ops/s
[info]                  ·gc.alloc.rate:               218,979 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17040,636 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   47475,172 ±(99.9%) 530,922 ops/s [Average]
[info]   (min, avg, max) = (47245,894, 47475,172, 47607,270), stdev = 137,879
[info]   CI (99.9%): [46944,250, 48006,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   220,065 ±(99.9%) 2,498 MB/sec [Average]
[info]   (min, avg, max) = (218,979, 220,065, 220,676), stdev = 0,649
[info]   CI (99.9%): [217,567, 222,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7296,009, 7296,009, 7296,009), stdev = 0,001
[info]   CI (99.9%): [7296,007, 7296,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,611 ±(99.9%) 1078,853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,611, 511,604), stdev = 280,175
[info]   CI (99.9%): [≈ 0, 1283,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6798,891 ±(99.9%) 35848,784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6798,891, 17040,636), stdev = 9309,815
[info]   CI (99.9%): [≈ 0, 42647,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,117 ±(99.9%) 1,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,586), stdev = 0,262
[info]   CI (99.9%): [≈ 0, 1,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23,14% complete, ETA 01:41:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37555,803 ops/s
[info] # Warmup Iteration   2: 44458,248 ops/s
[info] # Warmup Iteration   3: 44887,876 ops/s
[info] # Warmup Iteration   4: 45009,886 ops/s
[info] # Warmup Iteration   5: 44665,520 ops/s
[info] Iteration   1: 45065,134 ops/s
[info]                  ·gc.alloc.rate:                   2009,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70441,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,908 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 45067,112 ops/s
[info]                  ·gc.alloc.rate:                   2010,278 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70540,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,908 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 43800,829 ops/s
[info]                  ·gc.alloc.rate:                   1953,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72677,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,244 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 43427,624 ops/s
[info]                  ·gc.alloc.rate:                   1937,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73461,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,509 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45122,418 ops/s
[info]                  ·gc.alloc.rate:                   2012,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70794,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,726 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   44496,623 ±(99.9%) 3144,333 ops/s [Average]
[info]   (min, avg, max) = (43427,624, 44496,623, 45122,418), stdev = 816,573
[info]   CI (99.9%): [41352,290, 47640,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1984,785 ±(99.9%) 140,108 MB/sec [Average]
[info]   (min, avg, max) = (1937,250, 1984,785, 2012,802), stdev = 36,386
[info]   CI (99.9%): [1844,677, 2124,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (70200,009, 70200,009, 70200,010), stdev = 0,001
[info]   CI (99.9%): [70200,008, 70200,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,316 ±(99.9%) 20,310 MB/sec [Average]
[info]   (min, avg, max) = (2016,853, 2023,316, 2029,838), stdev = 5,275
[info]   CI (99.9%): [2003,006, 2043,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71583,062 ±(99.9%) 5356,631 B/op [Average]
[info]   (min, avg, max) = (70441,677, 71583,062, 73461,880), stdev = 1391,100
[info]   CI (99.9%): [66226,431, 76939,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,059 ±(99.9%) 3,630 B/op [Average]
[info]   (min, avg, max) = (0,726, 2,059, 2,908), stdev = 0,943
[info]   CI (99.9%): [≈ 0, 5,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23,34% complete, ETA 01:41:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87633,715 ops/s
[info] # Warmup Iteration   2: 329115,508 ops/s
[info] # Warmup Iteration   3: 329405,344 ops/s
[info] # Warmup Iteration   4: 329395,529 ops/s
[info] # Warmup Iteration   5: 328472,252 ops/s
[info] Iteration   1: 328972,948 ops/s
[info]                  ·gc.alloc.rate:               341,124 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2447,390 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 330139,314 ops/s
[info]                  ·gc.alloc.rate:                   342,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2438,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,198 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 330608,634 ops/s
[info]                  ·gc.alloc.rate:               342,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2435,282 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 329418,574 ops/s
[info]                  ·gc.alloc.rate:      341,623 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 329004,831 ops/s
[info]                  ·gc.alloc.rate:                   341,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3223,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,588 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   329628,860 ±(99.9%) 2779,656 ops/s [Average]
[info]   (min, avg, max) = (328972,948, 329628,860, 330608,634), stdev = 721,868
[info]   CI (99.9%): [326849,204, 332408,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   341,795 ±(99.9%) 2,843 MB/sec [Average]
[info]   (min, avg, max) = (341,124, 341,795, 342,808), stdev = 0,738
[info]   CI (99.9%): [338,952, 344,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   441,654 ±(99.9%) 988,407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,654, 673,709), stdev = 256,686
[info]   CI (99.9%): [≈ 0, 1430,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2108,868 ±(99.9%) 4723,356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2108,868, 3223,040), stdev = 1226,641
[info]   CI (99.9%): [≈ 0, 6832,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,535 ±(99.9%) 4,514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,535, 2,631), stdev = 1,172
[info]   CI (99.9%): [≈ 0, 5,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2,557 ±(99.9%) 21,595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,557, 12,588), stdev = 5,608
[info]   CI (99.9%): [≈ 0, 24,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,54% complete, ETA 01:41:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80395,554 ops/s
[info] # Warmup Iteration   2: 112755,287 ops/s
[info] # Warmup Iteration   3: 112674,766 ops/s
[info] # Warmup Iteration   4: 104309,107 ops/s
[info] # Warmup Iteration   5: 113368,471 ops/s
[info] Iteration   1: 113000,821 ops/s
[info]                  ·gc.alloc.rate:                   1243,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18832,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,870 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 113625,935 ops/s
[info]                  ·gc.alloc.rate:                   1250,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18739,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,577 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 113408,925 ops/s
[info]                  ·gc.alloc.rate:               1248,057 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18792,413 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 112845,268 ops/s
[info]                  ·gc.alloc.rate:                   1241,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18895,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,581 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 113380,210 ops/s
[info]                  ·gc.alloc.rate:               1247,622 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18824,791 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   113252,232 ±(99.9%) 1231,924 ops/s [Average]
[info]   (min, avg, max) = (112845,268, 113252,232, 113625,935), stdev = 319,927
[info]   CI (99.9%): [112020,308, 114484,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1246,293 ±(99.9%) 13,438 MB/sec [Average]
[info]   (min, avg, max) = (1241,901, 1246,293, 1250,384), stdev = 3,490
[info]   CI (99.9%): [1232,854, 1259,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17320,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17320,004, 17320,004, 17320,004), stdev = 0,001
[info]   CI (99.9%): [17320,003, 17320,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,005 ±(99.9%) 6,017 MB/sec [Average]
[info]   (min, avg, max) = (1352,083, 1354,005, 1356,018), stdev = 1,563
[info]   CI (99.9%): [1347,988, 1360,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18817,024 ±(99.9%) 219,747 B/op [Average]
[info]   (min, avg, max) = (18739,895, 18817,024, 18895,605), stdev = 57,068
[info]   CI (99.9%): [18597,278, 19036,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,405 ±(99.9%) 1,497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,405, 0,870), stdev = 0,389
[info]   CI (99.9%): [≈ 0, 1,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,74% complete, ETA 01:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443912,971 ops/s
[info] # Warmup Iteration   2: 470171,273 ops/s
[info] # Warmup Iteration   3: 469856,769 ops/s
[info] # Warmup Iteration   4: 471281,879 ops/s
[info] # Warmup Iteration   5: 471525,535 ops/s
[info] Iteration   1: 473531,902 ops/s
[info]                  ·gc.alloc.rate:      308,064 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 473566,670 ops/s
[info]                  ·gc.alloc.rate:                   308,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1700,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 474292,345 ops/s
[info]                  ·gc.alloc.rate:      308,602 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 471995,804 ops/s
[info]                  ·gc.alloc.rate:               307,109 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1705,771 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 473007,011 ops/s
[info]                  ·gc.alloc.rate:                   307,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1702,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   473278,746 ±(99.9%) 3275,397 ops/s [Average]
[info]   (min, avg, max) = (471995,804, 473278,746, 474292,345), stdev = 850,610
[info]   CI (99.9%): [470003,349, 476554,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   307,919 ±(99.9%) 2,134 MB/sec [Average]
[info]   (min, avg, max) = (307,109, 307,919, 308,602), stdev = 0,554
[info]   CI (99.9%): [305,785, 310,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,928 ±(99.9%) 1078,894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,928, 511,580), stdev = 280,185
[info]   CI (99.9%): [≈ 0, 1385,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1021,621 ±(99.9%) 3591,149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1021,621, 1705,771), stdev = 932,610
[info]   CI (99.9%): [≈ 0, 4612,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,010 ±(99.9%) 0,060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,036), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,033 ±(99.9%) 0,200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,118), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23,94% complete, ETA 01:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28583,261 ops/s
[info] # Warmup Iteration   2: 45758,178 ops/s
[info] # Warmup Iteration   3: 45996,171 ops/s
[info] # Warmup Iteration   4: 45821,889 ops/s
[info] # Warmup Iteration   5: 45703,659 ops/s
[info] Iteration   1: 45754,973 ops/s
[info]                  ·gc.alloc.rate:                   2441,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93344,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,432 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45891,043 ops/s
[info]                  ·gc.alloc.rate:                   2448,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93187,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,570 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 46053,724 ops/s
[info]                  ·gc.alloc.rate:                   2457,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69677,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,423 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45443,854 ops/s
[info]                  ·gc.alloc.rate:                   2424,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94209,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,163 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45980,694 ops/s
[info]                  ·gc.alloc.rate:                   2453,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69877,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,850 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   45824,858 ±(99.9%) 925,543 ops/s [Average]
[info]   (min, avg, max) = (45443,854, 45824,858, 46053,724), stdev = 240,361
[info]   CI (99.9%): [44899,315, 46750,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2445,033 ±(99.9%) 49,110 MB/sec [Average]
[info]   (min, avg, max) = (2424,813, 2445,033, 2457,265), stdev = 12,754
[info]   CI (99.9%): [2395,922, 2494,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83976,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (83976,009, 83976,009, 83976,010), stdev = 0,001
[info]   CI (99.9%): [83976,008, 83976,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2446,277 ±(99.9%) 1427,968 MB/sec [Average]
[info]   (min, avg, max) = (2038,867, 2446,277, 2720,304), stdev = 370,839
[info]   CI (99.9%): [1018,310, 3874,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84059,357 ±(99.9%) 50225,574 B/op [Average]
[info]   (min, avg, max) = (69677,437, 84059,357, 94209,442), stdev = 13043,422
[info]   CI (99.9%): [33833,783, 134284,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,287 ±(99.9%) 3,579 B/op [Average]
[info]   (min, avg, max) = (1,423, 2,287, 3,570), stdev = 0,929
[info]   CI (99.9%): [≈ 0, 5,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24,14% complete, ETA 01:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78607,280 ops/s
[info] # Warmup Iteration   2: 87173,530 ops/s
[info] # Warmup Iteration   3: 87128,718 ops/s
[info] # Warmup Iteration   4: 87826,722 ops/s
[info] # Warmup Iteration   5: 87527,626 ops/s
[info] Iteration   1: 88139,913 ops/s
[info]                  ·gc.alloc.rate:                   1611,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24004,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 87792,686 ops/s
[info]                  ·gc.alloc.rate:                   1605,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36173,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,746 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 87862,310 ops/s
[info]                  ·gc.alloc.rate:                   1606,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24125,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,746 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 86980,888 ops/s
[info]                  ·gc.alloc.rate:               1590,828 MB/sec
[info]                  ·gc.alloc.rate.norm:          28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24393,336 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 87716,522 ops/s
[info]                  ·gc.alloc.rate:                   1603,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36331,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,747 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   87698,464 ±(99.9%) 1662,748 ops/s [Average]
[info]   (min, avg, max) = (86980,888, 87698,464, 88139,913), stdev = 431,810
[info]   CI (99.9%): [86035,715, 89361,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1603,817 ±(99.9%) 30,078 MB/sec [Average]
[info]   (min, avg, max) = (1590,828, 1603,817, 1611,740), stdev = 7,811
[info]   CI (99.9%): [1573,739, 1633,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28784,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28784,005, 28784,005, 28784,005), stdev = 0,001
[info]   CI (99.9%): [28784,004, 28784,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,307 ±(99.9%) 1423,501 MB/sec [Average]
[info]   (min, avg, max) = (1344,119, 1616,307, 2024,550), stdev = 369,679
[info]   CI (99.9%): [192,805, 3039,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29005,543 ±(99.9%) 25479,551 B/op [Average]
[info]   (min, avg, max) = (24004,565, 29005,543, 36331,290), stdev = 6616,959
[info]   CI (99.9%): [3525,991, 54485,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,522 ±(99.9%) 1,286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,522, 0,747), stdev = 0,334
[info]   CI (99.9%): [≈ 0, 1,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24,35% complete, ETA 01:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82028,373 ops/s
[info] # Warmup Iteration   2: 99957,935 ops/s
[info] # Warmup Iteration   3: 101303,087 ops/s
[info] # Warmup Iteration   4: 100860,354 ops/s
[info] # Warmup Iteration   5: 101149,381 ops/s
[info] Iteration   1: 101365,326 ops/s
[info]                  ·gc.alloc.rate:                   487,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              7576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7942,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 101503,509 ops/s
[info]                  ·gc.alloc.rate:               488,651 MB/sec
[info]                  ·gc.alloc.rate.norm:          7576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7932,568 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 101170,979 ops/s
[info]                  ·gc.alloc.rate:                   486,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              7576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10496,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,530 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 101627,775 ops/s
[info]                  ·gc.alloc.rate:      489,243 MB/sec
[info]                  ·gc.alloc.rate.norm: 7576,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101305,724 ops/s
[info]                  ·gc.alloc.rate:                   487,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              7576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10482,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,970 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   101394,662 ±(99.9%) 680,687 ops/s [Average]
[info]   (min, avg, max) = (101170,979, 101394,662, 101627,775), stdev = 176,772
[info]   CI (99.9%): [100713,975, 102075,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   488,075 ±(99.9%) 3,421 MB/sec [Average]
[info]   (min, avg, max) = (486,975, 488,075, 489,243), stdev = 0,888
[info]   CI (99.9%): [484,654, 491,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7576,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7576,004, 7576,004, 7576,005), stdev = 0,001
[info]   CI (99.9%): [7576,003, 7576,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   474,518 ±(99.9%) 1068,626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,518, 674,723), stdev = 277,519
[info]   CI (99.9%): [≈ 0, 1543,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7371,003 ±(99.9%) 16610,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7371,003, 10496,847), stdev = 4313,598
[info]   CI (99.9%): [≈ 0, 23981,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,689 ±(99.9%) 5,787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,689, 3,377), stdev = 1,503
[info]   CI (99.9%): [≈ 0, 6,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10,711 ±(99.9%) 90,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,711, 52,530), stdev = 23,381
[info]   CI (99.9%): [≈ 0, 100,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24,55% complete, ETA 01:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31523,849 ops/s
[info] # Warmup Iteration   2: 120270,368 ops/s
[info] # Warmup Iteration   3: 126236,463 ops/s
[info] # Warmup Iteration   4: 126513,181 ops/s
[info] # Warmup Iteration   5: 126278,413 ops/s
[info] Iteration   1: 126170,485 ops/s
[info]                  ·gc.alloc.rate:               386,090 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6381,192 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 126248,038 ops/s
[info]                  ·gc.alloc.rate:      386,330 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 126058,151 ops/s
[info]                  ·gc.alloc.rate:               385,663 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6386,961 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 110680,925 ops/s
[info]                  ·gc.alloc.rate:      338,720 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 126366,445 ops/s
[info]                  ·gc.alloc.rate:                   386,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8391,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33,130 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   123104,809 ±(99.9%) 26746,849 ops/s [Average]
[info]   (min, avg, max) = (110680,925, 123104,809, 126366,445), stdev = 6946,072
[info]   CI (99.9%): [96357,960, 149851,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   376,705 ±(99.9%) 81,780 MB/sec [Average]
[info]   (min, avg, max) = (338,720, 376,705, 386,724), stdev = 21,238
[info]   CI (99.9%): [294,925, 458,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,373 ±(99.9%) 1219,926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,373, 673,830), stdev = 316,811
[info]   CI (99.9%): [≈ 0, 1559,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   4231,916 ±(99.9%) 15206,799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4231,916, 8391,429), stdev = 3949,157
[info]   CI (99.9%): [≈ 0, 19438,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,532 ±(99.9%) 4,581 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,532, 2,660), stdev = 1,190
[info]   CI (99.9%): [≈ 0, 5,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   6,626 ±(99.9%) 57,052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,626, 33,130), stdev = 14,816
[info]   CI (99.9%): [≈ 0, 63,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,75% complete, ETA 01:39:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82937,086 ops/s
[info] # Warmup Iteration   2: 111084,383 ops/s
[info] # Warmup Iteration   3: 110761,331 ops/s
[info] # Warmup Iteration   4: 102453,075 ops/s
[info] # Warmup Iteration   5: 110695,434 ops/s
[info] Iteration   1: 110827,488 ops/s
[info]                  ·gc.alloc.rate:               366,156 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7264,568 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 111030,352 ops/s
[info]                  ·gc.alloc.rate:      366,846 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 110974,204 ops/s
[info]                  ·gc.alloc.rate:                   366,622 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7254,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 110501,843 ops/s
[info]                  ·gc.alloc.rate:                   365,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9605,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,889 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 110858,629 ops/s
[info]                  ·gc.alloc.rate:      366,215 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   110838,503 ±(99.9%) 791,697 ops/s [Average]
[info]   (min, avg, max) = (110501,843, 110838,503, 111030,352), stdev = 205,601
[info]   CI (99.9%): [110046,806, 111630,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   366,193 ±(99.9%) 2,545 MB/sec [Average]
[info]   (min, avg, max) = (365,128, 366,193, 366,846), stdev = 0,661
[info]   CI (99.9%): [363,649, 368,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5200,004, 5200,004, 5200,004), stdev = 0,001
[info]   CI (99.9%): [5200,003, 5200,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   339,502 ±(99.9%) 1220,580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,502, 674,472), stdev = 316,981
[info]   CI (99.9%): [≈ 0, 1560,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4825,015 ±(99.9%) 17356,874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4825,015, 9605,559), stdev = 4507,525
[info]   CI (99.9%): [≈ 0, 22181,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,237 ±(99.9%) 1,488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,237, 0,889), stdev = 0,386
[info]   CI (99.9%): [≈ 0, 1,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,95% complete, ETA 01:39:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115524,207 ops/s
[info] # Warmup Iteration   2: 123803,649 ops/s
[info] # Warmup Iteration   3: 122720,887 ops/s
[info] # Warmup Iteration   4: 125186,623 ops/s
[info] # Warmup Iteration   5: 125482,797 ops/s
[info] Iteration   1: 125034,987 ops/s
[info]                  ·gc.alloc.rate:               382,548 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6439,257 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 125620,929 ops/s
[info]                  ·gc.alloc.rate:                   384,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6409,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 125515,409 ops/s
[info]                  ·gc.alloc.rate:                   384,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6414,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 125454,748 ops/s
[info]                  ·gc.alloc.rate:      383,932 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 125304,350 ops/s
[info]                  ·gc.alloc.rate:                   383,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8475,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,229 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   125386,085 ±(99.9%) 874,998 ops/s [Average]
[info]   (min, avg, max) = (125034,987, 125386,085, 125620,929), stdev = 227,234
[info]   CI (99.9%): [124511,086, 126261,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   383,671 ±(99.9%) 2,778 MB/sec [Average]
[info]   (min, avg, max) = (382,548, 383,671, 384,414), stdev = 0,721
[info]   CI (99.9%): [380,893, 386,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,871 ±(99.9%) 989,314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,871, 674,730), stdev = 256,922
[info]   CI (99.9%): [≈ 0, 1431,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5547,708 ±(99.9%) 12423,255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5547,708, 8475,015), stdev = 3226,280
[info]   CI (99.9%): [≈ 0, 17970,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,512 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,203), stdev = 1,432
[info]   CI (99.9%): [≈ 0, 6,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8,064 ±(99.9%) 69,240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,064, 40,229), stdev = 17,981
[info]   CI (99.9%): [≈ 0, 77,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25,15% complete, ETA 01:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115389,971 ops/s
[info] # Warmup Iteration   2: 123986,363 ops/s
[info] # Warmup Iteration   3: 125646,621 ops/s
[info] # Warmup Iteration   4: 123526,313 ops/s
[info] # Warmup Iteration   5: 125140,589 ops/s
[info] Iteration   1: 124452,524 ops/s
[info]                  ·gc.alloc.rate:               282,756 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6469,363 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 125263,289 ops/s
[info]                  ·gc.alloc.rate:      284,586 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 118672,769 ops/s
[info]                  ·gc.alloc.rate:                   269,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6784,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,441 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 124283,052 ops/s
[info]                  ·gc.alloc.rate:               282,410 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6478,106 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 125040,044 ops/s
[info]                  ·gc.alloc.rate:      284,073 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   123542,336 ±(99.9%) 10597,073 ops/s [Average]
[info]   (min, avg, max) = (118672,769, 123542,336, 125263,289), stdev = 2752,026
[info]   CI (99.9%): [112945,263, 134139,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   280,691 ±(99.9%) 24,064 MB/sec [Average]
[info]   (min, avg, max) = (269,628, 280,691, 284,586), stdev = 6,249
[info]   CI (99.9%): [256,627, 304,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3576,003, 3576,003, 3576,004), stdev = 0,001
[info]   CI (99.9%): [3576,003, 3576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306,935 ±(99.9%) 1078,921 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,935, 511,600), stdev = 280,192
[info]   CI (99.9%): [≈ 0, 1385,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   3946,382 ±(99.9%) 13880,691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3946,382, 6784,441), stdev = 3604,771
[info]   CI (99.9%): [≈ 0, 17827,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,033), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,088 ±(99.9%) 0,760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,088, 0,441), stdev = 0,197
[info]   CI (99.9%): [≈ 0, 0,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 6,000), stdev = 2,490
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25,35% complete, ETA 01:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8074,033 ops/s
[info] # Warmup Iteration   2: 11432,424 ops/s
[info] # Warmup Iteration   3: 11597,591 ops/s
[info] # Warmup Iteration   4: 11339,675 ops/s
[info] # Warmup Iteration   5: 11549,712 ops/s
[info] Iteration   1: 11576,020 ops/s
[info]                  ·gc.alloc.rate:                   1903,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              258845,784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274165,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,830 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11580,573 ops/s
[info]                  ·gc.alloc.rate:                   1904,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274342,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,658 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11591,746 ops/s
[info]                  ·gc.alloc.rate:                   1906,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274510,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11570,358 ops/s
[info]                  ·gc.alloc.rate:                   1902,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275485,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,831 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11582,032 ops/s
[info]                  ·gc.alloc.rate:               1904,565 MB/sec
[info]                  ·gc.alloc.rate.norm:          258854,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 183722,534 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   11580,146 ±(99.9%) 30,510 ops/s [Average]
[info]   (min, avg, max) = (11570,358, 11580,146, 11591,746), stdev = 7,923
[info]   CI (99.9%): [11549,636, 11610,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1904,510 ±(99.9%) 5,325 MB/sec [Average]
[info]   (min, avg, max) = (1902,961, 1904,510, 1906,533), stdev = 1,383
[info]   CI (99.9%): [1899,185, 1909,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258853,714 ±(99.9%) 17,221 B/op [Average]
[info]   (min, avg, max) = (258845,784, 258853,714, 258856,041), stdev = 4,472
[info]   CI (99.9%): [258836,493, 258870,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886,786 ±(99.9%) 1151,739 MB/sec [Average]
[info]   (min, avg, max) = (1351,768, 1886,786, 2025,213), stdev = 299,103
[info]   CI (99.9%): [735,047, 3038,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   256445,423 ±(99.9%) 156553,869 B/op [Average]
[info]   (min, avg, max) = (183722,534, 256445,423, 275485,641), stdev = 40656,543
[info]   CI (99.9%): [99891,555, 412999,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,829 ±(99.9%) 7,703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,829, 5,658), stdev = 2,000
[info]   CI (99.9%): [≈ 0, 10,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,55% complete, ETA 01:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6946,510 ops/s
[info] # Warmup Iteration   2: 11761,563 ops/s
[info] # Warmup Iteration   3: 11795,216 ops/s
[info] # Warmup Iteration   4: 11844,120 ops/s
[info] # Warmup Iteration   5: 11775,762 ops/s
[info] Iteration   1: 11702,339 ops/s
[info]                  ·gc.alloc.rate:                   1810,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              243452,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273229,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,398 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11820,517 ops/s
[info]                  ·gc.alloc.rate:                   1828,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270769,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,543 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11820,738 ops/s
[info]                  ·gc.alloc.rate:                   1828,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180645,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,314 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11502,655 ops/s
[info]                  ·gc.alloc.rate:                   1779,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278684,635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,544 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11779,039 ops/s
[info]                  ·gc.alloc.rate:                   1821,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              243465,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272334,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,562 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   11725,058 ±(99.9%) 513,597 ops/s [Average]
[info]   (min, avg, max) = (11502,655, 11725,058, 11820,738), stdev = 133,380
[info]   CI (99.9%): [11211,460, 12238,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1813,753 ±(99.9%) 79,275 MB/sec [Average]
[info]   (min, avg, max) = (1779,509, 1813,753, 1828,679), stdev = 20,587
[info]   CI (99.9%): [1734,478, 1893,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243466,768 ±(99.9%) 33,393 B/op [Average]
[info]   (min, avg, max) = (243452,058, 243466,768, 243472,037), stdev = 8,672
[info]   CI (99.9%): [243433,375, 243500,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,345 ±(99.9%) 1168,072 MB/sec [Average]
[info]   (min, avg, max) = (1356,725, 1899,345, 2037,943), stdev = 303,345
[info]   CI (99.9%): [731,273, 3067,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   255132,637 ±(99.9%) 160749,704 B/op [Average]
[info]   (min, avg, max) = (180645,240, 255132,637, 278684,635), stdev = 41746,188
[info]   CI (99.9%): [94382,933, 415882,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7,272 ±(99.9%) 6,053 B/op [Average]
[info]   (min, avg, max) = (5,543, 7,272, 8,544), stdev = 1,572
[info]   CI (99.9%): [1,219, 13,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,75% complete, ETA 01:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190409,394 ops/s
[info] # Warmup Iteration   2: 207011,521 ops/s
[info] # Warmup Iteration   3: 208485,354 ops/s
[info] # Warmup Iteration   4: 208158,431 ops/s
[info] # Warmup Iteration   5: 208344,640 ops/s
[info] Iteration   1: 208088,510 ops/s
[info]                  ·gc.alloc.rate:                   541,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3869,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,226 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 208100,710 ops/s
[info]                  ·gc.alloc.rate:                   541,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5108,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,202 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 209194,925 ops/s
[info]                  ·gc.alloc.rate:      544,374 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 208889,862 ops/s
[info]                  ·gc.alloc.rate:                   543,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5088,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,470 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 208904,601 ops/s
[info]                  ·gc.alloc.rate:               543,647 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5078,482 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   208635,722 ±(99.9%) 1958,981 ops/s [Average]
[info]   (min, avg, max) = (208088,510, 208635,722, 209194,925), stdev = 508,741
[info]   CI (99.9%): [206676,740, 210594,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   542,968 ±(99.9%) 5,016 MB/sec [Average]
[info]   (min, avg, max) = (541,520, 542,968, 544,374), stdev = 1,303
[info]   CI (99.9%): [537,952, 547,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,002, 4096,002, 4096,002), stdev = 0,001
[info]   CI (99.9%): [4096,002, 4096,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   507,310 ±(99.9%) 1125,533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,310, 675,537), stdev = 292,297
[info]   CI (99.9%): [≈ 0, 1632,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3829,005 ±(99.9%) 8490,777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3829,005, 5108,591), stdev = 2205,028
[info]   CI (99.9%): [≈ 0, 12319,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,579 ±(99.9%) 4,789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,579, 2,804), stdev = 1,244
[info]   CI (99.9%): [≈ 0, 5,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,380 ±(99.9%) 36,218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,380, 21,202), stdev = 9,406
[info]   CI (99.9%): [≈ 0, 40,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25,96% complete, ETA 01:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3711,471 ops/s
[info] # Warmup Iteration   2: 6615,159 ops/s
[info] # Warmup Iteration   3: 6725,620 ops/s
[info] # Warmup Iteration   4: 6736,713 ops/s
[info] # Warmup Iteration   5: 6672,313 ops/s
[info] Iteration   1: 6459,648 ops/s
[info]                  ·gc.alloc.rate:                   1715,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              418000,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     329890,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6639,356 ops/s
[info]                  ·gc.alloc.rate:                   1763,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              418000,066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482051,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,803 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6739,490 ops/s
[info]                  ·gc.alloc.rate:                   1790,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              418000,065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475366,897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,861 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6728,530 ops/s
[info]                  ·gc.alloc.rate:               1787,229 MB/sec
[info]                  ·gc.alloc.rate.norm:          418000,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 317485,944 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 6739,574 ops/s
[info]                  ·gc.alloc.rate:                   1789,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              418000,280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475918,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,721 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6661,320 ±(99.9%) 463,300 ops/s [Average]
[info]   (min, avg, max) = (6459,648, 6661,320, 6739,574), stdev = 120,318
[info]   CI (99.9%): [6198,019, 7124,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1769,217 ±(99.9%) 123,142 MB/sec [Average]
[info]   (min, avg, max) = (1715,621, 1769,217, 1790,082), stdev = 31,980
[info]   CI (99.9%): [1646,075, 1892,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418000,107 ±(99.9%) 0,372 B/op [Average]
[info]   (min, avg, max) = (418000,061, 418000,107, 418000,280), stdev = 0,097
[info]   CI (99.9%): [417999,735, 418000,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,712 ±(99.9%) 1434,145 MB/sec [Average]
[info]   (min, avg, max) = (1353,990, 1763,712, 2037,804), stdev = 372,443
[info]   CI (99.9%): [329,567, 3197,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   416142,705 ±(99.9%) 325585,101 B/op [Average]
[info]   (min, avg, max) = (317485,944, 416142,705, 482051,277), stdev = 84553,417
[info]   CI (99.9%): [90557,604, 741727,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,891 ±(99.9%) 21,570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,891, 14,803), stdev = 5,602
[info]   CI (99.9%): [≈ 0, 28,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26,16% complete, ETA 01:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8351,384 ops/s
[info] # Warmup Iteration   2: 11114,944 ops/s
[info] # Warmup Iteration   3: 11264,819 ops/s
[info] # Warmup Iteration   4: 10648,541 ops/s
[info] # Warmup Iteration   5: 11090,624 ops/s
[info] Iteration   1: 11248,157 ops/s
[info]                  ·gc.alloc.rate:                   1809,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              253156,924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188354,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,825 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10511,360 ops/s
[info]                  ·gc.alloc.rate:                   1690,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302585,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,350 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11219,908 ops/s
[info]                  ·gc.alloc.rate:                   1804,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283843,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,759 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11208,537 ops/s
[info]                  ·gc.alloc.rate:               1803,149 MB/sec
[info]                  ·gc.alloc.rate.norm:          253176,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189663,943 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 11180,138 ops/s
[info]                  ·gc.alloc.rate:                   1798,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285608,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,930 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   11073,620 ±(99.9%) 1213,943 ops/s [Average]
[info]   (min, avg, max) = (10511,360, 11073,620, 11248,157), stdev = 315,257
[info]   CI (99.9%): [9859,677, 12287,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1781,270 ±(99.9%) 195,203 MB/sec [Average]
[info]   (min, avg, max) = (1690,858, 1781,270, 1809,204), stdev = 50,694
[info]   CI (99.9%): [1586,068, 1976,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   253172,216 ±(99.9%) 32,918 B/op [Average]
[info]   (min, avg, max) = (253156,924, 253172,216, 253176,046), stdev = 8,549
[info]   CI (99.9%): [253139,299, 253205,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1753,973 ±(99.9%) 1425,536 MB/sec [Average]
[info]   (min, avg, max) = (1346,086, 1753,973, 2028,629), stdev = 370,207
[info]   CI (99.9%): [328,437, 3179,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   250011,044 ±(99.9%) 216281,455 B/op [Average]
[info]   (min, avg, max) = (188354,110, 250011,044, 302585,085), stdev = 56167,607
[info]   CI (99.9%): [33729,590, 466292,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,373 ±(99.9%) 15,199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,373, 9,350), stdev = 3,947
[info]   CI (99.9%): [≈ 0, 20,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26,36% complete, ETA 01:37:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21134,066 ops/s
[info] # Warmup Iteration   2: 28993,988 ops/s
[info] # Warmup Iteration   3: 29130,701 ops/s
[info] # Warmup Iteration   4: 29298,187 ops/s
[info] # Warmup Iteration   5: 29356,087 ops/s
[info] Iteration   1: 29290,231 ops/s
[info]                  ·gc.alloc.rate:                   1517,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72162,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,119 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 29197,740 ops/s
[info]                  ·gc.alloc.rate:               1513,154 MB/sec
[info]                  ·gc.alloc.rate.norm:          81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72392,357 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 28071,811 ops/s
[info]                  ·gc.alloc.rate:                   1454,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75367,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,334 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29403,439 ops/s
[info]                  ·gc.alloc.rate:                   1523,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108066,435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,228 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29209,630 ops/s
[info]                  ·gc.alloc.rate:                   1513,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72621,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   29034,570 ±(99.9%) 2096,394 ops/s [Average]
[info]   (min, avg, max) = (28071,811, 29034,570, 29403,439), stdev = 544,427
[info]   CI (99.9%): [26938,177, 31130,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1504,732 ±(99.9%) 108,598 MB/sec [Average]
[info]   (min, avg, max) = (1454,878, 1504,732, 1523,949), stdev = 28,203
[info]   CI (99.9%): [1396,134, 1613,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568,015 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (81568,014, 81568,015, 81568,016), stdev = 0,001
[info]   CI (99.9%): [81568,011, 81568,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,375 ±(99.9%) 1161,658 MB/sec [Average]
[info]   (min, avg, max) = (1342,938, 1479,375, 2019,024), stdev = 301,679
[info]   CI (99.9%): [317,717, 2641,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80122,201 ±(99.9%) 60359,569 B/op [Average]
[info]   (min, avg, max) = (72162,532, 80122,201, 108066,435), stdev = 15675,189
[info]   CI (99.9%): [19762,632, 140481,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,361 ±(99.9%) 3,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,361, 2,334), stdev = 0,958
[info]   CI (99.9%): [≈ 0, 5,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,56% complete, ETA 01:37:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22616,005 ops/s
[info] # Warmup Iteration   2: 34613,172 ops/s
[info] # Warmup Iteration   3: 34635,594 ops/s
[info] # Warmup Iteration   4: 34501,893 ops/s
[info] # Warmup Iteration   5: 34371,628 ops/s
[info] Iteration   1: 34562,016 ops/s
[info]                  ·gc.alloc.rate:                   1689,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61666,667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,948 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 34415,961 ops/s
[info]                  ·gc.alloc.rate:                   1682,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61962,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,952 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34550,191 ops/s
[info]                  ·gc.alloc.rate:                   1689,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92696,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,896 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 34336,986 ops/s
[info]                  ·gc.alloc.rate:               1678,851 MB/sec
[info]                  ·gc.alloc.rate.norm:          76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62223,325 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 34574,300 ops/s
[info]                  ·gc.alloc.rate:                   1690,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92753,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,948 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   34487,891 ±(99.9%) 407,462 ops/s [Average]
[info]   (min, avg, max) = (34336,986, 34487,891, 34574,300), stdev = 105,817
[info]   CI (99.9%): [34080,429, 34895,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1686,045 ±(99.9%) 19,432 MB/sec [Average]
[info]   (min, avg, max) = (1678,851, 1686,045, 1690,089), stdev = 5,046
[info]   CI (99.9%): [1666,613, 1705,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76944,012, 76944,012, 76944,013), stdev = 0,001
[info]   CI (99.9%): [76944,010, 76944,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1627,796 ±(99.9%) 1435,240 MB/sec [Average]
[info]   (min, avg, max) = (1354,150, 1627,796, 2037,342), stdev = 372,727
[info]   CI (99.9%): [192,556, 3063,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   74260,376 ±(99.9%) 64909,544 B/op [Average]
[info]   (min, avg, max) = (61666,667, 74260,376, 92753,282), stdev = 16856,802
[info]   CI (99.9%): [9350,832, 139169,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,949 ±(99.9%) 2,582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,949, 1,896), stdev = 0,670
[info]   CI (99.9%): [≈ 0, 3,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,76% complete, ETA 01:37:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360814,764 ops/s
[info] # Warmup Iteration   2: 383350,902 ops/s
[info] # Warmup Iteration   3: 364494,609 ops/s
[info] # Warmup Iteration   4: 381815,757 ops/s
[info] # Warmup Iteration   5: 383604,760 ops/s
[info] Iteration   1: 384735,481 ops/s
[info]                  ·gc.alloc.rate:                   850,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2763,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,341 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 384020,308 ops/s
[info]                  ·gc.alloc.rate:                   849,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5520,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 386651,815 ops/s
[info]                  ·gc.alloc.rate:               854,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2741,138 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 386342,981 ops/s
[info]                  ·gc.alloc.rate:               854,275 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2743,308 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 383196,858 ops/s
[info]                  ·gc.alloc.rate:                   847,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5526,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,256 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   384989,489 ±(99.9%) 5715,523 ops/s [Average]
[info]   (min, avg, max) = (383196,858, 384989,489, 386651,815), stdev = 1484,303
[info]   CI (99.9%): [379273,965, 390705,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   851,247 ±(99.9%) 12,651 MB/sec [Average]
[info]   (min, avg, max) = (847,216, 851,247, 854,881), stdev = 3,285
[info]   CI (99.9%): [838,597, 863,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3480,001, 3480,001, 3480,001), stdev = 0,001
[info]   CI (99.9%): [3480,001, 3480,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,941 ±(99.9%) 1417,640 MB/sec [Average]
[info]   (min, avg, max) = (673,375, 942,941, 1347,066), stdev = 368,157
[info]   CI (99.9%): [≈ 0, 2360,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3858,838 ±(99.9%) 5850,986 B/op [Average]
[info]   (min, avg, max) = (2741,138, 3858,838, 5526,337), stdev = 1519,482
[info]   CI (99.9%): [≈ 0, 9709,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 0,587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,154, 0,341), stdev = 0,153
[info]   CI (99.9%): [≈ 0, 0,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26,96% complete, ETA 01:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416390,876 ops/s
[info] # Warmup Iteration   2: 449877,987 ops/s
[info] # Warmup Iteration   3: 450947,916 ops/s
[info] # Warmup Iteration   4: 450979,953 ops/s
[info] # Warmup Iteration   5: 450922,568 ops/s
[info] Iteration   1: 451896,757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 451143,503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 448764,681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 450961,388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 451745,886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   450902,443 ±(99.9%) 4844,650 ops/s [Average]
[info]   (min, avg, max) = (448764,681, 450902,443, 451896,757), stdev = 1258,140
[info]   CI (99.9%): [446057,793, 455747,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27,16% complete, ETA 01:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22243,638 ops/s
[info] # Warmup Iteration   2: 30284,626 ops/s
[info] # Warmup Iteration   3: 30614,821 ops/s
[info] # Warmup Iteration   4: 30728,801 ops/s
[info] # Warmup Iteration   5: 30831,464 ops/s
[info] Iteration   1: 30723,964 ops/s
[info]                  ·gc.alloc.rate:                   1616,612 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103001,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,133 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30808,354 ops/s
[info]                  ·gc.alloc.rate:               1621,305 MB/sec
[info]                  ·gc.alloc.rate.norm:          82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68517,809 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 30790,582 ops/s
[info]                  ·gc.alloc.rate:                   1620,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102954,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 30834,855 ops/s
[info]                  ·gc.alloc.rate:                   1622,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68644,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,125 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 30770,780 ops/s
[info]                  ·gc.alloc.rate:                   1619,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103379,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,065 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   30785,707 ±(99.9%) 160,936 ops/s [Average]
[info]   (min, avg, max) = (30723,964, 30785,707, 30834,855), stdev = 41,795
[info]   CI (99.9%): [30624,771, 30946,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1619,984 ±(99.9%) 8,833 MB/sec [Average]
[info]   (min, avg, max) = (1616,612, 1619,984, 1622,643), stdev = 2,294
[info]   CI (99.9%): [1611,151, 1628,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (82824,013, 82824,014, 82824,015), stdev = 0,001
[info]   CI (99.9%): [82824,010, 82824,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1746,309 ±(99.9%) 1417,579 MB/sec [Average]
[info]   (min, avg, max) = (1341,257, 1746,309, 2020,921), stdev = 368,141
[info]   CI (99.9%): [328,730, 3163,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   89299,483 ±(99.9%) 72830,242 B/op [Average]
[info]   (min, avg, max) = (68517,809, 89299,483, 103379,053), stdev = 18913,783
[info]   CI (99.9%): [16469,241, 162129,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,703 ±(99.9%) 4,671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,703, 3,192), stdev = 1,213
[info]   CI (99.9%): [≈ 0, 6,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27,36% complete, ETA 01:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10640,270 ops/s
[info] # Warmup Iteration   2: 11704,668 ops/s
[info] # Warmup Iteration   3: 11654,443 ops/s
[info] # Warmup Iteration   4: 12105,698 ops/s
[info] # Warmup Iteration   5: 12162,314 ops/s
[info] Iteration   1: 12116,246 ops/s
[info]                  ·gc.alloc.rate:                   677,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              88018,780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87727,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372,946 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 12190,339 ops/s
[info]                  ·gc.alloc.rate:                   681,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87195,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,374 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 12164,423 ops/s
[info]                  ·gc.alloc.rate:               680,224 MB/sec
[info]                  ·gc.alloc.rate.norm:          88016,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87122,809 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 12112,157 ops/s
[info]                  ·gc.alloc.rate:                   677,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87496,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,705 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11997,029 ops/s
[info]                  ·gc.alloc.rate:               670,828 MB/sec
[info]                  ·gc.alloc.rate.norm:          88016,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88247,793 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   12116,039 ±(99.9%) 285,832 ops/s [Average]
[info]   (min, avg, max) = (11997,029, 12116,039, 12190,339), stdev = 74,230
[info]   CI (99.9%): [11830,207, 12401,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   677,536 ±(99.9%) 16,069 MB/sec [Average]
[info]   (min, avg, max) = (670,828, 677,536, 681,707), stdev = 4,173
[info]   CI (99.9%): [661,467, 693,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88016,585 ±(99.9%) 4,724 B/op [Average]
[info]   (min, avg, max) = (88016,033, 88016,585, 88018,780), stdev = 1,227
[info]   CI (99.9%): [88011,861, 88021,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   673,989 ±(99.9%) 4,871 MB/sec [Average]
[info]   (min, avg, max) = (672,594, 673,989, 675,348), stdev = 1,265
[info]   CI (99.9%): [669,118, 678,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   87557,949 ±(99.9%) 1753,429 B/op [Average]
[info]   (min, avg, max) = (87122,809, 87557,949, 88247,793), stdev = 455,360
[info]   CI (99.9%): [85804,520, 89311,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,587 ±(99.9%) 4,917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,587, 2,871), stdev = 1,277
[info]   CI (99.9%): [≈ 0, 5,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   76,205 ±(99.9%) 638,815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76,205, 372,946), stdev = 165,898
[info]   CI (99.9%): [≈ 0, 715,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27,57% complete, ETA 01:36:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100036,529 ops/s
[info] # Warmup Iteration   2: 113578,076 ops/s
[info] # Warmup Iteration   3: 113352,552 ops/s
[info] # Warmup Iteration   4: 113915,652 ops/s
[info] # Warmup Iteration   5: 113757,508 ops/s
[info] Iteration   1: 114164,649 ops/s
[info]                  ·gc.alloc.rate:                   1859,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18539,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,287 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 114148,792 ops/s
[info]                  ·gc.alloc.rate:                   1859,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27847,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,861 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 114296,641 ops/s
[info]                  ·gc.alloc.rate:                   1861,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27855,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,860 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 113686,506 ops/s
[info]                  ·gc.alloc.rate:                   1852,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28040,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 113502,599 ops/s
[info]                  ·gc.alloc.rate:                   1848,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18748,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,577 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   113959,837 ±(99.9%) 1326,749 ops/s [Average]
[info]   (min, avg, max) = (113502,599, 113959,837, 114296,641), stdev = 344,553
[info]   CI (99.9%): [112633,088, 115286,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1856,491 ±(99.9%) 21,853 MB/sec [Average]
[info]   (min, avg, max) = (1848,755, 1856,491, 1861,995), stdev = 5,675
[info]   CI (99.9%): [1834,638, 1878,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25640,004, 25640,004, 25640,004), stdev = 0,001
[info]   CI (99.9%): [25640,003, 25640,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1752,998 ±(99.9%) 1422,493 MB/sec [Average]
[info]   (min, avg, max) = (1344,806, 1752,998, 2025,691), stdev = 369,417
[info]   CI (99.9%): [330,506, 3175,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24206,531 ±(99.9%) 19556,665 B/op [Average]
[info]   (min, avg, max) = (18539,608, 24206,531, 28040,588), stdev = 5078,804
[info]   CI (99.9%): [4649,866, 43763,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,575 ±(99.9%) 1,103 B/op [Average]
[info]   (min, avg, max) = (0,287, 0,575, 0,861), stdev = 0,286
[info]   CI (99.9%): [≈ 0, 1,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27,77% complete, ETA 01:35:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131348,466 ops/s
[info] # Warmup Iteration   2: 544402,855 ops/s
[info] # Warmup Iteration   3: 555621,166 ops/s
[info] # Warmup Iteration   4: 511634,492 ops/s
[info] # Warmup Iteration   5: 554291,777 ops/s
[info] Iteration   1: 499659,020 ops/s
[info]                  ·gc.alloc.rate:               518,081 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1611,525 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 554919,117 ops/s
[info]                  ·gc.alloc.rate:                   575,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1911,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,520 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 557435,546 ops/s
[info]                  ·gc.alloc.rate:               577,996 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1903,305 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 553066,067 ops/s
[info]                  ·gc.alloc.rate:                   573,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1914,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 538265,038 ops/s
[info]                  ·gc.alloc.rate:                   558,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1967,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   540668,958 ±(99.9%) 92844,999 ops/s [Average]
[info]   (min, avg, max) = (499659,020, 540668,958, 557435,546), stdev = 24111,551
[info]   CI (99.9%): [447823,958, 633513,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   560,660 ±(99.9%) 96,386 MB/sec [Average]
[info]   (min, avg, max) = (518,081, 560,660, 577,996), stdev = 25,031
[info]   CI (99.9%): [464,274, 657,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   641,100 ±(99.9%) 278,807 MB/sec [Average]
[info]   (min, avg, max) = (511,581, 641,100, 674,082), stdev = 72,405
[info]   CI (99.9%): [362,292, 919,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1861,678 ±(99.9%) 547,133 B/op [Average]
[info]   (min, avg, max) = (1611,525, 1861,678, 1967,240), stdev = 142,089
[info]   CI (99.9%): [1314,544, 2408,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,547 ±(99.9%) 4,530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,547, 2,651), stdev = 1,177
[info]   CI (99.9%): [≈ 0, 5,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,552 ±(99.9%) 12,849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,552, 7,520), stdev = 3,337
[info]   CI (99.9%): [≈ 0, 14,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27,97% complete, ETA 01:35:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239173,212 ops/s
[info] # Warmup Iteration   2: 336284,434 ops/s
[info] # Warmup Iteration   3: 335801,606 ops/s
[info] # Warmup Iteration   4: 335740,356 ops/s
[info] # Warmup Iteration   5: 335800,885 ops/s
[info] Iteration   1: 335309,218 ops/s
[info]                  ·gc.alloc.rate:               465,225 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2401,111 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 337236,500 ops/s
[info]                  ·gc.alloc.rate:      467,959 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 330372,493 ops/s
[info]                  ·gc.alloc.rate:                   458,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3213,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,694 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 306102,567 ops/s
[info]                  ·gc.alloc.rate:                   424,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3467,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 336470,235 ops/s
[info]                  ·gc.alloc.rate:      466,951 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   329098,203 ±(99.9%) 50558,622 ops/s [Average]
[info]   (min, avg, max) = (306102,567, 329098,203, 337236,500), stdev = 13129,914
[info]   CI (99.9%): [278539,580, 379656,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   456,667 ±(99.9%) 70,079 MB/sec [Average]
[info]   (min, avg, max) = (424,803, 456,667, 467,959), stdev = 18,199
[info]   CI (99.9%): [386,588, 526,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,001, 2184,001, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,001, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   372,073 ±(99.9%) 1332,747 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,073, 674,514), stdev = 346,110
[info]   CI (99.9%): [≈ 0, 1704,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1816,397 ±(99.9%) 6562,590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1816,397, 3467,819), stdev = 1704,284
[info]   CI (99.9%): [≈ 0, 8378,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,146), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,160 ±(99.9%) 1,163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,160, 0,694), stdev = 0,302
[info]   CI (99.9%): [≈ 0, 1,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28,17% complete, ETA 01:35:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 706662,434 ops/s
[info] # Warmup Iteration   2: 754442,879 ops/s
[info] # Warmup Iteration   3: 771446,921 ops/s
[info] # Warmup Iteration   4: 770663,753 ops/s
[info] # Warmup Iteration   5: 770171,160 ops/s
[info] Iteration   1: 768847,662 ops/s
[info]                  ·gc.alloc.rate:               500,128 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1047,174 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 771078,212 ops/s
[info]                  ·gc.alloc.rate:                   501,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 768659,744 ops/s
[info]                  ·gc.alloc.rate:                   500,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1381,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,395 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 772585,264 ops/s
[info]                  ·gc.alloc.rate:                   502,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1374,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 773000,773 ops/s
[info]                  ·gc.alloc.rate:      502,884 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   770834,331 ±(99.9%) 7819,367 ops/s [Average]
[info]   (min, avg, max) = (768659,744, 770834,331, 773000,773), stdev = 2030,665
[info]   CI (99.9%): [763014,964, 778653,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   501,489 ±(99.9%) 5,145 MB/sec [Average]
[info]   (min, avg, max) = (500,104, 501,489, 502,884), stdev = 1,336
[info]   CI (99.9%): [496,344, 506,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,000, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,522 ±(99.9%) 1068,735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,522, 674,813), stdev = 277,547
[info]   CI (99.9%): [≈ 0, 1543,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   969,551 ±(99.9%) 2183,018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 969,551, 1381,732), stdev = 566,923
[info]   CI (99.9%): [≈ 0, 3152,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,638 ±(99.9%) 5,350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,638, 3,123), stdev = 1,389
[info]   CI (99.9%): [≈ 0, 5,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,307 ±(99.9%) 10,955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,307, 6,395), stdev = 2,845
[info]   CI (99.9%): [≈ 0, 12,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28,37% complete, ETA 01:34:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59047,295 ops/s
[info] # Warmup Iteration   2: 85894,703 ops/s
[info] # Warmup Iteration   3: 86657,255 ops/s
[info] # Warmup Iteration   4: 86688,280 ops/s
[info] # Warmup Iteration   5: 87212,747 ops/s
[info] Iteration   1: 86711,050 ops/s
[info]                  ·gc.alloc.rate:                   3794,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4075,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73967,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,756 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 86949,589 ops/s
[info]                  ·gc.alloc.rate:                   3805,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61550,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,261 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 86968,776 ops/s
[info]                  ·gc.alloc.rate:                   3807,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73904,670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,377 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 86707,558 ops/s
[info]                  ·gc.alloc.rate:                   3795,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61786,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,267 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 86612,440 ops/s
[info]                  ·gc.alloc.rate:                   3790,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74281,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,135 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   86789,883 ±(99.9%) 614,858 ops/s [Average]
[info]   (min, avg, max) = (86612,440, 86789,883, 86968,776), stdev = 159,677
[info]   CI (99.9%): [86175,024, 87404,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3798,647 ±(99.9%) 28,466 MB/sec [Average]
[info]   (min, avg, max) = (3790,158, 3798,647, 3807,387), stdev = 7,392
[info]   CI (99.9%): [3770,181, 3827,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68880,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68880,005, 68880,005, 68880,005), stdev = 0,001
[info]   CI (99.9%): [68880,004, 68880,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3810,546 ±(99.9%) 1434,467 MB/sec [Average]
[info]   (min, avg, max) = (3400,462, 3810,546, 4087,398), stdev = 372,527
[info]   CI (99.9%): [2376,079, 5245,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69098,246 ±(99.9%) 26123,749 B/op [Average]
[info]   (min, avg, max) = (61550,443, 69098,246, 74281,850), stdev = 6784,255
[info]   CI (99.9%): [42974,497, 95221,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,125), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,359 ±(99.9%) 3,344 B/op [Average]
[info]   (min, avg, max) = (0,377, 1,359, 2,267), stdev = 0,868
[info]   CI (99.9%): [≈ 0, 4,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28,57% complete, ETA 01:34:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199517,624 ops/s
[info] # Warmup Iteration   2: 221850,322 ops/s
[info] # Warmup Iteration   3: 220810,356 ops/s
[info] # Warmup Iteration   4: 223349,979 ops/s
[info] # Warmup Iteration   5: 220598,813 ops/s
[info] Iteration   1: 222506,006 ops/s
[info]                  ·gc.alloc.rate:                   1689,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14261,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,294 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 223064,428 ops/s
[info]                  ·gc.alloc.rate:                   1694,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9494,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,294 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 223007,813 ops/s
[info]                  ·gc.alloc.rate:                   1693,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14262,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,294 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 221782,152 ops/s
[info]                  ·gc.alloc.rate:                   1684,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9572,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 222648,398 ops/s
[info]                  ·gc.alloc.rate:                   1690,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14318,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,294 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   222601,759 ±(99.9%) 1984,148 ops/s [Average]
[info]   (min, avg, max) = (221782,152, 222601,759, 223064,428), stdev = 515,277
[info]   CI (99.9%): [220617,611, 224585,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1690,436 ±(99.9%) 15,025 MB/sec [Average]
[info]   (min, avg, max) = (1684,317, 1690,436, 1694,118), stdev = 3,902
[info]   CI (99.9%): [1675,411, 1705,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   11952,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11952,002, 11952,002, 11952,002), stdev = 0,001
[info]   CI (99.9%): [11952,002, 11952,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1751,409 ±(99.9%) 1420,472 MB/sec [Average]
[info]   (min, avg, max) = (1345,732, 1751,409, 2025,352), stdev = 368,892
[info]   CI (99.9%): [330,937, 3171,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12381,783 ±(99.9%) 10014,581 B/op [Average]
[info]   (min, avg, max) = (9494,139, 12381,783, 14318,454), stdev = 2600,755
[info]   CI (99.9%): [2367,202, 22396,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,001 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,042, 0,042), stdev = 0,001
[info]   CI (99.9%): [0,042, 0,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,294 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (0,294, 0,294, 0,295), stdev = 0,001
[info]   CI (99.9%): [0,292, 0,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28,77% complete, ETA 01:34:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215449,643 ops/s
[info] # Warmup Iteration   2: 266454,859 ops/s
[info] # Warmup Iteration   3: 268885,511 ops/s
[info] # Warmup Iteration   4: 266724,982 ops/s
[info] # Warmup Iteration   5: 268430,548 ops/s
[info] Iteration   1: 268661,825 ops/s
[info]                  ·gc.alloc.rate:                   1600,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11799,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,366 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 269665,436 ops/s
[info]                  ·gc.alloc.rate:               1606,450 MB/sec
[info]                  ·gc.alloc.rate.norm:          9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7841,267 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 269431,580 ops/s
[info]                  ·gc.alloc.rate:                   1605,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11785,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,365 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 270106,526 ops/s
[info]                  ·gc.alloc.rate:                   1609,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7848,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,121 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 269964,060 ops/s
[info]                  ·gc.alloc.rate:                   1608,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7864,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,121 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   269565,885 ±(99.9%) 2191,917 ops/s [Average]
[info]   (min, avg, max) = (268661,825, 269565,885, 270106,526), stdev = 569,234
[info]   CI (99.9%): [267373,968, 271757,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1605,882 ±(99.9%) 13,220 MB/sec [Average]
[info]   (min, avg, max) = (1600,453, 1605,882, 1609,266), stdev = 3,433
[info]   CI (99.9%): [1592,661, 1619,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9376,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9376,002, 9376,002, 9376,002), stdev = 0,001
[info]   CI (99.9%): [9376,001, 9376,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,247 ±(99.9%) 1411,923 MB/sec [Average]
[info]   (min, avg, max) = (1343,494, 1614,247, 2017,597), stdev = 366,672
[info]   CI (99.9%): [202,324, 3026,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9427,909 ±(99.9%) 8313,302 B/op [Average]
[info]   (min, avg, max) = (7841,267, 9427,909, 11799,992), stdev = 2158,938
[info]   CI (99.9%): [1114,608, 17741,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,195 ±(99.9%) 0,629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,195, 0,366), stdev = 0,163
[info]   CI (99.9%): [≈ 0, 0,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28,97% complete, ETA 01:34:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292454,266 ops/s
[info] # Warmup Iteration   2: 1111965,064 ops/s
[info] # Warmup Iteration   3: 1080598,454 ops/s
[info] # Warmup Iteration   4: 1081483,207 ops/s
[info] # Warmup Iteration   5: 1069018,263 ops/s
[info] Iteration   1: 1083589,111 ops/s
[info]                  ·gc.alloc.rate:      589,363 MB/sec
[info]                  ·gc.alloc.rate.norm: 856,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1081327,825 ops/s
[info]                  ·gc.alloc.rate:                   588,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,861 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1083247,088 ops/s
[info]                  ·gc.alloc.rate:               589,161 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 979,427 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1051696,517 ops/s
[info]                  ·gc.alloc.rate:               572,053 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1006,846 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1083357,822 ops/s
[info]                  ·gc.alloc.rate:                   589,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1076643,673 ±(99.9%) 53813,554 ops/s [Average]
[info]   (min, avg, max) = (1051696,517, 1076643,673, 1083589,111), stdev = 13975,209
[info]   CI (99.9%): [1022830,118, 1130457,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   585,565 ±(99.9%) 29,149 MB/sec [Average]
[info]   (min, avg, max) = (572,053, 585,565, 589,363), stdev = 7,570
[info]   CI (99.9%): [556,415, 614,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,748 ±(99.9%) 1159,699 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,748, 674,112), stdev = 301,170
[info]   CI (99.9%): [≈ 0, 1698,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   788,961 ±(99.9%) 1698,925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 788,961, 1006,846), stdev = 441,205
[info]   CI (99.9%): [≈ 0, 2487,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,539 ±(99.9%) 4,550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,539, 2,652), stdev = 1,182
[info]   CI (99.9%): [≈ 0, 5,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,784 ±(99.9%) 6,623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,784, 3,861), stdev = 1,720
[info]   CI (99.9%): [≈ 0, 7,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,18% complete, ETA 01:33:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 677042,848 ops/s
[info] # Warmup Iteration   2: 949293,851 ops/s
[info] # Warmup Iteration   3: 951899,785 ops/s
[info] # Warmup Iteration   4: 948415,050 ops/s
[info] # Warmup Iteration   5: 945535,305 ops/s
[info] Iteration   1: 944901,296 ops/s
[info]                  ·gc.alloc.rate:               744,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1123,322 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 941399,562 ops/s
[info]                  ·gc.alloc.rate:                   741,680 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,139 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 859336,948 ops/s
[info]                  ·gc.alloc.rate:               676,973 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1237,085 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 948252,867 ops/s
[info]                  ·gc.alloc.rate:                   747,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1122,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 950207,478 ops/s
[info]                  ·gc.alloc.rate:               748,533 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1119,802 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   928819,630 ±(99.9%) 150123,373 ops/s [Average]
[info]   (min, avg, max) = (859336,948, 928819,630, 950207,478), stdev = 38986,563
[info]   CI (99.9%): [778696,257, 1078943,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   731,748 ±(99.9%) 118,338 MB/sec [Average]
[info]   (min, avg, max) = (676,973, 731,748, 748,533), stdev = 30,732
[info]   CI (99.9%): [613,410, 850,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1240,000, 1240,000, 1240,000), stdev = 0,001
[info]   CI (99.9%): [1240,000, 1240,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,445 ±(99.9%) 2,546 MB/sec [Average]
[info]   (min, avg, max) = (674,409, 675,445, 676,068), stdev = 0,661
[info]   CI (99.9%): [672,898, 677,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1146,298 ±(99.9%) 195,878 B/op [Average]
[info]   (min, avg, max) = (1119,802, 1146,298, 1237,085), stdev = 50,869
[info]   CI (99.9%): [950,420, 1342,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,042 ±(99.9%) 0,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,139), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,38% complete, ETA 01:33:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1146331,513 ops/s
[info] # Warmup Iteration   2: 1254768,923 ops/s
[info] # Warmup Iteration   3: 1254927,159 ops/s
[info] # Warmup Iteration   4: 1260163,918 ops/s
[info] # Warmup Iteration   5: 1259621,572 ops/s
[info] Iteration   1: 1261591,073 ops/s
[info]                  ·gc.alloc.rate:                   686,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,922 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1262652,299 ops/s
[info]                  ·gc.alloc.rate:                   686,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1260356,862 ops/s
[info]                  ·gc.alloc.rate:               685,546 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840,190 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1253740,677 ops/s
[info]                  ·gc.alloc.rate:                   681,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     844,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1256164,084 ops/s
[info]                  ·gc.alloc.rate:                   683,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     842,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1258900,999 ±(99.9%) 14605,558 ops/s [Average]
[info]   (min, avg, max) = (1253740,677, 1258900,999, 1262652,299), stdev = 3793,017
[info]   CI (99.9%): [1244295,441, 1273506,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   684,663 ±(99.9%) 7,858 MB/sec [Average]
[info]   (min, avg, max) = (681,919, 684,663, 686,714), stdev = 2,041
[info]   CI (99.9%): [676,805, 692,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,430 ±(99.9%) 4,777 MB/sec [Average]
[info]   (min, avg, max) = (672,013, 673,430, 674,805), stdev = 1,241
[info]   CI (99.9%): [668,653, 678,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   841,959 ±(99.9%) 6,204 B/op [Average]
[info]   (min, avg, max) = (840,190, 841,959, 844,525), stdev = 1,611
[info]   CI (99.9%): [835,755, 848,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,658 ±(99.9%) 5,350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,658, 3,143), stdev = 1,390
[info]   CI (99.9%): [≈ 0, 6,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,821 ±(99.9%) 6,676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,821, 3,922), stdev = 1,734
[info]   CI (99.9%): [≈ 0, 7,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29,58% complete, ETA 01:33:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 979931,026 ops/s
[info] # Warmup Iteration   2: 1179218,374 ops/s
[info] # Warmup Iteration   3: 1177702,380 ops/s
[info] # Warmup Iteration   4: 1177488,325 ops/s
[info] # Warmup Iteration   5: 1177613,903 ops/s
[info] Iteration   1: 1180570,716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1177939,307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1180863,840 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1177589,162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1177943,404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1178981,286 ±(99.9%) 6140,306 ops/s [Average]
[info]   (min, avg, max) = (1177589,162, 1178981,286, 1180863,840), stdev = 1594,618
[info]   CI (99.9%): [1172840,980, 1185121,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29,78% complete, ETA 01:33:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27380,860 ops/s
[info] # Warmup Iteration   2: 37882,642 ops/s
[info] # Warmup Iteration   3: 37938,250 ops/s
[info] # Warmup Iteration   4: 37849,484 ops/s
[info] # Warmup Iteration   5: 37844,083 ops/s
[info] Iteration   1: 38090,627 ops/s
[info]                  ·gc.alloc.rate:                   1989,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83115,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,580 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37801,510 ops/s
[info]                  ·gc.alloc.rate:                   1974,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83931,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,600 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37899,652 ops/s
[info]                  ·gc.alloc.rate:                   1979,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83850,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38188,611 ops/s
[info]                  ·gc.alloc.rate:                   1994,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83414,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 38169,679 ops/s
[info]                  ·gc.alloc.rate:                   1993,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83565,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,858 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   38030,016 ±(99.9%) 660,084 ops/s [Average]
[info]   (min, avg, max) = (37801,510, 38030,016, 38188,611), stdev = 171,422
[info]   CI (99.9%): [37369,932, 38690,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1986,238 ±(99.9%) 34,563 MB/sec [Average]
[info]   (min, avg, max) = (1974,270, 1986,238, 1994,730), stdev = 8,976
[info]   CI (99.9%): [1951,674, 2020,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82200,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82200,011, 82200,011, 82200,012), stdev = 0,001
[info]   CI (99.9%): [82200,009, 82200,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2019,449 ±(99.9%) 23,376 MB/sec [Average]
[info]   (min, avg, max) = (2011,552, 2019,449, 2026,477), stdev = 6,071
[info]   CI (99.9%): [1996,074, 2042,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83575,374 ±(99.9%) 1276,328 B/op [Average]
[info]   (min, avg, max) = (83115,473, 83575,374, 83931,006), stdev = 331,458
[info]   CI (99.9%): [82299,046, 84851,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,895 ±(99.9%) 3,635 B/op [Average]
[info]   (min, avg, max) = (0,858, 1,895, 2,600), stdev = 0,944
[info]   CI (99.9%): [≈ 0, 5,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29,98% complete, ETA 01:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138202,423 ops/s
[info] # Warmup Iteration   2: 145614,156 ops/s
[info] # Warmup Iteration   3: 146522,037 ops/s
[info] # Warmup Iteration   4: 146947,176 ops/s
[info] # Warmup Iteration   5: 146188,005 ops/s
[info] Iteration   1: 146671,888 ops/s
[info]                  ·gc.alloc.rate:                   1276,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14423,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 146136,789 ops/s
[info]                  ·gc.alloc.rate:                   1272,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14477,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,897 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 145734,425 ops/s
[info]                  ·gc.alloc.rate:                   1268,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14516,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,674 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 147226,339 ops/s
[info]                  ·gc.alloc.rate:                   1282,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14383,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,445 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 146767,345 ops/s
[info]                  ·gc.alloc.rate:                   1277,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14442,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   146507,357 ±(99.9%) 2233,990 ops/s [Average]
[info]   (min, avg, max) = (145734,425, 146507,357, 147226,339), stdev = 580,160
[info]   CI (99.9%): [144273,367, 148741,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1275,682 ±(99.9%) 19,663 MB/sec [Average]
[info]   (min, avg, max) = (1268,805, 1275,682, 1282,055), stdev = 5,106
[info]   CI (99.9%): [1256,019, 1295,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   13704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13704,003, 13704,003, 13704,003), stdev = 0,001
[info]   CI (99.9%): [13704,002, 13704,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344,989 ±(99.9%) 4,782 MB/sec [Average]
[info]   (min, avg, max) = (1343,990, 1344,989, 1346,868), stdev = 1,242
[info]   CI (99.9%): [1340,207, 1349,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14448,688 ±(99.9%) 195,794 B/op [Average]
[info]   (min, avg, max) = (14383,466, 14448,688, 14516,299), stdev = 50,847
[info]   CI (99.9%): [14252,895, 14644,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,537 ±(99.9%) 0,988 B/op [Average]
[info]   (min, avg, max) = (0,223, 0,537, 0,897), stdev = 0,257
[info]   CI (99.9%): [≈ 0, 1,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30,18% complete, ETA 01:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116237,281 ops/s
[info] # Warmup Iteration   2: 150176,901 ops/s
[info] # Warmup Iteration   3: 151353,055 ops/s
[info] # Warmup Iteration   4: 148019,414 ops/s
[info] # Warmup Iteration   5: 148037,139 ops/s
[info] Iteration   1: 150416,863 ops/s
[info]                  ·gc.alloc.rate:                   1856,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21082,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 151482,784 ops/s
[info]                  ·gc.alloc.rate:                   1869,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20962,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,433 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 151710,742 ops/s
[info]                  ·gc.alloc.rate:                   1872,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20969,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 151390,405 ops/s
[info]                  ·gc.alloc.rate:                   1868,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14029,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 150872,873 ops/s
[info]                  ·gc.alloc.rate:                   1861,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21140,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,869 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   151174,733 ±(99.9%) 2013,965 ops/s [Average]
[info]   (min, avg, max) = (150416,863, 151174,733, 151710,742), stdev = 523,020
[info]   CI (99.9%): [149160,768, 153188,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1865,640 ±(99.9%) 25,295 MB/sec [Average]
[info]   (min, avg, max) = (1856,211, 1865,640, 1872,347), stdev = 6,569
[info]   CI (99.9%): [1840,345, 1890,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19424,003, 19424,003, 19424,003), stdev = 0,001
[info]   CI (99.9%): [19424,002, 19424,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1885,877 ±(99.9%) 1154,543 MB/sec [Average]
[info]   (min, avg, max) = (1349,578, 1885,877, 2026,200), stdev = 299,831
[info]   CI (99.9%): [731,334, 3040,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19636,980 ±(99.9%) 12073,082 B/op [Average]
[info]   (min, avg, max) = (14029,950, 19636,980, 21140,645), stdev = 3135,341
[info]   CI (99.9%): [7563,898, 31710,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,650 ±(99.9%) 1,178 B/op [Average]
[info]   (min, avg, max) = (0,218, 0,650, 0,869), stdev = 0,306
[info]   CI (99.9%): [≈ 0, 1,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,38% complete, ETA 01:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148093,863 ops/s
[info] # Warmup Iteration   2: 210830,736 ops/s
[info] # Warmup Iteration   3: 211278,664 ops/s
[info] # Warmup Iteration   4: 211590,755 ops/s
[info] # Warmup Iteration   5: 211526,274 ops/s
[info] Iteration   1: 200993,758 ops/s
[info]                  ·gc.alloc.rate:                   1063,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5291,571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,163 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 211754,136 ops/s
[info]                  ·gc.alloc.rate:                   1120,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10050,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,309 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 211207,921 ops/s
[info]                  ·gc.alloc.rate:                   1117,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10083,273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 201301,450 ops/s
[info]                  ·gc.alloc.rate:               1065,190 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5291,130 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 210866,734 ops/s
[info]                  ·gc.alloc.rate:                   1115,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10112,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,621 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   207224,800 ±(99.9%) 21401,041 ops/s [Average]
[info]   (min, avg, max) = (200993,758, 207224,800, 211754,136), stdev = 5557,782
[info]   CI (99.9%): [185823,759, 228625,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1096,545 ±(99.9%) 112,875 MB/sec [Average]
[info]   (min, avg, max) = (1063,805, 1096,545, 1120,572), stdev = 29,313
[info]   CI (99.9%): [983,670, 1209,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,566 ±(99.9%) 1427,918 MB/sec [Average]
[info]   (min, avg, max) = (675,936, 1082,566, 1354,674), stdev = 370,826
[info]   CI (99.9%): [≈ 0, 2510,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8165,852 ±(99.9%) 10104,631 B/op [Average]
[info]   (min, avg, max) = (5291,130, 8165,852, 10112,627), stdev = 2624,141
[info]   CI (99.9%): [≈ 0, 18270,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,281 ±(99.9%) 0,883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,281, 0,621), stdev = 0,229
[info]   CI (99.9%): [≈ 0, 1,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,58% complete, ETA 01:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234778,104 ops/s
[info] # Warmup Iteration   2: 256636,533 ops/s
[info] # Warmup Iteration   3: 254711,072 ops/s
[info] # Warmup Iteration   4: 257327,575 ops/s
[info] # Warmup Iteration   5: 257558,392 ops/s
[info] Iteration   1: 257412,056 ops/s
[info]                  ·gc.alloc.rate:               1172,398 MB/sec
[info]                  ·gc.alloc.rate.norm:          7168,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4109,683 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 257579,313 ops/s
[info]                  ·gc.alloc.rate:                   1173,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              7168,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8213,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,382 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 257146,300 ops/s
[info]                  ·gc.alloc.rate:                   1171,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              7168,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8226,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,255 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 256937,164 ops/s
[info]                  ·gc.alloc.rate:               1170,266 MB/sec
[info]                  ·gc.alloc.rate.norm:          7168,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8237,678 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 254736,210 ops/s
[info]                  ·gc.alloc.rate:               1160,068 MB/sec
[info]                  ·gc.alloc.rate.norm:          7168,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4156,606 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   256762,209 ±(99.9%) 4462,749 ops/s [Average]
[info]   (min, avg, max) = (254736,210, 256762,209, 257579,313), stdev = 1158,962
[info]   CI (99.9%): [252299,460, 261224,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1169,394 ±(99.9%) 20,525 MB/sec [Average]
[info]   (min, avg, max) = (1160,068, 1169,394, 1173,129), stdev = 5,330
[info]   CI (99.9%): [1148,869, 1189,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7168,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7168,002, 7168,002, 7168,002), stdev = 0,001
[info]   CI (99.9%): [7168,001, 7168,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,636 ±(99.9%) 1417,284 MB/sec [Average]
[info]   (min, avg, max) = (672,180, 1075,636, 1344,904), stdev = 368,064
[info]   CI (99.9%): [≈ 0, 2492,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6588,925 ±(99.9%) 8632,711 B/op [Average]
[info]   (min, avg, max) = (4109,683, 6588,925, 8237,678), stdev = 2241,888
[info]   CI (99.9%): [≈ 0, 15221,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,127 ±(99.9%) 0,693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,127, 0,382), stdev = 0,180
[info]   CI (99.9%): [≈ 0, 0,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30,78% complete, ETA 01:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45270,639 ops/s
[info] # Warmup Iteration   2: 78731,511 ops/s
[info] # Warmup Iteration   3: 78721,559 ops/s
[info] # Warmup Iteration   4: 78886,778 ops/s
[info] # Warmup Iteration   5: 78672,052 ops/s
[info] Iteration   1: 78904,681 ops/s
[info]                  ·gc.alloc.rate:                   3330,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67743,922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,415 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 78225,424 ops/s
[info]                  ·gc.alloc.rate:                   3300,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68404,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,256 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 79224,385 ops/s
[info]                  ·gc.alloc.rate:                   3342,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67605,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,241 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 78534,981 ops/s
[info]                  ·gc.alloc.rate:                   3313,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68211,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,834 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 78313,538 ops/s
[info]                  ·gc.alloc.rate:                   3304,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68448,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,673 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   78640,602 ±(99.9%) 1612,036 ops/s [Average]
[info]   (min, avg, max) = (78225,424, 78640,602, 79224,385), stdev = 418,641
[info]   CI (99.9%): [77028,565, 80252,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3318,398 ±(99.9%) 67,696 MB/sec [Average]
[info]   (min, avg, max) = (3300,967, 3318,398, 3342,485), stdev = 17,580
[info]   CI (99.9%): [3250,702, 3386,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,005, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,005, 66408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3402,008 ±(99.9%) 13,206 MB/sec [Average]
[info]   (min, avg, max) = (3397,138, 3402,008, 3405,996), stdev = 3,430
[info]   CI (99.9%): [3388,802, 3415,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68082,838 ±(99.9%) 1487,620 B/op [Average]
[info]   (min, avg, max) = (67605,244, 68082,838, 68448,544), stdev = 386,330
[info]   CI (99.9%): [66595,219, 69570,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,084 ±(99.9%) 1,838 B/op [Average]
[info]   (min, avg, max) = (0,415, 1,084, 1,673), stdev = 0,477
[info]   CI (99.9%): [≈ 0, 2,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30,99% complete, ETA 01:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134416,479 ops/s
[info] # Warmup Iteration   2: 159986,218 ops/s
[info] # Warmup Iteration   3: 160377,195 ops/s
[info] # Warmup Iteration   4: 159027,383 ops/s
[info] # Warmup Iteration   5: 159060,489 ops/s
[info] Iteration   1: 160484,227 ops/s
[info]                  ·gc.alloc.rate:                   1810,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19781,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 159837,511 ops/s
[info]                  ·gc.alloc.rate:               1802,900 MB/sec
[info]                  ·gc.alloc.rate.norm:          17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13252,814 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 159881,444 ops/s
[info]                  ·gc.alloc.rate:                   1803,360 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19898,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,410 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 160027,100 ops/s
[info]                  ·gc.alloc.rate:               1804,952 MB/sec
[info]                  ·gc.alloc.rate.norm:          17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19916,347 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 159378,245 ops/s
[info]                  ·gc.alloc.rate:                   1797,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13345,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,206 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   159921,705 ±(99.9%) 1530,113 ops/s [Average]
[info]   (min, avg, max) = (159378,245, 159921,705, 160484,227), stdev = 397,365
[info]   CI (99.9%): [158391,592, 161451,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1803,710 ±(99.9%) 17,883 MB/sec [Average]
[info]   (min, avg, max) = (1797,190, 1803,710, 1810,148), stdev = 4,644
[info]   CI (99.9%): [1785,828, 1821,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17752,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17752,003, 17752,003, 17752,003), stdev = 0,001
[info]   CI (99.9%): [17752,002, 17752,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1752,111 ±(99.9%) 1418,696 MB/sec [Average]
[info]   (min, avg, max) = (1345,961, 1752,111, 2025,014), stdev = 368,431
[info]   CI (99.9%): [333,415, 3170,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17238,918 ±(99.9%) 13850,455 B/op [Average]
[info]   (min, avg, max) = (13252,814, 17238,918, 19916,347), stdev = 3596,919
[info]   CI (99.9%): [3388,463, 31089,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,164 ±(99.9%) 0,660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,164, 0,410), stdev = 0,171
[info]   CI (99.9%): [≈ 0, 0,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31,19% complete, ETA 01:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169386,408 ops/s
[info] # Warmup Iteration   2: 207942,308 ops/s
[info] # Warmup Iteration   3: 206000,595 ops/s
[info] # Warmup Iteration   4: 207491,910 ops/s
[info] # Warmup Iteration   5: 197256,602 ops/s
[info] Iteration   1: 199881,638 ops/s
[info]                  ·gc.alloc.rate:                   694,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5313,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,731 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 208000,930 ops/s
[info]                  ·gc.alloc.rate:                   723,117 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5106,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,315 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 207717,100 ops/s
[info]                  ·gc.alloc.rate:               722,145 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5092,355 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 187687,767 ops/s
[info]                  ·gc.alloc.rate:               652,763 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5635,854 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 208074,200 ops/s
[info]                  ·gc.alloc.rate:                   723,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5079,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   202272,327 ±(99.9%) 34146,602 ops/s [Average]
[info]   (min, avg, max) = (187687,767, 202272,327, 208074,200), stdev = 8867,764
[info]   CI (99.9%): [168125,725, 236418,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   703,279 ±(99.9%) 118,335 MB/sec [Average]
[info]   (min, avg, max) = (652,763, 703,279, 723,444), stdev = 30,731
[info]   CI (99.9%): [584,944, 821,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,071 ±(99.9%) 6,000 MB/sec [Average]
[info]   (min, avg, max) = (671,508, 673,071, 674,751), stdev = 1,558
[info]   CI (99.9%): [667,072, 679,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5245,293 ±(99.9%) 918,364 B/op [Average]
[info]   (min, avg, max) = (5079,168, 5245,293, 5635,854), stdev = 238,496
[info]   CI (99.9%): [4326,929, 6163,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,700 ±(99.9%) 5,802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,700, 3,395), stdev = 1,507
[info]   CI (99.9%): [≈ 0, 6,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,504 ±(99.9%) 45,700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,504, 26,731), stdev = 11,868
[info]   CI (99.9%): [≈ 0, 51,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,39% complete, ETA 01:30:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 408986,463 ops/s
[info] # Warmup Iteration   2: 595362,748 ops/s
[info] # Warmup Iteration   3: 595251,342 ops/s
[info] # Warmup Iteration   4: 594104,740 ops/s
[info] # Warmup Iteration   5: 595605,715 ops/s
[info] Iteration   1: 596157,477 ops/s
[info]                  ·gc.alloc.rate:                   602,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1780,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,330 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 596641,152 ops/s
[info]                  ·gc.alloc.rate:                   603,530 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1779,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 596280,067 ops/s
[info]                  ·gc.alloc.rate:               603,101 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1781,842 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 595097,329 ops/s
[info]                  ·gc.alloc.rate:                   601,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1785,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 592147,784 ops/s
[info]                  ·gc.alloc.rate:      598,901 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   595264,762 ±(99.9%) 7065,125 ops/s [Average]
[info]   (min, avg, max) = (592147,784, 595264,762, 596641,152), stdev = 1834,790
[info]   CI (99.9%): [588199,637, 602329,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   602,093 ±(99.9%) 7,219 MB/sec [Average]
[info]   (min, avg, max) = (598,901, 602,093, 603,530), stdev = 1,875
[info]   CI (99.9%): [594,875, 609,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,788 ±(99.9%) 1161,934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,788, 675,085), stdev = 301,751
[info]   CI (99.9%): [≈ 0, 1701,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1425,370 ±(99.9%) 3068,230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1425,370, 1785,381), stdev = 796,810
[info]   CI (99.9%): [≈ 0, 4493,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,121 ±(99.9%) 0,527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,121, 0,330), stdev = 0,137
[info]   CI (99.9%): [≈ 0, 0,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,59% complete, ETA 01:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552937,269 ops/s
[info] # Warmup Iteration   2: 584035,957 ops/s
[info] # Warmup Iteration   3: 590520,473 ops/s
[info] # Warmup Iteration   4: 589875,146 ops/s
[info] # Warmup Iteration   5: 590472,309 ops/s
[info] Iteration   1: 579150,499 ops/s
[info]                  ·gc.alloc.rate:               444,496 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1390,180 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 519332,039 ops/s
[info]                  ·gc.alloc.rate:                   398,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1550,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 594066,398 ops/s
[info]                  ·gc.alloc.rate:      455,952 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588930,879 ops/s
[info]                  ·gc.alloc.rate:                   452,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1803,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,359 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 591090,157 ops/s
[info]                  ·gc.alloc.rate:                   453,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1796,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   574513,995 ±(99.9%) 120720,260 ops/s [Average]
[info]   (min, avg, max) = (519332,039, 574513,995, 594066,398), stdev = 31350,668
[info]   CI (99.9%): [453793,735, 695234,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   440,941 ±(99.9%) 92,599 MB/sec [Average]
[info]   (min, avg, max) = (398,613, 440,941, 455,952), stdev = 24,048
[info]   CI (99.9%): [348,342, 533,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,520 ±(99.9%) 1068,657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,520, 674,783), stdev = 277,527
[info]   CI (99.9%): [≈ 0, 1543,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1308,121 ±(99.9%) 2894,736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1308,121, 1803,218), stdev = 751,754
[info]   CI (99.9%): [≈ 0, 4202,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 5,356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 3,128), stdev = 1,391
[info]   CI (99.9%): [≈ 0, 5,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,713 ±(99.9%) 14,310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,713, 8,359), stdev = 3,716
[info]   CI (99.9%): [≈ 0, 16,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31,79% complete, ETA 01:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567386,178 ops/s
[info] # Warmup Iteration   2: 622739,543 ops/s
[info] # Warmup Iteration   3: 622813,950 ops/s
[info] # Warmup Iteration   4: 622152,673 ops/s
[info] # Warmup Iteration   5: 621881,143 ops/s
[info] Iteration   1: 623625,381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 622102,071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 623572,684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 622248,636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 622623,101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   622834,374 ±(99.9%) 2786,592 ops/s [Average]
[info]   (min, avg, max) = (622102,071, 622834,374, 623625,381), stdev = 723,669
[info]   CI (99.9%): [620047,783, 625620,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31,99% complete, ETA 01:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208103,219 ops/s
[info] # Warmup Iteration   2: 318936,931 ops/s
[info] # Warmup Iteration   3: 316506,796 ops/s
[info] # Warmup Iteration   4: 316744,479 ops/s
[info] # Warmup Iteration   5: 317848,779 ops/s
[info] Iteration   1: 316870,981 ops/s
[info]                  ·gc.alloc.rate:                   872,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3353,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,414 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 318163,394 ops/s
[info]                  ·gc.alloc.rate:               876,477 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3339,445 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 317311,030 ops/s
[info]                  ·gc.alloc.rate:                   874,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6703,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 317419,896 ops/s
[info]                  ·gc.alloc.rate:               874,531 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3352,162 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 298868,757 ops/s
[info]                  ·gc.alloc.rate:                   823,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3560,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   313726,812 ±(99.9%) 32033,120 ops/s [Average]
[info]   (min, avg, max) = (298868,757, 313726,812, 318163,394), stdev = 8318,900
[info]   CI (99.9%): [281693,691, 345759,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   864,280 ±(99.9%) 88,382 MB/sec [Average]
[info]   (min, avg, max) = (823,283, 864,280, 876,477), stdev = 22,953
[info]   CI (99.9%): [775,898, 952,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,001), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   810,715 ±(99.9%) 1163,838 MB/sec [Average]
[info]   (min, avg, max) = (675,034, 810,715, 1351,387), stdev = 302,245
[info]   CI (99.9%): [≈ 0, 1974,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4061,634 ±(99.9%) 5697,402 B/op [Average]
[info]   (min, avg, max) = (3339,445, 4061,634, 6703,301), stdev = 1479,597
[info]   CI (99.9%): [≈ 0, 9759,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,188 ±(99.9%) 0,714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,188, 0,414), stdev = 0,185
[info]   CI (99.9%): [≈ 0, 0,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32,19% complete, ETA 01:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38796,738 ops/s
[info] # Warmup Iteration   2: 41414,290 ops/s
[info] # Warmup Iteration   3: 40795,129 ops/s
[info] # Warmup Iteration   4: 41339,263 ops/s
[info] # Warmup Iteration   5: 41185,714 ops/s
[info] Iteration   1: 41133,370 ops/s
[info]                  ·gc.alloc.rate:               190,668 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19573,351 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 41318,505 ops/s
[info]                  ·gc.alloc.rate:      191,529 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41087,823 ops/s
[info]                  ·gc.alloc.rate:               190,520 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19594,306 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 41318,520 ops/s
[info]                  ·gc.alloc.rate:      191,552 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41117,764 ops/s
[info]                  ·gc.alloc.rate:      190,581 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   41195,196 ±(99.9%) 438,032 ops/s [Average]
[info]   (min, avg, max) = (41087,823, 41195,196, 41318,520), stdev = 113,756
[info]   CI (99.9%): [40757,164, 41633,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   190,970 ±(99.9%) 2,016 MB/sec [Average]
[info]   (min, avg, max) = (190,520, 190,970, 191,552), stdev = 0,523
[info]   CI (99.9%): [188,954, 192,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (7296,010, 7296,010, 7296,011), stdev = 0,001
[info]   CI (99.9%): [7296,009, 7296,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,636 ±(99.9%) 1078,986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,636, 511,665), stdev = 280,209
[info]   CI (99.9%): [≈ 0, 1283,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7833,531 ±(99.9%) 41303,959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7833,531, 19594,306), stdev = 10726,507
[info]   CI (99.9%): [≈ 0, 49137,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32,39% complete, ETA 01:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9202,960 ops/s
[info] # Warmup Iteration   2: 12021,010 ops/s
[info] # Warmup Iteration   3: 11748,060 ops/s
[info] # Warmup Iteration   4: 12084,723 ops/s
[info] # Warmup Iteration   5: 11749,895 ops/s
[info] Iteration   1: 12064,772 ops/s
[info]                  ·gc.alloc.rate:                   1542,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              201273,903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175341,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,431 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12185,708 ops/s
[info]                  ·gc.alloc.rate:               1558,354 MB/sec
[info]                  ·gc.alloc.rate.norm:          201280,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 260466,347 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 12284,704 ops/s
[info]                  ·gc.alloc.rate:               1571,168 MB/sec
[info]                  ·gc.alloc.rate.norm:          201280,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172387,362 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 12271,442 ops/s
[info]                  ·gc.alloc.rate:                   1569,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172740,808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,339 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12251,707 ops/s
[info]                  ·gc.alloc.rate:               1566,675 MB/sec
[info]                  ·gc.alloc.rate.norm:          201278,737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259833,607 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12211,666 ±(99.9%) 348,492 ops/s [Average]
[info]   (min, avg, max) = (12064,772, 12211,666, 12284,704), stdev = 90,502
[info]   CI (99.9%): [11863,174, 12560,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1561,614 ±(99.9%) 45,073 MB/sec [Average]
[info]   (min, avg, max) = (1542,594, 1561,614, 1571,168), stdev = 11,705
[info]   CI (99.9%): [1516,541, 1606,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201278,550 ±(99.9%) 10,235 B/op [Average]
[info]   (min, avg, max) = (201273,903, 201278,550, 201280,044), stdev = 2,658
[info]   CI (99.9%): [201268,315, 201288,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,057 ±(99.9%) 1421,755 MB/sec [Average]
[info]   (min, avg, max) = (1343,847, 1615,057, 2022,443), stdev = 369,225
[info]   CI (99.9%): [193,302, 3036,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   208154,010 ±(99.9%) 182827,972 B/op [Average]
[info]   (min, avg, max) = (172387,362, 208154,010, 260466,347), stdev = 47479,844
[info]   CI (99.9%): [25326,038, 390981,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,154 ±(99.9%) 11,358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,154, 5,431), stdev = 2,950
[info]   CI (99.9%): [≈ 0, 13,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,60% complete, ETA 01:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7652,583 ops/s
[info] # Warmup Iteration   2: 12408,963 ops/s
[info] # Warmup Iteration   3: 12214,331 ops/s
[info] # Warmup Iteration   4: 12435,695 ops/s
[info] # Warmup Iteration   5: 12429,934 ops/s
[info] Iteration   1: 12438,018 ops/s
[info]                  ·gc.alloc.rate:               1473,999 MB/sec
[info]                  ·gc.alloc.rate.norm:          186526,608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171180,601 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 12501,018 ops/s
[info]                  ·gc.alloc.rate:               1481,623 MB/sec
[info]                  ·gc.alloc.rate.norm:          186536,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170485,845 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 12464,145 ops/s
[info]                  ·gc.alloc.rate:                   1477,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              186536,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171062,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,256 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12435,161 ops/s
[info]                  ·gc.alloc.rate:                   1473,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              186536,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257486,566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,634 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12452,032 ops/s
[info]                  ·gc.alloc.rate:               1475,543 MB/sec
[info]                  ·gc.alloc.rate.norm:          186512,821 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171521,644 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12458,075 ±(99.9%) 102,690 ops/s [Average]
[info]   (min, avg, max) = (12435,161, 12458,075, 12501,018), stdev = 26,668
[info]   CI (99.9%): [12355,385, 12560,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1476,456 ±(99.9%) 12,285 MB/sec [Average]
[info]   (min, avg, max) = (1473,894, 1476,456, 1481,623), stdev = 3,190
[info]   CI (99.9%): [1464,172, 1488,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186529,508 ±(99.9%) 39,209 B/op [Average]
[info]   (min, avg, max) = (186512,821, 186529,508, 186536,044), stdev = 10,182
[info]   CI (99.9%): [186490,298, 186568,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,599 ±(99.9%) 1170,806 MB/sec [Average]
[info]   (min, avg, max) = (1352,730, 1490,599, 2034,502), stdev = 304,055
[info]   CI (99.9%): [319,793, 2661,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   188347,372 ±(99.9%) 148834,267 B/op [Average]
[info]   (min, avg, max) = (170485,845, 188347,372, 257486,566), stdev = 38651,786
[info]   CI (99.9%): [39513,106, 337181,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,578 ±(99.9%) 9,054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,578, 5,256), stdev = 2,351
[info]   CI (99.9%): [≈ 0, 10,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,80% complete, ETA 01:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202277,846 ops/s
[info] # Warmup Iteration   2: 219698,135 ops/s
[info] # Warmup Iteration   3: 220502,542 ops/s
[info] # Warmup Iteration   4: 221710,009 ops/s
[info] # Warmup Iteration   5: 220028,398 ops/s
[info] Iteration   1: 222284,976 ops/s
[info]                  ·gc.alloc.rate:               1446,173 MB/sec
[info]                  ·gc.alloc.rate.norm:          10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9526,764 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 221831,038 ops/s
[info]                  ·gc.alloc.rate:                   1443,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9555,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,443 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 222533,911 ops/s
[info]                  ·gc.alloc.rate:                   1447,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9530,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,442 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 222238,610 ops/s
[info]                  ·gc.alloc.rate:                   1446,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9547,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 221774,679 ops/s
[info]                  ·gc.alloc.rate:                   1443,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9576,900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   222132,643 ±(99.9%) 1239,635 ops/s [Average]
[info]   (min, avg, max) = (221774,679, 222132,643, 222533,911), stdev = 321,929
[info]   CI (99.9%): [220893,008, 223372,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1445,251 ±(99.9%) 7,811 MB/sec [Average]
[info]   (min, avg, max) = (1443,025, 1445,251, 1447,722), stdev = 2,029
[info]   CI (99.9%): [1437,439, 1453,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10240,002, 10240,002, 10240,002), stdev = 0,001
[info]   CI (99.9%): [10240,002, 10240,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,486 ±(99.9%) 5,950 MB/sec [Average]
[info]   (min, avg, max) = (1345,444, 1347,486, 1349,581), stdev = 1,545
[info]   CI (99.9%): [1341,536, 1353,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9547,332 ±(99.9%) 78,574 B/op [Average]
[info]   (min, avg, max) = (9526,764, 9547,332, 9576,900), stdev = 20,406
[info]   CI (99.9%): [9468,757, 9625,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,295 ±(99.9%) 0,695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,295, 0,443), stdev = 0,181
[info]   CI (99.9%): [≈ 0, 0,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33,00% complete, ETA 01:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5648,421 ops/s
[info] # Warmup Iteration   2: 9384,598 ops/s
[info] # Warmup Iteration   3: 9529,184 ops/s
[info] # Warmup Iteration   4: 9504,926 ops/s
[info] # Warmup Iteration   5: 9445,812 ops/s
[info] Iteration   1: 9485,626 ops/s
[info]                  ·gc.alloc.rate:                   1766,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224679,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,907 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 9488,669 ops/s
[info]                  ·gc.alloc.rate:                   1767,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              293099,440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337298,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,905 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9390,429 ops/s
[info]                  ·gc.alloc.rate:                   1748,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     341152,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,489 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9352,646 ops/s
[info]                  ·gc.alloc.rate:               1741,878 MB/sec
[info]                  ·gc.alloc.rate.norm:          293096,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 228433,767 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 9207,082 ops/s
[info]                  ·gc.alloc.rate:                   1714,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348424,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,558 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9384,891 ±(99.9%) 445,761 ops/s [Average]
[info]   (min, avg, max) = (9207,082, 9384,891, 9488,669), stdev = 115,763
[info]   CI (99.9%): [8939,129, 9830,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1747,720 ±(99.9%) 83,478 MB/sec [Average]
[info]   (min, avg, max) = (1714,363, 1747,720, 1767,218), stdev = 21,679
[info]   CI (99.9%): [1664,242, 1831,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096,723 ±(99.9%) 5,849 B/op [Average]
[info]   (min, avg, max) = (293096,043, 293096,723, 293099,440), stdev = 1,519
[info]   CI (99.9%): [293090,874, 293102,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,760 ±(99.9%) 1433,837 MB/sec [Average]
[info]   (min, avg, max) = (1354,136, 1763,760, 2037,989), stdev = 372,363
[info]   CI (99.9%): [329,923, 3197,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   295997,808 ±(99.9%) 244633,938 B/op [Average]
[info]   (min, avg, max) = (224679,069, 295997,808, 348424,645), stdev = 63530,657
[info]   CI (99.9%): [51363,870, 540631,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,172 ±(99.9%) 11,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,172, 6,907), stdev = 2,881
[info]   CI (99.9%): [≈ 0, 15,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33,20% complete, ETA 01:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9758,306 ops/s
[info] # Warmup Iteration   2: 12012,320 ops/s
[info] # Warmup Iteration   3: 11501,447 ops/s
[info] # Warmup Iteration   4: 12054,147 ops/s
[info] # Warmup Iteration   5: 11783,030 ops/s
[info] Iteration   1: 11674,361 ops/s
[info]                  ·gc.alloc.rate:               1379,358 MB/sec
[info]                  ·gc.alloc.rate.norm:          185959,148 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 181392,782 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 11887,064 ops/s
[info]                  ·gc.alloc.rate:                   1404,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178202,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,512 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11968,079 ops/s
[info]                  ·gc.alloc.rate:               1414,097 MB/sec
[info]                  ·gc.alloc.rate.norm:          185968,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177054,492 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 11872,876 ops/s
[info]                  ·gc.alloc.rate:                   1403,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178618,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,518 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 12018,083 ops/s
[info]                  ·gc.alloc.rate:                   1419,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              185954,101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265022,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,452 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   11884,092 ±(99.9%) 506,213 ops/s [Average]
[info]   (min, avg, max) = (11674,361, 11884,092, 12018,083), stdev = 131,462
[info]   CI (99.9%): [11377,880, 12390,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1404,283 ±(99.9%) 59,812 MB/sec [Average]
[info]   (min, avg, max) = (1379,358, 1404,283, 1419,985), stdev = 15,533
[info]   CI (99.9%): [1344,472, 1464,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   185963,473 ±(99.9%) 25,034 B/op [Average]
[info]   (min, avg, max) = (185954,101, 185963,473, 185968,043), stdev = 6,501
[info]   CI (99.9%): [185938,439, 185988,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1481,887 ±(99.9%) 1166,450 MB/sec [Average]
[info]   (min, avg, max) = (1345,487, 1481,887, 2023,770), stdev = 302,923
[info]   CI (99.9%): [315,437, 2648,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   196058,115 ±(99.9%) 148578,429 B/op [Average]
[info]   (min, avg, max) = (177054,492, 196058,115, 265022,786), stdev = 38585,346
[info]   CI (99.9%): [47479,686, 344636,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,297 ±(99.9%) 11,588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,297, 5,518), stdev = 3,009
[info]   CI (99.9%): [≈ 0, 14,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33,40% complete, ETA 01:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20699,431 ops/s
[info] # Warmup Iteration   2: 26098,918 ops/s
[info] # Warmup Iteration   3: 25813,704 ops/s
[info] # Warmup Iteration   4: 26032,312 ops/s
[info] # Warmup Iteration   5: 26060,328 ops/s
[info] Iteration   1: 26076,269 ops/s
[info]                  ·gc.alloc.rate:                   1094,889 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81092,665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,769 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26093,169 ops/s
[info]                  ·gc.alloc.rate:               1095,563 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40498,280 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 25989,118 ops/s
[info]                  ·gc.alloc.rate:                   1091,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81317,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,303 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 25889,895 ops/s
[info]                  ·gc.alloc.rate:               1087,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40815,748 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 25828,447 ops/s
[info]                  ·gc.alloc.rate:               1084,455 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81864,826 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   25975,380 ±(99.9%) 443,821 ops/s [Average]
[info]   (min, avg, max) = (25828,447, 25975,380, 26093,169), stdev = 115,259
[info]   CI (99.9%): [25531,559, 26419,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1090,615 ±(99.9%) 18,622 MB/sec [Average]
[info]   (min, avg, max) = (1084,455, 1090,615, 1095,563), stdev = 4,836
[info]   CI (99.9%): [1071,993, 1109,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66080,016, 66080,016, 66080,017), stdev = 0,001
[info]   CI (99.9%): [66080,014, 66080,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,545 ±(99.9%) 1416,965 MB/sec [Average]
[info]   (min, avg, max) = (671,435, 1074,545, 1343,635), stdev = 367,981
[info]   CI (99.9%): [≈ 0, 2491,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   65117,800 ±(99.9%) 85990,995 B/op [Average]
[info]   (min, avg, max) = (40498,280, 65117,800, 81864,826), stdev = 22331,588
[info]   CI (99.9%): [≈ 0, 151108,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,014 ±(99.9%) 11,167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,014, 6,303), stdev = 2,900
[info]   CI (99.9%): [≈ 0, 13,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,60% complete, ETA 01:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20935,448 ops/s
[info] # Warmup Iteration   2: 30819,685 ops/s
[info] # Warmup Iteration   3: 30773,277 ops/s
[info] # Warmup Iteration   4: 30898,253 ops/s
[info] # Warmup Iteration   5: 30629,450 ops/s
[info] Iteration   1: 30887,907 ops/s
[info]                  ·gc.alloc.rate:                   1188,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68895,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,182 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30847,193 ops/s
[info]                  ·gc.alloc.rate:                   1186,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69021,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30849,179 ops/s
[info]                  ·gc.alloc.rate:               1186,800 MB/sec
[info]                  ·gc.alloc.rate.norm:          60552,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34541,367 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 30686,553 ops/s
[info]                  ·gc.alloc.rate:                   1180,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69483,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,203 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30672,870 ops/s
[info]                  ·gc.alloc.rate:               1180,075 MB/sec
[info]                  ·gc.alloc.rate.norm:          60552,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69566,717 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   30788,740 ±(99.9%) 388,763 ops/s [Average]
[info]   (min, avg, max) = (30672,870, 30788,740, 30887,907), stdev = 100,960
[info]   CI (99.9%): [30399,977, 31177,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1184,531 ±(99.9%) 14,935 MB/sec [Average]
[info]   (min, avg, max) = (1180,075, 1184,531, 1188,355), stdev = 3,879
[info]   CI (99.9%): [1169,595, 1199,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (60552,013, 60552,014, 60552,014), stdev = 0,001
[info]   CI (99.9%): [60552,012, 60552,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,487 ±(99.9%) 1165,607 MB/sec [Average]
[info]   (min, avg, max) = (677,000, 1218,487, 1355,759), stdev = 302,704
[info]   CI (99.9%): [52,880, 2384,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62301,853 ±(99.9%) 59766,843 B/op [Average]
[info]   (min, avg, max) = (34541,367, 62301,853, 69566,717), stdev = 15521,259
[info]   CI (99.9%): [2535,010, 122068,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,489 ±(99.9%) 6,214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,489, 3,203), stdev = 1,614
[info]   CI (99.9%): [≈ 0, 7,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,80% complete, ETA 01:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 741364,334 ops/s
[info] # Warmup Iteration   2: 796403,069 ops/s
[info] # Warmup Iteration   3: 799048,466 ops/s
[info] # Warmup Iteration   4: 803639,894 ops/s
[info] # Warmup Iteration   5: 800699,640 ops/s
[info] Iteration   1: 799034,870 ops/s
[info]                  ·gc.alloc.rate:                   1441,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2650,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 802539,111 ops/s
[info]                  ·gc.alloc.rate:                   1448,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2641,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 795815,080 ops/s
[info]                  ·gc.alloc.rate:                   1435,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2664,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 801864,288 ops/s
[info]                  ·gc.alloc.rate:                   1446,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2646,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 799344,795 ops/s
[info]                  ·gc.alloc.rate:                   1442,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2657,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   799719,629 ±(99.9%) 10261,071 ops/s [Average]
[info]   (min, avg, max) = (795815,080, 799719,629, 802539,111), stdev = 2664,768
[info]   CI (99.9%): [789458,558, 809980,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1442,980 ±(99.9%) 19,053 MB/sec [Average]
[info]   (min, avg, max) = (1435,800, 1442,980, 1448,320), stdev = 4,948
[info]   CI (99.9%): [1423,927, 1462,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2840,001, 2840,001, 2840,001), stdev = 0,001
[info]   CI (99.9%): [2840,000, 2840,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,442 ±(99.9%) 5,577 MB/sec [Average]
[info]   (min, avg, max) = (1345,379, 1347,442, 1349,283), stdev = 1,448
[info]   CI (99.9%): [1341,865, 1353,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2651,992 ±(99.9%) 35,493 B/op [Average]
[info]   (min, avg, max) = (2641,470, 2651,992, 2664,894), stdev = 9,217
[info]   CI (99.9%): [2616,499, 2687,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,115 ±(99.9%) 0,173 B/op [Average]
[info]   (min, avg, max) = (0,041, 0,115, 0,164), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34,00% complete, ETA 01:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 728994,071 ops/s
[info] # Warmup Iteration   2: 790746,737 ops/s
[info] # Warmup Iteration   3: 764290,872 ops/s
[info] # Warmup Iteration   4: 789626,717 ops/s
[info] # Warmup Iteration   5: 744416,079 ops/s
[info] Iteration   1: 794331,946 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 793905,300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 795456,983 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 793629,490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 784931,890 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   792451,121 ±(99.9%) 16406,493 ops/s [Average]
[info]   (min, avg, max) = (784931,890, 792451,121, 795456,983), stdev = 4260,714
[info]   CI (99.9%): [776044,629, 808857,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34,21% complete, ETA 01:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21796,245 ops/s
[info] # Warmup Iteration   2: 27823,385 ops/s
[info] # Warmup Iteration   3: 27923,386 ops/s
[info] # Warmup Iteration   4: 28005,124 ops/s
[info] # Warmup Iteration   5: 28066,516 ops/s
[info] Iteration   1: 28451,951 ops/s
[info]                  ·gc.alloc.rate:               1200,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          66416,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37070,124 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 28448,856 ops/s
[info]                  ·gc.alloc.rate:                   1200,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74148,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,303 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 28465,040 ops/s
[info]                  ·gc.alloc.rate:                   1200,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74103,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,151 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 28415,238 ops/s
[info]                  ·gc.alloc.rate:               1199,121 MB/sec
[info]                  ·gc.alloc.rate.norm:          66416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74268,445 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 28370,137 ops/s
[info]                  ·gc.alloc.rate:                   1197,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37211,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,155 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   28430,244 ±(99.9%) 147,466 ops/s [Average]
[info]   (min, avg, max) = (28370,137, 28430,244, 28465,040), stdev = 38,296
[info]   CI (99.9%): [28282,779, 28577,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1199,664 ±(99.9%) 5,790 MB/sec [Average]
[info]   (min, avg, max) = (1197,271, 1199,664, 1200,958), stdev = 1,504
[info]   CI (99.9%): [1193,874, 1205,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416,015 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (66416,014, 66416,015, 66416,017), stdev = 0,001
[info]   CI (99.9%): [66416,011, 66416,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,390 ±(99.9%) 1412,915 MB/sec [Average]
[info]   (min, avg, max) = (670,070, 1072,390, 1340,894), stdev = 366,929
[info]   CI (99.9%): [≈ 0, 2485,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59360,403 ±(99.9%) 78105,419 B/op [Average]
[info]   (min, avg, max) = (37070,124, 59360,403, 74268,445), stdev = 20283,729
[info]   CI (99.9%): [≈ 0, 137465,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,922 ±(99.9%) 3,711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,922, 2,303), stdev = 0,964
[info]   CI (99.9%): [≈ 0, 4,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34,41% complete, ETA 01:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14678,807 ops/s
[info] # Warmup Iteration   2: 16282,307 ops/s
[info] # Warmup Iteration   3: 16233,282 ops/s
[info] # Warmup Iteration   4: 16193,306 ops/s
[info] # Warmup Iteration   5: 16201,742 ops/s
[info] Iteration   1: 16219,977 ops/s
[info]                  ·gc.alloc.rate:                   589,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              57168,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49633,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,351 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 16228,964 ops/s
[info]                  ·gc.alloc.rate:                   589,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              57168,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65503,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 274,433 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 16236,905 ops/s
[info]                  ·gc.alloc.rate:                   589,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              57168,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65467,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,053 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 16228,048 ops/s
[info]                  ·gc.alloc.rate:               589,446 MB/sec
[info]                  ·gc.alloc.rate.norm:          57168,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65305,879 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 15768,054 ops/s
[info]                  ·gc.alloc.rate:                   572,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              57168,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67214,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   16136,390 ±(99.9%) 793,206 ops/s [Average]
[info]   (min, avg, max) = (15768,054, 16136,390, 16236,905), stdev = 205,993
[info]   CI (99.9%): [15343,184, 16929,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   586,099 ±(99.9%) 28,932 MB/sec [Average]
[info]   (min, avg, max) = (572,664, 586,099, 589,732), stdev = 7,513
[info]   CI (99.9%): [557,167, 615,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   57168,027 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (57168,025, 57168,027, 57168,034), stdev = 0,004
[info]   CI (99.9%): [57168,013, 57168,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   641,794 ±(99.9%) 280,536 MB/sec [Average]
[info]   (min, avg, max) = (511,482, 641,794, 675,485), stdev = 72,854
[info]   CI (99.9%): [361,258, 922,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   62625,072 ±(99.9%) 28125,073 B/op [Average]
[info]   (min, avg, max) = (49633,674, 62625,072, 67214,706), stdev = 7303,992
[info]   CI (99.9%): [34499,999, 90750,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,585 ±(99.9%) 4,832 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,585, 2,830), stdev = 1,255
[info]   CI (99.9%): [≈ 0, 5,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   56,783 ±(99.9%) 468,589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56,783, 274,433), stdev = 121,691
[info]   CI (99.9%): [≈ 0, 525,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34,61% complete, ETA 01:26:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28147,213 ops/s
[info] # Warmup Iteration   2: 34455,957 ops/s
[info] # Warmup Iteration   3: 33664,342 ops/s
[info] # Warmup Iteration   4: 34805,006 ops/s
[info] # Warmup Iteration   5: 34820,719 ops/s
[info] Iteration   1: 34858,905 ops/s
[info]                  ·gc.alloc.rate:                   1733,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91032,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,880 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34972,595 ops/s
[info]                  ·gc.alloc.rate:                   1739,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90818,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,747 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34223,999 ops/s
[info]                  ·gc.alloc.rate:               1701,953 MB/sec
[info]                  ·gc.alloc.rate.norm:          78272,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61936,804 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 34645,963 ops/s
[info]                  ·gc.alloc.rate:                   1723,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91904,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,837 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 34702,160 ops/s
[info]                  ·gc.alloc.rate:                   1725,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61263,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,944 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   34680,724 ±(99.9%) 1101,316 ops/s [Average]
[info]   (min, avg, max) = (34223,999, 34680,724, 34972,595), stdev = 286,008
[info]   CI (99.9%): [33579,408, 35782,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1724,718 ±(99.9%) 54,884 MB/sec [Average]
[info]   (min, avg, max) = (1701,953, 1724,718, 1739,363), stdev = 14,253
[info]   CI (99.9%): [1669,835, 1779,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78272,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (78272,012, 78272,012, 78272,014), stdev = 0,001
[info]   CI (99.9%): [78272,009, 78272,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1750,995 ±(99.9%) 1414,190 MB/sec [Average]
[info]   (min, avg, max) = (1346,759, 1750,995, 2023,318), stdev = 367,261
[info]   CI (99.9%): [336,805, 3165,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79391,292 ±(99.9%) 62564,955 B/op [Average]
[info]   (min, avg, max) = (61263,350, 79391,292, 91904,709), stdev = 16247,920
[info]   CI (99.9%): [16826,337, 141956,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,881 ±(99.9%) 5,715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,881, 3,747), stdev = 1,484
[info]   CI (99.9%): [≈ 0, 7,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,81% complete, ETA 01:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22990,871 ops/s
[info] # Warmup Iteration   2: 35070,317 ops/s
[info] # Warmup Iteration   3: 30523,435 ops/s
[info] # Warmup Iteration   4: 35090,988 ops/s
[info] # Warmup Iteration   5: 34953,262 ops/s
[info] Iteration   1: 35094,574 ops/s
[info]                  ·gc.alloc.rate:                   1602,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60698,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,867 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34844,232 ops/s
[info]                  ·gc.alloc.rate:                   1591,583 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61179,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,761 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 35150,333 ops/s
[info]                  ·gc.alloc.rate:                   1605,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91052,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,932 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 35084,363 ops/s
[info]                  ·gc.alloc.rate:                   1602,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60865,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,867 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 35074,506 ops/s
[info]                  ·gc.alloc.rate:               1601,912 MB/sec
[info]                  ·gc.alloc.rate.norm:          71888,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60910,896 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   35049,602 ±(99.9%) 456,324 ops/s [Average]
[info]   (min, avg, max) = (34844,232, 35049,602, 35150,333), stdev = 118,506
[info]   CI (99.9%): [34593,278, 35505,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1600,920 ±(99.9%) 20,748 MB/sec [Average]
[info]   (min, avg, max) = (1591,583, 1600,920, 1605,471), stdev = 5,388
[info]   CI (99.9%): [1580,172, 1621,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (71888,012, 71888,012, 71888,013), stdev = 0,001
[info]   CI (99.9%): [71888,009, 71888,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1491,131 ±(99.9%) 1167,428 MB/sec [Average]
[info]   (min, avg, max) = (1353,488, 1491,131, 2033,463), stdev = 303,177
[info]   CI (99.9%): [323,703, 2658,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   66941,272 ±(99.9%) 51904,734 B/op [Average]
[info]   (min, avg, max) = (60698,699, 66941,272, 91052,150), stdev = 13479,495
[info]   CI (99.9%): [15036,537, 118846,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,685 ±(99.9%) 5,371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,685, 3,761), stdev = 1,395
[info]   CI (99.9%): [≈ 0, 7,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,01% complete, ETA 01:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361180,583 ops/s
[info] # Warmup Iteration   2: 387065,133 ops/s
[info] # Warmup Iteration   3: 389550,886 ops/s
[info] # Warmup Iteration   4: 365766,509 ops/s
[info] # Warmup Iteration   5: 391059,351 ops/s
[info] Iteration   1: 391748,487 ops/s
[info]                  ·gc.alloc.rate:                   1019,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5416,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 392800,182 ops/s
[info]                  ·gc.alloc.rate:               1022,313 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2698,464 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 391762,893 ops/s
[info]                  ·gc.alloc.rate:                   1019,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5409,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 391596,004 ops/s
[info]                  ·gc.alloc.rate:               1019,164 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2705,179 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 391281,772 ops/s
[info]                  ·gc.alloc.rate:                   1018,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5417,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   391837,868 ±(99.9%) 2201,443 ops/s [Average]
[info]   (min, avg, max) = (391281,772, 391837,868, 392800,182), stdev = 571,708
[info]   CI (99.9%): [389636,425, 394039,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1019,734 ±(99.9%) 5,910 MB/sec [Average]
[info]   (min, avg, max) = (1018,210, 1019,734, 1022,313), stdev = 1,535
[info]   CI (99.9%): [1013,824, 1025,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,567 ±(99.9%) 1421,047 MB/sec [Average]
[info]   (min, avg, max) = (673,101, 1077,567, 1348,176), stdev = 369,041
[info]   CI (99.9%): [≈ 0, 2498,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4329,372 ±(99.9%) 5721,092 B/op [Average]
[info]   (min, avg, max) = (2698,464, 4329,372, 5417,419), stdev = 1485,749
[info]   CI (99.9%): [≈ 0, 10050,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,167), stdev = 0,084
[info]   CI (99.9%): [≈ 0, 0,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35,21% complete, ETA 01:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12285,690 ops/s
[info] # Warmup Iteration   2: 20034,811 ops/s
[info] # Warmup Iteration   3: 20075,259 ops/s
[info] # Warmup Iteration   4: 20025,142 ops/s
[info] # Warmup Iteration   5: 19875,381 ops/s
[info] Iteration   1: 19840,463 ops/s
[info]                  ·gc.alloc.rate:                   2042,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161307,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,604 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20093,213 ops/s
[info]                  ·gc.alloc.rate:                   2068,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159441,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,630 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 20075,573 ops/s
[info]                  ·gc.alloc.rate:                   2066,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159732,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,632 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19977,003 ops/s
[info]                  ·gc.alloc.rate:                   2056,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160576,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,920 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 20042,377 ops/s
[info]                  ·gc.alloc.rate:                   2062,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160212,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,269 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   20005,726 ±(99.9%) 394,633 ops/s [Average]
[info]   (min, avg, max) = (19840,463, 20005,726, 20093,213), stdev = 102,485
[info]   CI (99.9%): [19611,093, 20400,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2059,036 ±(99.9%) 40,420 MB/sec [Average]
[info]   (min, avg, max) = (2042,066, 2059,036, 2068,015), stdev = 10,497
[info]   CI (99.9%): [2018,616, 2099,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   161984,022 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (161984,020, 161984,022, 161984,027), stdev = 0,003
[info]   CI (99.9%): [161984,010, 161984,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2037,010 ±(99.9%) 9,769 MB/sec [Average]
[info]   (min, avg, max) = (2033,534, 2037,010, 2040,072), stdev = 2,537
[info]   CI (99.9%): [2027,242, 2046,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   160254,137 ±(99.9%) 2821,365 B/op [Average]
[info]   (min, avg, max) = (159441,151, 160254,137, 161307,192), stdev = 732,699
[info]   CI (99.9%): [157432,772, 163075,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,611 ±(99.9%) 8,310 B/op [Average]
[info]   (min, avg, max) = (1,630, 3,611, 6,604), stdev = 2,158
[info]   CI (99.9%): [≈ 0, 11,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35,41% complete, ETA 01:25:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27850,419 ops/s
[info] # Warmup Iteration   2: 32736,726 ops/s
[info] # Warmup Iteration   3: 33365,178 ops/s
[info] # Warmup Iteration   4: 33310,608 ops/s
[info] # Warmup Iteration   5: 33543,692 ops/s
[info] Iteration   1: 33570,405 ops/s
[info]                  ·gc.alloc.rate:                   1626,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63100,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,976 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33294,613 ops/s
[info]                  ·gc.alloc.rate:               1612,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63654,546 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 32906,063 ops/s
[info]                  ·gc.alloc.rate:                   1594,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96698,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,996 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33358,487 ops/s
[info]                  ·gc.alloc.rate:               1615,975 MB/sec
[info]                  ·gc.alloc.rate.norm:          76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63671,961 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 33529,385 ops/s
[info]                  ·gc.alloc.rate:                   1624,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95143,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,954 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   33331,791 ±(99.9%) 1017,545 ops/s [Average]
[info]   (min, avg, max) = (32906,063, 33331,791, 33570,405), stdev = 264,253
[info]   CI (99.9%): [32314,245, 34349,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1614,698 ±(99.9%) 49,242 MB/sec [Average]
[info]   (min, avg, max) = (1594,112, 1614,698, 1626,317), stdev = 12,788
[info]   CI (99.9%): [1565,456, 1663,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   76248,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76248,012, 76248,013, 76248,013), stdev = 0,001
[info]   CI (99.9%): [76248,011, 76248,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1618,035 ±(99.9%) 1427,686 MB/sec [Average]
[info]   (min, avg, max) = (1345,880, 1618,035, 2026,704), stdev = 370,766
[info]   CI (99.9%): [190,349, 3045,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   76453,552 ±(99.9%) 68467,854 B/op [Average]
[info]   (min, avg, max) = (63100,066, 76453,552, 96698,009), stdev = 17780,884
[info]   CI (99.9%): [7985,698, 144921,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,785 ±(99.9%) 3,152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,785, 1,954), stdev = 0,819
[info]   CI (99.9%): [≈ 0, 3,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35,61% complete, ETA 01:25:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48659,747 ops/s
[info] # Warmup Iteration   2: 56946,723 ops/s
[info] # Warmup Iteration   3: 62729,611 ops/s
[info] # Warmup Iteration   4: 63497,823 ops/s
[info] # Warmup Iteration   5: 63291,537 ops/s
[info] Iteration   1: 63425,610 ops/s
[info]                  ·gc.alloc.rate:                   1538,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33321,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 63118,406 ops/s
[info]                  ·gc.alloc.rate:                   1531,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33483,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 63358,075 ops/s
[info]                  ·gc.alloc.rate:                   1536,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50100,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,517 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 62953,749 ops/s
[info]                  ·gc.alloc.rate:                   1527,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33654,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,520 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 63216,800 ops/s
[info]                  ·gc.alloc.rate:               1533,328 MB/sec
[info]                  ·gc.alloc.rate.norm:          38176,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33557,284 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   63214,528 ±(99.9%) 726,569 ops/s [Average]
[info]   (min, avg, max) = (62953,749, 63214,528, 63425,610), stdev = 188,688
[info]   CI (99.9%): [62487,959, 63941,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1533,315 ±(99.9%) 17,308 MB/sec [Average]
[info]   (min, avg, max) = (1527,111, 1533,315, 1538,370), stdev = 4,495
[info]   CI (99.9%): [1516,008, 1550,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (38176,006, 38176,007, 38176,007), stdev = 0,001
[info]   CI (99.9%): [38176,005, 38176,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,281 ±(99.9%) 1156,948 MB/sec [Average]
[info]   (min, avg, max) = (1342,758, 1479,281, 2016,739), stdev = 300,456
[info]   CI (99.9%): [322,334, 2636,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   36823,551 ±(99.9%) 28584,121 B/op [Average]
[info]   (min, avg, max) = (33321,709, 36823,551, 50100,800), stdev = 7423,206
[info]   CI (99.9%): [8239,430, 65407,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,622 ±(99.9%) 1,668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,622, 1,038), stdev = 0,433
[info]   CI (99.9%): [≈ 0, 2,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,81% complete, ETA 01:25:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106506,755 ops/s
[info] # Warmup Iteration   2: 145676,515 ops/s
[info] # Warmup Iteration   3: 146288,273 ops/s
[info] # Warmup Iteration   4: 146262,370 ops/s
[info] # Warmup Iteration   5: 145911,874 ops/s
[info] Iteration   1: 144655,206 ops/s
[info]                  ·gc.alloc.rate:               1225,708 MB/sec
[info]                  ·gc.alloc.rate.norm:          13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7352,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 145942,486 ops/s
[info]                  ·gc.alloc.rate:                   1236,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14589,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,673 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 145872,650 ops/s
[info]                  ·gc.alloc.rate:               1235,902 MB/sec
[info]                  ·gc.alloc.rate.norm:          13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14610,168 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 146028,202 ops/s
[info]                  ·gc.alloc.rate:                   1237,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14601,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,449 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 145636,092 ops/s
[info]                  ·gc.alloc.rate:                   1233,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14655,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,450 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   145626,927 ±(99.9%) 2165,713 ops/s [Average]
[info]   (min, avg, max) = (144655,206, 145626,927, 146028,202), stdev = 562,429
[info]   CI (99.9%): [143461,215, 147792,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1233,880 ±(99.9%) 18,286 MB/sec [Average]
[info]   (min, avg, max) = (1225,708, 1233,880, 1237,371), stdev = 4,749
[info]   CI (99.9%): [1215,594, 1252,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,003, 13336,003, 13336,003), stdev = 0,001
[info]   CI (99.9%): [13336,002, 13336,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,655 ±(99.9%) 1168,679 MB/sec [Average]
[info]   (min, avg, max) = (675,737, 1218,655, 1355,969), stdev = 303,502
[info]   CI (99.9%): [49,975, 2387,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13161,845 ±(99.9%) 12506,104 B/op [Average]
[info]   (min, avg, max) = (7352,185, 13161,845, 14655,734), stdev = 3247,795
[info]   CI (99.9%): [655,741, 25667,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,314 ±(99.9%) 1,160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,314, 0,673), stdev = 0,301
[info]   CI (99.9%): [≈ 0, 1,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36,02% complete, ETA 01:24:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1027738,997 ops/s
[info] # Warmup Iteration   2: 1152126,741 ops/s
[info] # Warmup Iteration   3: 1072423,934 ops/s
[info] # Warmup Iteration   4: 1115274,796 ops/s
[info] # Warmup Iteration   5: 1165932,715 ops/s
[info] Iteration   1: 1161309,975 ops/s
[info]                  ·gc.alloc.rate:                   1245,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1825,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1055670,424 ops/s
[info]                  ·gc.alloc.rate:               1132,320 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1004,106 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1161741,505 ops/s
[info]                  ·gc.alloc.rate:                   1245,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1824,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1161896,527 ops/s
[info]                  ·gc.alloc.rate:               1246,272 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1824,956 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1161330,799 ops/s
[info]                  ·gc.alloc.rate:                   1245,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1827,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1140389,846 ±(99.9%) 182367,594 ops/s [Average]
[info]   (min, avg, max) = (1055670,424, 1140389,846, 1161896,527), stdev = 47360,285
[info]   CI (99.9%): [958022,252, 1322757,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1223,137 ±(99.9%) 195,496 MB/sec [Average]
[info]   (min, avg, max) = (1132,320, 1223,137, 1246,272), stdev = 50,770
[info]   CI (99.9%): [1027,642, 1418,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1688,000, 1688,000, 1688,000), stdev = 0,001
[info]   CI (99.9%): [1688,000, 1688,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,621 ±(99.9%) 1160,371 MB/sec [Average]
[info]   (min, avg, max) = (673,560, 1212,621, 1348,121), stdev = 301,345
[info]   CI (99.9%): [52,250, 2372,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1661,288 ±(99.9%) 1414,639 B/op [Average]
[info]   (min, avg, max) = (1004,106, 1661,288, 1827,171), stdev = 367,377
[info]   CI (99.9%): [246,650, 3075,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,051 ±(99.9%) 0,194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,051, 0,113), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36,22% complete, ETA 01:24:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 934950,980 ops/s
[info] # Warmup Iteration   2: 1014462,662 ops/s
[info] # Warmup Iteration   3: 1008345,584 ops/s
[info] # Warmup Iteration   4: 1008378,977 ops/s
[info] # Warmup Iteration   5: 1010001,442 ops/s
[info] Iteration   1: 1012692,379 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1010719,108 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1013145,686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1010995,492 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1011963,155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1011903,164 ±(99.9%) 4036,835 ops/s [Average]
[info]   (min, avg, max) = (1010719,108, 1011903,164, 1013145,686), stdev = 1048,353
[info]   CI (99.9%): [1007866,329, 1015939,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36,42% complete, ETA 01:24:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55568,143 ops/s
[info] # Warmup Iteration   2: 70304,644 ops/s
[info] # Warmup Iteration   3: 69883,569 ops/s
[info] # Warmup Iteration   4: 70419,373 ops/s
[info] # Warmup Iteration   5: 70659,213 ops/s
[info] Iteration   1: 71254,597 ops/s
[info]                  ·gc.alloc.rate:                   1656,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              36600,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29611,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,920 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 71326,966 ops/s
[info]                  ·gc.alloc.rate:                   1658,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              36600,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44398,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,378 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 71381,224 ops/s
[info]                  ·gc.alloc.rate:               1659,910 MB/sec
[info]                  ·gc.alloc.rate.norm:          36600,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29621,538 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 71385,899 ops/s
[info]                  ·gc.alloc.rate:                   1660,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              36600,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44499,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,918 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 71194,285 ops/s
[info]                  ·gc.alloc.rate:               1655,438 MB/sec
[info]                  ·gc.alloc.rate.norm:          36600,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29797,123 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   71308,594 ±(99.9%) 319,690 ops/s [Average]
[info]   (min, avg, max) = (71194,285, 71308,594, 71385,899), stdev = 83,022
[info]   CI (99.9%): [70988,905, 71628,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1658,258 ±(99.9%) 7,903 MB/sec [Average]
[info]   (min, avg, max) = (1655,438, 1658,258, 1660,201), stdev = 2,052
[info]   CI (99.9%): [1650,355, 1666,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36600,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (36600,006, 36600,006, 36600,006), stdev = 0,001
[info]   CI (99.9%): [36600,005, 36600,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1612,508 ±(99.9%) 1416,459 MB/sec [Average]
[info]   (min, avg, max) = (1340,481, 1612,508, 2018,534), stdev = 367,850
[info]   CI (99.9%): [196,049, 3028,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35585,683 ±(99.9%) 31157,961 B/op [Average]
[info]   (min, avg, max) = (29611,439, 35585,683, 44499,640), stdev = 8091,623
[info]   CI (99.9%): [4427,722, 66743,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,643 ±(99.9%) 2,373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 1,378), stdev = 0,616
[info]   CI (99.9%): [≈ 0, 3,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36,62% complete, ETA 01:24:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28560,699 ops/s
[info] # Warmup Iteration   2: 30493,058 ops/s
[info] # Warmup Iteration   3: 30487,590 ops/s
[info] # Warmup Iteration   4: 30638,617 ops/s
[info] # Warmup Iteration   5: 30748,487 ops/s
[info] Iteration   1: 30639,251 ops/s
[info]                  ·gc.alloc.rate:                   379,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26275,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,828 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30762,204 ops/s
[info]                  ·gc.alloc.rate:               381,497 MB/sec
[info]                  ·gc.alloc.rate.norm:          19520,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26173,504 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 30769,173 ops/s
[info]                  ·gc.alloc.rate:                   381,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26168,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,706 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 30853,821 ops/s
[info]                  ·gc.alloc.rate:      382,655 MB/sec
[info]                  ·gc.alloc.rate.norm: 19520,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 30741,723 ops/s
[info]                  ·gc.alloc.rate:                   381,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34578,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145,041 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   30753,234 ±(99.9%) 295,629 ops/s [Average]
[info]   (min, avg, max) = (30639,251, 30753,234, 30853,821), stdev = 76,774
[info]   CI (99.9%): [30457,605, 31048,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   381,392 ±(99.9%) 3,718 MB/sec [Average]
[info]   (min, avg, max) = (379,969, 381,392, 382,655), stdev = 0,966
[info]   CI (99.9%): [377,674, 385,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   19520,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (19520,013, 19520,014, 19520,014), stdev = 0,001
[info]   CI (99.9%): [19520,011, 19520,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,981 ±(99.9%) 989,793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,981, 675,277), stdev = 257,046
[info]   CI (99.9%): [≈ 0, 1431,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22639,289 ±(99.9%) 50693,197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22639,289, 34578,557), stdev = 13164,862
[info]   CI (99.9%): [≈ 0, 73332,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,572 ±(99.9%) 4,865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,572, 2,832), stdev = 1,263
[info]   CI (99.9%): [≈ 0, 5,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29,315 ±(99.9%) 249,114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29,315, 145,041), stdev = 64,694
[info]   CI (99.9%): [≈ 0, 278,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36,82% complete, ETA 01:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14572,243 ops/s
[info] # Warmup Iteration   2: 18590,802 ops/s
[info] # Warmup Iteration   3: 18604,122 ops/s
[info] # Warmup Iteration   4: 18588,128 ops/s
[info] # Warmup Iteration   5: 17852,034 ops/s
[info] Iteration   1: 18631,210 ops/s
[info]                  ·gc.alloc.rate:                   1662,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113545,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,275 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18629,726 ops/s
[info]                  ·gc.alloc.rate:                   1662,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              140479,145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170383,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,275 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18099,127 ops/s
[info]                  ·gc.alloc.rate:               1615,585 MB/sec
[info]                  ·gc.alloc.rate.norm:          140480,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117055,463 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 18673,806 ops/s
[info]                  ·gc.alloc.rate:                   1666,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170402,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,509 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18710,749 ops/s
[info]                  ·gc.alloc.rate:               1669,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          140480,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113542,039 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18548,924 ±(99.9%) 976,804 ops/s [Average]
[info]   (min, avg, max) = (18099,127, 18548,924, 18710,749), stdev = 253,673
[info]   CI (99.9%): [17572,120, 19525,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1655,665 ±(99.9%) 87,024 MB/sec [Average]
[info]   (min, avg, max) = (1615,585, 1655,665, 1669,946), stdev = 22,600
[info]   CI (99.9%): [1568,641, 1742,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140479,848 ±(99.9%) 1,513 B/op [Average]
[info]   (min, avg, max) = (140479,145, 140479,848, 140480,027), stdev = 0,393
[info]   CI (99.9%): [140478,335, 140481,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,781 ±(99.9%) 1418,960 MB/sec [Average]
[info]   (min, avg, max) = (1344,110, 1615,781, 2022,005), stdev = 368,499
[info]   CI (99.9%): [196,822, 3034,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   136985,673 ±(99.9%) 117560,764 B/op [Average]
[info]   (min, avg, max) = (113542,039, 136985,673, 170402,722), stdev = 30530,157
[info]   CI (99.9%): [19424,910, 254546,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,812 ±(99.9%) 10,266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,812, 5,275), stdev = 2,666
[info]   CI (99.9%): [≈ 0, 13,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,02% complete, ETA 01:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12275,613 ops/s
[info] # Warmup Iteration   2: 19284,381 ops/s
[info] # Warmup Iteration   3: 19377,215 ops/s
[info] # Warmup Iteration   4: 19341,816 ops/s
[info] # Warmup Iteration   5: 19204,143 ops/s
[info] Iteration   1: 19350,945 ops/s
[info]                  ·gc.alloc.rate:                   1563,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              127144,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110085,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,693 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19381,165 ops/s
[info]                  ·gc.alloc.rate:                   1565,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              127113,920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109996,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,381 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19393,038 ops/s
[info]                  ·gc.alloc.rate:                   1566,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              127112,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164973,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,689 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19339,746 ops/s
[info]                  ·gc.alloc.rate:                   1562,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              127112,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110407,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,694 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19200,207 ops/s
[info]                  ·gc.alloc.rate:                   1550,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              127112,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111272,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,706 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   19333,020 ±(99.9%) 297,809 ops/s [Average]
[info]   (min, avg, max) = (19200,207, 19333,020, 19393,038), stdev = 77,340
[info]   CI (99.9%): [19035,211, 19630,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1561,547 ±(99.9%) 24,498 MB/sec [Average]
[info]   (min, avg, max) = (1550,576, 1561,547, 1566,350), stdev = 6,362
[info]   CI (99.9%): [1537,049, 1586,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127118,802 ±(99.9%) 54,393 B/op [Average]
[info]   (min, avg, max) = (127112,021, 127118,802, 127144,028), stdev = 14,126
[info]   CI (99.9%): [127064,410, 127173,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1491,049 ±(99.9%) 1166,385 MB/sec [Average]
[info]   (min, avg, max) = (1353,568, 1491,049, 2032,897), stdev = 302,906
[info]   CI (99.9%): [324,664, 2657,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   121347,161 ±(99.9%) 93928,146 B/op [Average]
[info]   (min, avg, max) = (109996,353, 121347,161, 164973,075), stdev = 24392,841
[info]   CI (99.9%): [27419,015, 215275,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,025, 0,042), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,032 ±(99.9%) 2,902 B/op [Average]
[info]   (min, avg, max) = (1,689, 2,032, 3,381), stdev = 0,754
[info]   CI (99.9%): [≈ 0, 4,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,22% complete, ETA 01:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398296,628 ops/s
[info] # Warmup Iteration   2: 439610,027 ops/s
[info] # Warmup Iteration   3: 438026,333 ops/s
[info] # Warmup Iteration   4: 439201,017 ops/s
[info] # Warmup Iteration   5: 441436,523 ops/s
[info] Iteration   1: 440906,795 ops/s
[info]                  ·gc.alloc.rate:                   1147,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4809,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 441220,015 ops/s
[info]                  ·gc.alloc.rate:                   1148,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4804,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 439678,142 ops/s
[info]                  ·gc.alloc.rate:                   1144,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4821,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 439405,551 ops/s
[info]                  ·gc.alloc.rate:               1143,582 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2412,061 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 439785,155 ops/s
[info]                  ·gc.alloc.rate:                   1144,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4822,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   440199,132 ±(99.9%) 3113,768 ops/s [Average]
[info]   (min, avg, max) = (439405,551, 440199,132, 441220,015), stdev = 808,636
[info]   CI (99.9%): [437085,363, 443312,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1145,578 ±(99.9%) 8,224 MB/sec [Average]
[info]   (min, avg, max) = (1143,582, 1145,578, 1148,330), stdev = 2,136
[info]   CI (99.9%): [1137,354, 1153,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,382 ±(99.9%) 1160,126 MB/sec [Average]
[info]   (min, avg, max) = (673,435, 1212,382, 1347,411), stdev = 301,281
[info]   CI (99.9%): [52,256, 2372,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4334,032 ±(99.9%) 4137,287 B/op [Average]
[info]   (min, avg, max) = (2412,061, 4334,032, 4822,382), stdev = 1074,440
[info]   CI (99.9%): [196,744, 8471,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,149 ±(99.9%) 0,351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,149, 0,223), stdev = 0,091
[info]   CI (99.9%): [≈ 0, 0,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37,42% complete, ETA 01:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8873,601 ops/s
[info] # Warmup Iteration   2: 14486,346 ops/s
[info] # Warmup Iteration   3: 14404,473 ops/s
[info] # Warmup Iteration   4: 14689,318 ops/s
[info] # Warmup Iteration   5: 14679,074 ops/s
[info] Iteration   1: 14627,992 ops/s
[info]                  ·gc.alloc.rate:                   1972,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              212200,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218680,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,958 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14601,384 ops/s
[info]                  ·gc.alloc.rate:                   1968,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              212200,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219350,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,488 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 14497,137 ops/s
[info]                  ·gc.alloc.rate:                   1954,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              212200,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221125,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 14695,186 ops/s
[info]                  ·gc.alloc.rate:                   1981,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              212200,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218289,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,688 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 14708,508 ops/s
[info]                  ·gc.alloc.rate:                   1982,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              212200,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218224,680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,454 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14626,041 ±(99.9%) 326,794 ops/s [Average]
[info]   (min, avg, max) = (14497,137, 14626,041, 14708,508), stdev = 84,867
[info]   CI (99.9%): [14299,247, 14952,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1972,002 ±(99.9%) 44,174 MB/sec [Average]
[info]   (min, avg, max) = (1954,544, 1972,002, 1982,939), stdev = 11,472
[info]   CI (99.9%): [1927,829, 2016,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   212200,030 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (212200,028, 212200,030, 212200,035), stdev = 0,003
[info]   CI (99.9%): [212200,017, 212200,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,393 ±(99.9%) 10,281 MB/sec [Average]
[info]   (min, avg, max) = (2032,608, 2036,393, 2039,238), stdev = 2,670
[info]   CI (99.9%): [2026,111, 2046,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   219134,291 ±(99.9%) 4620,635 B/op [Average]
[info]   (min, avg, max) = (218224,680, 219134,291, 221125,813), stdev = 1199,964
[info]   CI (99.9%): [214513,656, 223754,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,369 ±(99.9%) 9,799 B/op [Average]
[info]   (min, avg, max) = (2,260, 5,369, 8,958), stdev = 2,545
[info]   CI (99.9%): [≈ 0, 15,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37,63% complete, ETA 01:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15455,716 ops/s
[info] # Warmup Iteration   2: 19097,081 ops/s
[info] # Warmup Iteration   3: 19172,758 ops/s
[info] # Warmup Iteration   4: 19039,441 ops/s
[info] # Warmup Iteration   5: 19214,261 ops/s
[info] Iteration   1: 19033,383 ops/s
[info]                  ·gc.alloc.rate:                   1590,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              131502,175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166905,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,442 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19194,695 ops/s
[info]                  ·gc.alloc.rate:               1603,263 MB/sec
[info]                  ·gc.alloc.rate.norm:          131480,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110400,853 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 19085,970 ops/s
[info]                  ·gc.alloc.rate:                   1594,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166706,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,583 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19044,211 ops/s
[info]                  ·gc.alloc.rate:               1590,871 MB/sec
[info]                  ·gc.alloc.rate.norm:          131480,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111529,556 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 19251,212 ops/s
[info]                  ·gc.alloc.rate:                   1608,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110439,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,404 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   19121,894 ±(99.9%) 371,256 ops/s [Average]
[info]   (min, avg, max) = (19033,383, 19121,894, 19251,212), stdev = 96,414
[info]   CI (99.9%): [18750,638, 19493,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1597,358 ±(99.9%) 30,588 MB/sec [Average]
[info]   (min, avg, max) = (1590,261, 1597,358, 1608,111), stdev = 7,944
[info]   CI (99.9%): [1566,769, 1627,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   131484,452 ±(99.9%) 38,149 B/op [Average]
[info]   (min, avg, max) = (131480,021, 131484,452, 131502,175), stdev = 9,907
[info]   CI (99.9%): [131446,303, 131522,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1617,258 ±(99.9%) 1415,401 MB/sec [Average]
[info]   (min, avg, max) = (1346,225, 1617,258, 2021,429), stdev = 367,575
[info]   CI (99.9%): [201,857, 3032,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   133196,344 ±(99.9%) 118155,577 B/op [Average]
[info]   (min, avg, max) = (110400,853, 133196,344, 166905,277), stdev = 30684,628
[info]   CI (99.9%): [15040,767, 251351,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,086 ±(99.9%) 13,544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,086, 8,583), stdev = 3,517
[info]   CI (99.9%): [≈ 0, 16,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37,83% complete, ETA 01:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34304,149 ops/s
[info] # Warmup Iteration   2: 44615,582 ops/s
[info] # Warmup Iteration   3: 44553,549 ops/s
[info] # Warmup Iteration   4: 43012,973 ops/s
[info] # Warmup Iteration   5: 44967,921 ops/s
[info] Iteration   1: 44732,657 ops/s
[info]                  ·gc.alloc.rate:               1390,666 MB/sec
[info]                  ·gc.alloc.rate.norm:          48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47243,920 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 43165,962 ops/s
[info]                  ·gc.alloc.rate:                   1341,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48959,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,759 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 44854,877 ops/s
[info]                  ·gc.alloc.rate:               1394,456 MB/sec
[info]                  ·gc.alloc.rate.norm:          48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47139,879 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 44981,620 ops/s
[info]                  ·gc.alloc.rate:                   1398,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47053,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,185 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44876,154 ops/s
[info]                  ·gc.alloc.rate:               1395,552 MB/sec
[info]                  ·gc.alloc.rate.norm:          48928,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47210,214 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44522,254 ±(99.9%) 2939,317 ops/s [Average]
[info]   (min, avg, max) = (43165,962, 44522,254, 44981,620), stdev = 763,331
[info]   CI (99.9%): [41582,937, 47461,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1384,217 ±(99.9%) 91,716 MB/sec [Average]
[info]   (min, avg, max) = (1341,906, 1384,217, 1398,503), stdev = 23,818
[info]   CI (99.9%): [1292,501, 1475,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (48928,009, 48928,010, 48928,011), stdev = 0,001
[info]   CI (99.9%): [48928,007, 48928,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,109 ±(99.9%) 6,248 MB/sec [Average]
[info]   (min, avg, max) = (1342,773, 1344,109, 1346,556), stdev = 1,622
[info]   CI (99.9%): [1337,861, 1350,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   47521,411 ±(99.9%) 3108,572 B/op [Average]
[info]   (min, avg, max) = (47053,429, 47521,411, 48959,613), stdev = 807,286
[info]   CI (99.9%): [44412,840, 50629,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,589 ±(99.9%) 3,661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,589, 2,185), stdev = 0,951
[info]   CI (99.9%): [≈ 0, 4,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,03% complete, ETA 01:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38758,968 ops/s
[info] # Warmup Iteration   2: 53345,206 ops/s
[info] # Warmup Iteration   3: 52917,249 ops/s
[info] # Warmup Iteration   4: 52995,628 ops/s
[info] # Warmup Iteration   5: 52932,335 ops/s
[info] Iteration   1: 52881,816 ops/s
[info]                  ·gc.alloc.rate:                   1402,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40262,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 52822,041 ops/s
[info]                  ·gc.alloc.rate:               1401,202 MB/sec
[info]                  ·gc.alloc.rate.norm:          41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40348,930 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 53060,087 ops/s
[info]                  ·gc.alloc.rate:                   1407,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40187,741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,852 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 53047,312 ops/s
[info]                  ·gc.alloc.rate:                   1407,287 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40236,355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,618 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 53115,027 ops/s
[info]                  ·gc.alloc.rate:               1408,925 MB/sec
[info]                  ·gc.alloc.rate.norm:          41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40204,591 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   52985,257 ±(99.9%) 485,663 ops/s [Average]
[info]   (min, avg, max) = (52822,041, 52985,257, 53115,027), stdev = 126,125
[info]   CI (99.9%): [52499,594, 53470,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1405,541 ±(99.9%) 12,766 MB/sec [Average]
[info]   (min, avg, max) = (1401,202, 1405,541, 1408,925), stdev = 3,315
[info]   CI (99.9%): [1392,775, 1418,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (41752,008, 41752,008, 41752,008), stdev = 0,001
[info]   CI (99.9%): [41752,007, 41752,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,909 ±(99.9%) 6,053 MB/sec [Average]
[info]   (min, avg, max) = (1352,835, 1354,909, 1356,708), stdev = 1,572
[info]   CI (99.9%): [1348,856, 1360,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40248,073 ±(99.9%) 243,958 B/op [Average]
[info]   (min, avg, max) = (40187,741, 40248,073, 40348,930), stdev = 63,355
[info]   CI (99.9%): [40004,115, 40492,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,618 ±(99.9%) 2,912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,618, 1,852), stdev = 0,756
[info]   CI (99.9%): [≈ 0, 3,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,23% complete, ETA 01:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1100275,079 ops/s
[info] # Warmup Iteration   2: 1354266,171 ops/s
[info] # Warmup Iteration   3: 1364661,929 ops/s
[info] # Warmup Iteration   4: 1358267,338 ops/s
[info] # Warmup Iteration   5: 1365847,328 ops/s
[info] Iteration   1: 1355631,246 ops/s
[info]                  ·gc.alloc.rate:                   1233,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1563,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1348241,136 ops/s
[info]                  ·gc.alloc.rate:                   1226,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1255515,488 ops/s
[info]                  ·gc.alloc.rate:               1142,328 MB/sec
[info]                  ·gc.alloc.rate.norm:          1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 844,229 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1366201,934 ops/s
[info]                  ·gc.alloc.rate:                   1243,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1318803,373 ops/s
[info]                  ·gc.alloc.rate:                   1199,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1609,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1328878,635 ±(99.9%) 171853,720 ops/s [Average]
[info]   (min, avg, max) = (1255515,488, 1328878,635, 1366201,934), stdev = 44629,865
[info]   CI (99.9%): [1157024,915, 1500732,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1209,091 ±(99.9%) 156,512 MB/sec [Average]
[info]   (min, avg, max) = (1142,328, 1209,091, 1243,158), stdev = 40,646
[info]   CI (99.9%): [1052,579, 1365,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1432,000, 1432,000, 1432,000), stdev = 0,001
[info]   CI (99.9%): [1432,000, 1432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,561 ±(99.9%) 1160,470 MB/sec [Average]
[info]   (min, avg, max) = (673,454, 1212,561, 1348,118), stdev = 301,370
[info]   CI (99.9%): [52,091, 2373,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1428,275 ±(99.9%) 1259,880 B/op [Average]
[info]   (min, avg, max) = (844,229, 1428,275, 1609,034), stdev = 327,187
[info]   CI (99.9%): [168,395, 2688,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,049 ±(99.9%) 0,149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,049, 0,097), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38,43% complete, ETA 01:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1464853,974 ops/s
[info] # Warmup Iteration   2: 1574144,649 ops/s
[info] # Warmup Iteration   3: 1570302,591 ops/s
[info] # Warmup Iteration   4: 1571631,994 ops/s
[info] # Warmup Iteration   5: 1571485,360 ops/s
[info] Iteration   1: 1575523,810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1570946,700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1579043,218 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1575039,105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1577341,536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1575578,874 ±(99.9%) 11689,110 ops/s [Average]
[info]   (min, avg, max) = (1570946,700, 1575578,874, 1579043,218), stdev = 3035,625
[info]   CI (99.9%): [1563889,764, 1587267,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38,63% complete, ETA 01:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32531,177 ops/s
[info] # Warmup Iteration   2: 42169,002 ops/s
[info] # Warmup Iteration   3: 41361,085 ops/s
[info] # Warmup Iteration   4: 42425,018 ops/s
[info] # Warmup Iteration   5: 42348,632 ops/s
[info] Iteration   1: 42414,653 ops/s
[info]                  ·gc.alloc.rate:                   1338,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              49680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49727,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,772 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 42372,877 ops/s
[info]                  ·gc.alloc.rate:                   1337,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              49680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49781,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,773 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 42399,264 ops/s
[info]                  ·gc.alloc.rate:               1338,276 MB/sec
[info]                  ·gc.alloc.rate.norm:          49680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49770,891 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 42383,162 ops/s
[info]                  ·gc.alloc.rate:                   1337,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              49680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49851,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,546 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38331,843 ops/s
[info]                  ·gc.alloc.rate:               1209,863 MB/sec
[info]                  ·gc.alloc.rate.norm:          49680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27580,431 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   41580,360 ±(99.9%) 6992,944 ops/s [Average]
[info]   (min, avg, max) = (38331,843, 41580,360, 42414,653), stdev = 1816,045
[info]   CI (99.9%): [34587,415, 48573,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1312,509 ±(99.9%) 220,961 MB/sec [Average]
[info]   (min, avg, max) = (1209,863, 1312,509, 1338,866), stdev = 57,383
[info]   CI (99.9%): [1091,549, 1533,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   49680,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (49680,010, 49680,010, 49680,011), stdev = 0,001
[info]   CI (99.9%): [49680,008, 49680,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207,085 ±(99.9%) 1152,529 MB/sec [Average]
[info]   (min, avg, max) = (671,669, 1207,085, 1342,562), stdev = 299,308
[info]   CI (99.9%): [54,557, 2359,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   45342,324 ±(99.9%) 38234,197 B/op [Average]
[info]   (min, avg, max) = (27580,431, 45342,324, 49851,510), stdev = 9929,300
[info]   CI (99.9%): [7108,126, 83576,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,618 ±(99.9%) 2,490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,618, 1,546), stdev = 0,647
[info]   CI (99.9%): [≈ 0, 3,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38,83% complete, ETA 01:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28152,419 ops/s
[info] # Warmup Iteration   2: 30279,817 ops/s
[info] # Warmup Iteration   3: 30363,061 ops/s
[info] # Warmup Iteration   4: 30331,154 ops/s
[info] # Warmup Iteration   5: 30049,819 ops/s
[info] Iteration   1: 30030,693 ops/s
[info]                  ·gc.alloc.rate:                   362,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              19008,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26809,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,914 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30113,487 ops/s
[info]                  ·gc.alloc.rate:               363,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          19008,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26738,375 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 30146,743 ops/s
[info]                  ·gc.alloc.rate:      364,064 MB/sec
[info]                  ·gc.alloc.rate.norm: 19008,015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30037,191 ops/s
[info]                  ·gc.alloc.rate:                   362,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              19008,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26804,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,546 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 30093,436 ops/s
[info]                  ·gc.alloc.rate:      363,401 MB/sec
[info]                  ·gc.alloc.rate.norm: 19008,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   30084,310 ±(99.9%) 191,833 ops/s [Average]
[info]   (min, avg, max) = (30030,693, 30084,310, 30146,743), stdev = 49,818
[info]   CI (99.9%): [29892,477, 30276,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   363,317 ±(99.9%) 2,328 MB/sec [Average]
[info]   (min, avg, max) = (362,648, 363,317, 364,064), stdev = 0,605
[info]   CI (99.9%): [360,989, 365,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   19008,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (19008,014, 19008,014, 19008,015), stdev = 0,001
[info]   CI (99.9%): [19008,012, 19008,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,934 ±(99.9%) 1078,915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,934, 511,617), stdev = 280,191
[info]   CI (99.9%): [≈ 0, 1385,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16070,439 ±(99.9%) 56489,960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16070,439, 26809,587), stdev = 14670,263
[info]   CI (99.9%): [≈ 0, 72560,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,017), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,292 ±(99.9%) 1,619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,292, 0,914), stdev = 0,420
[info]   CI (99.9%): [≈ 0, 1,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39,03% complete, ETA 01:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79709,957 ops/s
[info] # Warmup Iteration   2: 90634,307 ops/s
[info] # Warmup Iteration   3: 90970,923 ops/s
[info] # Warmup Iteration   4: 91387,983 ops/s
[info] # Warmup Iteration   5: 91026,198 ops/s
[info] Iteration   1: 90888,278 ops/s
[info]                  ·gc.alloc.rate:                   1559,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34914,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,721 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 91379,521 ops/s
[info]                  ·gc.alloc.rate:               1567,707 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23164,013 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 91508,471 ops/s
[info]                  ·gc.alloc.rate:                   1569,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23152,507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,716 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 91311,760 ops/s
[info]                  ·gc.alloc.rate:                   1566,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34843,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,076 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 91301,539 ops/s
[info]                  ·gc.alloc.rate:               1566,184 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23262,140 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   91277,914 ±(99.9%) 896,878 ops/s [Average]
[info]   (min, avg, max) = (90888,278, 91277,914, 91508,471), stdev = 232,916
[info]   CI (99.9%): [90381,035, 92174,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1565,874 ±(99.9%) 15,298 MB/sec [Average]
[info]   (min, avg, max) = (1559,205, 1565,874, 1569,712), stdev = 3,973
[info]   CI (99.9%): [1550,575, 1581,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27000,004, 27000,005, 27000,005), stdev = 0,001
[info]   CI (99.9%): [27000,004, 27000,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,648 ±(99.9%) 1417,651 MB/sec [Average]
[info]   (min, avg, max) = (1344,977, 1615,648, 2021,645), stdev = 368,159
[info]   CI (99.9%): [197,998, 3033,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27867,243 ±(99.9%) 24647,264 B/op [Average]
[info]   (min, avg, max) = (23152,507, 27867,243, 34914,086), stdev = 6400,816
[info]   CI (99.9%): [3219,979, 52514,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,503 ±(99.9%) 1,854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,503, 1,076), stdev = 0,482
[info]   CI (99.9%): [≈ 0, 2,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39,24% complete, ETA 01:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87114,664 ops/s
[info] # Warmup Iteration   2: 391507,121 ops/s
[info] # Warmup Iteration   3: 393610,269 ops/s
[info] # Warmup Iteration   4: 388773,255 ops/s
[info] # Warmup Iteration   5: 370271,106 ops/s
[info] Iteration   1: 392433,195 ops/s
[info]                  ·gc.alloc.rate:                   785,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2703,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 392613,468 ops/s
[info]                  ·gc.alloc.rate:               786,333 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2697,085 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 393215,771 ops/s
[info]                  ·gc.alloc.rate:               787,369 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2692,874 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 393484,412 ops/s
[info]                  ·gc.alloc.rate:                   788,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2688,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,250 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 392818,148 ops/s
[info]                  ·gc.alloc.rate:                   786,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5385,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   392912,999 ±(99.9%) 1664,163 ops/s [Average]
[info]   (min, avg, max) = (392433,195, 392912,999, 393484,412), stdev = 432,178
[info]   CI (99.9%): [391248,836, 394577,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   786,852 ±(99.9%) 3,271 MB/sec [Average]
[info]   (min, avg, max) = (785,904, 786,852, 788,034), stdev = 0,850
[info]   CI (99.9%): [783,580, 790,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3152,001, 3152,001, 3152,001), stdev = 0,001
[info]   CI (99.9%): [3152,001, 3152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   807,145 ±(99.9%) 1155,696 MB/sec [Average]
[info]   (min, avg, max) = (672,109, 807,145, 1344,033), stdev = 300,130
[info]   CI (99.9%): [≈ 0, 1962,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3233,456 ±(99.9%) 4632,658 B/op [Average]
[info]   (min, avg, max) = (2688,322, 3233,456, 5385,579), stdev = 1203,086
[info]   CI (99.9%): [≈ 0, 7866,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,100 ±(99.9%) 0,418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,250), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,44% complete, ETA 01:20:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209589,937 ops/s
[info] # Warmup Iteration   2: 270032,050 ops/s
[info] # Warmup Iteration   3: 293560,844 ops/s
[info] # Warmup Iteration   4: 293540,346 ops/s
[info] # Warmup Iteration   5: 293535,790 ops/s
[info] Iteration   1: 293413,630 ops/s
[info]                  ·gc.alloc.rate:                   636,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3617,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,558 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 293342,410 ops/s
[info]                  ·gc.alloc.rate:                   636,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3618,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,335 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 285708,715 ops/s
[info]                  ·gc.alloc.rate:               620,093 MB/sec
[info]                  ·gc.alloc.rate.norm:          3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3718,745 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 291162,365 ops/s
[info]                  ·gc.alloc.rate:                   631,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3649,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 290403,790 ops/s
[info]                  ·gc.alloc.rate:                   630,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3664,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,226 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   290806,182 ±(99.9%) 12101,104 ops/s [Average]
[info]   (min, avg, max) = (285708,715, 290806,182, 293413,630), stdev = 3142,618
[info]   CI (99.9%): [278705,078, 302907,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   631,151 ±(99.9%) 26,282 MB/sec [Average]
[info]   (min, avg, max) = (620,093, 631,151, 636,805), stdev = 6,825
[info]   CI (99.9%): [604,869, 657,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3416,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3416,001, 3416,001, 3416,001), stdev = 0,001
[info]   CI (99.9%): [3416,001, 3416,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,988 ±(99.9%) 2,452 MB/sec [Average]
[info]   (min, avg, max) = (674,407, 674,988, 675,975), stdev = 0,637
[info]   CI (99.9%): [672,536, 677,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3653,618 ±(99.9%) 159,776 B/op [Average]
[info]   (min, avg, max) = (3617,714, 3653,618, 3718,745), stdev = 41,493
[info]   CI (99.9%): [3493,841, 3813,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,246 ±(99.9%) 0,826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,246, 0,558), stdev = 0,215
[info]   CI (99.9%): [≈ 0, 1,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,64% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 514375,093 ops/s
[info] # Warmup Iteration   2: 568331,158 ops/s
[info] # Warmup Iteration   3: 564033,544 ops/s
[info] # Warmup Iteration   4: 566819,037 ops/s
[info] # Warmup Iteration   5: 566228,582 ops/s
[info] Iteration   1: 565836,506 ops/s
[info]                  ·gc.alloc.rate:                   713,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1876,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,755 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 566468,696 ops/s
[info]                  ·gc.alloc.rate:                   714,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1874,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 568833,908 ops/s
[info]                  ·gc.alloc.rate:               717,015 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1861,390 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 566408,758 ops/s
[info]                  ·gc.alloc.rate:                   714,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3736,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,174 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 567373,284 ops/s
[info]                  ·gc.alloc.rate:               715,130 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1864,324 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   566984,230 ±(99.9%) 4509,894 ops/s [Average]
[info]   (min, avg, max) = (565836,506, 566984,230, 568833,908), stdev = 1171,205
[info]   CI (99.9%): [562474,336, 571494,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   714,706 ±(99.9%) 5,606 MB/sec [Average]
[info]   (min, avg, max) = (713,235, 714,706, 717,015), stdev = 1,456
[info]   CI (99.9%): [709,100, 720,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1984,001, 1984,001, 1984,001), stdev = 0,001
[info]   CI (99.9%): [1984,001, 1984,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,817 ±(99.9%) 1156,000 MB/sec [Average]
[info]   (min, avg, max) = (671,993, 807,817, 1344,843), stdev = 300,209
[info]   CI (99.9%): [≈ 0, 1963,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2242,842 ±(99.9%) 3216,050 B/op [Average]
[info]   (min, avg, max) = (1861,390, 2242,842, 3736,843), stdev = 835,198
[info]   CI (99.9%): [≈ 0, 5458,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,147), stdev = 1,396
[info]   CI (99.9%): [≈ 0, 6,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,809 ±(99.9%) 14,955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,809, 8,755), stdev = 3,884
[info]   CI (99.9%): [≈ 0, 16,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39,84% complete, ETA 01:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52250,989 ops/s
[info] # Warmup Iteration   2: 78679,587 ops/s
[info] # Warmup Iteration   3: 79166,811 ops/s
[info] # Warmup Iteration   4: 79011,405 ops/s
[info] # Warmup Iteration   5: 78697,114 ops/s
[info] Iteration   1: 79065,441 ops/s
[info]                  ·gc.alloc.rate:                   3526,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67553,831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,414 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 78792,870 ops/s
[info]                  ·gc.alloc.rate:                   3513,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81465,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,247 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 77953,183 ops/s
[info]                  ·gc.alloc.rate:                   3476,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68678,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,101 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 79010,648 ops/s
[info]                  ·gc.alloc.rate:                   3523,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67798,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,902 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 78086,222 ops/s
[info]                  ·gc.alloc.rate:                   3482,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68617,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,678 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   78581,673 ±(99.9%) 2022,163 ops/s [Average]
[info]   (min, avg, max) = (77953,183, 78581,673, 79065,441), stdev = 525,149
[info]   CI (99.9%): [76559,510, 80603,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3504,532 ±(99.9%) 90,751 MB/sec [Average]
[info]   (min, avg, max) = (3476,511, 3504,532, 3526,214), stdev = 23,568
[info]   CI (99.9%): [3413,782, 3595,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70192,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70192,005, 70192,005, 70192,006), stdev = 0,001
[info]   CI (99.9%): [70192,004, 70192,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3536,244 ±(99.9%) 1166,954 MB/sec [Average]
[info]   (min, avg, max) = (3393,681, 3536,244, 4078,313), stdev = 303,054
[info]   CI (99.9%): [2369,290, 4703,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70822,573 ±(99.9%) 22987,785 B/op [Average]
[info]   (min, avg, max) = (67553,831, 70822,573, 81465,143), stdev = 5969,855
[info]   CI (99.9%): [47834,788, 93810,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,179 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,083, 0,146), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,669 ±(99.9%) 3,581 B/op [Average]
[info]   (min, avg, max) = (0,414, 1,669, 2,902), stdev = 0,930
[info]   CI (99.9%): [≈ 0, 5,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40,04% complete, ETA 01:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195287,139 ops/s
[info] # Warmup Iteration   2: 238583,935 ops/s
[info] # Warmup Iteration   3: 239559,845 ops/s
[info] # Warmup Iteration   4: 241508,308 ops/s
[info] # Warmup Iteration   5: 239391,843 ops/s
[info] Iteration   1: 240036,554 ops/s
[info]                  ·gc.alloc.rate:                   1693,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13206,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,409 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 241484,280 ops/s
[info]                  ·gc.alloc.rate:                   1703,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8760,853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,543 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 241035,040 ops/s
[info]                  ·gc.alloc.rate:                   1700,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13182,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,272 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 240880,108 ops/s
[info]                  ·gc.alloc.rate:               1699,624 MB/sec
[info]                  ·gc.alloc.rate.norm:          11104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8806,461 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 240899,178 ops/s
[info]                  ·gc.alloc.rate:                   1699,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13227,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   240867,032 ±(99.9%) 2019,404 ops/s [Average]
[info]   (min, avg, max) = (240036,554, 240867,032, 241484,280), stdev = 524,433
[info]   CI (99.9%): [238847,628, 242886,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1699,327 ±(99.9%) 14,312 MB/sec [Average]
[info]   (min, avg, max) = (1693,409, 1699,327, 1703,640), stdev = 3,717
[info]   CI (99.9%): [1685,015, 1713,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11104,002, 11104,002, 11104,002), stdev = 0,001
[info]   CI (99.9%): [11104,002, 11104,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1749,895 ±(99.9%) 1419,659 MB/sec [Average]
[info]   (min, avg, max) = (1344,141, 1749,895, 2024,323), stdev = 368,681
[info]   CI (99.9%): [330,235, 3169,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11436,845 ±(99.9%) 9326,731 B/op [Average]
[info]   (min, avg, max) = (8760,853, 11436,845, 13227,145), stdev = 2422,122
[info]   CI (99.9%): [2110,114, 20763,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,272 ±(99.9%) 0,827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,272, 0,543), stdev = 0,215
[info]   CI (99.9%): [≈ 0, 1,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40,24% complete, ETA 01:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223224,910 ops/s
[info] # Warmup Iteration   2: 784229,922 ops/s
[info] # Warmup Iteration   3: 752868,315 ops/s
[info] # Warmup Iteration   4: 754022,340 ops/s
[info] # Warmup Iteration   5: 753167,946 ops/s
[info] Iteration   1: 751999,346 ops/s
[info]                  ·gc.alloc.rate:                   588,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1410,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,524 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 755944,133 ops/s
[info]                  ·gc.alloc.rate:      591,706 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 756548,888 ops/s
[info]                  ·gc.alloc.rate:               592,445 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1402,475 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 751778,838 ops/s
[info]                  ·gc.alloc.rate:               588,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1408,563 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 755857,994 ops/s
[info]                  ·gc.alloc.rate:                   591,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1400,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   754425,840 ±(99.9%) 8980,776 ops/s [Average]
[info]   (min, avg, max) = (751778,838, 754425,840, 756548,888), stdev = 2332,279
[info]   CI (99.9%): [745445,064, 763406,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   590,555 ±(99.9%) 7,155 MB/sec [Average]
[info]   (min, avg, max) = (588,519, 590,555, 592,445), stdev = 1,858
[info]   CI (99.9%): [583,400, 597,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,000, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,782 ±(99.9%) 1159,773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,782, 674,422), stdev = 301,189
[info]   CI (99.9%): [≈ 0, 1698,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1124,550 ±(99.9%) 2420,731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1124,550, 1410,829), stdev = 628,656
[info]   CI (99.9%): [≈ 0, 3545,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,536 ±(99.9%) 4,527 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,536, 2,639), stdev = 1,176
[info]   CI (99.9%): [≈ 0, 5,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,122 ±(99.9%) 9,476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,122, 5,524), stdev = 2,461
[info]   CI (99.9%): [≈ 0, 10,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,44% complete, ETA 01:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411596,058 ops/s
[info] # Warmup Iteration   2: 541880,244 ops/s
[info] # Warmup Iteration   3: 544380,516 ops/s
[info] # Warmup Iteration   4: 545907,358 ops/s
[info] # Warmup Iteration   5: 540111,622 ops/s
[info] Iteration   1: 542244,911 ops/s
[info]                  ·gc.alloc.rate:                   556,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1957,464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,242 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 543151,074 ops/s
[info]                  ·gc.alloc.rate:      557,672 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 545778,264 ops/s
[info]                  ·gc.alloc.rate:                   560,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1944,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 543489,409 ops/s
[info]                  ·gc.alloc.rate:                   558,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1954,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 542829,317 ops/s
[info]                  ·gc.alloc.rate:               557,269 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1957,286 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   543498,595 ±(99.9%) 5215,243 ops/s [Average]
[info]   (min, avg, max) = (542244,911, 543498,595, 545778,264), stdev = 1354,382
[info]   CI (99.9%): [538283,352, 548713,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   558,015 ±(99.9%) 5,368 MB/sec [Average]
[info]   (min, avg, max) = (556,732, 558,015, 560,350), stdev = 1,394
[info]   CI (99.9%): [552,647, 563,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1616,001, 1616,001, 1616,001), stdev = 0,001
[info]   CI (99.9%): [1616,001, 1616,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,755 ±(99.9%) 1161,864 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,755, 675,084), stdev = 301,732
[info]   CI (99.9%): [≈ 0, 1701,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1562,889 ±(99.9%) 3364,295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1562,889, 1957,464), stdev = 873,697
[info]   CI (99.9%): [≈ 0, 4927,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,072 ±(99.9%) 0,382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,072, 0,242), stdev = 0,099
[info]   CI (99.9%): [≈ 0, 0,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,64% complete, ETA 01:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 659809,732 ops/s
[info] # Warmup Iteration   2: 709575,537 ops/s
[info] # Warmup Iteration   3: 661590,298 ops/s
[info] # Warmup Iteration   4: 666761,986 ops/s
[info] # Warmup Iteration   5: 661152,763 ops/s
[info] Iteration   1: 660818,737 ops/s
[info]                  ·gc.alloc.rate:                   517,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1218,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 665053,915 ops/s
[info]                  ·gc.alloc.rate:                   520,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,359 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 669321,549 ops/s
[info]                  ·gc.alloc.rate:      523,922 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 587679,170 ops/s
[info]                  ·gc.alloc.rate:                   460,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1807,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,111 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 634483,706 ops/s
[info]                  ·gc.alloc.rate:                   496,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1668,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   643471,415 ±(99.9%) 130985,821 ops/s [Average]
[info]   (min, avg, max) = (587679,170, 643471,415, 669321,549), stdev = 34016,602
[info]   CI (99.9%): [512485,594, 774457,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   503,716 ±(99.9%) 102,258 MB/sec [Average]
[info]   (min, avg, max) = (460,175, 503,716, 523,922), stdev = 26,556
[info]   CI (99.9%): [401,458, 605,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,001, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,804 ±(99.9%) 1124,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,804, 674,964), stdev = 291,935
[info]   CI (99.9%): [≈ 0, 1630,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1258,234 ±(99.9%) 2835,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1258,234, 1807,044), stdev = 736,419
[info]   CI (99.9%): [≈ 0, 4093,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,637 ±(99.9%) 5,322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,637, 3,109), stdev = 1,382
[info]   CI (99.9%): [≈ 0, 5,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,511 ±(99.9%) 12,588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,511, 7,359), stdev = 3,269
[info]   CI (99.9%): [≈ 0, 14,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40,85% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711153,957 ops/s
[info] # Warmup Iteration   2: 778386,472 ops/s
[info] # Warmup Iteration   3: 789575,371 ops/s
[info] # Warmup Iteration   4: 792188,402 ops/s
[info] # Warmup Iteration   5: 792071,865 ops/s
[info] Iteration   1: 790551,884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 792311,173 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 793797,279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 791037,454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 793302,285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   792200,015 ±(99.9%) 5393,133 ops/s [Average]
[info]   (min, avg, max) = (790551,884, 792200,015, 793797,279), stdev = 1400,579
[info]   CI (99.9%): [786806,883, 797593,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,05% complete, ETA 01:18:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25073,362 ops/s
[info] # Warmup Iteration   2: 33622,291 ops/s
[info] # Warmup Iteration   3: 33895,652 ops/s
[info] # Warmup Iteration   4: 34010,432 ops/s
[info] # Warmup Iteration   5: 34093,180 ops/s
[info] Iteration   1: 33800,258 ops/s
[info]                  ·gc.alloc.rate:                   1728,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              80496,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93607,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,908 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33902,778 ops/s
[info]                  ·gc.alloc.rate:                   1733,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              80496,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93468,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,933 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33410,611 ops/s
[info]                  ·gc.alloc.rate:                   1709,436 MB/sec
[info]                  ·gc.alloc.rate.norm:              80496,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63323,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,981 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33461,692 ops/s
[info]                  ·gc.alloc.rate:                   1711,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              80496,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94981,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,896 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33768,342 ops/s
[info]                  ·gc.alloc.rate:               1727,265 MB/sec
[info]                  ·gc.alloc.rate.norm:          80496,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62866,130 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   33668,736 ±(99.9%) 842,514 ops/s [Average]
[info]   (min, avg, max) = (33410,611, 33668,736, 33902,778), stdev = 218,798
[info]   CI (99.9%): [32826,222, 34511,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1722,175 ±(99.9%) 42,079 MB/sec [Average]
[info]   (min, avg, max) = (1709,436, 1722,175, 1733,999), stdev = 10,928
[info]   CI (99.9%): [1680,096, 1764,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80496,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (80496,012, 80496,012, 80496,013), stdev = 0,001
[info]   CI (99.9%): [80496,011, 80496,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1747,385 ±(99.9%) 1407,961 MB/sec [Average]
[info]   (min, avg, max) = (1344,761, 1747,385, 2019,724), stdev = 365,643
[info]   CI (99.9%): [339,423, 3155,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81649,577 ±(99.9%) 65264,897 B/op [Average]
[info]   (min, avg, max) = (62866,130, 81649,577, 94981,867), stdev = 16949,086
[info]   CI (99.9%): [16384,680, 146914,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,143 ±(99.9%) 7,242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,143, 4,896), stdev = 1,881
[info]   CI (99.9%): [≈ 0, 9,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41,25% complete, ETA 01:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6226,802 ops/s
[info] # Warmup Iteration   2: 8658,079 ops/s
[info] # Warmup Iteration   3: 8788,959 ops/s
[info] # Warmup Iteration   4: 8856,307 ops/s
[info] # Warmup Iteration   5: 8804,177 ops/s
[info] Iteration   1: 8802,685 ops/s
[info]                  ·gc.alloc.rate:                   1355,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240348,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,722 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8849,698 ops/s
[info]                  ·gc.alloc.rate:               1362,584 MB/sec
[info]                  ·gc.alloc.rate.norm:          242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239072,011 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8706,593 ops/s
[info]                  ·gc.alloc.rate:                   1340,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243030,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,763 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 8853,429 ops/s
[info]                  ·gc.alloc.rate:               1363,064 MB/sec
[info]                  ·gc.alloc.rate.norm:          242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239200,849 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8813,668 ops/s
[info]                  ·gc.alloc.rate:               1356,747 MB/sec
[info]                  ·gc.alloc.rate.norm:          242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240496,900 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8805,215 ±(99.9%) 228,680 ops/s [Average]
[info]   (min, avg, max) = (8706,593, 8805,215, 8853,429), stdev = 59,388
[info]   CI (99.9%): [8576,534, 9033,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1355,599 ±(99.9%) 35,257 MB/sec [Average]
[info]   (min, avg, max) = (1340,456, 1355,599, 1363,064), stdev = 9,156
[info]   CI (99.9%): [1320,342, 1390,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296,047 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (242296,046, 242296,047, 242296,051), stdev = 0,002
[info]   CI (99.9%): [242296,040, 242296,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1345,109 ±(99.9%) 3,972 MB/sec [Average]
[info]   (min, avg, max) = (1344,250, 1345,109, 1346,673), stdev = 1,031
[info]   CI (99.9%): [1341,138, 1349,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   240429,665 ±(99.9%) 6127,100 B/op [Average]
[info]   (min, avg, max) = (239072,011, 240429,665, 243030,274), stdev = 1591,188
[info]   CI (99.9%): [234302,565, 246556,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,497 ±(99.9%) 7,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,497, 3,763), stdev = 2,050
[info]   CI (99.9%): [≈ 0, 9,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,45% complete, ETA 01:17:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5253,645 ops/s
[info] # Warmup Iteration   2: 9179,727 ops/s
[info] # Warmup Iteration   3: 9328,172 ops/s
[info] # Warmup Iteration   4: 9300,852 ops/s
[info] # Warmup Iteration   5: 9037,749 ops/s
[info] Iteration   1: 9268,901 ops/s
[info]                  ·gc.alloc.rate:                   1335,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229598,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,603 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9246,641 ops/s
[info]                  ·gc.alloc.rate:                   1332,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230371,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,086 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9342,727 ops/s
[info]                  ·gc.alloc.rate:                   1346,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228197,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,507 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9312,664 ops/s
[info]                  ·gc.alloc.rate:                   1342,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229076,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,518 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9320,570 ops/s
[info]                  ·gc.alloc.rate:                   1343,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229049,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,029 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9298,301 ±(99.9%) 151,710 ops/s [Average]
[info]   (min, avg, max) = (9246,641, 9298,301, 9342,727), stdev = 39,399
[info]   CI (99.9%): [9146,590, 9450,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1340,020 ±(99.9%) 21,919 MB/sec [Average]
[info]   (min, avg, max) = (1332,520, 1340,020, 1346,488), stdev = 5,692
[info]   CI (99.9%): [1318,102, 1361,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226824,046 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (226824,044, 226824,046, 226824,047), stdev = 0,002
[info]   CI (99.9%): [226824,039, 226824,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,389 ±(99.9%) 6,324 MB/sec [Average]
[info]   (min, avg, max) = (1352,186, 1354,389, 1356,314), stdev = 1,642
[info]   CI (99.9%): [1348,065, 1360,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   229258,807 ±(99.9%) 3078,511 B/op [Average]
[info]   (min, avg, max) = (228197,699, 229258,807, 230371,546), stdev = 799,480
[info]   CI (99.9%): [226180,296, 232337,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,349 ±(99.9%) 11,423 B/op [Average]
[info]   (min, avg, max) = (3,507, 6,349, 10,603), stdev = 2,966
[info]   CI (99.9%): [≈ 0, 17,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,65% complete, ETA 01:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148968,649 ops/s
[info] # Warmup Iteration   2: 165397,952 ops/s
[info] # Warmup Iteration   3: 165700,764 ops/s
[info] # Warmup Iteration   4: 165931,904 ops/s
[info] # Warmup Iteration   5: 166226,090 ops/s
[info] Iteration   1: 165932,365 ops/s
[info]                  ·gc.alloc.rate:                   1607,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12775,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 162170,596 ops/s
[info]                  ·gc.alloc.rate:               1571,557 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13075,280 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 166254,696 ops/s
[info]                  ·gc.alloc.rate:                   1610,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19142,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,591 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 166164,136 ops/s
[info]                  ·gc.alloc.rate:               1609,896 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12781,665 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 162967,486 ops/s
[info]                  ·gc.alloc.rate:                   1578,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19574,963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,402 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   164697,856 ±(99.9%) 7574,855 ops/s [Average]
[info]   (min, avg, max) = (162170,596, 164697,856, 166254,696), stdev = 1967,166
[info]   CI (99.9%): [157123,000, 172272,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1595,681 ±(99.9%) 73,121 MB/sec [Average]
[info]   (min, avg, max) = (1571,557, 1595,681, 1610,827), stdev = 18,989
[info]   CI (99.9%): [1522,560, 1668,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15248,002, 15248,003, 15248,003), stdev = 0,001
[info]   CI (99.9%): [15248,002, 15248,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1618,551 ±(99.9%) 1426,685 MB/sec [Average]
[info]   (min, avg, max) = (1346,807, 1618,551, 2026,633), stdev = 370,506
[info]   CI (99.9%): [191,866, 3045,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15469,866 ±(99.9%) 13689,701 B/op [Average]
[info]   (min, avg, max) = (12775,415, 15469,866, 19574,963), stdev = 3555,172
[info]   CI (99.9%): [1780,165, 29159,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,238 ±(99.9%) 0,994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,238, 0,591), stdev = 0,258
[info]   CI (99.9%): [≈ 0, 1,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,85% complete, ETA 01:17:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4804,900 ops/s
[info] # Warmup Iteration   2: 8159,332 ops/s
[info] # Warmup Iteration   3: 8192,722 ops/s
[info] # Warmup Iteration   4: 8204,941 ops/s
[info] # Warmup Iteration   5: 8287,613 ops/s
[info] Iteration   1: 8276,876 ops/s
[info]                  ·gc.alloc.rate:               1505,434 MB/sec
[info]                  ·gc.alloc.rate.norm:          286256,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 257331,695 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 8203,082 ops/s
[info]                  ·gc.alloc.rate:               1491,992 MB/sec
[info]                  ·gc.alloc.rate.norm:          286256,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259811,701 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8155,583 ops/s
[info]                  ·gc.alloc.rate:                   1483,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              286257,218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392412,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,050 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8230,924 ops/s
[info]                  ·gc.alloc.rate:               1497,145 MB/sec
[info]                  ·gc.alloc.rate.norm:          286256,265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259406,037 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 8295,651 ops/s
[info]                  ·gc.alloc.rate:                   1508,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              286256,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257531,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,796 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8232,423 ±(99.9%) 217,326 ops/s [Average]
[info]   (min, avg, max) = (8155,583, 8232,423, 8295,651), stdev = 56,439
[info]   CI (99.9%): [8015,098, 8449,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1497,307 ±(99.9%) 39,621 MB/sec [Average]
[info]   (min, avg, max) = (1483,221, 1497,307, 1508,742), stdev = 10,289
[info]   CI (99.9%): [1457,686, 1536,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286256,329 ±(99.9%) 1,947 B/op [Average]
[info]   (min, avg, max) = (286256,050, 286256,329, 286257,218), stdev = 0,506
[info]   CI (99.9%): [286254,382, 286258,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,961 ±(99.9%) 1167,355 MB/sec [Average]
[info]   (min, avg, max) = (1353,319, 1490,961, 2033,258), stdev = 303,158
[info]   CI (99.9%): [323,606, 2658,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   285298,756 ±(99.9%) 230609,689 B/op [Average]
[info]   (min, avg, max) = (257331,695, 285298,756, 392412,666), stdev = 59888,604
[info]   CI (99.9%): [54689,067, 515908,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,569 ±(99.9%) 29,804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,569, 15,796), stdev = 7,740
[info]   CI (99.9%): [≈ 0, 35,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 42,05% complete, ETA 01:16:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5770,699 ops/s
[info] # Warmup Iteration   2: 8663,117 ops/s
[info] # Warmup Iteration   3: 8669,871 ops/s
[info] # Warmup Iteration   4: 8698,256 ops/s
[info] # Warmup Iteration   5: 8703,196 ops/s
[info] Iteration   1: 8659,684 ops/s
[info]                  ·gc.alloc.rate:                   1301,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              236504,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244530,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,349 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8753,777 ops/s
[info]                  ·gc.alloc.rate:                   1315,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              236504,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241905,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8721,825 ops/s
[info]                  ·gc.alloc.rate:               1310,610 MB/sec
[info]                  ·gc.alloc.rate.norm:          236518,390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 242885,054 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8713,898 ops/s
[info]                  ·gc.alloc.rate:                   1309,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              236528,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243256,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,519 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8701,669 ops/s
[info]                  ·gc.alloc.rate:               1307,847 MB/sec
[info]                  ·gc.alloc.rate.norm:          236528,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 243832,471 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8710,170 ±(99.9%) 131,606 ops/s [Average]
[info]   (min, avg, max) = (8659,684, 8710,170, 8753,777), stdev = 34,178
[info]   CI (99.9%): [8578,564, 8841,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1309,063 ±(99.9%) 19,184 MB/sec [Average]
[info]   (min, avg, max) = (1301,727, 1309,063, 1315,485), stdev = 4,982
[info]   CI (99.9%): [1289,879, 1328,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   236516,516 ±(99.9%) 46,380 B/op [Average]
[info]   (min, avg, max) = (236504,047, 236516,516, 236528,047), stdev = 12,045
[info]   CI (99.9%): [236470,136, 236562,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1346,492 ±(99.9%) 4,238 MB/sec [Average]
[info]   (min, avg, max) = (1345,529, 1346,492, 1348,236), stdev = 1,101
[info]   CI (99.9%): [1342,254, 1350,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   243281,920 ±(99.9%) 3809,598 B/op [Average]
[info]   (min, avg, max) = (241905,381, 243281,920, 244530,538), stdev = 989,340
[info]   CI (99.9%): [239472,323, 247091,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   6,019 ±(99.9%) 21,972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,019, 11,349), stdev = 5,706
[info]   CI (99.9%): [≈ 0, 27,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42,25% complete, ETA 01:16:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16449,400 ops/s
[info] # Warmup Iteration   2: 21256,111 ops/s
[info] # Warmup Iteration   3: 21281,226 ops/s
[info] # Warmup Iteration   4: 21321,073 ops/s
[info] # Warmup Iteration   5: 21431,051 ops/s
[info] Iteration   1: 21474,947 ops/s
[info]                  ·gc.alloc.rate:               974,416 MB/sec
[info]                  ·gc.alloc.rate.norm:          71414,837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49253,442 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 21528,916 ops/s
[info]                  ·gc.alloc.rate:                   976,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98220,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 21577,345 ops/s
[info]                  ·gc.alloc.rate:               978,960 MB/sec
[info]                  ·gc.alloc.rate.norm:          71408,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48972,090 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 19560,756 ops/s
[info]                  ·gc.alloc.rate:                   887,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108040,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,675 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21536,162 ops/s
[info]                  ·gc.alloc.rate:                   977,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49065,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,521 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   21135,625 ±(99.9%) 3392,927 ops/s [Average]
[info]   (min, avg, max) = (19560,756, 21135,625, 21577,345), stdev = 881,132
[info]   CI (99.9%): [17742,698, 24528,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   958,950 ±(99.9%) 153,805 MB/sec [Average]
[info]   (min, avg, max) = (887,557, 958,950, 978,960), stdev = 39,943
[info]   CI (99.9%): [805,146, 1112,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71409,383 ±(99.9%) 11,739 B/op [Average]
[info]   (min, avg, max) = (71408,019, 71409,383, 71414,837), stdev = 3,049
[info]   CI (99.9%): [71397,644, 71421,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,238 ±(99.9%) 1416,583 MB/sec [Average]
[info]   (min, avg, max) = (671,313, 940,238, 1343,584), stdev = 367,882
[info]   CI (99.9%): [≈ 0, 2356,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   70710,416 ±(99.9%) 114743,866 B/op [Average]
[info]   (min, avg, max) = (48972,090, 70710,416, 108040,949), stdev = 29798,618
[info]   CI (99.9%): [≈ 0, 185454,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,248 ±(99.9%) 4,945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,248, 3,044), stdev = 1,284
[info]   CI (99.9%): [≈ 0, 6,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,45% complete, ETA 01:16:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16295,667 ops/s
[info] # Warmup Iteration   2: 24338,767 ops/s
[info] # Warmup Iteration   3: 24097,047 ops/s
[info] # Warmup Iteration   4: 24453,061 ops/s
[info] # Warmup Iteration   5: 24231,983 ops/s
[info] Iteration   1: 24457,938 ops/s
[info]                  ·gc.alloc.rate:                   1036,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86846,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24468,501 ops/s
[info]                  ·gc.alloc.rate:               1036,910 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43463,957 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 24403,429 ops/s
[info]                  ·gc.alloc.rate:                   1034,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87245,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,685 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21932,082 ops/s
[info]                  ·gc.alloc.rate:               929,461 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48585,901 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 24384,424 ops/s
[info]                  ·gc.alloc.rate:               1033,222 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43699,623 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23929,275 ±(99.9%) 4301,278 ops/s [Average]
[info]   (min, avg, max) = (21932,082, 23929,275, 24468,501), stdev = 1117,028
[info]   CI (99.9%): [19627,997, 28230,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1014,099 ±(99.9%) 182,296 MB/sec [Average]
[info]   (min, avg, max) = (929,461, 1014,099, 1036,910), stdev = 47,342
[info]   CI (99.9%): [831,803, 1196,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696,018 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (66696,017, 66696,018, 66696,020), stdev = 0,001
[info]   CI (99.9%): [66696,013, 66696,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,506 ±(99.9%) 1423,177 MB/sec [Average]
[info]   (min, avg, max) = (675,725, 946,506, 1352,760), stdev = 369,594
[info]   CI (99.9%): [≈ 0, 2369,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61968,165 ±(99.9%) 88503,528 B/op [Average]
[info]   (min, avg, max) = (43463,957, 61968,165, 87245,303), stdev = 22984,085
[info]   CI (99.9%): [≈ 0, 150471,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,340 ±(99.9%) 7,293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,340, 4,015), stdev = 1,894
[info]   CI (99.9%): [≈ 0, 8,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,66% complete, ETA 01:16:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453253,444 ops/s
[info] # Warmup Iteration   2: 493852,100 ops/s
[info] # Warmup Iteration   3: 493659,061 ops/s
[info] # Warmup Iteration   4: 495090,173 ops/s
[info] # Warmup Iteration   5: 497567,748 ops/s
[info] Iteration   1: 497574,121 ops/s
[info]                  ·gc.alloc.rate:                   1128,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4262,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 493930,180 ops/s
[info]                  ·gc.alloc.rate:                   1119,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4289,892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 493618,958 ops/s
[info]                  ·gc.alloc.rate:               1119,339 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2144,979 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 498496,449 ops/s
[info]                  ·gc.alloc.rate:                   1130,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4252,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 498005,049 ops/s
[info]                  ·gc.alloc.rate:                   1128,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4258,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   496324,951 ±(99.9%) 9062,498 ops/s [Average]
[info]   (min, avg, max) = (493618,958, 496324,951, 498496,449), stdev = 2353,502
[info]   CI (99.9%): [487262,454, 505387,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1125,336 ±(99.9%) 20,348 MB/sec [Average]
[info]   (min, avg, max) = (1119,339, 1125,336, 1130,266), stdev = 5,284
[info]   CI (99.9%): [1104,988, 1145,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3568,001, 3568,001, 3568,001), stdev = 0,001
[info]   CI (99.9%): [3568,001, 3568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,342 ±(99.9%) 1161,160 MB/sec [Average]
[info]   (min, avg, max) = (672,914, 1212,342, 1347,847), stdev = 301,550
[info]   CI (99.9%): [51,181, 2373,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3841,644 ±(99.9%) 3652,617 B/op [Average]
[info]   (min, avg, max) = (2144,979, 3841,644, 4289,892), stdev = 948,573
[info]   CI (99.9%): [189,028, 7494,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,158 ±(99.9%) 0,384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,158, 0,263), stdev = 0,100
[info]   CI (99.9%): [≈ 0, 0,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42,86% complete, ETA 01:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552901,742 ops/s
[info] # Warmup Iteration   2: 601300,056 ops/s
[info] # Warmup Iteration   3: 605970,798 ops/s
[info] # Warmup Iteration   4: 604509,520 ops/s
[info] # Warmup Iteration   5: 599262,229 ops/s
[info] Iteration   1: 598934,417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 605602,640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 605308,178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 603938,300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 604312,853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   603619,278 ±(99.9%) 10424,664 ops/s [Average]
[info]   (min, avg, max) = (598934,417, 603619,278, 605602,640), stdev = 2707,252
[info]   CI (99.9%): [593194,614, 614043,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43,06% complete, ETA 01:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15716,063 ops/s
[info] # Warmup Iteration   2: 20392,343 ops/s
[info] # Warmup Iteration   3: 20480,202 ops/s
[info] # Warmup Iteration   4: 20463,797 ops/s
[info] # Warmup Iteration   5: 20523,663 ops/s
[info] Iteration   1: 20321,327 ops/s
[info]                  ·gc.alloc.rate:               937,275 MB/sec
[info]                  ·gc.alloc.rate.norm:          72569,413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51946,477 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20599,229 ops/s
[info]                  ·gc.alloc.rate:                   949,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102450,298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,590 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18526,013 ops/s
[info]                  ·gc.alloc.rate:               854,022 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56924,476 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 20515,591 ops/s
[info]                  ·gc.alloc.rate:                   945,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51401,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,984 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 20508,269 ops/s
[info]                  ·gc.alloc.rate:               945,351 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102843,663 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   20094,086 ±(99.9%) 3398,003 ops/s [Average]
[info]   (min, avg, max) = (18526,013, 20094,086, 20599,229), stdev = 882,450
[info]   CI (99.9%): [16696,083, 23492,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   926,437 ±(99.9%) 156,849 MB/sec [Average]
[info]   (min, avg, max) = (854,022, 926,437, 949,698), stdev = 40,733
[info]   CI (99.9%): [769,588, 1083,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72561,900 ±(99.9%) 16,173 B/op [Average]
[info]   (min, avg, max) = (72560,020, 72561,900, 72569,413), stdev = 4,200
[info]   CI (99.9%): [72545,727, 72578,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   938,353 ±(99.9%) 1413,283 MB/sec [Average]
[info]   (min, avg, max) = (669,993, 938,353, 1340,915), stdev = 367,025
[info]   CI (99.9%): [≈ 0, 2351,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73113,340 ±(99.9%) 104146,505 B/op [Average]
[info]   (min, avg, max) = (51401,786, 73113,340, 102843,663), stdev = 27046,517
[info]   CI (99.9%): [≈ 0, 177259,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,915 ±(99.9%) 13,330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,915, 7,984), stdev = 3,462
[info]   CI (99.9%): [≈ 0, 15,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43,26% complete, ETA 01:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10720,487 ops/s
[info] # Warmup Iteration   2: 11720,741 ops/s
[info] # Warmup Iteration   3: 11506,199 ops/s
[info] # Warmup Iteration   4: 11281,967 ops/s
[info] # Warmup Iteration   5: 11364,405 ops/s
[info] Iteration   1: 11425,590 ops/s
[info]                  ·gc.alloc.rate:                   618,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              85194,950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93031,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 388,356 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11384,207 ops/s
[info]                  ·gc.alloc.rate:      616,214 MB/sec
[info]                  ·gc.alloc.rate.norm: 85192,039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 11662,117 ops/s
[info]                  ·gc.alloc.rate:                   631,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              85192,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91141,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,618 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 11421,327 ops/s
[info]                  ·gc.alloc.rate:               618,237 MB/sec
[info]                  ·gc.alloc.rate.norm:          85192,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92788,651 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 11650,952 ops/s
[info]                  ·gc.alloc.rate:                   630,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              85192,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90965,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,623 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   11508,839 ±(99.9%) 523,079 ops/s [Average]
[info]   (min, avg, max) = (11384,207, 11508,839, 11662,117), stdev = 135,842
[info]   CI (99.9%): [10985,760, 12031,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   622,933 ±(99.9%) 28,119 MB/sec [Average]
[info]   (min, avg, max) = (616,214, 622,933, 631,200), stdev = 7,302
[info]   CI (99.9%): [594,815, 651,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   85192,621 ±(99.9%) 5,014 B/op [Average]
[info]   (min, avg, max) = (85192,035, 85192,621, 85194,950), stdev = 1,302
[info]   CI (99.9%): [85187,607, 85197,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   539,456 ±(99.9%) 1161,227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,456, 675,365), stdev = 301,567
[info]   CI (99.9%): [≈ 0, 1700,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   73585,375 ±(99.9%) 158438,922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73585,375, 93031,417), stdev = 41146,085
[info]   CI (99.9%): [≈ 0, 232024,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,581 ±(99.9%) 4,820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,581, 2,819), stdev = 1,252
[info]   CI (99.9%): [≈ 0, 5,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   79,919 ±(99.9%) 664,021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79,919, 388,356), stdev = 172,444
[info]   CI (99.9%): [≈ 0, 743,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43,46% complete, ETA 01:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12181,052 ops/s
[info] # Warmup Iteration   2: 15795,850 ops/s
[info] # Warmup Iteration   3: 15755,136 ops/s
[info] # Warmup Iteration   4: 15732,915 ops/s
[info] # Warmup Iteration   5: 15214,134 ops/s
[info] Iteration   1: 15336,730 ops/s
[info]                  ·gc.alloc.rate:                   1470,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137796,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,272 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 15569,201 ops/s
[info]                  ·gc.alloc.rate:               1493,220 MB/sec
[info]                  ·gc.alloc.rate.norm:          150944,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 135886,615 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 15819,922 ops/s
[info]                  ·gc.alloc.rate:                   1517,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133797,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15827,307 ops/s
[info]                  ·gc.alloc.rate:               1518,033 MB/sec
[info]                  ·gc.alloc.rate.norm:          150944,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019,902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 200846,812 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 15833,804 ops/s
[info]                  ·gc.alloc.rate:                   1518,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134001,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   15677,393 ±(99.9%) 850,221 ops/s [Average]
[info]   (min, avg, max) = (15336,730, 15677,393, 15833,804), stdev = 220,800
[info]   CI (99.9%): [14827,171, 16527,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1503,568 ±(99.9%) 81,627 MB/sec [Average]
[info]   (min, avg, max) = (1470,842, 1503,568, 1518,549), stdev = 21,198
[info]   CI (99.9%): [1421,941, 1585,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   150944,028 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (150944,026, 150944,028, 150944,035), stdev = 0,004
[info]   CI (99.9%): [150944,013, 150944,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1479,968 ±(99.9%) 1162,272 MB/sec [Average]
[info]   (min, avg, max) = (1342,724, 1479,968, 2019,902), stdev = 301,838
[info]   CI (99.9%): [317,696, 2642,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   148465,685 ±(99.9%) 112926,763 B/op [Average]
[info]   (min, avg, max) = (133797,317, 148465,685, 200846,812), stdev = 29326,722
[info]   CI (99.9%): [35538,922, 261392,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,096 ±(99.9%) 8,098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,096, 4,272), stdev = 2,103
[info]   CI (99.9%): [≈ 0, 10,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,66% complete, ETA 01:14:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9658,285 ops/s
[info] # Warmup Iteration   2: 16001,995 ops/s
[info] # Warmup Iteration   3: 15207,646 ops/s
[info] # Warmup Iteration   4: 15286,298 ops/s
[info] # Warmup Iteration   5: 15983,038 ops/s
[info] Iteration   1: 16021,776 ops/s
[info]                  ·gc.alloc.rate:                   1466,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              144048,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132887,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15989,459 ops/s
[info]                  ·gc.alloc.rate:               1463,436 MB/sec
[info]                  ·gc.alloc.rate.norm:          144048,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133284,670 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16002,142 ops/s
[info]                  ·gc.alloc.rate:                   1464,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              144048,896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133241,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,047 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15876,465 ops/s
[info]                  ·gc.alloc.rate:                   1453,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              144048,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134431,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16014,927 ops/s
[info]                  ·gc.alloc.rate:               1465,673 MB/sec
[info]                  ·gc.alloc.rate.norm:          144048,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133338,493 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   15980,954 ±(99.9%) 229,911 ops/s [Average]
[info]   (min, avg, max) = (15876,465, 15980,954, 16021,776), stdev = 59,707
[info]   CI (99.9%): [15751,043, 16210,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1462,656 ±(99.9%) 20,889 MB/sec [Average]
[info]   (min, avg, max) = (1453,163, 1462,656, 1466,417), stdev = 5,425
[info]   CI (99.9%): [1441,767, 1483,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144048,202 ±(99.9%) 1,494 B/op [Average]
[info]   (min, avg, max) = (144048,025, 144048,202, 144048,896), stdev = 0,388
[info]   CI (99.9%): [144046,708, 144049,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,891 ±(99.9%) 6,057 MB/sec [Average]
[info]   (min, avg, max) = (1352,804, 1354,891, 1356,704), stdev = 1,573
[info]   CI (99.9%): [1348,834, 1360,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   133436,779 ±(99.9%) 2246,125 B/op [Average]
[info]   (min, avg, max) = (132887,674, 133436,779, 134431,128), stdev = 583,311
[info]   CI (99.9%): [131190,654, 135682,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,053 ±(99.9%) 7,909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,053, 4,127), stdev = 2,054
[info]   CI (99.9%): [≈ 0, 9,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,86% complete, ETA 01:14:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254819,974 ops/s
[info] # Warmup Iteration   2: 270628,393 ops/s
[info] # Warmup Iteration   3: 276772,102 ops/s
[info] # Warmup Iteration   4: 274528,769 ops/s
[info] # Warmup Iteration   5: 268155,378 ops/s
[info] Iteration   1: 276923,292 ops/s
[info]                  ·gc.alloc.rate:                   1601,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7639,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,237 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 275579,976 ops/s
[info]                  ·gc.alloc.rate:               1594,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7680,942 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 269739,579 ops/s
[info]                  ·gc.alloc.rate:                   1560,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11783,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,243 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 265558,592 ops/s
[info]                  ·gc.alloc.rate:               1536,062 MB/sec
[info]                  ·gc.alloc.rate.norm:          9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7989,963 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 277407,058 ops/s
[info]                  ·gc.alloc.rate:                   1604,383 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7656,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   273041,699 ±(99.9%) 19959,087 ops/s [Average]
[info]   (min, avg, max) = (265558,592, 273041,699, 277407,058), stdev = 5183,311
[info]   CI (99.9%): [253082,613, 293000,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1579,304 ±(99.9%) 115,152 MB/sec [Average]
[info]   (min, avg, max) = (1536,062, 1579,304, 1604,383), stdev = 29,905
[info]   CI (99.9%): [1464,152, 1694,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9104,001, 9104,001, 9104,002), stdev = 0,001
[info]   CI (99.9%): [9104,001, 9104,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1481,189 ±(99.9%) 1159,032 MB/sec [Average]
[info]   (min, avg, max) = (1343,949, 1481,189, 2019,614), stdev = 300,997
[info]   CI (99.9%): [322,157, 2640,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8550,162 ±(99.9%) 6982,921 B/op [Average]
[info]   (min, avg, max) = (7639,498, 8550,162, 11783,893), stdev = 1813,442
[info]   CI (99.9%): [1567,241, 15533,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,167 ±(99.9%) 0,613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,167, 0,354), stdev = 0,159
[info]   CI (99.9%): [≈ 0, 0,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44,06% complete, ETA 01:14:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7239,882 ops/s
[info] # Warmup Iteration   2: 13621,812 ops/s
[info] # Warmup Iteration   3: 13738,905 ops/s
[info] # Warmup Iteration   4: 13603,656 ops/s
[info] # Warmup Iteration   5: 13730,068 ops/s
[info] Iteration   1: 13726,559 ops/s
[info]                  ·gc.alloc.rate:                   1717,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232702,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,387 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13740,938 ops/s
[info]                  ·gc.alloc.rate:                   1719,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155115,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,153 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13730,098 ops/s
[info]                  ·gc.alloc.rate:                   1718,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233127,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,773 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13632,276 ops/s
[info]                  ·gc.alloc.rate:               1706,301 MB/sec
[info]                  ·gc.alloc.rate.norm:          196976,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156640,460 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 13686,587 ops/s
[info]                  ·gc.alloc.rate:                   1712,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234148,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,787 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13703,291 ±(99.9%) 172,200 ops/s [Average]
[info]   (min, avg, max) = (13632,276, 13703,291, 13740,938), stdev = 44,720
[info]   CI (99.9%): [13531,091, 13875,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1714,975 ±(99.9%) 21,199 MB/sec [Average]
[info]   (min, avg, max) = (1706,301, 1714,975, 1719,603), stdev = 5,505
[info]   CI (99.9%): [1693,776, 1736,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   196976,033 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (196976,030, 196976,033, 196976,040), stdev = 0,004
[info]   CI (99.9%): [196976,019, 196976,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,041 ±(99.9%) 1428,987 MB/sec [Average]
[info]   (min, avg, max) = (1354,162, 1762,041, 2036,016), stdev = 371,103
[info]   CI (99.9%): [333,055, 3191,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202347,009 ±(99.9%) 163370,562 B/op [Average]
[info]   (min, avg, max) = (155115,696, 202347,009, 234148,782), stdev = 42426,816
[info]   CI (99.9%): [38976,446, 365717,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,820 ±(99.9%) 10,475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,820, 7,153), stdev = 2,720
[info]   CI (99.9%): [≈ 0, 14,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44,27% complete, ETA 01:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11364,448 ops/s
[info] # Warmup Iteration   2: 14489,045 ops/s
[info] # Warmup Iteration   3: 14540,032 ops/s
[info] # Warmup Iteration   4: 14593,439 ops/s
[info] # Warmup Iteration   5: 14345,771 ops/s
[info] Iteration   1: 14462,366 ops/s
[info]                  ·gc.alloc.rate:                   1411,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              153656,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146275,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,530 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14640,689 ops/s
[info]                  ·gc.alloc.rate:                   1429,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              153656,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144497,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 14625,409 ops/s
[info]                  ·gc.alloc.rate:                   1427,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              153650,255 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216907,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,954 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13994,607 ops/s
[info]                  ·gc.alloc.rate:               1366,191 MB/sec
[info]                  ·gc.alloc.rate.norm:          153632,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151380,248 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 14630,980 ops/s
[info]                  ·gc.alloc.rate:                   1428,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              153632,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144944,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,478 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   14470,810 ±(99.9%) 1063,738 ops/s [Average]
[info]   (min, avg, max) = (13994,607, 14470,810, 14640,689), stdev = 276,249
[info]   CI (99.9%): [13407,072, 15534,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1412,775 ±(99.9%) 104,045 MB/sec [Average]
[info]   (min, avg, max) = (1366,191, 1412,775, 1429,597), stdev = 27,020
[info]   CI (99.9%): [1308,730, 1516,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   153645,275 ±(99.9%) 47,438 B/op [Average]
[info]   (min, avg, max) = (153632,029, 153645,275, 153656,033), stdev = 12,320
[info]   CI (99.9%): [153597,837, 153692,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1479,594 ±(99.9%) 1154,434 MB/sec [Average]
[info]   (min, avg, max) = (1344,167, 1479,594, 2015,893), stdev = 299,803
[info]   CI (99.9%): [325,160, 2634,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   160801,223 ±(99.9%) 121231,824 B/op [Average]
[info]   (min, avg, max) = (144497,840, 160801,223, 216907,237), stdev = 31483,520
[info]   CI (99.9%): [39569,399, 282033,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,040 ±(99.9%) 12,793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,040, 8,954), stdev = 3,322
[info]   CI (99.9%): [≈ 0, 16,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44,47% complete, ETA 01:13:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25605,099 ops/s
[info] # Warmup Iteration   2: 32523,790 ops/s
[info] # Warmup Iteration   3: 32421,758 ops/s
[info] # Warmup Iteration   4: 32317,617 ops/s
[info] # Warmup Iteration   5: 32067,863 ops/s
[info] Iteration   1: 32599,369 ops/s
[info]                  ·gc.alloc.rate:                   1124,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64868,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 32238,163 ops/s
[info]                  ·gc.alloc.rate:               1112,529 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32781,212 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 32658,972 ops/s
[info]                  ·gc.alloc.rate:                   1127,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64717,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 32598,191 ops/s
[info]                  ·gc.alloc.rate:                   1124,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64830,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 32385,087 ops/s
[info]                  ·gc.alloc.rate:               1117,608 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32661,784 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   32495,956 ±(99.9%) 684,694 ops/s [Average]
[info]   (min, avg, max) = (32238,163, 32495,956, 32658,972), stdev = 177,813
[info]   CI (99.9%): [31811,262, 33180,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1121,379 ±(99.9%) 23,482 MB/sec [Average]
[info]   (min, avg, max) = (1112,529, 1121,379, 1127,020), stdev = 6,098
[info]   CI (99.9%): [1097,897, 1144,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (54312,012, 54312,013, 54312,014), stdev = 0,001
[info]   CI (99.9%): [54312,010, 54312,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,552 ±(99.9%) 1415,748 MB/sec [Average]
[info]   (min, avg, max) = (671,491, 1074,552, 1343,374), stdev = 367,665
[info]   CI (99.9%): [≈ 0, 2490,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51971,918 ±(99.9%) 67668,474 B/op [Average]
[info]   (min, avg, max) = (32661,784, 51971,918, 64868,660), stdev = 17573,288
[info]   CI (99.9%): [≈ 0, 119640,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,005 ±(99.9%) 3,870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,005, 2,010), stdev = 1,005
[info]   CI (99.9%): [≈ 0, 4,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,67% complete, ETA 01:13:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47044,660 ops/s
[info] # Warmup Iteration   2: 67831,420 ops/s
[info] # Warmup Iteration   3: 64996,877 ops/s
[info] # Warmup Iteration   4: 66376,037 ops/s
[info] # Warmup Iteration   5: 68219,288 ops/s
[info] Iteration   1: 67374,386 ops/s
[info]                  ·gc.alloc.rate:                   1072,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31554,370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,972 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 66362,445 ops/s
[info]                  ·gc.alloc.rate:               1056,491 MB/sec
[info]                  ·gc.alloc.rate.norm:          25056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16027,064 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 67928,063 ops/s
[info]                  ·gc.alloc.rate:                   1081,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31343,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 65863,957 ops/s
[info]                  ·gc.alloc.rate:               1048,612 MB/sec
[info]                  ·gc.alloc.rate.norm:          25056,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32357,660 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 68665,057 ops/s
[info]                  ·gc.alloc.rate:                   1093,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          677,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15526,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,954 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   67238,781 ±(99.9%) 4384,440 ops/s [Average]
[info]   (min, avg, max) = (65863,957, 67238,781, 68665,057), stdev = 1138,625
[info]   CI (99.9%): [62854,342, 71623,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1070,430 ±(99.9%) 69,621 MB/sec [Average]
[info]   (min, avg, max) = (1048,612, 1070,430, 1093,070), stdev = 18,080
[info]   CI (99.9%): [1000,809, 1140,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25056,006, 25056,006, 25056,007), stdev = 0,001
[info]   CI (99.9%): [25056,005, 25056,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,170 ±(99.9%) 1425,774 MB/sec [Average]
[info]   (min, avg, max) = (675,784, 1082,170, 1354,191), stdev = 370,269
[info]   CI (99.9%): [≈ 0, 2507,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25361,875 ±(99.9%) 33731,438 B/op [Average]
[info]   (min, avg, max) = (15526,430, 25361,875, 32357,660), stdev = 8759,947
[info]   CI (99.9%): [≈ 0, 59093,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,675 ±(99.9%) 2,491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,675, 1,447), stdev = 0,647
[info]   CI (99.9%): [≈ 0, 3,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,87% complete, ETA 01:13:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704992,962 ops/s
[info] # Warmup Iteration   2: 761448,020 ops/s
[info] # Warmup Iteration   3: 758200,684 ops/s
[info] # Warmup Iteration   4: 758729,823 ops/s
[info] # Warmup Iteration   5: 756156,013 ops/s
[info] Iteration   1: 760864,704 ops/s
[info]                  ·gc.alloc.rate:               1044,180 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1391,614 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 761315,099 ops/s
[info]                  ·gc.alloc.rate:                   1044,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2779,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 762206,257 ops/s
[info]                  ·gc.alloc.rate:               1045,899 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1387,780 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 761426,583 ops/s
[info]                  ·gc.alloc.rate:                   1044,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2778,491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 761079,892 ops/s
[info]                  ·gc.alloc.rate:               1044,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1389,824 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   761378,507 ±(99.9%) 1967,850 ops/s [Average]
[info]   (min, avg, max) = (760864,704, 761378,507, 762206,257), stdev = 511,044
[info]   CI (99.9%): [759410,657, 763346,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1044,795 ±(99.9%) 2,754 MB/sec [Average]
[info]   (min, avg, max) = (1044,153, 1044,795, 1045,899), stdev = 0,715
[info]   CI (99.9%): [1042,041, 1047,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2160,001, 2160,001, 2160,001), stdev = 0,001
[info]   CI (99.9%): [2160,000, 2160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940,990 ±(99.9%) 1417,327 MB/sec [Average]
[info]   (min, avg, max) = (671,846, 940,990, 1344,197), stdev = 368,075
[info]   CI (99.9%): [≈ 0, 2358,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1945,355 ±(99.9%) 2929,603 B/op [Average]
[info]   (min, avg, max) = (1387,780, 1945,355, 2779,064), stdev = 760,809
[info]   CI (99.9%): [≈ 0, 4874,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,052 ±(99.9%) 0,272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,052, 0,129), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45,07% complete, ETA 01:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 801721,245 ops/s
[info] # Warmup Iteration   2: 851610,639 ops/s
[info] # Warmup Iteration   3: 848635,126 ops/s
[info] # Warmup Iteration   4: 850639,230 ops/s
[info] # Warmup Iteration   5: 843852,076 ops/s
[info] Iteration   1: 852738,100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 853154,899 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 853165,626 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 851420,201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 851454,328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   852386,631 ±(99.9%) 3402,854 ops/s [Average]
[info]   (min, avg, max) = (851420,201, 852386,631, 853165,626), stdev = 883,710
[info]   CI (99.9%): [848983,777, 855789,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45,27% complete, ETA 01:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46348,121 ops/s
[info] # Warmup Iteration   2: 74937,004 ops/s
[info] # Warmup Iteration   3: 74978,461 ops/s
[info] # Warmup Iteration   4: 75419,514 ops/s
[info] # Warmup Iteration   5: 75134,496 ops/s
[info] Iteration   1: 75630,353 ops/s
[info]                  ·gc.alloc.rate:               1483,529 MB/sec
[info]                  ·gc.alloc.rate.norm:          30872,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28139,458 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 75060,244 ops/s
[info]                  ·gc.alloc.rate:                   1472,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28379,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,436 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 75637,405 ops/s
[info]                  ·gc.alloc.rate:                   1483,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28190,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 75236,037 ops/s
[info]                  ·gc.alloc.rate:                   1475,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42539,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,435 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 75684,340 ops/s
[info]                  ·gc.alloc.rate:                   1484,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28215,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   75449,676 ±(99.9%) 1089,556 ops/s [Average]
[info]   (min, avg, max) = (75060,244, 75449,676, 75684,340), stdev = 282,954
[info]   CI (99.9%): [74360,120, 76539,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1479,920 ±(99.9%) 21,324 MB/sec [Average]
[info]   (min, avg, max) = (1472,365, 1479,920, 1484,426), stdev = 5,538
[info]   CI (99.9%): [1458,596, 1501,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30872,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (30872,005, 30872,006, 30872,006), stdev = 0,001
[info]   CI (99.9%): [30872,005, 30872,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,093 ±(99.9%) 1169,348 MB/sec [Average]
[info]   (min, avg, max) = (1352,219, 1490,093, 2033,317), stdev = 303,676
[info]   CI (99.9%): [320,745, 2659,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31092,734 ±(99.9%) 24642,236 B/op [Average]
[info]   (min, avg, max) = (28139,458, 31092,734, 42539,400), stdev = 6399,510
[info]   CI (99.9%): [6450,498, 55734,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,521 ±(99.9%) 1,394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,521, 0,866), stdev = 0,362
[info]   CI (99.9%): [≈ 0, 1,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45,47% complete, ETA 01:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19844,846 ops/s
[info] # Warmup Iteration   2: 20304,858 ops/s
[info] # Warmup Iteration   3: 21079,040 ops/s
[info] # Warmup Iteration   4: 21195,035 ops/s
[info] # Warmup Iteration   5: 21140,558 ops/s
[info] Iteration   1: 21213,125 ops/s
[info]                  ·gc.alloc.rate:                   468,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37952,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,831 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 21258,688 ops/s
[info]                  ·gc.alloc.rate:               470,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37875,382 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 21230,948 ops/s
[info]                  ·gc.alloc.rate:                   469,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50016,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240,759 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 21270,818 ops/s
[info]                  ·gc.alloc.rate:      470,341 MB/sec
[info]                  ·gc.alloc.rate.norm: 34800,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21192,632 ops/s
[info]                  ·gc.alloc.rate:                   468,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50106,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,546 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   21233,242 ±(99.9%) 123,561 ops/s [Average]
[info]   (min, avg, max) = (21192,632, 21233,242, 21270,818), stdev = 32,088
[info]   CI (99.9%): [21109,681, 21356,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   469,464 ±(99.9%) 2,854 MB/sec [Average]
[info]   (min, avg, max) = (468,532, 469,464, 470,341), stdev = 0,741
[info]   CI (99.9%): [466,610, 472,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34800,020 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (34800,019, 34800,020, 34800,021), stdev = 0,001
[info]   CI (99.9%): [34800,017, 34800,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,467 ±(99.9%) 1068,519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,467, 674,671), stdev = 277,491
[info]   CI (99.9%): [≈ 0, 1542,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   35190,168 ±(99.9%) 79278,237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35190,168, 50106,490), stdev = 20588,306
[info]   CI (99.9%): [≈ 0, 114468,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,661 ±(99.9%) 5,567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,661, 3,248), stdev = 1,446
[info]   CI (99.9%): [≈ 0, 6,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   49,027 ±(99.9%) 412,742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49,027, 240,759), stdev = 107,188
[info]   CI (99.9%): [≈ 0, 461,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45,67% complete, ETA 01:12:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11951,847 ops/s
[info] # Warmup Iteration   2: 21066,529 ops/s
[info] # Warmup Iteration   3: 21178,049 ops/s
[info] # Warmup Iteration   4: 21232,468 ops/s
[info] # Warmup Iteration   5: 21343,747 ops/s
[info] Iteration   1: 21207,150 ops/s
[info]                  ·gc.alloc.rate:                   794,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100146,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 21009,911 ops/s
[info]                  ·gc.alloc.rate:               787,075 MB/sec
[info]                  ·gc.alloc.rate.norm:          58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50400,312 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 21428,949 ops/s
[info]                  ·gc.alloc.rate:                   802,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49414,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,529 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 21356,847 ops/s
[info]                  ·gc.alloc.rate:                   800,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49525,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,534 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21421,094 ops/s
[info]                  ·gc.alloc.rate:               802,523 MB/sec
[info]                  ·gc.alloc.rate.norm:          58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49379,874 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   21284,790 ±(99.9%) 683,798 ops/s [Average]
[info]   (min, avg, max) = (21009,911, 21284,790, 21428,949), stdev = 177,580
[info]   CI (99.9%): [20600,992, 21968,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   797,464 ±(99.9%) 25,770 MB/sec [Average]
[info]   (min, avg, max) = (787,075, 797,464, 802,943), stdev = 6,692
[info]   CI (99.9%): [771,693, 823,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   58968,020 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (58968,019, 58968,020, 58968,026), stdev = 0,003
[info]   CI (99.9%): [58968,009, 58968,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   807,829 ±(99.9%) 1165,948 MB/sec [Average]
[info]   (min, avg, max) = (672,034, 807,829, 1349,481), stdev = 302,793
[info]   CI (99.9%): [≈ 0, 1973,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   59773,500 ±(99.9%) 86921,656 B/op [Average]
[info]   (min, avg, max) = (49379,874, 59773,500, 100146,843), stdev = 22573,278
[info]   CI (99.9%): [≈ 0, 146695,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,669 ±(99.9%) 5,669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,669, 3,302), stdev = 1,472
[info]   CI (99.9%): [≈ 0, 6,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49,627 ±(99.9%) 420,722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49,627, 245,073), stdev = 109,260
[info]   CI (99.9%): [≈ 0, 470,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,88% complete, ETA 01:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10416,385 ops/s
[info] # Warmup Iteration   2: 20911,564 ops/s
[info] # Warmup Iteration   3: 20282,603 ops/s
[info] # Warmup Iteration   4: 20080,450 ops/s
[info] # Warmup Iteration   5: 20616,218 ops/s
[info] Iteration   1: 20508,384 ops/s
[info]                  ·gc.alloc.rate:                   573,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              44049,358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51759,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,988 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 20678,832 ops/s
[info]                  ·gc.alloc.rate:      578,710 MB/sec
[info]                  ·gc.alloc.rate.norm: 44048,021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20680,607 ops/s
[info]                  ·gc.alloc.rate:                   578,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51328,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,584 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 20681,170 ops/s
[info]                  ·gc.alloc.rate:               578,807 MB/sec
[info]                  ·gc.alloc.rate.norm:          44048,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51374,445 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 20453,535 ops/s
[info]                  ·gc.alloc.rate:               572,366 MB/sec
[info]                  ·gc.alloc.rate.norm:          44048,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51947,002 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   20600,505 ±(99.9%) 426,818 ops/s [Average]
[info]   (min, avg, max) = (20453,535, 20600,505, 20681,170), stdev = 110,843
[info]   CI (99.9%): [20173,688, 21027,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   576,515 ±(99.9%) 11,927 MB/sec [Average]
[info]   (min, avg, max) = (572,366, 576,515, 578,807), stdev = 3,097
[info]   CI (99.9%): [564,589, 588,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44048,288 ±(99.9%) 2,304 B/op [Average]
[info]   (min, avg, max) = (44048,020, 44048,288, 44049,358), stdev = 0,598
[info]   CI (99.9%): [44045,984, 44050,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,779 ±(99.9%) 1161,916 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,779, 675,079), stdev = 301,746
[info]   CI (99.9%): [≈ 0, 1701,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   41281,858 ±(99.9%) 88867,948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41281,858, 51947,002), stdev = 23078,724
[info]   CI (99.9%): [≈ 0, 130149,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,914 ±(99.9%) 13,337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,914, 7,988), stdev = 3,464
[info]   CI (99.9%): [≈ 0, 15,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,08% complete, ETA 01:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111099,840 ops/s
[info] # Warmup Iteration   2: 119016,136 ops/s
[info] # Warmup Iteration   3: 119980,631 ops/s
[info] # Warmup Iteration   4: 112840,365 ops/s
[info] # Warmup Iteration   5: 119457,621 ops/s
[info] Iteration   1: 118612,303 ops/s
[info]                  ·gc.alloc.rate:               297,807 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6787,872 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 119443,766 ops/s
[info]                  ·gc.alloc.rate:                   299,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6741,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,182 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 119762,223 ops/s
[info]                  ·gc.alloc.rate:      300,714 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 119039,574 ops/s
[info]                  ·gc.alloc.rate:               298,909 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6763,416 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 118309,630 ops/s
[info]                  ·gc.alloc.rate:      297,047 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   119033,499 ±(99.9%) 2278,711 ops/s [Average]
[info]   (min, avg, max) = (118309,630, 119033,499, 119762,223), stdev = 591,774
[info]   CI (99.9%): [116754,788, 121312,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   298,888 ±(99.9%) 5,790 MB/sec [Average]
[info]   (min, avg, max) = (297,047, 298,888, 300,714), stdev = 1,504
[info]   CI (99.9%): [293,098, 304,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3952,003, 3952,004, 3952,004), stdev = 0,001
[info]   CI (99.9%): [3952,003, 3952,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,944 ±(99.9%) 1078,953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,944, 511,666), stdev = 280,201
[info]   CI (99.9%): [≈ 0, 1385,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4058,502 ±(99.9%) 14266,348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4058,502, 6787,872), stdev = 3704,925
[info]   CI (99.9%): [≈ 0, 18324,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,014), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,182), stdev = 0,081
[info]   CI (99.9%): [≈ 0, 0,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46,28% complete, ETA 01:11:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7255,781 ops/s
[info] # Warmup Iteration   2: 15986,749 ops/s
[info] # Warmup Iteration   3: 15929,119 ops/s
[info] # Warmup Iteration   4: 15913,741 ops/s
[info] # Warmup Iteration   5: 15961,954 ops/s
[info] Iteration   1: 15938,434 ops/s
[info]                  ·gc.alloc.rate:               1006,115 MB/sec
[info]                  ·gc.alloc.rate.norm:          99352,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66395,125 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 15956,716 ops/s
[info]                  ·gc.alloc.rate:                   1007,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              99352,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132771,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,106 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 15989,128 ops/s
[info]                  ·gc.alloc.rate:               1009,274 MB/sec
[info]                  ·gc.alloc.rate.norm:          99352,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66318,678 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 15974,733 ops/s
[info]                  ·gc.alloc.rate:                   1008,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              99352,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132819,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15974,994 ops/s
[info]                  ·gc.alloc.rate:               1008,364 MB/sec
[info]                  ·gc.alloc.rate.norm:          99352,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66438,248 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15966,801 ±(99.9%) 75,430 ops/s [Average]
[info]   (min, avg, max) = (15938,434, 15966,801, 15989,128), stdev = 19,589
[info]   CI (99.9%): [15891,371, 16042,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1007,904 ±(99.9%) 4,694 MB/sec [Average]
[info]   (min, avg, max) = (1006,115, 1007,904, 1009,274), stdev = 1,219
[info]   CI (99.9%): [1003,210, 1012,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99352,028 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (99352,026, 99352,028, 99352,034), stdev = 0,003
[info]   CI (99.9%): [99352,016, 99352,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   942,937 ±(99.9%) 1420,883 MB/sec [Average]
[info]   (min, avg, max) = (672,368, 942,937, 1348,159), stdev = 368,999
[info]   CI (99.9%): [≈ 0, 2363,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   92948,626 ±(99.9%) 140067,625 B/op [Average]
[info]   (min, avg, max) = (66318,678, 92948,626, 132819,189), stdev = 36375,117
[info]   CI (99.9%): [≈ 0, 233016,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,641 ±(99.9%) 8,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,641, 4,106), stdev = 2,248
[info]   CI (99.9%): [≈ 0, 10,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46,48% complete, ETA 01:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11076,308 ops/s
[info] # Warmup Iteration   2: 18648,194 ops/s
[info] # Warmup Iteration   3: 18860,619 ops/s
[info] # Warmup Iteration   4: 18813,227 ops/s
[info] # Warmup Iteration   5: 18852,699 ops/s
[info] Iteration   1: 18867,102 ops/s
[info]                  ·gc.alloc.rate:                   644,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              53752,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42672,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,162 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18919,818 ops/s
[info]                  ·gc.alloc.rate:                   646,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              53733,640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56185,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232,798 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18948,412 ops/s
[info]                  ·gc.alloc.rate:                   646,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              53728,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56099,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,187 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18942,178 ops/s
[info]                  ·gc.alloc.rate:               646,673 MB/sec
[info]                  ·gc.alloc.rate.norm:          53728,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55948,403 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 18899,789 ops/s
[info]                  ·gc.alloc.rate:               645,130 MB/sec
[info]                  ·gc.alloc.rate.norm:          53728,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56075,659 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   18915,460 ±(99.9%) 127,752 ops/s [Average]
[info]   (min, avg, max) = (18867,102, 18915,460, 18948,412), stdev = 33,177
[info]   CI (99.9%): [18787,708, 19043,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   645,790 ±(99.9%) 4,070 MB/sec [Average]
[info]   (min, avg, max) = (644,318, 645,790, 646,805), stdev = 1,057
[info]   CI (99.9%): [641,720, 649,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   53733,947 ±(99.9%) 40,037 B/op [Average]
[info]   (min, avg, max) = (53728,022, 53733,947, 53752,031), stdev = 10,398
[info]   CI (99.9%): [53693,910, 53773,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   641,815 ±(99.9%) 280,535 MB/sec [Average]
[info]   (min, avg, max) = (511,503, 641,815, 675,501), stdev = 72,854
[info]   CI (99.9%): [361,280, 922,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   53396,258 ±(99.9%) 23087,045 B/op [Average]
[info]   (min, avg, max) = (42672,020, 53396,258, 56185,588), stdev = 5995,632
[info]   CI (99.9%): [30309,213, 76483,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,575 ±(99.9%) 4,788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,575, 2,799), stdev = 1,243
[info]   CI (99.9%): [≈ 0, 5,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   47,829 ±(99.9%) 398,243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47,829, 232,798), stdev = 103,422
[info]   CI (99.9%): [≈ 0, 446,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46,68% complete, ETA 01:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50899,136 ops/s
[info] # Warmup Iteration   2: 64338,195 ops/s
[info] # Warmup Iteration   3: 63849,764 ops/s
[info] # Warmup Iteration   4: 64886,059 ops/s
[info] # Warmup Iteration   5: 62140,731 ops/s
[info] Iteration   1: 62493,783 ops/s
[info]                  ·gc.alloc.rate:                   1114,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33835,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,573 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65157,102 ops/s
[info]                  ·gc.alloc.rate:                   1162,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32438,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,508 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 65151,192 ops/s
[info]                  ·gc.alloc.rate:               1161,934 MB/sec
[info]                  ·gc.alloc.rate.norm:          28072,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16219,323 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 63788,328 ops/s
[info]                  ·gc.alloc.rate:                   1137,829 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33131,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,541 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 64773,355 ops/s
[info]                  ·gc.alloc.rate:                   1155,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32661,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   64272,752 ±(99.9%) 4391,985 ops/s [Average]
[info]   (min, avg, max) = (62493,783, 64272,752, 65157,102), stdev = 1140,584
[info]   CI (99.9%): [59880,767, 68664,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1146,341 ±(99.9%) 78,246 MB/sec [Average]
[info]   (min, avg, max) = (1114,594, 1146,341, 1162,141), stdev = 20,320
[info]   CI (99.9%): [1068,094, 1224,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (28072,006, 28072,007, 28072,007), stdev = 0,001
[info]   CI (99.9%): [28072,005, 28072,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208,929 ±(99.9%) 1157,208 MB/sec [Average]
[info]   (min, avg, max) = (671,337, 1208,929, 1344,060), stdev = 300,523
[info]   CI (99.9%): [51,720, 2366,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29657,234 ±(99.9%) 28999,314 B/op [Average]
[info]   (min, avg, max) = (16219,323, 29657,234, 33835,314), stdev = 7531,030
[info]   CI (99.9%): [657,920, 58656,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,127 ±(99.9%) 2,582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,127, 1,573), stdev = 0,671
[info]   CI (99.9%): [≈ 0, 3,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,88% complete, ETA 01:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54871,093 ops/s
[info] # Warmup Iteration   2: 72257,754 ops/s
[info] # Warmup Iteration   3: 72322,892 ops/s
[info] # Warmup Iteration   4: 72632,304 ops/s
[info] # Warmup Iteration   5: 72418,181 ops/s
[info] Iteration   1: 71564,834 ops/s
[info]                  ·gc.alloc.rate:               1156,727 MB/sec
[info]                  ·gc.alloc.rate.norm:          25440,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29604,405 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 72567,014 ops/s
[info]                  ·gc.alloc.rate:                   1172,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29227,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,903 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 72786,954 ops/s
[info]                  ·gc.alloc.rate:               1176,401 MB/sec
[info]                  ·gc.alloc.rate.norm:          25440,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14582,359 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 72221,740 ops/s
[info]                  ·gc.alloc.rate:                   1167,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29407,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 72413,115 ops/s
[info]                  ·gc.alloc.rate:                   1170,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29366,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,452 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   72310,732 ±(99.9%) 1792,963 ops/s [Average]
[info]   (min, avg, max) = (71564,834, 72310,732, 72786,954), stdev = 465,627
[info]   CI (99.9%): [70517,769, 74103,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1168,774 ±(99.9%) 28,883 MB/sec [Average]
[info]   (min, avg, max) = (1156,727, 1168,774, 1176,401), stdev = 7,501
[info]   CI (99.9%): [1139,891, 1197,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25440,006, 25440,006, 25440,007), stdev = 0,001
[info]   CI (99.9%): [25440,005, 25440,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1213,691 ±(99.9%) 1161,060 MB/sec [Average]
[info]   (min, avg, max) = (674,320, 1213,691, 1350,982), stdev = 301,524
[info]   CI (99.9%): [52,631, 2374,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26437,584 ±(99.9%) 25524,560 B/op [Average]
[info]   (min, avg, max) = (14582,359, 26437,584, 29604,405), stdev = 6628,647
[info]   CI (99.9%): [913,025, 51962,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,543 ±(99.9%) 2,275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,543, 1,361), stdev = 0,591
[info]   CI (99.9%): [≈ 0, 2,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47,08% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249404,985 ops/s
[info] # Warmup Iteration   2: 264972,989 ops/s
[info] # Warmup Iteration   3: 262416,364 ops/s
[info] # Warmup Iteration   4: 262687,143 ops/s
[info] # Warmup Iteration   5: 249562,555 ops/s
[info] Iteration   1: 252733,152 ops/s
[info]                  ·gc.alloc.rate:               484,260 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3185,736 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 262585,993 ops/s
[info]                  ·gc.alloc.rate:               503,242 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3066,350 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 262873,134 ops/s
[info]                  ·gc.alloc.rate:                   503,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4043,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,776 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 262371,865 ops/s
[info]                  ·gc.alloc.rate:                   502,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4051,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 263108,735 ops/s
[info]                  ·gc.alloc.rate:      504,122 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   260734,576 ±(99.9%) 17257,299 ops/s [Average]
[info]   (min, avg, max) = (252733,152, 260734,576, 263108,735), stdev = 4481,666
[info]   CI (99.9%): [243477,277, 277991,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   499,620 ±(99.9%) 33,119 MB/sec [Average]
[info]   (min, avg, max) = (484,260, 499,620, 504,122), stdev = 8,601
[info]   CI (99.9%): [466,501, 532,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,002, 3016,002, 3016,002), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,784 ±(99.9%) 1069,563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,784, 675,442), stdev = 277,762
[info]   CI (99.9%): [≈ 0, 1544,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2869,496 ±(99.9%) 6428,705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2869,496, 4051,580), stdev = 1669,514
[info]   CI (99.9%): [≈ 0, 9298,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,573 ±(99.9%) 4,799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,573, 2,802), stdev = 1,246
[info]   CI (99.9%): [≈ 0, 5,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,430 ±(99.9%) 28,735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,430, 16,776), stdev = 7,462
[info]   CI (99.9%): [≈ 0, 32,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47,28% complete, ETA 01:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 352531,785 ops/s
[info] # Warmup Iteration   2: 393150,072 ops/s
[info] # Warmup Iteration   3: 391988,821 ops/s
[info] # Warmup Iteration   4: 392547,570 ops/s
[info] # Warmup Iteration   5: 392017,027 ops/s
[info] Iteration   1: 392652,855 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 392056,121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 392973,347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 391929,669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 392581,769 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   392438,752 ±(99.9%) 1675,868 ops/s [Average]
[info]   (min, avg, max) = (391929,669, 392438,752, 392973,347), stdev = 435,217
[info]   CI (99.9%): [390762,885, 394114,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47,48% complete, ETA 01:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65730,294 ops/s
[info] # Warmup Iteration   2: 80591,965 ops/s
[info] # Warmup Iteration   3: 81348,872 ops/s
[info] # Warmup Iteration   4: 82132,944 ops/s
[info] # Warmup Iteration   5: 82355,541 ops/s
[info] Iteration   1: 82363,033 ops/s
[info]                  ·gc.alloc.rate:                   1324,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12805,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 80070,033 ops/s
[info]                  ·gc.alloc.rate:                   1288,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26345,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,818 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 82545,360 ops/s
[info]                  ·gc.alloc.rate:                   1328,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25555,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,191 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 82571,449 ops/s
[info]                  ·gc.alloc.rate:                   1328,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25570,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,794 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 82423,994 ops/s
[info]                  ·gc.alloc.rate:               1325,904 MB/sec
[info]                  ·gc.alloc.rate.norm:          25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25654,130 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   81994,774 ±(99.9%) 4156,275 ops/s [Average]
[info]   (min, avg, max) = (80070,033, 81994,774, 82571,449), stdev = 1079,371
[info]   CI (99.9%): [77838,499, 86151,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1319,073 ±(99.9%) 67,013 MB/sec [Average]
[info]   (min, avg, max) = (1288,054, 1319,073, 1328,478), stdev = 17,403
[info]   CI (99.9%): [1252,060, 1386,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25320,005, 25320,005, 25320,006), stdev = 0,001
[info]   CI (99.9%): [25320,004, 25320,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207,133 ±(99.9%) 1156,069 MB/sec [Average]
[info]   (min, avg, max) = (670,075, 1207,133, 1343,401), stdev = 300,227
[info]   CI (99.9%): [51,064, 2363,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23186,141 ±(99.9%) 22380,327 B/op [Average]
[info]   (min, avg, max) = (12805,675, 23186,141, 26345,012), stdev = 5812,100
[info]   CI (99.9%): [805,814, 45566,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,640 ±(99.9%) 1,751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,640, 1,191), stdev = 0,455
[info]   CI (99.9%): [≈ 0, 2,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47,69% complete, ETA 01:09:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16193,391 ops/s
[info] # Warmup Iteration   2: 17316,122 ops/s
[info] # Warmup Iteration   3: 17353,375 ops/s
[info] # Warmup Iteration   4: 17101,543 ops/s
[info] # Warmup Iteration   5: 17356,396 ops/s
[info] Iteration   1: 17303,309 ops/s
[info]                  ·gc.alloc.rate:                   379,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46527,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 17400,069 ops/s
[info]                  ·gc.alloc.rate:               381,577 MB/sec
[info]                  ·gc.alloc.rate.norm:          34520,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46273,997 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 17393,781 ops/s
[info]                  ·gc.alloc.rate:                   381,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46292,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,708 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 17379,814 ops/s
[info]                  ·gc.alloc.rate:      381,167 MB/sec
[info]                  ·gc.alloc.rate.norm: 34520,025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17330,875 ops/s
[info]                  ·gc.alloc.rate:                   380,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61335,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254,458 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   17361,570 ±(99.9%) 163,247 ops/s [Average]
[info]   (min, avg, max) = (17303,309, 17361,570, 17400,069), stdev = 42,395
[info]   CI (99.9%): [17198,323, 17524,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   380,757 ±(99.9%) 3,601 MB/sec [Average]
[info]   (min, avg, max) = (379,488, 380,757, 381,577), stdev = 0,935
[info]   CI (99.9%): [377,156, 384,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34520,025 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (34520,023, 34520,025, 34520,030), stdev = 0,002
[info]   CI (99.9%): [34520,016, 34520,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,977 ±(99.9%) 989,791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,977, 675,283), stdev = 257,046
[info]   CI (99.9%): [≈ 0, 1431,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   40086,080 ±(99.9%) 89827,235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40086,080, 61335,798), stdev = 23327,848
[info]   CI (99.9%): [≈ 0, 129913,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,575 ±(99.9%) 4,793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,575, 2,801), stdev = 1,245
[info]   CI (99.9%): [≈ 0, 5,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   52,249 ±(99.9%) 435,333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52,249, 254,458), stdev = 113,055
[info]   CI (99.9%): [≈ 0, 487,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47,89% complete, ETA 01:09:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125736,602 ops/s
[info] # Warmup Iteration   2: 142329,072 ops/s
[info] # Warmup Iteration   3: 142106,881 ops/s
[info] # Warmup Iteration   4: 142984,034 ops/s
[info] # Warmup Iteration   5: 142486,774 ops/s
[info] Iteration   1: 141671,668 ops/s
[info]                  ·gc.alloc.rate:                   2052,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22428,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,925 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 142451,700 ops/s
[info]                  ·gc.alloc.rate:                   2063,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22334,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,690 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 142811,417 ops/s
[info]                  ·gc.alloc.rate:                   2068,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22314,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 142685,303 ops/s
[info]                  ·gc.alloc.rate:                   2067,236 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22363,901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,918 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 142917,165 ops/s
[info]                  ·gc.alloc.rate:                   2070,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22366,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   142507,451 ±(99.9%) 1919,086 ops/s [Average]
[info]   (min, avg, max) = (141671,668, 142507,451, 142917,165), stdev = 498,381
[info]   CI (99.9%): [140588,364, 144426,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2064,423 ±(99.9%) 27,598 MB/sec [Average]
[info]   (min, avg, max) = (2052,348, 2064,423, 2070,237), stdev = 7,167
[info]   CI (99.9%): [2036,825, 2092,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (22800,003, 22800,003, 22800,003), stdev = 0,001
[info]   CI (99.9%): [22800,002, 22800,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2024,724 ±(99.9%) 18,272 MB/sec [Average]
[info]   (min, avg, max) = (2018,895, 2024,724, 2030,844), stdev = 4,745
[info]   CI (99.9%): [2006,452, 2042,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22361,652 ±(99.9%) 165,317 B/op [Average]
[info]   (min, avg, max) = (22314,969, 22361,652, 22428,365), stdev = 42,932
[info]   CI (99.9%): [22196,335, 22526,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,598 ±(99.9%) 1,348 B/op [Average]
[info]   (min, avg, max) = (0,229, 0,598, 0,925), stdev = 0,350
[info]   CI (99.9%): [≈ 0, 1,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48,09% complete, ETA 01:08:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201991,000 ops/s
[info] # Warmup Iteration   2: 740868,240 ops/s
[info] # Warmup Iteration   3: 749149,397 ops/s
[info] # Warmup Iteration   4: 748621,423 ops/s
[info] # Warmup Iteration   5: 746556,021 ops/s
[info] Iteration   1: 746989,228 ops/s
[info]                  ·gc.alloc.rate:                   413,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1077,848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 749178,095 ops/s
[info]                  ·gc.alloc.rate:               415,090 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1074,749 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 749689,085 ops/s
[info]                  ·gc.alloc.rate:      415,338 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 746616,669 ops/s
[info]                  ·gc.alloc.rate:                   413,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1421,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,575 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 748653,992 ops/s
[info]                  ·gc.alloc.rate:               414,745 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1417,169 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   748225,414 ±(99.9%) 5219,657 ops/s [Average]
[info]   (min, avg, max) = (746616,669, 748225,414, 749689,085), stdev = 1355,528
[info]   CI (99.9%): [743005,756, 753445,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   414,549 ±(99.9%) 2,813 MB/sec [Average]
[info]   (min, avg, max) = (413,699, 414,549, 415,338), stdev = 0,731
[info]   CI (99.9%): [411,735, 417,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (872,001, 872,001, 872,001), stdev = 0,001
[info]   CI (99.9%): [872,000, 872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   474,275 ±(99.9%) 1067,785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,275, 674,162), stdev = 277,300
[info]   CI (99.9%): [≈ 0, 1542,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   998,155 ±(99.9%) 2247,691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 998,155, 1421,008), stdev = 583,718
[info]   CI (99.9%): [≈ 0, 3245,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,537 ±(99.9%) 4,537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,537, 2,645), stdev = 1,178
[info]   CI (99.9%): [≈ 0, 5,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,133 ±(99.9%) 9,564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,133, 5,575), stdev = 2,484
[info]   CI (99.9%): [≈ 0, 10,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,29% complete, ETA 01:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291780,835 ops/s
[info] # Warmup Iteration   2: 407654,046 ops/s
[info] # Warmup Iteration   3: 416435,265 ops/s
[info] # Warmup Iteration   4: 417956,767 ops/s
[info] # Warmup Iteration   5: 416501,235 ops/s
[info] Iteration   1: 415763,568 ops/s
[info]                  ·gc.alloc.rate:                   414,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1936,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 415612,047 ops/s
[info]                  ·gc.alloc.rate:               414,065 MB/sec
[info]                  ·gc.alloc.rate.norm:          1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1937,253 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 417288,099 ops/s
[info]                  ·gc.alloc.rate:                   415,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2543,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,550 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 416581,275 ops/s
[info]                  ·gc.alloc.rate:      415,058 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 415755,543 ops/s
[info]                  ·gc.alloc.rate:                   414,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2553,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   416200,107 ±(99.9%) 2765,391 ops/s [Average]
[info]   (min, avg, max) = (415612,047, 416200,107, 417288,099), stdev = 718,163
[info]   CI (99.9%): [413434,716, 418965,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   414,654 ±(99.9%) 2,732 MB/sec [Average]
[info]   (min, avg, max) = (414,065, 414,654, 415,712), stdev = 0,710
[info]   CI (99.9%): [411,922, 417,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1568,001, 1568,001, 1568,001), stdev = 0,001
[info]   CI (99.9%): [1568,001, 1568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,391 ±(99.9%) 1068,225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,391, 674,470), stdev = 277,415
[info]   CI (99.9%): [≈ 0, 1542,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1794,086 ±(99.9%) 4037,394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1794,086, 2553,056), stdev = 1048,498
[info]   CI (99.9%): [≈ 0, 5831,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,146), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,157 ±(99.9%) 0,881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,157, 0,550), stdev = 0,229
[info]   CI (99.9%): [≈ 0, 1,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,49% complete, ETA 01:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 805363,388 ops/s
[info] # Warmup Iteration   2: 868027,240 ops/s
[info] # Warmup Iteration   3: 871724,002 ops/s
[info] # Warmup Iteration   4: 863980,551 ops/s
[info] # Warmup Iteration   5: 871611,052 ops/s
[info] Iteration   1: 872149,836 ops/s
[info]                  ·gc.alloc.rate:      301,429 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 868982,148 ops/s
[info]                  ·gc.alloc.rate:               300,380 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 926,616 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 868339,149 ops/s
[info]                  ·gc.alloc.rate:      300,128 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 867973,379 ops/s
[info]                  ·gc.alloc.rate:                   300,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 866939,812 ops/s
[info]                  ·gc.alloc.rate:      299,625 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   868876,865 ±(99.9%) 7599,786 ops/s [Average]
[info]   (min, avg, max) = (866939,812, 868876,865, 872149,836), stdev = 1973,640
[info]   CI (99.9%): [861277,079, 876476,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   300,314 ±(99.9%) 2,618 MB/sec [Average]
[info]   (min, avg, max) = (299,625, 300,314, 301,429), stdev = 0,680
[info]   CI (99.9%): [297,696, 302,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,001), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,639 ±(99.9%) 1079,004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,639, 511,649), stdev = 280,214
[info]   CI (99.9%): [≈ 0, 1283,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   370,838 ±(99.9%) 1955,324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 370,838, 927,576), stdev = 507,791
[info]   CI (99.9%): [≈ 0, 2326,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,026), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,046), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48,69% complete, ETA 01:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58753,491 ops/s
[info] # Warmup Iteration   2: 93822,045 ops/s
[info] # Warmup Iteration   3: 93664,089 ops/s
[info] # Warmup Iteration   4: 94205,467 ops/s
[info] # Warmup Iteration   5: 93500,989 ops/s
[info] Iteration   1: 93893,041 ops/s
[info]                  ·gc.alloc.rate:                   4024,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              67464,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4076,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68332,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,745 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 93938,515 ops/s
[info]                  ·gc.alloc.rate:                   4026,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              67464,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68378,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,698 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 93869,139 ops/s
[info]                  ·gc.alloc.rate:                   4023,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              67464,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68482,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,094 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 93392,100 ops/s
[info]                  ·gc.alloc.rate:                   4003,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              67464,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68857,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,754 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 93573,762 ops/s
[info]                  ·gc.alloc.rate:                   4010,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              67464,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68763,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,050 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   93733,311 ±(99.9%) 919,233 ops/s [Average]
[info]   (min, avg, max) = (93392,100, 93733,311, 93938,515), stdev = 238,722
[info]   CI (99.9%): [92814,078, 94652,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4017,844 ±(99.9%) 39,327 MB/sec [Average]
[info]   (min, avg, max) = (4003,388, 4017,844, 4026,999), stdev = 10,213
[info]   CI (99.9%): [3978,517, 4057,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67464,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67464,004, 67464,004, 67464,005), stdev = 0,001
[info]   CI (99.9%): [67464,004, 67464,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4083,265 ±(99.9%) 17,169 MB/sec [Average]
[info]   (min, avg, max) = (4076,586, 4083,265, 4088,135), stdev = 4,459
[info]   CI (99.9%): [4066,096, 4100,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68562,956 ±(99.9%) 903,270 B/op [Average]
[info]   (min, avg, max) = (68332,962, 68562,956, 68857,351), stdev = 234,576
[info]   CI (99.9%): [67659,687, 69466,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,125), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,468 ±(99.9%) 2,211 B/op [Average]
[info]   (min, avg, max) = (0,698, 1,468, 2,094), stdev = 0,574
[info]   CI (99.9%): [≈ 0, 3,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48,89% complete, ETA 01:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228324,955 ops/s
[info] # Warmup Iteration   2: 245134,000 ops/s
[info] # Warmup Iteration   3: 227262,189 ops/s
[info] # Warmup Iteration   4: 241360,170 ops/s
[info] # Warmup Iteration   5: 240407,668 ops/s
[info] Iteration   1: 222371,617 ops/s
[info]                  ·gc.alloc.rate:                   1404,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9514,464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 241431,537 ops/s
[info]                  ·gc.alloc.rate:                   1525,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13149,432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,271 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 241536,161 ops/s
[info]                  ·gc.alloc.rate:                   1525,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8772,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,271 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 241759,933 ops/s
[info]                  ·gc.alloc.rate:               1527,525 MB/sec
[info]                  ·gc.alloc.rate.norm:          9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8772,753 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 241685,028 ops/s
[info]                  ·gc.alloc.rate:                   1526,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8784,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   237756,855 ±(99.9%) 33121,535 ops/s [Average]
[info]   (min, avg, max) = (222371,617, 237756,855, 241759,933), stdev = 8601,557
[info]   CI (99.9%): [204635,321, 270878,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1502,074 ±(99.9%) 209,464 MB/sec [Average]
[info]   (min, avg, max) = (1404,777, 1502,074, 1527,525), stdev = 54,397
[info]   CI (99.9%): [1292,610, 1711,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9944,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9944,002, 9944,002, 9944,002), stdev = 0,001
[info]   CI (99.9%): [9944,001, 9944,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1480,712 ±(99.9%) 1154,220 MB/sec [Average]
[info]   (min, avg, max) = (1344,097, 1480,712, 2016,908), stdev = 299,747
[info]   CI (99.9%): [326,493, 2634,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9798,652 ±(99.9%) 7317,043 B/op [Average]
[info]   (min, avg, max) = (8772,570, 9798,652, 13149,432), stdev = 1900,213
[info]   CI (99.9%): [2481,609, 17115,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,195 ±(99.9%) 0,484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,195, 0,295), stdev = 0,126
[info]   CI (99.9%): [≈ 0, 0,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49,09% complete, ETA 01:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247664,501 ops/s
[info] # Warmup Iteration   2: 314765,776 ops/s
[info] # Warmup Iteration   3: 316063,859 ops/s
[info] # Warmup Iteration   4: 318495,133 ops/s
[info] # Warmup Iteration   5: 318219,773 ops/s
[info] Iteration   1: 318693,518 ops/s
[info]                  ·gc.alloc.rate:               1660,307 MB/sec
[info]                  ·gc.alloc.rate.norm:          8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6632,309 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 310015,443 ops/s
[info]                  ·gc.alloc.rate:                   1615,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10233,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,317 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 309486,011 ops/s
[info]                  ·gc.alloc.rate:                   1612,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6842,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 317869,499 ops/s
[info]                  ·gc.alloc.rate:               1656,333 MB/sec
[info]                  ·gc.alloc.rate.norm:          8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022,194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10011,268 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 318657,626 ops/s
[info]                  ·gc.alloc.rate:                   1660,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6665,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   314944,419 ±(99.9%) 18314,737 ops/s [Average]
[info]   (min, avg, max) = (309486,011, 314944,419, 318693,518), stdev = 4756,279
[info]   CI (99.9%): [296629,682, 333259,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1640,879 ±(99.9%) 95,228 MB/sec [Average]
[info]   (min, avg, max) = (1612,348, 1640,879, 1660,307), stdev = 24,730
[info]   CI (99.9%): [1545,651, 1736,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8200,001, 8200,001, 8200,001), stdev = 0,001
[info]   CI (99.9%): [8200,001, 8200,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1615,203 ±(99.9%) 1419,931 MB/sec [Average]
[info]   (min, avg, max) = (1342,887, 1615,203, 2022,194), stdev = 368,752
[info]   CI (99.9%): [195,271, 3035,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8077,171 ±(99.9%) 7203,016 B/op [Average]
[info]   (min, avg, max) = (6632,309, 8077,171, 10233,969), stdev = 1870,601
[info]   CI (99.9%): [874,154, 15280,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,169 ±(99.9%) 0,741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,169, 0,423), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 0,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49,30% complete, ETA 01:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416423,302 ops/s
[info] # Warmup Iteration   2: 1559020,987 ops/s
[info] # Warmup Iteration   3: 1563989,038 ops/s
[info] # Warmup Iteration   4: 1537172,113 ops/s
[info] # Warmup Iteration   5: 1556603,777 ops/s
[info] Iteration   1: 1560171,674 ops/s
[info]                  ·gc.alloc.rate:                   531,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1567351,549 ops/s
[info]                  ·gc.alloc.rate:                   533,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,656 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1351234,012 ops/s
[info]                  ·gc.alloc.rate:      460,189 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1559241,837 ops/s
[info]                  ·gc.alloc.rate:               531,074 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 680,409 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1555518,070 ops/s
[info]                  ·gc.alloc.rate:                   529,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1518703,428 ±(99.9%) 360867,904 ops/s [Average]
[info]   (min, avg, max) = (1351234,012, 1518703,428, 1567351,549), stdev = 93716,249
[info]   CI (99.9%): [1157835,525, 1879571,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   517,218 ±(99.9%) 122,891 MB/sec [Average]
[info]   (min, avg, max) = (460,189, 517,218, 533,797), stdev = 31,914
[info]   CI (99.9%): [394,327, 640,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,512 ±(99.9%) 1123,335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,512, 674,161), stdev = 291,727
[info]   CI (99.9%): [≈ 0, 1629,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   510,818 ±(99.9%) 1132,805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 510,818, 680,702), stdev = 294,186
[info]   CI (99.9%): [≈ 0, 1643,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,536 ±(99.9%) 4,540 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,536, 2,645), stdev = 1,179
[info]   CI (99.9%): [≈ 0, 5,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,538 ±(99.9%) 4,559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,538, 2,656), stdev = 1,184
[info]   CI (99.9%): [≈ 0, 5,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,50% complete, ETA 01:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1112154,647 ops/s
[info] # Warmup Iteration   2: 1489374,504 ops/s
[info] # Warmup Iteration   3: 1400807,164 ops/s
[info] # Warmup Iteration   4: 1484185,686 ops/s
[info] # Warmup Iteration   5: 1488183,747 ops/s
[info] Iteration   1: 1486633,280 ops/s
[info]                  ·gc.alloc.rate:                   868,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1484545,024 ops/s
[info]                  ·gc.alloc.rate:               867,774 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 716,041 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1491640,832 ops/s
[info]                  ·gc.alloc.rate:                   871,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1426,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1492262,398 ops/s
[info]                  ·gc.alloc.rate:               872,307 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 713,410 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1491382,635 ops/s
[info]                  ·gc.alloc.rate:               871,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 713,813 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1489292,834 ±(99.9%) 13382,526 ops/s [Average]
[info]   (min, avg, max) = (1484545,024, 1489292,834, 1492262,398), stdev = 3475,399
[info]   CI (99.9%): [1475910,308, 1502675,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   870,500 ±(99.9%) 7,895 MB/sec [Average]
[info]   (min, avg, max) = (867,774, 870,500, 872,307), stdev = 2,050
[info]   CI (99.9%): [862,605, 878,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   811,096 ±(99.9%) 1164,431 MB/sec [Average]
[info]   (min, avg, max) = (675,272, 811,096, 1352,043), stdev = 302,399
[info]   CI (99.9%): [≈ 0, 1975,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   856,996 ±(99.9%) 1226,288 B/op [Average]
[info]   (min, avg, max) = (713,410, 856,996, 1426,677), stdev = 318,463
[info]   CI (99.9%): [≈ 0, 2083,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,066), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,70% complete, ETA 01:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1401307,892 ops/s
[info] # Warmup Iteration   2: 1502080,782 ops/s
[info] # Warmup Iteration   3: 1527745,351 ops/s
[info] # Warmup Iteration   4: 1530650,990 ops/s
[info] # Warmup Iteration   5: 1521577,730 ops/s
[info] Iteration   1: 1526860,502 ops/s
[info]                  ·gc.alloc.rate:                   519,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     527,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1533994,876 ops/s
[info]                  ·gc.alloc.rate:      522,486 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1530460,207 ops/s
[info]                  ·gc.alloc.rate:                   521,117 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,216 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1532309,174 ops/s
[info]                  ·gc.alloc.rate:                   521,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1531015,336 ops/s
[info]                  ·gc.alloc.rate:                   521,441 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     691,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1530928,019 ±(99.9%) 10203,184 ops/s [Average]
[info]   (min, avg, max) = (1526860,502, 1530928,019, 1533994,876), stdev = 2649,734
[info]   CI (99.9%): [1520724,835, 1541131,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   521,379 ±(99.9%) 3,622 MB/sec [Average]
[info]   (min, avg, max) = (519,969, 521,379, 522,486), stdev = 0,941
[info]   CI (99.9%): [517,757, 525,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,754 ±(99.9%) 1123,998 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,754, 674,799), stdev = 291,899
[info]   CI (99.9%): [≈ 0, 1630,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   521,170 ±(99.9%) 1155,322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 521,170, 693,912), stdev = 300,033
[info]   CI (99.9%): [≈ 0, 1676,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,126), stdev = 1,386
[info]   CI (99.9%): [≈ 0, 5,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,665 ±(99.9%) 5,490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,665, 3,216), stdev = 1,426
[info]   CI (99.9%): [≈ 0, 6,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49,90% complete, ETA 01:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1487263,852 ops/s
[info] # Warmup Iteration   2: 1659397,232 ops/s
[info] # Warmup Iteration   3: 1653787,615 ops/s
[info] # Warmup Iteration   4: 1650976,062 ops/s
[info] # Warmup Iteration   5: 1634347,164 ops/s
[info] Iteration   1: 1655543,653 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1658068,844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1654617,675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1651616,382 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1654444,341 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1654858,179 ±(99.9%) 8930,796 ops/s [Average]
[info]   (min, avg, max) = (1651616,382, 1654858,179, 1658068,844), stdev = 2319,299
[info]   CI (99.9%): [1645927,384, 1663788,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50,10% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32653,316 ops/s
[info] # Warmup Iteration   2: 44027,612 ops/s
[info] # Warmup Iteration   3: 44318,957 ops/s
[info] # Warmup Iteration   4: 44581,841 ops/s
[info] # Warmup Iteration   5: 44462,236 ops/s
[info] Iteration   1: 44568,763 ops/s
[info]                  ·gc.alloc.rate:                   2066,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71091,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,470 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 44385,182 ops/s
[info]                  ·gc.alloc.rate:                   2058,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71507,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,214 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 44224,405 ops/s
[info]                  ·gc.alloc.rate:                   2050,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71930,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,741 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44468,432 ops/s
[info]                  ·gc.alloc.rate:                   2062,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71655,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,473 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44394,963 ops/s
[info]                  ·gc.alloc.rate:                   2058,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71902,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,476 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   44408,349 ±(99.9%) 486,668 ops/s [Average]
[info]   (min, avg, max) = (44224,405, 44408,349, 44568,763), stdev = 126,386
[info]   CI (99.9%): [43921,680, 44895,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2059,091 ±(99.9%) 22,737 MB/sec [Average]
[info]   (min, avg, max) = (2050,588, 2059,091, 2066,601), stdev = 5,905
[info]   CI (99.9%): [2036,354, 2081,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72976,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (72976,009, 72976,010, 72976,011), stdev = 0,001
[info]   CI (99.9%): [72976,007, 72976,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2020,736 ±(99.9%) 22,914 MB/sec [Average]
[info]   (min, avg, max) = (2013,228, 2020,736, 2027,936), stdev = 5,951
[info]   CI (99.9%): [1997,822, 2043,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71617,314 ±(99.9%) 1319,388 B/op [Average]
[info]   (min, avg, max) = (71091,294, 71617,314, 71930,190), stdev = 342,641
[info]   CI (99.9%): [70297,926, 72936,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,475 ±(99.9%) 2,006 B/op [Average]
[info]   (min, avg, max) = (0,741, 1,475, 2,214), stdev = 0,521
[info]   CI (99.9%): [≈ 0, 3,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50,30% complete, ETA 01:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124153,584 ops/s
[info] # Warmup Iteration   2: 134785,358 ops/s
[info] # Warmup Iteration   3: 134744,088 ops/s
[info] # Warmup Iteration   4: 134663,335 ops/s
[info] # Warmup Iteration   5: 134706,886 ops/s
[info] Iteration   1: 135118,119 ops/s
[info]                  ·gc.alloc.rate:               1175,748 MB/sec
[info]                  ·gc.alloc.rate.norm:          13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7828,379 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 134921,608 ops/s
[info]                  ·gc.alloc.rate:                   1174,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15679,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,728 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 134676,636 ops/s
[info]                  ·gc.alloc.rate:                   1171,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15707,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,486 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 135278,206 ops/s
[info]                  ·gc.alloc.rate:               1177,345 MB/sec
[info]                  ·gc.alloc.rate.norm:          13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15646,687 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 135472,901 ops/s
[info]                  ·gc.alloc.rate:                   1178,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7816,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,484 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   135093,494 ±(99.9%) 1189,952 ops/s [Average]
[info]   (min, avg, max) = (134676,636, 135093,494, 135472,901), stdev = 309,027
[info]   CI (99.9%): [133903,542, 136283,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1175,563 ±(99.9%) 10,406 MB/sec [Average]
[info]   (min, avg, max) = (1171,918, 1175,563, 1178,781), stdev = 2,702
[info]   CI (99.9%): [1165,157, 1185,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   13696,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13696,003, 13696,003, 13696,003), stdev = 0,001
[info]   CI (99.9%): [13696,003, 13696,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,586 ±(99.9%) 1417,345 MB/sec [Average]
[info]   (min, avg, max) = (672,036, 1075,586, 1345,031), stdev = 368,080
[info]   CI (99.9%): [≈ 0, 2492,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12535,787 ±(99.9%) 16568,954 B/op [Average]
[info]   (min, avg, max) = (7816,127, 12535,787, 15707,896), stdev = 4302,905
[info]   CI (99.9%): [≈ 0, 29104,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,340 ±(99.9%) 1,254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,340, 0,728), stdev = 0,326
[info]   CI (99.9%): [≈ 0, 1,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50,50% complete, ETA 01:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56810,710 ops/s
[info] # Warmup Iteration   2: 64824,689 ops/s
[info] # Warmup Iteration   3: 64708,040 ops/s
[info] # Warmup Iteration   4: 64501,562 ops/s
[info] # Warmup Iteration   5: 64504,123 ops/s
[info] Iteration   1: 64426,739 ops/s
[info]                  ·gc.alloc.rate:                   1286,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32835,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,508 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65216,690 ops/s
[info]                  ·gc.alloc.rate:                   1302,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32440,958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 64959,710 ops/s
[info]                  ·gc.alloc.rate:                   1296,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32566,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 64555,894 ops/s
[info]                  ·gc.alloc.rate:               1288,963 MB/sec
[info]                  ·gc.alloc.rate.norm:          31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32803,016 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 63881,437 ops/s
[info]                  ·gc.alloc.rate:                   1275,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33165,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,538 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   64608,094 ±(99.9%) 1980,058 ops/s [Average]
[info]   (min, avg, max) = (63881,437, 64608,094, 65216,690), stdev = 514,215
[info]   CI (99.9%): [62628,036, 66588,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1289,962 ±(99.9%) 39,723 MB/sec [Average]
[info]   (min, avg, max) = (1275,341, 1289,962, 1302,164), stdev = 10,316
[info]   CI (99.9%): [1250,239, 1329,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (31424,006, 31424,007, 31424,007), stdev = 0,001
[info]   CI (99.9%): [31424,005, 31424,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1344,824 ±(99.9%) 3,409 MB/sec [Average]
[info]   (min, avg, max) = (1344,115, 1344,824, 1346,017), stdev = 0,885
[info]   CI (99.9%): [1341,415, 1348,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32762,263 ±(99.9%) 1074,120 B/op [Average]
[info]   (min, avg, max) = (32440,958, 32762,263, 33165,440), stdev = 278,945
[info]   CI (99.9%): [31688,144, 33836,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,013 ±(99.9%) 3,074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,013, 2,009), stdev = 0,798
[info]   CI (99.9%): [≈ 0, 4,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,70% complete, ETA 01:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64475,312 ops/s
[info] # Warmup Iteration   2: 91421,622 ops/s
[info] # Warmup Iteration   3: 91023,743 ops/s
[info] # Warmup Iteration   4: 91855,227 ops/s
[info] # Warmup Iteration   5: 91736,249 ops/s
[info] Iteration   1: 91827,112 ops/s
[info]                  ·gc.alloc.rate:               963,901 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11576,131 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 92132,390 ops/s
[info]                  ·gc.alloc.rate:               967,066 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11549,196 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 91944,394 ops/s
[info]                  ·gc.alloc.rate:                   965,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23151,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,713 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 91392,535 ops/s
[info]                  ·gc.alloc.rate:               959,336 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11648,423 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 91182,557 ops/s
[info]                  ·gc.alloc.rate:               957,192 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23373,482 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   91695,797 ±(99.9%) 1522,150 ops/s [Average]
[info]   (min, avg, max) = (91182,557, 91695,797, 92132,390), stdev = 395,298
[info]   CI (99.9%): [90173,647, 93217,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   962,506 ±(99.9%) 15,809 MB/sec [Average]
[info]   (min, avg, max) = (957,192, 962,506, 967,066), stdev = 4,106
[info]   CI (99.9%): [946,697, 978,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16520,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16520,004, 16520,005, 16520,005), stdev = 0,001
[info]   CI (99.9%): [16520,004, 16520,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,928 ±(99.9%) 1428,608 MB/sec [Average]
[info]   (min, avg, max) = (675,438, 946,928, 1354,292), stdev = 371,005
[info]   CI (99.9%): [≈ 0, 2375,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16259,658 ±(99.9%) 24617,429 B/op [Average]
[info]   (min, avg, max) = (11549,196, 16259,658, 23373,482), stdev = 6393,068
[info]   CI (99.9%): [≈ 0, 40877,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,143 ±(99.9%) 1,227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,143, 0,713), stdev = 0,319
[info]   CI (99.9%): [≈ 0, 1,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,91% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267750,766 ops/s
[info] # Warmup Iteration   2: 290368,428 ops/s
[info] # Warmup Iteration   3: 291930,934 ops/s
[info] # Warmup Iteration   4: 290984,697 ops/s
[info] # Warmup Iteration   5: 275621,149 ops/s
[info] Iteration   1: 293679,997 ops/s
[info]                  ·gc.alloc.rate:               955,376 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3605,611 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 293325,930 ops/s
[info]                  ·gc.alloc.rate:                   954,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7216,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 292901,404 ops/s
[info]                  ·gc.alloc.rate:               952,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3611,731 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 292732,521 ops/s
[info]                  ·gc.alloc.rate:                   952,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7227,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,336 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 293985,540 ops/s
[info]                  ·gc.alloc.rate:               956,208 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3598,134 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   293325,078 ±(99.9%) 2012,677 ops/s [Average]
[info]   (min, avg, max) = (292732,521, 293325,078, 293985,540), stdev = 522,686
[info]   CI (99.9%): [291312,402, 295337,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   954,152 ±(99.9%) 6,409 MB/sec [Average]
[info]   (min, avg, max) = (952,295, 954,152, 956,208), stdev = 1,664
[info]   CI (99.9%): [947,743, 960,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5120,001, 5120,001, 5120,001), stdev = 0,001
[info]   CI (99.9%): [5120,001, 5120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,168 ±(99.9%) 1417,701 MB/sec [Average]
[info]   (min, avg, max) = (671,985, 941,168, 1344,758), stdev = 368,172
[info]   CI (99.9%): [≈ 0, 2358,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5051,778 ±(99.9%) 7627,642 B/op [Average]
[info]   (min, avg, max) = (3598,134, 5051,778, 7227,088), stdev = 1980,874
[info]   CI (99.9%): [≈ 0, 12679,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,112 ±(99.9%) 0,609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,112, 0,336), stdev = 0,158
[info]   CI (99.9%): [≈ 0, 0,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51,11% complete, ETA 01:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23401,000 ops/s
[info] # Warmup Iteration   2: 37459,185 ops/s
[info] # Warmup Iteration   3: 37515,044 ops/s
[info] # Warmup Iteration   4: 37433,456 ops/s
[info] # Warmup Iteration   5: 37426,276 ops/s
[info] Iteration   1: 37805,515 ops/s
[info]                  ·gc.alloc.rate:               1725,990 MB/sec
[info]                  ·gc.alloc.rate.norm:          71856,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56185,104 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 37705,654 ops/s
[info]                  ·gc.alloc.rate:                   1721,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84612,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,345 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37699,609 ops/s
[info]                  ·gc.alloc.rate:               1721,062 MB/sec
[info]                  ·gc.alloc.rate.norm:          71856,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56482,107 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 37613,965 ops/s
[info]                  ·gc.alloc.rate:                   1717,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85005,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,613 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 37647,770 ops/s
[info]                  ·gc.alloc.rate:               1718,680 MB/sec
[info]                  ·gc.alloc.rate.norm:          71856,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56693,330 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   37694,503 ±(99.9%) 279,965 ops/s [Average]
[info]   (min, avg, max) = (37613,965, 37694,503, 37805,515), stdev = 72,706
[info]   CI (99.9%): [37414,538, 37974,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1720,918 ±(99.9%) 12,762 MB/sec [Average]
[info]   (min, avg, max) = (1717,338, 1720,918, 1725,990), stdev = 3,314
[info]   CI (99.9%): [1708,156, 1733,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71856,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71856,011, 71856,012, 71856,012), stdev = 0,001
[info]   CI (99.9%): [71856,010, 71856,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1623,432 ±(99.9%) 1426,968 MB/sec [Average]
[info]   (min, avg, max) = (1349,573, 1623,432, 2031,604), stdev = 370,579
[info]   CI (99.9%): [196,464, 3050,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67795,653 ±(99.9%) 59810,261 B/op [Average]
[info]   (min, avg, max) = (56185,104, 67795,653, 85005,364), stdev = 15532,535
[info]   CI (99.9%): [7985,392, 127605,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,391 ±(99.9%) 7,706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,391, 4,345), stdev = 2,001
[info]   CI (99.9%): [≈ 0, 9,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51,31% complete, ETA 01:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48971,242 ops/s
[info] # Warmup Iteration   2: 54113,885 ops/s
[info] # Warmup Iteration   3: 54215,208 ops/s
[info] # Warmup Iteration   4: 54055,562 ops/s
[info] # Warmup Iteration   5: 54240,728 ops/s
[info] Iteration   1: 54516,315 ops/s
[info]                  ·gc.alloc.rate:               909,755 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19421,635 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 54334,009 ops/s
[info]                  ·gc.alloc.rate:                   906,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19487,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,603 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 54455,437 ops/s
[info]                  ·gc.alloc.rate:                   908,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38848,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,203 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 54157,198 ops/s
[info]                  ·gc.alloc.rate:               903,821 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19530,989 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 53966,732 ops/s
[info]                  ·gc.alloc.rate:                   900,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19599,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,214 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   54285,939 ±(99.9%) 866,567 ops/s [Average]
[info]   (min, avg, max) = (53966,732, 54285,939, 54516,315), stdev = 225,045
[info]   CI (99.9%): [53419,371, 55152,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   905,882 ±(99.9%) 14,611 MB/sec [Average]
[info]   (min, avg, max) = (900,434, 905,882, 909,755), stdev = 3,794
[info]   CI (99.9%): [891,272, 920,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   26264,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26264,007, 26264,008, 26264,009), stdev = 0,001
[info]   CI (99.9%): [26264,006, 26264,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   806,733 ±(99.9%) 1156,752 MB/sec [Average]
[info]   (min, avg, max) = (671,956, 806,733, 1344,113), stdev = 300,405
[info]   CI (99.9%): [≈ 0, 1963,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   23377,532 ±(99.9%) 33302,865 B/op [Average]
[info]   (min, avg, max) = (19421,635, 23377,532, 38848,269), stdev = 8648,648
[info]   CI (99.9%): [≈ 0, 56680,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,604 ±(99.9%) 2,327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,604, 1,214), stdev = 0,604
[info]   CI (99.9%): [≈ 0, 2,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51,51% complete, ETA 01:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51038,674 ops/s
[info] # Warmup Iteration   2: 59528,201 ops/s
[info] # Warmup Iteration   3: 62289,836 ops/s
[info] # Warmup Iteration   4: 62566,965 ops/s
[info] # Warmup Iteration   5: 56745,192 ops/s
[info] Iteration   1: 62361,239 ops/s
[info]                  ·gc.alloc.rate:                   925,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16962,679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 62214,023 ops/s
[info]                  ·gc.alloc.rate:               923,108 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17003,844 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 62295,606 ops/s
[info]                  ·gc.alloc.rate:                   924,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33929,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,052 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 62270,366 ops/s
[info]                  ·gc.alloc.rate:               923,938 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16970,627 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 62087,978 ops/s
[info]                  ·gc.alloc.rate:               921,096 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17020,090 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   62245,842 ±(99.9%) 396,111 ops/s [Average]
[info]   (min, avg, max) = (62087,978, 62245,842, 62361,239), stdev = 102,869
[info]   CI (99.9%): [61849,731, 62641,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   923,494 ±(99.9%) 5,872 MB/sec [Average]
[info]   (min, avg, max) = (921,096, 923,494, 925,147), stdev = 1,525
[info]   CI (99.9%): [917,622, 929,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23352,007, 23352,007, 23352,007), stdev = 0,001
[info]   CI (99.9%): [23352,006, 23352,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   805,957 ±(99.9%) 1155,614 MB/sec [Average]
[info]   (min, avg, max) = (671,340, 805,957, 1342,808), stdev = 300,109
[info]   CI (99.9%): [≈ 0, 1961,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20377,411 ±(99.9%) 29172,711 B/op [Average]
[info]   (min, avg, max) = (16962,679, 20377,411, 33929,814), stdev = 7576,060
[info]   CI (99.9%): [≈ 0, 49550,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,421 ±(99.9%) 2,217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,421, 1,052), stdev = 0,576
[info]   CI (99.9%): [≈ 0, 2,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,71% complete, ETA 01:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74764,618 ops/s
[info] # Warmup Iteration   2: 103927,858 ops/s
[info] # Warmup Iteration   3: 103783,098 ops/s
[info] # Warmup Iteration   4: 103314,670 ops/s
[info] # Warmup Iteration   5: 103111,819 ops/s
[info] Iteration   1: 103385,049 ops/s
[info]                  ·gc.alloc.rate:               1416,224 MB/sec
[info]                  ·gc.alloc.rate.norm:          21559,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20594,512 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 102906,100 ops/s
[info]                  ·gc.alloc.rate:               1409,636 MB/sec
[info]                  ·gc.alloc.rate.norm:          21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20700,136 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 101430,995 ops/s
[info]                  ·gc.alloc.rate:                   1389,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21021,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,646 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 103376,206 ops/s
[info]                  ·gc.alloc.rate:                   1416,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20647,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,317 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 103751,895 ops/s
[info]                  ·gc.alloc.rate:                   1421,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20581,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,316 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   102970,049 ±(99.9%) 3508,763 ops/s [Average]
[info]   (min, avg, max) = (101430,995, 102970,049, 103751,895), stdev = 911,215
[info]   CI (99.9%): [99461,286, 106478,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1410,505 ±(99.9%) 48,057 MB/sec [Average]
[info]   (min, avg, max) = (1389,407, 1410,505, 1421,119), stdev = 12,480
[info]   CI (99.9%): [1362,448, 1458,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560,004 ±(99.9%) 0,053 B/op [Average]
[info]   (min, avg, max) = (21559,985, 21560,004, 21560,023), stdev = 0,014
[info]   CI (99.9%): [21559,952, 21560,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,746 ±(99.9%) 6,425 MB/sec [Average]
[info]   (min, avg, max) = (1352,805, 1354,746, 1356,634), stdev = 1,668
[info]   CI (99.9%): [1348,322, 1361,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20708,982 ±(99.9%) 696,621 B/op [Average]
[info]   (min, avg, max) = (20581,710, 20708,982, 21021,542), stdev = 180,910
[info]   CI (99.9%): [20012,361, 21405,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,256 ±(99.9%) 1,038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,256, 0,646), stdev = 0,269
[info]   CI (99.9%): [≈ 0, 1,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,91% complete, ETA 01:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295482,940 ops/s
[info] # Warmup Iteration   2: 317259,797 ops/s
[info] # Warmup Iteration   3: 305993,122 ops/s
[info] # Warmup Iteration   4: 305900,153 ops/s
[info] # Warmup Iteration   5: 307931,691 ops/s
[info] Iteration   1: 306642,905 ops/s
[info]                  ·gc.alloc.rate:                   977,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6905,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 308033,953 ops/s
[info]                  ·gc.alloc.rate:               981,793 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3434,260 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 307125,623 ops/s
[info]                  ·gc.alloc.rate:                   978,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6888,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 307084,498 ops/s
[info]                  ·gc.alloc.rate:               978,714 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3444,681 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 305791,286 ops/s
[info]                  ·gc.alloc.rate:                   974,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6918,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   306935,653 ±(99.9%) 3139,978 ops/s [Average]
[info]   (min, avg, max) = (305791,286, 306935,653, 308033,953), stdev = 815,442
[info]   CI (99.9%): [303795,676, 310075,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   978,221 ±(99.9%) 10,031 MB/sec [Average]
[info]   (min, avg, max) = (974,621, 978,221, 981,793), stdev = 2,605
[info]   CI (99.9%): [968,190, 988,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5016,001, 5016,001, 5016,001), stdev = 0,001
[info]   CI (99.9%): [5016,001, 5016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,593 ±(99.9%) 1418,131 MB/sec [Average]
[info]   (min, avg, max) = (672,121, 1075,593, 1345,436), stdev = 368,284
[info]   CI (99.9%): [≈ 0, 2493,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5518,188 ±(99.9%) 7307,114 B/op [Average]
[info]   (min, avg, max) = (3434,260, 5518,188, 6918,058), stdev = 1897,634
[info]   CI (99.9%): [≈ 0, 12825,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,085 ±(99.9%) 0,344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,085, 0,213), stdev = 0,089
[info]   CI (99.9%): [≈ 0, 0,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52,11% complete, ETA 01:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335358,493 ops/s
[info] # Warmup Iteration   2: 355408,290 ops/s
[info] # Warmup Iteration   3: 361778,475 ops/s
[info] # Warmup Iteration   4: 361028,036 ops/s
[info] # Warmup Iteration   5: 360918,650 ops/s
[info] Iteration   1: 361846,764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 361140,197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 361045,472 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 351270,966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 361772,154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   359415,111 ±(99.9%) 17585,862 ops/s [Average]
[info]   (min, avg, max) = (351270,966, 359415,111, 361846,764), stdev = 4566,992
[info]   CI (99.9%): [341829,249, 377000,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52,31% complete, ETA 01:03:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64701,326 ops/s
[info] # Warmup Iteration   2: 79798,537 ops/s
[info] # Warmup Iteration   3: 78971,961 ops/s
[info] # Warmup Iteration   4: 79889,547 ops/s
[info] # Warmup Iteration   5: 80102,525 ops/s
[info] Iteration   1: 80387,161 ops/s
[info]                  ·gc.alloc.rate:               1192,289 MB/sec
[info]                  ·gc.alloc.rate.norm:          23344,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13119,426 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 80082,117 ops/s
[info]                  ·gc.alloc.rate:                   1187,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343,981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26338,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,818 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 80148,976 ops/s
[info]                  ·gc.alloc.rate:                   1188,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26322,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,817 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 80079,992 ops/s
[info]                  ·gc.alloc.rate:               1187,822 MB/sec
[info]                  ·gc.alloc.rate.norm:          23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26358,399 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 80626,439 ops/s
[info]                  ·gc.alloc.rate:                   1195,694 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343,980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13093,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   80264,937 ±(99.9%) 916,698 ops/s [Average]
[info]   (min, avg, max) = (80079,992, 80264,937, 80626,439), stdev = 238,064
[info]   CI (99.9%): [79348,239, 81181,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1190,456 ±(99.9%) 13,346 MB/sec [Average]
[info]   (min, avg, max) = (1187,754, 1190,456, 1195,694), stdev = 3,466
[info]   CI (99.9%): [1177,109, 1203,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344,005 ±(99.9%) 0,096 B/op [Average]
[info]   (min, avg, max) = (23343,980, 23344,005, 23344,030), stdev = 0,025
[info]   CI (99.9%): [23343,909, 23344,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,487 ±(99.9%) 1413,530 MB/sec [Average]
[info]   (min, avg, max) = (670,071, 1072,487, 1341,204), stdev = 367,089
[info]   CI (99.9%): [≈ 0, 2486,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   21046,456 ±(99.9%) 27910,460 B/op [Average]
[info]   (min, avg, max) = (13093,385, 21046,456, 26358,399), stdev = 7248,258
[info]   CI (99.9%): [≈ 0, 48956,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,408 ±(99.9%) 1,575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,408, 0,818), stdev = 0,409
[info]   CI (99.9%): [≈ 0, 1,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52,52% complete, ETA 01:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11034,064 ops/s
[info] # Warmup Iteration   2: 11437,698 ops/s
[info] # Warmup Iteration   3: 11494,631 ops/s
[info] # Warmup Iteration   4: 11432,542 ops/s
[info] # Warmup Iteration   5: 11487,748 ops/s
[info] Iteration   1: 11434,760 ops/s
[info]                  ·gc.alloc.rate:               283,414 MB/sec
[info]                  ·gc.alloc.rate.norm:          39010,952 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70406,222 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 11501,421 ops/s
[info]                  ·gc.alloc.rate:                   285,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70002,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,621 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 11468,185 ops/s
[info]                  ·gc.alloc.rate:      284,182 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11415,416 ops/s
[info]                  ·gc.alloc.rate:               282,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          39008,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70523,371 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 11393,132 ops/s
[info]                  ·gc.alloc.rate:      282,393 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   11442,583 ±(99.9%) 165,196 ops/s [Average]
[info]   (min, avg, max) = (11393,132, 11442,583, 11501,421), stdev = 42,901
[info]   CI (99.9%): [11277,387, 11607,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   283,596 ±(99.9%) 4,048 MB/sec [Average]
[info]   (min, avg, max) = (282,393, 283,596, 285,063), stdev = 1,051
[info]   CI (99.9%): [279,548, 287,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39008,622 ±(99.9%) 5,015 B/op [Average]
[info]   (min, avg, max) = (39008,035, 39008,622, 39010,952), stdev = 1,302
[info]   CI (99.9%): [39003,607, 39013,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,915 ±(99.9%) 1078,851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,915, 511,563), stdev = 280,174
[info]   CI (99.9%): [≈ 0, 1385,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   42186,377 ±(99.9%) 148292,927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42186,377, 70523,371), stdev = 38511,202
[info]   CI (99.9%): [≈ 0, 190479,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,924 ±(99.9%) 7,958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,924, 4,621), stdev = 2,067
[info]   CI (99.9%): [≈ 0, 8,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52,72% complete, ETA 01:02:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24558,623 ops/s
[info] # Warmup Iteration   2: 30615,590 ops/s
[info] # Warmup Iteration   3: 30750,940 ops/s
[info] # Warmup Iteration   4: 30987,938 ops/s
[info] # Warmup Iteration   5: 30835,146 ops/s
[info] Iteration   1: 31107,882 ops/s
[info]                  ·gc.alloc.rate:                   1580,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              79936,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102016,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,106 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31106,577 ops/s
[info]                  ·gc.alloc.rate:               1579,940 MB/sec
[info]                  ·gc.alloc.rate.norm:          79936,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68032,228 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 30984,217 ops/s
[info]                  ·gc.alloc.rate:                   1573,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              79936,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68346,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,172 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30987,001 ops/s
[info]                  ·gc.alloc.rate:                   1573,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              79936,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102624,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,172 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 31052,138 ops/s
[info]                  ·gc.alloc.rate:                   1577,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              79936,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68361,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   31047,563 ±(99.9%) 234,403 ops/s [Average]
[info]   (min, avg, max) = (30984,217, 31047,563, 31107,882), stdev = 60,874
[info]   CI (99.9%): [30813,160, 31281,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1576,924 ±(99.9%) 11,901 MB/sec [Average]
[info]   (min, avg, max) = (1573,655, 1576,924, 1580,045), stdev = 3,091
[info]   CI (99.9%): [1565,024, 1588,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   79936,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (79936,013, 79936,013, 79936,014), stdev = 0,001
[info]   CI (99.9%): [79936,012, 79936,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,207 ±(99.9%) 1418,052 MB/sec [Average]
[info]   (min, avg, max) = (1344,661, 1615,207, 2020,730), stdev = 368,264
[info]   CI (99.9%): [197,155, 3033,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81876,221 ±(99.9%) 71871,591 B/op [Average]
[info]   (min, avg, max) = (68032,228, 81876,221, 102624,788), stdev = 18664,824
[info]   CI (99.9%): [10004,630, 153747,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,901 ±(99.9%) 5,308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,901, 3,172), stdev = 1,379
[info]   CI (99.9%): [≈ 0, 7,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52,92% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21888,003 ops/s
[info] # Warmup Iteration   2: 33749,781 ops/s
[info] # Warmup Iteration   3: 33981,456 ops/s
[info] # Warmup Iteration   4: 33897,731 ops/s
[info] # Warmup Iteration   5: 34012,830 ops/s
[info] Iteration   1: 33787,832 ops/s
[info]                  ·gc.alloc.rate:                   1321,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              61576,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62984,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,909 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34094,867 ops/s
[info]                  ·gc.alloc.rate:                   1333,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              61576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62465,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,961 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 32511,550 ops/s
[info]                  ·gc.alloc.rate:                   1271,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              61576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65554,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33742,194 ops/s
[info]                  ·gc.alloc.rate:               1320,226 MB/sec
[info]                  ·gc.alloc.rate.norm:          61576,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63228,996 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 34067,184 ops/s
[info]                  ·gc.alloc.rate:                   1332,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              61576,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62672,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,962 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   33640,725 ±(99.9%) 2506,681 ops/s [Average]
[info]   (min, avg, max) = (32511,550, 33640,725, 34094,867), stdev = 650,977
[info]   CI (99.9%): [31134,045, 36147,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1316,169 ±(99.9%) 98,043 MB/sec [Average]
[info]   (min, avg, max) = (1271,980, 1316,169, 1333,909), stdev = 25,461
[info]   CI (99.9%): [1218,126, 1414,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61576,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (61576,012, 61576,012, 61576,013), stdev = 0,001
[info]   CI (99.9%): [61576,011, 61576,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,334 ±(99.9%) 6,814 MB/sec [Average]
[info]   (min, avg, max) = (1352,177, 1354,334, 1356,503), stdev = 1,769
[info]   CI (99.9%): [1347,521, 1361,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63380,854 ±(99.9%) 4811,307 B/op [Average]
[info]   (min, avg, max) = (62465,021, 63380,854, 65554,138), stdev = 1249,481
[info]   CI (99.9%): [58569,548, 68192,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,369 ±(99.9%) 4,303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,369, 2,909), stdev = 1,117
[info]   CI (99.9%): [≈ 0, 5,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,12% complete, ETA 01:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518334,236 ops/s
[info] # Warmup Iteration   2: 554194,901 ops/s
[info] # Warmup Iteration   3: 558087,250 ops/s
[info] # Warmup Iteration   4: 559027,208 ops/s
[info] # Warmup Iteration   5: 560062,516 ops/s
[info] Iteration   1: 558825,578 ops/s
[info]                  ·gc.alloc.rate:               1454,194 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3785,825 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 561217,442 ops/s
[info]                  ·gc.alloc.rate:                   1460,686 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3769,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 560795,189 ops/s
[info]                  ·gc.alloc.rate:                   1459,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3776,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 560058,097 ops/s
[info]                  ·gc.alloc.rate:                   1457,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3784,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 511318,922 ops/s
[info]                  ·gc.alloc.rate:               1330,683 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4149,691 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   550443,046 ±(99.9%) 84290,138 ops/s [Average]
[info]   (min, avg, max) = (511318,922, 550443,046, 561217,442), stdev = 21889,881
[info]   CI (99.9%): [466152,908, 634733,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1432,493 ±(99.9%) 219,353 MB/sec [Average]
[info]   (min, avg, max) = (1330,683, 1432,493, 1460,686), stdev = 56,965
[info]   CI (99.9%): [1213,140, 1651,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,753 ±(99.9%) 6,625 MB/sec [Average]
[info]   (min, avg, max) = (1344,073, 1345,753, 1348,125), stdev = 1,721
[info]   CI (99.9%): [1339,127, 1352,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3853,255 ±(99.9%) 638,601 B/op [Average]
[info]   (min, avg, max) = (3769,854, 3853,255, 4149,691), stdev = 165,843
[info]   CI (99.9%): [3214,653, 4491,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,105 ±(99.9%) 0,370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,105, 0,175), stdev = 0,096
[info]   CI (99.9%): [≈ 0, 0,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53,32% complete, ETA 01:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13331,044 ops/s
[info] # Warmup Iteration   2: 24773,827 ops/s
[info] # Warmup Iteration   3: 25429,848 ops/s
[info] # Warmup Iteration   4: 25451,308 ops/s
[info] # Warmup Iteration   5: 25414,407 ops/s
[info] Iteration   1: 25532,287 ops/s
[info]                  ·gc.alloc.rate:                   1941,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125200,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,133 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25562,642 ops/s
[info]                  ·gc.alloc.rate:                   1943,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83461,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,563 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25378,789 ops/s
[info]                  ·gc.alloc.rate:                   1929,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126207,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,582 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 24498,996 ops/s
[info]                  ·gc.alloc.rate:                   1862,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130815,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,675 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 25426,884 ops/s
[info]                  ·gc.alloc.rate:                   1932,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126165,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,577 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   25279,920 ±(99.9%) 1705,662 ops/s [Average]
[info]   (min, avg, max) = (24498,996, 25279,920, 25562,642), stdev = 442,955
[info]   CI (99.9%): [23574,257, 26985,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1921,950 ±(99.9%) 129,103 MB/sec [Average]
[info]   (min, avg, max) = (1862,840, 1921,950, 1943,373), stdev = 33,528
[info]   CI (99.9%): [1792,847, 2051,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119656,017 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (119656,016, 119656,017, 119656,018), stdev = 0,001
[info]   CI (99.9%): [119656,013, 119656,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1899,274 ±(99.9%) 1170,514 MB/sec [Average]
[info]   (min, avg, max) = (1355,521, 1899,274, 2038,111), stdev = 303,979
[info]   CI (99.9%): [728,760, 3069,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   118369,914 ±(99.9%) 75612,878 B/op [Average]
[info]   (min, avg, max) = (83461,187, 118369,914, 130815,248), stdev = 19636,424
[info]   CI (99.9%): [42757,036, 193982,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,106 ±(99.9%) 4,366 B/op [Average]
[info]   (min, avg, max) = (2,563, 3,106, 5,133), stdev = 1,134
[info]   CI (99.9%): [≈ 0, 7,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53,52% complete, ETA 01:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24535,918 ops/s
[info] # Warmup Iteration   2: 30768,325 ops/s
[info] # Warmup Iteration   3: 30896,595 ops/s
[info] # Warmup Iteration   4: 30931,991 ops/s
[info] # Warmup Iteration   5: 30981,326 ops/s
[info] Iteration   1: 30942,899 ops/s
[info]                  ·gc.alloc.rate:                   1396,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68369,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,176 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 31067,022 ops/s
[info]                  ·gc.alloc.rate:               1402,161 MB/sec
[info]                  ·gc.alloc.rate.norm:          71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68100,746 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 31049,340 ops/s
[info]                  ·gc.alloc.rate:                   1401,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68150,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30959,769 ops/s
[info]                  ·gc.alloc.rate:                   1398,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68258,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,168 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 31050,228 ops/s
[info]                  ·gc.alloc.rate:               1401,261 MB/sec
[info]                  ·gc.alloc.rate.norm:          71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68268,689 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   31013,852 ±(99.9%) 222,614 ops/s [Average]
[info]   (min, avg, max) = (30942,899, 31013,852, 31067,022), stdev = 57,812
[info]   CI (99.9%): [30791,237, 31236,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1399,902 ±(99.9%) 9,244 MB/sec [Average]
[info]   (min, avg, max) = (1396,487, 1399,902, 1402,161), stdev = 2,401
[info]   CI (99.9%): [1390,658, 1409,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   71032,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71032,013, 71032,013, 71032,014), stdev = 0,001
[info]   CI (99.9%): [71032,012, 71032,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344,668 ±(99.9%) 4,600 MB/sec [Average]
[info]   (min, avg, max) = (1343,713, 1344,668, 1346,748), stdev = 1,195
[info]   CI (99.9%): [1340,068, 1349,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   68229,490 ±(99.9%) 407,032 B/op [Average]
[info]   (min, avg, max) = (68100,746, 68229,490, 68369,188), stdev = 105,705
[info]   CI (99.9%): [67822,458, 68636,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,480 ±(99.9%) 6,175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,480, 3,176), stdev = 1,604
[info]   CI (99.9%): [≈ 0, 7,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53,72% complete, ETA 01:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60507,365 ops/s
[info] # Warmup Iteration   2: 77774,146 ops/s
[info] # Warmup Iteration   3: 78189,787 ops/s
[info] # Warmup Iteration   4: 77434,207 ops/s
[info] # Warmup Iteration   5: 78593,768 ops/s
[info] Iteration   1: 79154,593 ops/s
[info]                  ·gc.alloc.rate:                   1675,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26701,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,828 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 78439,041 ops/s
[info]                  ·gc.alloc.rate:               1660,414 MB/sec
[info]                  ·gc.alloc.rate.norm:          33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40446,545 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 78784,058 ops/s
[info]                  ·gc.alloc.rate:               1667,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          33312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26877,011 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 79051,373 ops/s
[info]                  ·gc.alloc.rate:                   1673,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40234,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,829 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 79238,495 ops/s
[info]                  ·gc.alloc.rate:                   1676,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26797,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,413 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   78933,512 ±(99.9%) 1251,638 ops/s [Average]
[info]   (min, avg, max) = (78439,041, 78933,512, 79238,495), stdev = 325,046
[info]   CI (99.9%): [77681,874, 80185,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1670,719 ±(99.9%) 26,008 MB/sec [Average]
[info]   (min, avg, max) = (1660,414, 1670,719, 1676,947), stdev = 6,754
[info]   CI (99.9%): [1644,711, 1696,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (33312,005, 33312,005, 33312,006), stdev = 0,001
[info]   CI (99.9%): [33312,004, 33312,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,888 ±(99.9%) 1418,938 MB/sec [Average]
[info]   (min, avg, max) = (1342,870, 1614,888, 2021,052), stdev = 368,494
[info]   CI (99.9%): [195,950, 3033,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32211,538 ±(99.9%) 28576,924 B/op [Average]
[info]   (min, avg, max) = (26701,814, 32211,538, 40446,545), stdev = 7421,336
[info]   CI (99.9%): [3634,614, 60788,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,414 ±(99.9%) 1,595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,414, 0,829), stdev = 0,414
[info]   CI (99.9%): [≈ 0, 2,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,92% complete, ETA 01:01:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131663,239 ops/s
[info] # Warmup Iteration   2: 179100,038 ops/s
[info] # Warmup Iteration   3: 178770,959 ops/s
[info] # Warmup Iteration   4: 178424,191 ops/s
[info] # Warmup Iteration   5: 169195,340 ops/s
[info] Iteration   1: 178423,703 ops/s
[info]                  ·gc.alloc.rate:                   1352,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11931,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,367 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 178453,981 ops/s
[info]                  ·gc.alloc.rate:                   1352,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11937,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 175723,444 ops/s
[info]                  ·gc.alloc.rate:                   1332,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12131,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 178636,198 ops/s
[info]                  ·gc.alloc.rate:                   1354,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11943,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,367 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 178325,521 ops/s
[info]                  ·gc.alloc.rate:               1351,327 MB/sec
[info]                  ·gc.alloc.rate.norm:          11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11975,495 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   177912,569 ±(99.9%) 4732,071 ops/s [Average]
[info]   (min, avg, max) = (175723,444, 177912,569, 178636,198), stdev = 1228,904
[info]   CI (99.9%): [173180,498, 182644,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1348,463 ±(99.9%) 35,256 MB/sec [Average]
[info]   (min, avg, max) = (1332,176, 1348,463, 1354,024), stdev = 9,156
[info]   CI (99.9%): [1313,207, 1383,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11928,002, 11928,002, 11928,002), stdev = 0,001
[info]   CI (99.9%): [11928,002, 11928,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,725 ±(99.9%) 6,266 MB/sec [Average]
[info]   (min, avg, max) = (1352,663, 1354,725, 1356,707), stdev = 1,627
[info]   CI (99.9%): [1348,459, 1360,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11983,844 ±(99.9%) 323,930 B/op [Average]
[info]   (min, avg, max) = (11931,128, 11983,844, 12131,214), stdev = 84,124
[info]   CI (99.9%): [11659,914, 12307,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,258 ±(99.9%) 0,636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,258, 0,373), stdev = 0,165
[info]   CI (99.9%): [≈ 0, 0,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,12% complete, ETA 01:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1328481,289 ops/s
[info] # Warmup Iteration   2: 1434186,368 ops/s
[info] # Warmup Iteration   3: 1444394,630 ops/s
[info] # Warmup Iteration   4: 1437357,014 ops/s
[info] # Warmup Iteration   5: 1428764,594 ops/s
[info] Iteration   1: 1449802,036 ops/s
[info]                  ·gc.alloc.rate:                   1201,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1459,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1454157,320 ops/s
[info]                  ·gc.alloc.rate:               1204,876 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 727,477 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1176785,009 ops/s
[info]                  ·gc.alloc.rate:                   974,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1797,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1447636,563 ops/s
[info]                  ·gc.alloc.rate:               1199,432 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1462,084 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1450221,184 ops/s
[info]                  ·gc.alloc.rate:                   1201,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1395720,422 ±(99.9%) 471362,015 ops/s [Average]
[info]   (min, avg, max) = (1176785,009, 1395720,422, 1454157,320), stdev = 122411,219
[info]   CI (99.9%): [924358,407, 1867082,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1156,351 ±(99.9%) 390,599 MB/sec [Average]
[info]   (min, avg, max) = (974,929, 1156,351, 1204,876), stdev = 101,437
[info]   CI (99.9%): [765,752, 1546,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,000, 1304,000, 1304,000), stdev = 0,001
[info]   CI (99.9%): [1304,000, 1304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,567 ±(99.9%) 1417,112 MB/sec [Average]
[info]   (min, avg, max) = (672,178, 1075,567, 1344,839), stdev = 368,019
[info]   CI (99.9%): [≈ 0, 2492,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1235,326 ±(99.9%) 1857,725 B/op [Average]
[info]   (min, avg, max) = (727,477, 1235,326, 1797,743), stdev = 482,445
[info]   CI (99.9%): [≈ 0, 3093,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,084), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54,33% complete, ETA 01:00:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1294614,531 ops/s
[info] # Warmup Iteration   2: 1388009,019 ops/s
[info] # Warmup Iteration   3: 1384313,607 ops/s
[info] # Warmup Iteration   4: 1387620,113 ops/s
[info] # Warmup Iteration   5: 1383449,008 ops/s
[info] Iteration   1: 1387741,189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1384251,563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1384756,820 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1384091,387 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1387215,077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1385611,207 ±(99.9%) 6668,867 ops/s [Average]
[info]   (min, avg, max) = (1384091,387, 1385611,207, 1387741,189), stdev = 1731,884
[info]   CI (99.9%): [1378942,341, 1392280,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54,53% complete, ETA 01:00:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88779,869 ops/s
[info] # Warmup Iteration   2: 137917,104 ops/s
[info] # Warmup Iteration   3: 140065,105 ops/s
[info] # Warmup Iteration   4: 140076,350 ops/s
[info] # Warmup Iteration   5: 138920,812 ops/s
[info] Iteration   1: 139827,163 ops/s
[info]                  ·gc.alloc.rate:                   1576,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15227,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,469 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 133009,673 ops/s
[info]                  ·gc.alloc.rate:               1499,556 MB/sec
[info]                  ·gc.alloc.rate.norm:          17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16023,655 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 139927,547 ops/s
[info]                  ·gc.alloc.rate:                   1577,559 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22865,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,936 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 139893,865 ops/s
[info]                  ·gc.alloc.rate:               1577,264 MB/sec
[info]                  ·gc.alloc.rate.norm:          17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15257,137 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 139959,324 ops/s
[info]                  ·gc.alloc.rate:                   1577,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15265,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   138523,514 ±(99.9%) 11870,460 ops/s [Average]
[info]   (min, avg, max) = (133009,673, 138523,514, 139959,324), stdev = 3082,721
[info]   CI (99.9%): [126653,055, 150393,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1561,694 ±(99.9%) 133,773 MB/sec [Average]
[info]   (min, avg, max) = (1499,556, 1561,694, 1577,727), stdev = 34,741
[info]   CI (99.9%): [1427,921, 1695,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17744,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17744,003, 17744,003, 17744,003), stdev = 0,001
[info]   CI (99.9%): [17744,003, 17744,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,668 ±(99.9%) 1167,201 MB/sec [Average]
[info]   (min, avg, max) = (1352,763, 1490,668, 2032,893), stdev = 303,118
[info]   CI (99.9%): [323,467, 2657,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16927,677 ±(99.9%) 12846,678 B/op [Average]
[info]   (min, avg, max) = (15227,069, 16927,677, 22865,490), stdev = 3336,241
[info]   CI (99.9%): [4080,999, 29774,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,328 ±(99.9%) 1,509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,328, 0,936), stdev = 0,392
[info]   CI (99.9%): [≈ 0, 1,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54,73% complete, ETA 01:00:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35793,312 ops/s
[info] # Warmup Iteration   2: 38425,518 ops/s
[info] # Warmup Iteration   3: 38267,938 ops/s
[info] # Warmup Iteration   4: 38324,452 ops/s
[info] # Warmup Iteration   5: 38099,619 ops/s
[info] Iteration   1: 38274,422 ops/s
[info]                  ·gc.alloc.rate:               505,790 MB/sec
[info]                  ·gc.alloc.rate.norm:          20800,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21035,063 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 38528,747 ops/s
[info]                  ·gc.alloc.rate:      509,205 MB/sec
[info]                  ·gc.alloc.rate.norm: 20800,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38314,683 ops/s
[info]                  ·gc.alloc.rate:                   506,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27716,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133,132 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38319,614 ops/s
[info]                  ·gc.alloc.rate:                   506,468 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27712,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,565 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 38276,142 ops/s
[info]                  ·gc.alloc.rate:               505,895 MB/sec
[info]                  ·gc.alloc.rate.norm:          20800,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27661,854 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   38342,721 ±(99.9%) 408,527 ops/s [Average]
[info]   (min, avg, max) = (38274,422, 38342,721, 38528,747), stdev = 106,093
[info]   CI (99.9%): [37934,194, 38751,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   506,728 ±(99.9%) 5,437 MB/sec [Average]
[info]   (min, avg, max) = (505,790, 506,728, 509,205), stdev = 1,412
[info]   CI (99.9%): [501,291, 512,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   20800,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20800,011, 20800,011, 20800,011), stdev = 0,001
[info]   CI (99.9%): [20800,009, 20800,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,740 ±(99.9%) 1123,972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,740, 674,776), stdev = 291,892
[info]   CI (99.9%): [≈ 0, 1630,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   20825,119 ±(99.9%) 46183,387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20825,119, 27716,509), stdev = 11993,679
[info]   CI (99.9%): [≈ 0, 67008,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,661 ±(99.9%) 5,554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,661, 3,240), stdev = 1,442
[info]   CI (99.9%): [≈ 0, 6,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   27,139 ±(99.9%) 228,198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,139, 133,132), stdev = 59,262
[info]   CI (99.9%): [≈ 0, 255,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,93% complete, ETA 00:59:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27896,470 ops/s
[info] # Warmup Iteration   2: 41096,513 ops/s
[info] # Warmup Iteration   3: 41094,531 ops/s
[info] # Warmup Iteration   4: 41287,618 ops/s
[info] # Warmup Iteration   5: 41132,803 ops/s
[info] Iteration   1: 41185,624 ops/s
[info]                  ·gc.alloc.rate:                   1477,377 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51695,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,795 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 41051,078 ops/s
[info]                  ·gc.alloc.rate:               1472,600 MB/sec
[info]                  ·gc.alloc.rate.norm:          56456,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51920,576 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 40999,335 ops/s
[info]                  ·gc.alloc.rate:                   1470,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78035,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,397 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 41120,909 ops/s
[info]                  ·gc.alloc.rate:               1474,887 MB/sec
[info]                  ·gc.alloc.rate.norm:          56456,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51920,179 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 41171,485 ops/s
[info]                  ·gc.alloc.rate:                   1476,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51881,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,796 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   41105,686 ±(99.9%) 305,901 ops/s [Average]
[info]   (min, avg, max) = (40999,335, 41105,686, 41185,624), stdev = 79,442
[info]   CI (99.9%): [40799,785, 41411,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1474,455 ±(99.9%) 10,774 MB/sec [Average]
[info]   (min, avg, max) = (1470,703, 1474,455, 1477,377), stdev = 2,798
[info]   CI (99.9%): [1463,681, 1485,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56456,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (56456,010, 56456,010, 56456,011), stdev = 0,001
[info]   CI (99.9%): [56456,009, 56456,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,683 ±(99.9%) 1167,116 MB/sec [Average]
[info]   (min, avg, max) = (1352,807, 1490,683, 2032,870), stdev = 303,096
[info]   CI (99.9%): [323,567, 2657,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   57090,756 ±(99.9%) 45087,513 B/op [Average]
[info]   (min, avg, max) = (51695,744, 57090,756, 78035,941), stdev = 11709,084
[info]   CI (99.9%): [12003,243, 102178,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,798 ±(99.9%) 3,768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,798, 2,397), stdev = 0,979
[info]   CI (99.9%): [≈ 0, 4,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,13% complete, ETA 00:59:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 677927,181 ops/s
[info] # Warmup Iteration   2: 742221,997 ops/s
[info] # Warmup Iteration   3: 739289,467 ops/s
[info] # Warmup Iteration   4: 735477,499 ops/s
[info] # Warmup Iteration   5: 741645,328 ops/s
[info] Iteration   1: 738581,085 ops/s
[info]                  ·gc.alloc.rate:                   1441,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2864,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 740717,280 ops/s
[info]                  ·gc.alloc.rate:                   1445,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2856,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 740515,792 ops/s
[info]                  ·gc.alloc.rate:                   1445,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2859,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 730843,532 ops/s
[info]                  ·gc.alloc.rate:                   1426,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2900,407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 733712,943 ops/s
[info]                  ·gc.alloc.rate:                   1431,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2891,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   736874,126 ±(99.9%) 16928,213 ops/s [Average]
[info]   (min, avg, max) = (730843,532, 736874,126, 740717,280), stdev = 4396,203
[info]   CI (99.9%): [719945,913, 753802,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1438,218 ±(99.9%) 32,855 MB/sec [Average]
[info]   (min, avg, max) = (1426,577, 1438,218, 1445,730), stdev = 8,532
[info]   CI (99.9%): [1405,363, 1471,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,001, 3072,001, 3072,001), stdev = 0,001
[info]   CI (99.9%): [3072,001, 3072,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,717 ±(99.9%) 6,661 MB/sec [Average]
[info]   (min, avg, max) = (1344,098, 1345,717, 1348,055), stdev = 1,730
[info]   CI (99.9%): [1339,056, 1352,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2874,517 ±(99.9%) 77,848 B/op [Average]
[info]   (min, avg, max) = (2856,045, 2874,517, 2900,407), stdev = 20,217
[info]   CI (99.9%): [2796,669, 2952,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,098 ±(99.9%) 0,142 B/op [Average]
[info]   (min, avg, max) = (0,045, 0,098, 0,133), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55,33% complete, ETA 00:59:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15472,310 ops/s
[info] # Warmup Iteration   2: 30398,866 ops/s
[info] # Warmup Iteration   3: 30791,211 ops/s
[info] # Warmup Iteration   4: 30545,831 ops/s
[info] # Warmup Iteration   5: 30646,748 ops/s
[info] Iteration   1: 30418,588 ops/s
[info]                  ·gc.alloc.rate:                   2214,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105171,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,231 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30773,018 ops/s
[info]                  ·gc.alloc.rate:                   2239,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104074,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,323 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30640,323 ops/s
[info]                  ·gc.alloc.rate:                   2229,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139522,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,138 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 30716,820 ops/s
[info]                  ·gc.alloc.rate:                   2235,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104437,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30860,781 ops/s
[info]                  ·gc.alloc.rate:                   2245,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104042,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,184 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   30681,906 ±(99.9%) 646,009 ops/s [Average]
[info]   (min, avg, max) = (30418,588, 30681,906, 30860,781), stdev = 167,766
[info]   CI (99.9%): [30035,897, 31327,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2232,828 ±(99.9%) 46,314 MB/sec [Average]
[info]   (min, avg, max) = (2214,009, 2232,828, 2245,616), stdev = 12,028
[info]   CI (99.9%): [2186,514, 2279,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114536,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (114536,013, 114536,014, 114536,015), stdev = 0,001
[info]   CI (99.9%): [114536,010, 114536,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2172,427 ±(99.9%) 1170,208 MB/sec [Average]
[info]   (min, avg, max) = (2032,985, 2172,427, 2716,037), stdev = 303,899
[info]   CI (99.9%): [1002,219, 3342,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   111449,644 ±(99.9%) 60454,797 B/op [Average]
[info]   (min, avg, max) = (104042,381, 111449,644, 139522,740), stdev = 15699,919
[info]   CI (99.9%): [50994,847, 171904,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,415 ±(99.9%) 4,475 B/op [Average]
[info]   (min, avg, max) = (2,138, 3,415, 5,323), stdev = 1,162
[info]   CI (99.9%): [≈ 0, 7,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55,53% complete, ETA 00:58:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32808,059 ops/s
[info] # Warmup Iteration   2: 39026,954 ops/s
[info] # Warmup Iteration   3: 39185,078 ops/s
[info] # Warmup Iteration   4: 38959,814 ops/s
[info] # Warmup Iteration   5: 39376,416 ops/s
[info] Iteration   1: 39256,961 ops/s
[info]                  ·gc.alloc.rate:                   1639,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53888,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,834 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 39438,900 ops/s
[info]                  ·gc.alloc.rate:                   1646,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80494,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,831 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 39551,741 ops/s
[info]                  ·gc.alloc.rate:               1651,749 MB/sec
[info]                  ·gc.alloc.rate.norm:          65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53571,265 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 39170,026 ops/s
[info]                  ·gc.alloc.rate:                   1635,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81241,289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,836 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 39505,499 ops/s
[info]                  ·gc.alloc.rate:                   1649,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53775,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,829 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   39384,625 ±(99.9%) 632,242 ops/s [Average]
[info]   (min, avg, max) = (39170,026, 39384,625, 39551,741), stdev = 164,191
[info]   CI (99.9%): [38752,383, 40016,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1644,569 ±(99.9%) 26,383 MB/sec [Average]
[info]   (min, avg, max) = (1635,723, 1644,569, 1651,749), stdev = 6,851
[info]   CI (99.9%): [1618,186, 1670,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65720,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (65720,010, 65720,011, 65720,012), stdev = 0,001
[info]   CI (99.9%): [65720,008, 65720,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1615,825 ±(99.9%) 1418,974 MB/sec [Average]
[info]   (min, avg, max) = (1344,056, 1615,825, 2022,036), stdev = 368,503
[info]   CI (99.9%): [196,851, 3034,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   64594,056 ±(99.9%) 57214,774 B/op [Average]
[info]   (min, avg, max) = (53571,265, 64594,056, 81241,289), stdev = 14858,495
[info]   CI (99.9%): [7379,282, 121808,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,666 ±(99.9%) 1,434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 0,836), stdev = 0,372
[info]   CI (99.9%): [≈ 0, 2,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,73% complete, ETA 00:58:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299167,089 ops/s
[info] # Warmup Iteration   2: 400626,329 ops/s
[info] # Warmup Iteration   3: 400222,165 ops/s
[info] # Warmup Iteration   4: 400253,467 ops/s
[info] # Warmup Iteration   5: 400546,054 ops/s
[info] Iteration   1: 396299,093 ops/s
[info]                  ·gc.alloc.rate:               1101,887 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2685,068 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 400252,848 ops/s
[info]                  ·gc.alloc.rate:                   1112,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5318,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 401535,327 ops/s
[info]                  ·gc.alloc.rate:                   1116,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5305,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,163 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 401331,086 ops/s
[info]                  ·gc.alloc.rate:               1115,938 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2655,261 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 401081,310 ops/s
[info]                  ·gc.alloc.rate:                   1115,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5319,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,163 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   400099,933 ±(99.9%) 8394,263 ops/s [Average]
[info]   (min, avg, max) = (396299,093, 400099,933, 401535,327), stdev = 2179,964
[info]   CI (99.9%): [391705,669, 408494,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1112,399 ±(99.9%) 23,225 MB/sec [Average]
[info]   (min, avg, max) = (1101,887, 1112,399, 1116,326), stdev = 6,031
[info]   CI (99.9%): [1089,173, 1135,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4376,001, 4376,001, 4376,001), stdev = 0,001
[info]   CI (99.9%): [4376,001, 4376,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,883 ±(99.9%) 1428,091 MB/sec [Average]
[info]   (min, avg, max) = (676,106, 1082,883, 1355,382), stdev = 370,871
[info]   CI (99.9%): [≈ 0, 2510,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4256,617 ±(99.9%) 5576,793 B/op [Average]
[info]   (min, avg, max) = (2655,261, 4256,617, 5319,311), stdev = 1448,276
[info]   CI (99.9%): [≈ 0, 9833,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,082 ±(99.9%) 0,314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,082, 0,163), stdev = 0,082
[info]   CI (99.9%): [≈ 0, 0,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,94% complete, ETA 00:58:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1680704,848 ops/s
[info] # Warmup Iteration   2: 1834543,373 ops/s
[info] # Warmup Iteration   3: 1834551,950 ops/s
[info] # Warmup Iteration   4: 1836192,316 ops/s
[info] # Warmup Iteration   5: 1834030,293 ops/s
[info] Iteration   1: 1836637,443 ops/s
[info]                  ·gc.alloc.rate:                   1073,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1152,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1613185,925 ops/s
[info]                  ·gc.alloc.rate:               943,068 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 655,792 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1747892,418 ops/s
[info]                  ·gc.alloc.rate:               1021,715 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 605,217 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1767742,250 ops/s
[info]                  ·gc.alloc.rate:                   1033,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1196,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1838404,897 ops/s
[info]                  ·gc.alloc.rate:               1074,516 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1151,332 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1760772,587 ±(99.9%) 353853,801 ops/s [Average]
[info]   (min, avg, max) = (1613185,925, 1760772,587, 1838404,897), stdev = 91894,708
[info]   CI (99.9%): [1406918,786, 2114626,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1029,261 ±(99.9%) 206,636 MB/sec [Average]
[info]   (min, avg, max) = (943,068, 1029,261, 1074,516), stdev = 53,663
[info]   CI (99.9%): [822,625, 1235,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,667 ±(99.9%) 1418,307 MB/sec [Average]
[info]   (min, avg, max) = (672,129, 1075,667, 1344,955), stdev = 368,330
[info]   CI (99.9%): [≈ 0, 2493,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   952,333 ±(99.9%) 1135,563 B/op [Average]
[info]   (min, avg, max) = (605,217, 952,333, 1196,813), stdev = 294,902
[info]   CI (99.9%): [≈ 0, 2087,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,093), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56,14% complete, ETA 00:58:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1660833,010 ops/s
[info] # Warmup Iteration   2: 1780761,764 ops/s
[info] # Warmup Iteration   3: 1772005,146 ops/s
[info] # Warmup Iteration   4: 1776500,780 ops/s
[info] # Warmup Iteration   5: 1760735,994 ops/s
[info] Iteration   1: 1753727,712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1777318,688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1779507,133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1774340,894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1766457,135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1770270,312 ±(99.9%) 40375,157 ops/s [Average]
[info]   (min, avg, max) = (1753727,712, 1770270,312, 1779507,133), stdev = 10485,300
[info]   CI (99.9%): [1729895,156, 1810645,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56,34% complete, ETA 00:57:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170939,740 ops/s
[info] # Warmup Iteration   2: 259319,315 ops/s
[info] # Warmup Iteration   3: 259511,206 ops/s
[info] # Warmup Iteration   4: 260590,471 ops/s
[info] # Warmup Iteration   5: 258877,710 ops/s
[info] Iteration   1: 258468,841 ops/s
[info]                  ·gc.alloc.rate:               1673,705 MB/sec
[info]                  ·gc.alloc.rate.norm:          10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2029,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12358,281 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 260391,904 ops/s
[info]                  ·gc.alloc.rate:                   1686,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8189,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,377 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 259648,128 ops/s
[info]                  ·gc.alloc.rate:                   1681,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12326,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 260174,682 ops/s
[info]                  ·gc.alloc.rate:                   1684,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8207,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,378 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 259651,803 ops/s
[info]                  ·gc.alloc.rate:                   1681,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12346,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   259667,072 ±(99.9%) 2868,277 ops/s [Average]
[info]   (min, avg, max) = (258468,841, 259667,072, 260391,904), stdev = 744,883
[info]   CI (99.9%): [256798,794, 262535,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1681,525 ±(99.9%) 18,856 MB/sec [Average]
[info]   (min, avg, max) = (1673,705, 1681,525, 1686,329), stdev = 4,897
[info]   CI (99.9%): [1662,669, 1700,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10192,002, 10192,002, 10192,002), stdev = 0,001
[info]   CI (99.9%): [10192,001, 10192,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,315 ±(99.9%) 1428,519 MB/sec [Average]
[info]   (min, avg, max) = (1354,990, 1762,315, 2036,656), stdev = 370,982
[info]   CI (99.9%): [333,796, 3190,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10685,744 ±(99.9%) 8743,039 B/op [Average]
[info]   (min, avg, max) = (8189,421, 10685,744, 12358,281), stdev = 2270,539
[info]   CI (99.9%): [1942,705, 19428,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,252 ±(99.9%) 0,594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,252, 0,378), stdev = 0,154
[info]   CI (99.9%): [≈ 0, 0,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56,54% complete, ETA 00:57:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55653,855 ops/s
[info] # Warmup Iteration   2: 58819,548 ops/s
[info] # Warmup Iteration   3: 59850,965 ops/s
[info] # Warmup Iteration   4: 59914,736 ops/s
[info] # Warmup Iteration   5: 60089,910 ops/s
[info] Iteration   1: 59701,743 ops/s
[info]                  ·gc.alloc.rate:      399,923 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 60069,071 ops/s
[info]                  ·gc.alloc.rate:               402,415 MB/sec
[info]                  ·gc.alloc.rate.norm:          10544,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13403,678 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 59920,341 ops/s
[info]                  ·gc.alloc.rate:                   401,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13435,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,613 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 60058,734 ops/s
[info]                  ·gc.alloc.rate:      402,379 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 59882,571 ops/s
[info]                  ·gc.alloc.rate:                   401,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17734,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   59926,492 ±(99.9%) 578,545 ops/s [Average]
[info]   (min, avg, max) = (59701,743, 59926,492, 60069,071), stdev = 150,246
[info]   CI (99.9%): [59347,947, 60505,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   401,449 ±(99.9%) 3,959 MB/sec [Average]
[info]   (min, avg, max) = (399,923, 401,449, 402,415), stdev = 1,028
[info]   CI (99.9%): [397,491, 405,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10544,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10544,007, 10544,007, 10544,007), stdev = 0,001
[info]   CI (99.9%): [10544,006, 10544,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   339,545 ±(99.9%) 1220,801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,545, 674,687), stdev = 317,038
[info]   CI (99.9%): [≈ 0, 1560,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8914,810 ±(99.9%) 32062,508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8914,810, 17734,493), stdev = 8326,531
[info]   CI (99.9%): [≈ 0, 40977,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,644 ±(99.9%) 5,495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,197), stdev = 1,427
[info]   CI (99.9%): [≈ 0, 6,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   16,928 ±(99.9%) 144,436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,928, 84,025), stdev = 37,509
[info]   CI (99.9%): [≈ 0, 161,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56,74% complete, ETA 00:57:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68418,599 ops/s
[info] # Warmup Iteration   2: 88922,153 ops/s
[info] # Warmup Iteration   3: 89558,992 ops/s
[info] # Warmup Iteration   4: 89583,474 ops/s
[info] # Warmup Iteration   5: 89840,770 ops/s
[info] Iteration   1: 89701,480 ops/s
[info]                  ·gc.alloc.rate:                   1685,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35247,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 90261,094 ops/s
[info]                  ·gc.alloc.rate:                   1696,319 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23382,224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,726 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 90254,549 ops/s
[info]                  ·gc.alloc.rate:                   1695,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35125,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,726 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 89724,180 ops/s
[info]                  ·gc.alloc.rate:                   1686,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23594,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,095 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 90087,122 ops/s
[info]                  ·gc.alloc.rate:                   1692,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35301,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,364 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   90005,685 ±(99.9%) 1064,313 ops/s [Average]
[info]   (min, avg, max) = (89701,480, 90005,685, 90261,094), stdev = 276,399
[info]   CI (99.9%): [88941,372, 91069,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1691,302 ±(99.9%) 20,244 MB/sec [Average]
[info]   (min, avg, max) = (1685,328, 1691,302, 1696,319), stdev = 5,257
[info]   CI (99.9%): [1671,058, 1711,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29576,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (29576,005, 29576,005, 29576,005), stdev = 0,001
[info]   CI (99.9%): [29576,004, 29576,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1745,868 ±(99.9%) 1415,733 MB/sec [Average]
[info]   (min, avg, max) = (1341,077, 1745,868, 2020,363), stdev = 367,661
[info]   CI (99.9%): [330,135, 3161,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30530,294 ±(99.9%) 24755,516 B/op [Average]
[info]   (min, avg, max) = (23382,224, 30530,294, 35301,651), stdev = 6428,929
[info]   CI (99.9%): [5774,778, 55285,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,947 ±(99.9%) 2,138 B/op [Average]
[info]   (min, avg, max) = (0,364, 0,947, 1,826), stdev = 0,555
[info]   CI (99.9%): [≈ 0, 3,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56,94% complete, ETA 00:57:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68122,142 ops/s
[info] # Warmup Iteration   2: 96139,525 ops/s
[info] # Warmup Iteration   3: 96843,491 ops/s
[info] # Warmup Iteration   4: 96658,099 ops/s
[info] # Warmup Iteration   5: 95694,648 ops/s
[info] Iteration   1: 96916,921 ops/s
[info]                  ·gc.alloc.rate:               1123,145 MB/sec
[info]                  ·gc.alloc.rate.norm:          18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10962,779 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 96504,906 ops/s
[info]                  ·gc.alloc.rate:                   1118,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22030,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 96504,979 ops/s
[info]                  ·gc.alloc.rate:                   1118,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22054,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,340 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 96766,162 ops/s
[info]                  ·gc.alloc.rate:                   1121,530 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11001,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,339 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 96640,970 ops/s
[info]                  ·gc.alloc.rate:                   1120,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22042,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,339 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   96666,788 ±(99.9%) 682,053 ops/s [Average]
[info]   (min, avg, max) = (96504,906, 96666,788, 96916,921), stdev = 177,127
[info]   CI (99.9%): [95984,735, 97348,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1120,312 ±(99.9%) 7,947 MB/sec [Average]
[info]   (min, avg, max) = (1118,331, 1120,312, 1123,145), stdev = 2,064
[info]   CI (99.9%): [1112,365, 1128,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18240,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18240,004, 18240,004, 18240,005), stdev = 0,001
[info]   CI (99.9%): [18240,003, 18240,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1081,630 ±(99.9%) 1426,721 MB/sec [Average]
[info]   (min, avg, max) = (675,043, 1081,630, 1353,640), stdev = 370,515
[info]   CI (99.9%): [≈ 0, 2508,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17618,217 ±(99.9%) 23326,545 B/op [Average]
[info]   (min, avg, max) = (10962,779, 17618,217, 22054,242), stdev = 6057,830
[info]   CI (99.9%): [≈ 0, 40944,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,407 ±(99.9%) 1,432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,407, 1,018), stdev = 0,372
[info]   CI (99.9%): [≈ 0, 1,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,14% complete, ETA 00:56:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99307,056 ops/s
[info] # Warmup Iteration   2: 119224,236 ops/s
[info] # Warmup Iteration   3: 118900,304 ops/s
[info] # Warmup Iteration   4: 118184,977 ops/s
[info] # Warmup Iteration   5: 117836,347 ops/s
[info] Iteration   1: 117915,915 ops/s
[info]                  ·gc.alloc.rate:               1241,892 MB/sec
[info]                  ·gc.alloc.rate.norm:          16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17887,598 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 117490,352 ops/s
[info]                  ·gc.alloc.rate:                   1237,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17952,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,836 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 118002,153 ops/s
[info]                  ·gc.alloc.rate:                   1242,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17874,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,833 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 117931,040 ops/s
[info]                  ·gc.alloc.rate:               1242,133 MB/sec
[info]                  ·gc.alloc.rate.norm:          16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8951,551 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 117536,569 ops/s
[info]                  ·gc.alloc.rate:                   1237,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17972,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,279 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   117775,206 ±(99.9%) 930,704 ops/s [Average]
[info]   (min, avg, max) = (117490,352, 117775,206, 118002,153), stdev = 241,701
[info]   CI (99.9%): [116844,502, 118705,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1240,401 ±(99.9%) 9,835 MB/sec [Average]
[info]   (min, avg, max) = (1237,455, 1240,401, 1242,726), stdev = 2,554
[info]   CI (99.9%): [1230,566, 1250,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16576,003, 16576,004, 16576,004), stdev = 0,001
[info]   CI (99.9%): [16576,003, 16576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206,664 ±(99.9%) 1153,512 MB/sec [Average]
[info]   (min, avg, max) = (670,790, 1206,664, 1342,089), stdev = 299,564
[info]   CI (99.9%): [53,151, 2360,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16127,727 ±(99.9%) 15448,089 B/op [Average]
[info]   (min, avg, max) = (8951,551, 16127,727, 17972,632), stdev = 4011,820
[info]   CI (99.9%): [679,638, 31575,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,390 ±(99.9%) 1,625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,390, 0,836), stdev = 0,422
[info]   CI (99.9%): [≈ 0, 2,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57,34% complete, ETA 00:56:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24969,837 ops/s
[info] # Warmup Iteration   2: 42505,343 ops/s
[info] # Warmup Iteration   3: 42311,595 ops/s
[info] # Warmup Iteration   4: 41174,516 ops/s
[info] # Warmup Iteration   5: 43247,801 ops/s
[info] Iteration   1: 42680,989 ops/s
[info]                  ·gc.alloc.rate:                   2120,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74914,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,535 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 42995,818 ops/s
[info]                  ·gc.alloc.rate:                   2136,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74447,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,762 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 42919,080 ops/s
[info]                  ·gc.alloc.rate:                   2132,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99557,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,527 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 42995,177 ops/s
[info]                  ·gc.alloc.rate:                   2136,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74605,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,524 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42933,288 ops/s
[info]                  ·gc.alloc.rate:                   2133,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74765,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,815 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   42904,870 ±(99.9%) 500,433 ops/s [Average]
[info]   (min, avg, max) = (42680,989, 42904,870, 42995,818), stdev = 129,961
[info]   CI (99.9%): [42404,437, 43405,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2132,001 ±(99.9%) 24,816 MB/sec [Average]
[info]   (min, avg, max) = (2120,947, 2132,001, 2136,769), stdev = 6,445
[info]   CI (99.9%): [2107,184, 2156,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78208,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (78208,009, 78208,010, 78208,010), stdev = 0,001
[info]   CI (99.9%): [78208,008, 78208,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2171,565 ±(99.9%) 1169,708 MB/sec [Average]
[info]   (min, avg, max) = (2031,618, 2171,565, 2714,935), stdev = 303,769
[info]   CI (99.9%): [1001,857, 3341,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79658,002 ±(99.9%) 42840,055 B/op [Average]
[info]   (min, avg, max) = (74447,165, 79658,002, 99557,321), stdev = 11125,426
[info]   CI (99.9%): [36817,947, 122498,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,833 ±(99.9%) 4,455 B/op [Average]
[info]   (min, avg, max) = (0,762, 1,833, 3,815), stdev = 1,157
[info]   CI (99.9%): [≈ 0, 6,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57,55% complete, ETA 00:56:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75361,115 ops/s
[info] # Warmup Iteration   2: 87138,447 ops/s
[info] # Warmup Iteration   3: 87050,037 ops/s
[info] # Warmup Iteration   4: 88443,166 ops/s
[info] # Warmup Iteration   5: 88144,332 ops/s
[info] Iteration   1: 87021,695 ops/s
[info]                  ·gc.alloc.rate:               1510,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24215,423 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 88589,033 ops/s
[info]                  ·gc.alloc.rate:                   1537,652 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35719,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,109 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 88810,206 ops/s
[info]                  ·gc.alloc.rate:               1541,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23776,270 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 88800,433 ops/s
[info]                  ·gc.alloc.rate:                   1541,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23806,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 88338,952 ops/s
[info]                  ·gc.alloc.rate:                   1533,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35958,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,113 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   88312,064 ±(99.9%) 2874,561 ops/s [Average]
[info]   (min, avg, max) = (87021,695, 88312,064, 88810,206), stdev = 746,514
[info]   CI (99.9%): [85437,502, 91186,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1532,935 ±(99.9%) 49,892 MB/sec [Average]
[info]   (min, avg, max) = (1510,508, 1532,935, 1541,531), stdev = 12,957
[info]   CI (99.9%): [1483,044, 1582,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27320,005, 27320,005, 27320,005), stdev = 0,001
[info]   CI (99.9%): [27320,003, 27320,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1610,492 ±(99.9%) 1419,964 MB/sec [Average]
[info]   (min, avg, max) = (1338,857, 1610,492, 2018,450), stdev = 368,760
[info]   CI (99.9%): [190,527, 3030,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28695,117 ±(99.9%) 25122,458 B/op [Average]
[info]   (min, avg, max) = (23776,270, 28695,117, 35958,094), stdev = 6524,223
[info]   CI (99.9%): [3572,659, 53817,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,666 ±(99.9%) 2,340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 1,113), stdev = 0,608
[info]   CI (99.9%): [≈ 0, 3,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57,75% complete, ETA 00:56:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115591,685 ops/s
[info] # Warmup Iteration   2: 140783,593 ops/s
[info] # Warmup Iteration   3: 141093,764 ops/s
[info] # Warmup Iteration   4: 139725,726 ops/s
[info] # Warmup Iteration   5: 138963,306 ops/s
[info] Iteration   1: 140043,874 ops/s
[info]                  ·gc.alloc.rate:      619,281 MB/sec
[info]                  ·gc.alloc.rate.norm: 6960,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 140241,579 ops/s
[info]                  ·gc.alloc.rate:                   620,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7550,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46,575 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 140557,162 ops/s
[info]                  ·gc.alloc.rate:                   621,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7533,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,699 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 140322,304 ops/s
[info]                  ·gc.alloc.rate:               620,592 MB/sec
[info]                  ·gc.alloc.rate.norm:          6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7515,710 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 140070,180 ops/s
[info]                  ·gc.alloc.rate:               619,472 MB/sec
[info]                  ·gc.alloc.rate.norm:          6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7529,336 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   140247,020 ±(99.9%) 804,098 ops/s [Average]
[info]   (min, avg, max) = (140043,874, 140247,020, 140557,162), stdev = 208,822
[info]   CI (99.9%): [139442,921, 141051,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   620,194 ±(99.9%) 3,467 MB/sec [Average]
[info]   (min, avg, max) = (619,281, 620,194, 621,507), stdev = 0,900
[info]   CI (99.9%): [616,727, 623,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6960,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6960,003, 6960,003, 6960,003), stdev = 0,001
[info]   CI (99.9%): [6960,003, 6960,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   537,137 ±(99.9%) 1156,239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,137, 672,719), stdev = 300,272
[info]   CI (99.9%): [≈ 0, 1693,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6025,703 ±(99.9%) 12970,867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6025,703, 7550,381), stdev = 3368,493
[info]   CI (99.9%): [≈ 0, 18996,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,842 ±(99.9%) 7,120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,842, 4,150), stdev = 1,849
[info]   CI (99.9%): [≈ 0, 7,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,455 ±(99.9%) 79,913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,455, 46,575), stdev = 20,753
[info]   CI (99.9%): [≈ 0, 89,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,95% complete, ETA 00:55:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136076,451 ops/s
[info] # Warmup Iteration   2: 175681,414 ops/s
[info] # Warmup Iteration   3: 169667,652 ops/s
[info] # Warmup Iteration   4: 169988,771 ops/s
[info] # Warmup Iteration   5: 176445,977 ops/s
[info] Iteration   1: 176390,326 ops/s
[info]                  ·gc.alloc.rate:               261,796 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4564,427 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 175868,959 ops/s
[info]                  ·gc.alloc.rate:      261,043 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 175526,496 ops/s
[info]                  ·gc.alloc.rate:               260,506 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4587,150 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 175672,909 ops/s
[info]                  ·gc.alloc.rate:      260,765 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 175362,059 ops/s
[info]                  ·gc.alloc.rate:               260,252 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4591,440 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   175764,150 ±(99.9%) 1527,647 ops/s [Average]
[info]   (min, avg, max) = (175362,059, 175764,150, 176390,326), stdev = 396,725
[info]   CI (99.9%): [174236,503, 177291,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   260,872 ±(99.9%) 2,288 MB/sec [Average]
[info]   (min, avg, max) = (260,252, 260,872, 261,796), stdev = 0,594
[info]   CI (99.9%): [258,584, 263,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2336,002, 2336,002, 2336,003), stdev = 0,001
[info]   CI (99.9%): [2336,002, 2336,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   306,923 ±(99.9%) 1078,877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,923, 511,550), stdev = 280,181
[info]   CI (99.9%): [≈ 0, 1385,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2748,603 ±(99.9%) 9661,809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2748,603, 4591,440), stdev = 2509,141
[info]   CI (99.9%): [≈ 0, 12410,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58,15% complete, ETA 00:55:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676876,078 ops/s
[info] # Warmup Iteration   2: 772029,619 ops/s
[info] # Warmup Iteration   3: 787165,506 ops/s
[info] # Warmup Iteration   4: 630922,348 ops/s
[info] # Warmup Iteration   5: 771192,660 ops/s
[info] Iteration   1: 778242,220 ops/s
[info]                  ·gc.alloc.rate:               965,042 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1356,613 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 736757,998 ops/s
[info]                  ·gc.alloc.rate:                   913,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2864,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 781282,308 ops/s
[info]                  ·gc.alloc.rate:               968,852 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1350,016 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 779422,379 ops/s
[info]                  ·gc.alloc.rate:                   966,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1353,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 769376,580 ops/s
[info]                  ·gc.alloc.rate:                   954,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2741,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   769016,297 ±(99.9%) 71641,302 ops/s [Average]
[info]   (min, avg, max) = (736757,998, 769016,297, 781282,308), stdev = 18605,019
[info]   CI (99.9%): [697374,995, 840657,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   953,764 ±(99.9%) 88,703 MB/sec [Average]
[info]   (min, avg, max) = (913,755, 953,764, 968,852), stdev = 23,036
[info]   CI (99.9%): [865,061, 1042,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,001, 1952,001, 1952,001), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938,467 ±(99.9%) 1414,048 MB/sec [Average]
[info]   (min, avg, max) = (670,065, 938,467, 1340,930), stdev = 367,224
[info]   CI (99.9%): [≈ 0, 2352,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1933,158 ±(99.9%) 3062,262 B/op [Average]
[info]   (min, avg, max) = (1350,016, 1933,158, 2864,550), stdev = 795,260
[info]   CI (99.9%): [≈ 0, 4995,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,061 ±(99.9%) 0,286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,061, 0,178), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58,35% complete, ETA 00:55:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727229,762 ops/s
[info] # Warmup Iteration   2: 782421,213 ops/s
[info] # Warmup Iteration   3: 781248,833 ops/s
[info] # Warmup Iteration   4: 778284,953 ops/s
[info] # Warmup Iteration   5: 780881,126 ops/s
[info] Iteration   1: 781758,075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 784381,262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 782093,072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 780317,019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 780980,146 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   781905,915 ±(99.9%) 5954,777 ops/s [Average]
[info]   (min, avg, max) = (780317,019, 781905,915, 784381,262), stdev = 1546,437
[info]   CI (99.9%): [775951,138, 787860,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58,55% complete, ETA 00:54:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186057,463 ops/s
[info] # Warmup Iteration   2: 229673,912 ops/s
[info] # Warmup Iteration   3: 226249,914 ops/s
[info] # Warmup Iteration   4: 231073,958 ops/s
[info] # Warmup Iteration   5: 225282,340 ops/s
[info] Iteration   1: 228976,941 ops/s
[info]                  ·gc.alloc.rate:                   748,460 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9239,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31,601 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 232803,670 ops/s
[info]                  ·gc.alloc.rate:               760,855 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4525,528 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 233323,225 ops/s
[info]                  ·gc.alloc.rate:               762,517 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4515,464 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 232314,921 ops/s
[info]                  ·gc.alloc.rate:                   759,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4526,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,141 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 232200,328 ops/s
[info]                  ·gc.alloc.rate:               758,748 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4528,228 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   231923,817 ±(99.9%) 6570,394 ops/s [Average]
[info]   (min, avg, max) = (228976,941, 231923,817, 233323,225), stdev = 1706,311
[info]   CI (99.9%): [225353,423, 238494,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   757,966 ±(99.9%) 21,237 MB/sec [Average]
[info]   (min, avg, max) = (748,460, 757,966, 762,517), stdev = 5,515
[info]   CI (99.9%): [736,729, 779,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5144,002, 5144,002, 5144,002), stdev = 0,001
[info]   CI (99.9%): [5144,002, 5144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   803,819 ±(99.9%) 1163,646 MB/sec [Average]
[info]   (min, avg, max) = (667,921, 803,819, 1344,401), stdev = 302,195
[info]   CI (99.9%): [≈ 0, 1967,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5467,025 ±(99.9%) 8121,129 B/op [Average]
[info]   (min, avg, max) = (4515,464, 5467,025, 9239,765), stdev = 2109,031
[info]   CI (99.9%): [≈ 0, 13588,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,924 ±(99.9%) 7,909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,924, 4,598), stdev = 2,054
[info]   CI (99.9%): [≈ 0, 8,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,348 ±(99.9%) 54,358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,348, 31,601), stdev = 14,117
[info]   CI (99.9%): [≈ 0, 60,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58,75% complete, ETA 00:54:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28327,881 ops/s
[info] # Warmup Iteration   2: 30040,290 ops/s
[info] # Warmup Iteration   3: 29789,972 ops/s
[info] # Warmup Iteration   4: 30121,162 ops/s
[info] # Warmup Iteration   5: 29947,854 ops/s
[info] Iteration   1: 29932,832 ops/s
[info]                  ·gc.alloc.rate:               167,036 MB/sec
[info]                  ·gc.alloc.rate.norm:          8784,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26897,340 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 29962,237 ops/s
[info]                  ·gc.alloc.rate:      167,236 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 29922,261 ops/s
[info]                  ·gc.alloc.rate:      166,990 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 29832,788 ops/s
[info]                  ·gc.alloc.rate:                   166,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26987,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,604 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 29999,084 ops/s
[info]                  ·gc.alloc.rate:      167,391 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   29929,841 ±(99.9%) 238,381 ops/s [Average]
[info]   (min, avg, max) = (29832,788, 29929,841, 29999,084), stdev = 61,907
[info]   CI (99.9%): [29691,459, 30168,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   167,029 ±(99.9%) 1,307 MB/sec [Average]
[info]   (min, avg, max) = (166,494, 167,029, 167,391), stdev = 0,340
[info]   CI (99.9%): [165,722, 168,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8784,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (8784,014, 8784,014, 8784,015), stdev = 0,001
[info]   CI (99.9%): [8784,012, 8784,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,601 ±(99.9%) 1078,802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,601, 511,527), stdev = 280,161
[info]   CI (99.9%): [≈ 0, 1283,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10776,964 ±(99.9%) 56823,952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10776,964, 26987,479), stdev = 14757,000
[info]   CI (99.9%): [≈ 0, 67600,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,002 ±(99.9%) 0,020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,011), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,121 ±(99.9%) 1,040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,121, 0,604), stdev = 0,270
[info]   CI (99.9%): [≈ 0, 1,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58,95% complete, ETA 00:54:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114732,388 ops/s
[info] # Warmup Iteration   2: 148311,862 ops/s
[info] # Warmup Iteration   3: 150030,795 ops/s
[info] # Warmup Iteration   4: 150082,644 ops/s
[info] # Warmup Iteration   5: 149933,153 ops/s
[info] Iteration   1: 149638,826 ops/s
[info]                  ·gc.alloc.rate:                   1842,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21193,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,876 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 149490,719 ops/s
[info]                  ·gc.alloc.rate:                   1841,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21241,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,438 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 150231,926 ops/s
[info]                  ·gc.alloc.rate:                   1850,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14109,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,654 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 148330,005 ops/s
[info]                  ·gc.alloc.rate:                   1826,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21474,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 148845,181 ops/s
[info]                  ·gc.alloc.rate:                   1833,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21428,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   149307,332 ±(99.9%) 2834,310 ops/s [Average]
[info]   (min, avg, max) = (148330,005, 149307,332, 150231,926), stdev = 736,061
[info]   CI (99.9%): [146473,022, 152141,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1838,837 ±(99.9%) 34,669 MB/sec [Average]
[info]   (min, avg, max) = (1826,903, 1838,837, 1850,084), stdev = 9,004
[info]   CI (99.9%): [1804,168, 1873,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19384,003, 19384,003, 19384,003), stdev = 0,001
[info]   CI (99.9%): [19384,002, 19384,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1885,934 ±(99.9%) 1160,916 MB/sec [Average]
[info]   (min, avg, max) = (1346,683, 1885,934, 2026,478), stdev = 301,486
[info]   CI (99.9%): [725,018, 3046,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19889,632 ±(99.9%) 12450,262 B/op [Average]
[info]   (min, avg, max) = (14109,689, 19889,632, 21474,584), stdev = 3233,294
[info]   CI (99.9%): [7439,370, 32339,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,659 ±(99.9%) 1,343 B/op [Average]
[info]   (min, avg, max) = (0,220, 0,659, 1,104), stdev = 0,349
[info]   CI (99.9%): [≈ 0, 2,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,15% complete, ETA 00:54:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145482,972 ops/s
[info] # Warmup Iteration   2: 201188,693 ops/s
[info] # Warmup Iteration   3: 201270,231 ops/s
[info] # Warmup Iteration   4: 200616,463 ops/s
[info] # Warmup Iteration   5: 201092,026 ops/s
[info] Iteration   1: 200302,011 ops/s
[info]                  ·gc.alloc.rate:                   1059,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10614,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 200582,959 ops/s
[info]                  ·gc.alloc.rate:               1061,340 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5302,147 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 201259,339 ops/s
[info]                  ·gc.alloc.rate:                   1064,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10579,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,488 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 199361,605 ops/s
[info]                  ·gc.alloc.rate:               1054,954 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10684,946 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 201105,907 ops/s
[info]                  ·gc.alloc.rate:                   1064,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          677,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5301,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,326 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   200522,364 ±(99.9%) 2909,240 ops/s [Average]
[info]   (min, avg, max) = (199361,605, 200522,364, 201259,339), stdev = 755,520
[info]   CI (99.9%): [197613,124, 203431,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1060,994 ±(99.9%) 15,078 MB/sec [Average]
[info]   (min, avg, max) = (1054,954, 1060,994, 1064,791), stdev = 3,916
[info]   CI (99.9%): [1045,916, 1076,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,004 ±(99.9%) 1425,291 MB/sec [Average]
[info]   (min, avg, max) = (675,718, 1082,004, 1353,521), stdev = 370,144
[info]   CI (99.9%): [≈ 0, 2507,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8496,383 ±(99.9%) 11230,058 B/op [Average]
[info]   (min, avg, max) = (5301,631, 8496,383, 10684,946), stdev = 2916,410
[info]   CI (99.9%): [≈ 0, 19726,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,196 ±(99.9%) 0,817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,196, 0,488), stdev = 0,212
[info]   CI (99.9%): [≈ 0, 1,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,36% complete, ETA 00:53:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492193,162 ops/s
[info] # Warmup Iteration   2: 527579,330 ops/s
[info] # Warmup Iteration   3: 533090,353 ops/s
[info] # Warmup Iteration   4: 536885,388 ops/s
[info] # Warmup Iteration   5: 534664,486 ops/s
[info] Iteration   1: 535690,483 ops/s
[info]                  ·gc.alloc.rate:               1040,059 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1976,710 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 535547,525 ops/s
[info]                  ·gc.alloc.rate:                   1039,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3950,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 536767,259 ops/s
[info]                  ·gc.alloc.rate:               1042,332 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1970,868 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 534767,690 ops/s
[info]                  ·gc.alloc.rate:                   1038,429 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3956,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 535748,132 ops/s
[info]                  ·gc.alloc.rate:               1040,115 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1974,373 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   535704,218 ±(99.9%) 2745,735 ops/s [Average]
[info]   (min, avg, max) = (534767,690, 535704,218, 536767,259), stdev = 713,059
[info]   CI (99.9%): [532958,483, 538449,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1040,151 ±(99.9%) 5,390 MB/sec [Average]
[info]   (min, avg, max) = (1038,429, 1040,151, 1042,332), stdev = 1,400
[info]   CI (99.9%): [1034,761, 1045,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3056,001, 3056,001, 3056,001), stdev = 0,001
[info]   CI (99.9%): [3056,001, 3056,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,095 ±(99.9%) 1417,211 MB/sec [Average]
[info]   (min, avg, max) = (671,981, 941,095, 1344,305), stdev = 368,045
[info]   CI (99.9%): [≈ 0, 2358,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2765,753 ±(99.9%) 4174,785 B/op [Average]
[info]   (min, avg, max) = (1970,868, 2765,753, 3956,166), stdev = 1084,179
[info]   CI (99.9%): [≈ 0, 6940,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,073 ±(99.9%) 0,387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,073, 0,184), stdev = 0,101
[info]   CI (99.9%): [≈ 0, 0,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59,56% complete, ETA 00:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44131,374 ops/s
[info] # Warmup Iteration   2: 76924,237 ops/s
[info] # Warmup Iteration   3: 76618,917 ops/s
[info] # Warmup Iteration   4: 76952,401 ops/s
[info] # Warmup Iteration   5: 76705,349 ops/s
[info] Iteration   1: 77067,413 ops/s
[info]                  ·gc.alloc.rate:                   3251,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69363,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,275 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 77403,436 ops/s
[info]                  ·gc.alloc.rate:                   3265,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55300,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,270 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 77529,292 ops/s
[info]                  ·gc.alloc.rate:                   3271,117 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69068,528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,690 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 77226,435 ops/s
[info]                  ·gc.alloc.rate:                   3258,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69366,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,273 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 75692,561 ops/s
[info]                  ·gc.alloc.rate:                   3193,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70798,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   76983,827 ±(99.9%) 2860,134 ops/s [Average]
[info]   (min, avg, max) = (75692,561, 76983,827, 77529,292), stdev = 742,768
[info]   CI (99.9%): [74123,693, 79843,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3248,181 ±(99.9%) 121,337 MB/sec [Average]
[info]   (min, avg, max) = (3193,343, 3248,181, 3271,117), stdev = 31,511
[info]   CI (99.9%): [3126,845, 3369,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,006, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,004, 66408,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3265,347 ±(99.9%) 1174,815 MB/sec [Average]
[info]   (min, avg, max) = (2719,605, 3265,347, 3404,483), stdev = 305,096
[info]   CI (99.9%): [2090,532, 4440,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66779,547 ±(99.9%) 24846,470 B/op [Average]
[info]   (min, avg, max) = (55300,127, 66779,547, 70798,823), stdev = 6452,549
[info]   CI (99.9%): [41933,077, 91626,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,275 ±(99.9%) 1,123 B/op [Average]
[info]   (min, avg, max) = (0,866, 1,275, 1,690), stdev = 0,292
[info]   CI (99.9%): [0,152, 2,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59,76% complete, ETA 00:53:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118251,769 ops/s
[info] # Warmup Iteration   2: 137973,552 ops/s
[info] # Warmup Iteration   3: 138127,869 ops/s
[info] # Warmup Iteration   4: 139149,648 ops/s
[info] # Warmup Iteration   5: 136245,091 ops/s
[info] Iteration   1: 137785,207 ops/s
[info]                  ·gc.alloc.rate:                   1551,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23033,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,476 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 139406,301 ops/s
[info]                  ·gc.alloc.rate:               1569,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15180,785 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 138580,317 ops/s
[info]                  ·gc.alloc.rate:                   1560,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15282,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,709 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 139001,887 ops/s
[info]                  ·gc.alloc.rate:                   1565,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22879,571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 138956,476 ops/s
[info]                  ·gc.alloc.rate:                   1564,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15285,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   138746,038 ±(99.9%) 2355,157 ops/s [Average]
[info]   (min, avg, max) = (137785,207, 138746,038, 139406,301), stdev = 611,627
[info]   CI (99.9%): [136390,880, 141101,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1562,072 ±(99.9%) 26,694 MB/sec [Average]
[info]   (min, avg, max) = (1551,106, 1562,072, 1569,481), stdev = 6,932
[info]   CI (99.9%): [1535,377, 1588,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17720,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17720,003, 17720,003, 17720,003), stdev = 0,001
[info]   CI (99.9%): [17720,003, 17720,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1615,336 ±(99.9%) 1417,097 MB/sec [Average]
[info]   (min, avg, max) = (1344,579, 1615,336, 2020,748), stdev = 368,016
[info]   CI (99.9%): [198,239, 3032,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18332,312 ±(99.9%) 16256,367 B/op [Average]
[info]   (min, avg, max) = (15180,785, 18332,312, 23033,167), stdev = 4221,727
[info]   CI (99.9%): [2075,946, 34588,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,426 ±(99.9%) 0,997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,426, 0,709), stdev = 0,259
[info]   CI (99.9%): [≈ 0, 1,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59,96% complete, ETA 00:53:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160169,037 ops/s
[info] # Warmup Iteration   2: 197900,125 ops/s
[info] # Warmup Iteration   3: 196221,311 ops/s
[info] # Warmup Iteration   4: 195603,191 ops/s
[info] # Warmup Iteration   5: 196551,624 ops/s
[info] Iteration   1: 194718,393 ops/s
[info]                  ·gc.alloc.rate:                   667,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5453,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,293 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 196893,291 ops/s
[info]                  ·gc.alloc.rate:                   674,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5394,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 196629,200 ops/s
[info]                  ·gc.alloc.rate:                   673,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5379,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 196521,588 ops/s
[info]                  ·gc.alloc.rate:               673,330 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5382,456 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 196497,392 ops/s
[info]                  ·gc.alloc.rate:                   673,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5377,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   196251,973 ±(99.9%) 3356,019 ops/s [Average]
[info]   (min, avg, max) = (194718,393, 196251,973, 196893,291), stdev = 871,547
[info]   CI (99.9%): [192895,954, 199607,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   672,347 ±(99.9%) 11,551 MB/sec [Average]
[info]   (min, avg, max) = (667,074, 672,347, 674,578), stdev = 3,000
[info]   CI (99.9%): [660,796, 683,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,002, 5392,002, 5392,002), stdev = 0,001
[info]   CI (99.9%): [5392,002, 5392,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,029 ±(99.9%) 6,297 MB/sec [Average]
[info]   (min, avg, max) = (671,356, 673,029, 674,851), stdev = 1,635
[info]   CI (99.9%): [666,733, 679,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5397,581 ±(99.9%) 123,583 B/op [Average]
[info]   (min, avg, max) = (5377,805, 5397,581, 5453,846), stdev = 32,094
[info]   CI (99.9%): [5273,998, 5521,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,696 ±(99.9%) 5,770 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,696, 3,377), stdev = 1,499
[info]   CI (99.9%): [≈ 0, 6,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,625 ±(99.9%) 46,644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,625, 27,293), stdev = 12,113
[info]   CI (99.9%): [≈ 0, 52,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,16% complete, ETA 00:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240642,643 ops/s
[info] # Warmup Iteration   2: 320958,051 ops/s
[info] # Warmup Iteration   3: 323880,470 ops/s
[info] # Warmup Iteration   4: 323873,023 ops/s
[info] # Warmup Iteration   5: 322161,460 ops/s
[info] Iteration   1: 322036,428 ops/s
[info]                  ·gc.alloc.rate:      317,540 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 322187,129 ops/s
[info]                  ·gc.alloc.rate:               317,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2498,903 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 323506,654 ops/s
[info]                  ·gc.alloc.rate:      318,983 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 323188,321 ops/s
[info]                  ·gc.alloc.rate:               318,707 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2491,142 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 323879,444 ops/s
[info]                  ·gc.alloc.rate:      319,338 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   322959,595 ±(99.9%) 3132,217 ops/s [Average]
[info]   (min, avg, max) = (322036,428, 322959,595, 323879,444), stdev = 813,427
[info]   CI (99.9%): [319827,378, 326091,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   318,456 ±(99.9%) 3,051 MB/sec [Average]
[info]   (min, avg, max) = (317,540, 318,456, 319,338), stdev = 0,792
[info]   CI (99.9%): [315,405, 321,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1552,001, 1552,001, 1552,001), stdev = 0,001
[info]   CI (99.9%): [1552,001, 1552,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,623 ±(99.9%) 1078,917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,623, 511,561), stdev = 280,191
[info]   CI (99.9%): [≈ 0, 1283,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   998,009 ±(99.9%) 5262,223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 998,009, 2498,903), stdev = 1366,583
[info]   CI (99.9%): [≈ 0, 6260,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,36% complete, ETA 00:52:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1047653,660 ops/s
[info] # Warmup Iteration   2: 1115131,873 ops/s
[info] # Warmup Iteration   3: 1141244,059 ops/s
[info] # Warmup Iteration   4: 1130799,559 ops/s
[info] # Warmup Iteration   5: 1132842,040 ops/s
[info] Iteration   1: 1127933,165 ops/s
[info]                  ·gc.alloc.rate:                   837,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1130331,395 ops/s
[info]                  ·gc.alloc.rate:                   838,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1873,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1134408,600 ops/s
[info]                  ·gc.alloc.rate:               841,793 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932,440 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1135352,429 ops/s
[info]                  ·gc.alloc.rate:                   842,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1128144,205 ops/s
[info]                  ·gc.alloc.rate:               837,262 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 937,608 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1131233,959 ±(99.9%) 13380,168 ops/s [Average]
[info]   (min, avg, max) = (1127933,165, 1131233,959, 1135352,429), stdev = 3474,787
[info]   CI (99.9%): [1117853,790, 1144614,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   839,510 ±(99.9%) 9,897 MB/sec [Average]
[info]   (min, avg, max) = (837,030, 839,510, 842,606), stdev = 2,570
[info]   CI (99.9%): [829,613, 849,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,000, 1168,000, 1168,000), stdev = 0,001
[info]   CI (99.9%): [1168,000, 1168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,295 ±(99.9%) 1158,577 MB/sec [Average]
[info]   (min, avg, max) = (672,022, 807,295, 1345,519), stdev = 300,879
[info]   CI (99.9%): [≈ 0, 1965,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1123,336 ±(99.9%) 1614,778 B/op [Average]
[info]   (min, avg, max) = (931,661, 1123,336, 1873,462), stdev = 419,353
[info]   CI (99.9%): [≈ 0, 2738,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,035 ±(99.9%) 0,184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,035, 0,116), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60,56% complete, ETA 00:52:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1259789,046 ops/s
[info] # Warmup Iteration   2: 1337337,502 ops/s
[info] # Warmup Iteration   3: 1346839,442 ops/s
[info] # Warmup Iteration   4: 1343161,653 ops/s
[info] # Warmup Iteration   5: 1343641,275 ops/s
[info] Iteration   1: 1327471,724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1349126,013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1346861,924 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1343549,010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1343065,063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1342014,747 ±(99.9%) 32731,713 ops/s [Average]
[info]   (min, avg, max) = (1327471,724, 1342014,747, 1349126,013), stdev = 8500,322
[info]   CI (99.9%): [1309283,034, 1374746,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60,76% complete, ETA 00:52:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229092,808 ops/s
[info] # Warmup Iteration   2: 349816,186 ops/s
[info] # Warmup Iteration   3: 348879,015 ops/s
[info] # Warmup Iteration   4: 349849,266 ops/s
[info] # Warmup Iteration   5: 349455,601 ops/s
[info] Iteration   1: 349714,031 ops/s
[info]                  ·gc.alloc.rate:                   954,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6076,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 350421,750 ops/s
[info]                  ·gc.alloc.rate:               956,599 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3035,270 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 349864,649 ops/s
[info]                  ·gc.alloc.rate:                   954,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6081,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,281 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 350271,783 ops/s
[info]                  ·gc.alloc.rate:               956,132 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3037,997 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 350057,627 ops/s
[info]                  ·gc.alloc.rate:                   955,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3042,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   350065,968 ±(99.9%) 1111,694 ops/s [Average]
[info]   (min, avg, max) = (349714,031, 350065,968, 350421,750), stdev = 288,703
[info]   CI (99.9%): [348954,274, 351177,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   955,543 ±(99.9%) 3,211 MB/sec [Average]
[info]   (min, avg, max) = (954,552, 955,543, 956,599), stdev = 0,834
[info]   CI (99.9%): [952,332, 958,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4296,001, 4296,001, 4296,001), stdev = 0,001
[info]   CI (99.9%): [4296,001, 4296,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   946,144 ±(99.9%) 1423,123 MB/sec [Average]
[info]   (min, avg, max) = (675,869, 946,144, 1351,891), stdev = 369,580
[info]   CI (99.9%): [≈ 0, 2369,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4254,743 ±(99.9%) 6412,192 B/op [Average]
[info]   (min, avg, max) = (3035,270, 4254,743, 6081,598), stdev = 1665,226
[info]   CI (99.9%): [≈ 0, 10666,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,150 ±(99.9%) 0,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,150, 0,375), stdev = 0,170
[info]   CI (99.9%): [≈ 0, 0,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60,97% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39545,547 ops/s
[info] # Warmup Iteration   2: 42849,690 ops/s
[info] # Warmup Iteration   3: 42646,039 ops/s
[info] # Warmup Iteration   4: 42434,355 ops/s
[info] # Warmup Iteration   5: 43453,568 ops/s
[info] Iteration   1: 42912,560 ops/s
[info]                  ·gc.alloc.rate:      133,464 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42911,544 ops/s
[info]                  ·gc.alloc.rate:      133,489 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42829,375 ops/s
[info]                  ·gc.alloc.rate:               133,243 MB/sec
[info]                  ·gc.alloc.rate.norm:          4896,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18799,756 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 42875,961 ops/s
[info]                  ·gc.alloc.rate:      133,385 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42949,229 ops/s
[info]                  ·gc.alloc.rate:      133,594 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   42895,734 ±(99.9%) 174,232 ops/s [Average]
[info]   (min, avg, max) = (42829,375, 42895,734, 42949,229), stdev = 45,247
[info]   CI (99.9%): [42721,502, 43069,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   133,435 ±(99.9%) 0,504 MB/sec [Average]
[info]   (min, avg, max) = (133,243, 133,435, 133,594), stdev = 0,131
[info]   CI (99.9%): [132,931, 133,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4896,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4896,010, 4896,010, 4896,010), stdev = 0,001
[info]   CI (99.9%): [4896,009, 4896,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   102,325 ±(99.9%) 881,052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,325, 511,627), stdev = 228,806
[info]   CI (99.9%): [≈ 0, 983,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3759,951 ±(99.9%) 32374,315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3759,951, 18799,756), stdev = 8407,507
[info]   CI (99.9%): [≈ 0, 36134,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61,17% complete, ETA 00:51:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4107,604 ops/s
[info] # Warmup Iteration   2: 5852,837 ops/s
[info] # Warmup Iteration   3: 5722,342 ops/s
[info] # Warmup Iteration   4: 5953,298 ops/s
[info] # Warmup Iteration   5: 5613,662 ops/s
[info] Iteration   1: 5829,260 ops/s
[info]                  ·gc.alloc.rate:                   1148,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359295,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5945,990 ops/s
[info]                  ·gc.alloc.rate:                   1171,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351875,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,509 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5964,835 ops/s
[info]                  ·gc.alloc.rate:                   1174,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175377,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,983 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 5913,522 ops/s
[info]                  ·gc.alloc.rate:                   1164,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354133,680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,156 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5934,894 ops/s
[info]                  ·gc.alloc.rate:                   1169,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353234,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5917,700 ±(99.9%) 203,363 ops/s [Average]
[info]   (min, avg, max) = (5829,260, 5917,700, 5964,835), stdev = 52,813
[info]   CI (99.9%): [5714,337, 6121,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1165,702 ±(99.9%) 39,826 MB/sec [Average]
[info]   (min, avg, max) = (1148,359, 1165,702, 1174,925), stdev = 10,343
[info]   CI (99.9%): [1125,876, 1205,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310024,071 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (310024,069, 310024,071, 310024,074), stdev = 0,003
[info]   CI (99.9%): [310024,061, 310024,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1197,507 ±(99.9%) 1147,034 MB/sec [Average]
[info]   (min, avg, max) = (664,644, 1197,507, 1331,949), stdev = 297,881
[info]   CI (99.9%): [50,473, 2344,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   318783,509 ±(99.9%) 308881,153 B/op [Average]
[info]   (min, avg, max) = (175377,719, 318783,509, 359295,978), stdev = 80215,454
[info]   CI (99.9%): [9902,356, 627664,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12,185 ±(99.9%) 23,393 B/op [Average]
[info]   (min, avg, max) = (5,509, 12,185, 22,156), stdev = 6,075
[info]   CI (99.9%): [≈ 0, 35,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,37% complete, ETA 00:51:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3346,893 ops/s
[info] # Warmup Iteration   2: 5744,543 ops/s
[info] # Warmup Iteration   3: 5787,485 ops/s
[info] # Warmup Iteration   4: 5784,477 ops/s
[info] # Warmup Iteration   5: 5775,221 ops/s
[info] Iteration   1: 5769,515 ops/s
[info]                  ·gc.alloc.rate:                   1060,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              289344,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366692,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,354 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5764,228 ops/s
[info]                  ·gc.alloc.rate:               1059,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          289344,076 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 183673,562 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 5757,756 ops/s
[info]                  ·gc.alloc.rate:                   1058,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              289344,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368275,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,689 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5742,667 ops/s
[info]                  ·gc.alloc.rate:               1055,880 MB/sec
[info]                  ·gc.alloc.rate.norm:          289344,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184801,253 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 5768,129 ops/s
[info]                  ·gc.alloc.rate:                   1060,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              289344,076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368273,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,358 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   5760,459 ±(99.9%) 42,133 ops/s [Average]
[info]   (min, avg, max) = (5742,667, 5760,459, 5769,515), stdev = 10,942
[info]   CI (99.9%): [5718,326, 5802,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1059,063 ±(99.9%) 7,548 MB/sec [Average]
[info]   (min, avg, max) = (1055,880, 1059,063, 1060,702), stdev = 1,960
[info]   CI (99.9%): [1051,515, 1066,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   289344,073 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (289344,071, 289344,073, 289344,076), stdev = 0,003
[info]   CI (99.9%): [289344,062, 289344,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1077,660 ±(99.9%) 1420,372 MB/sec [Average]
[info]   (min, avg, max) = (672,805, 1077,660, 1349,570), stdev = 368,866
[info]   CI (99.9%): [≈ 0, 2498,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   294343,439 ±(99.9%) 387049,250 B/op [Average]
[info]   (min, avg, max) = (183673,562, 294343,439, 368275,911), stdev = 100515,461
[info]   CI (99.9%): [≈ 0, 681392,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,680 ±(99.9%) 21,864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,680, 11,358), stdev = 5,678
[info]   CI (99.9%): [≈ 0, 27,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,57% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33028,608 ops/s
[info] # Warmup Iteration   2: 41558,051 ops/s
[info] # Warmup Iteration   3: 41195,786 ops/s
[info] # Warmup Iteration   4: 41036,995 ops/s
[info] # Warmup Iteration   5: 38858,827 ops/s
[info] Iteration   1: 40547,032 ops/s
[info]                  ·gc.alloc.rate:                   665,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26037,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209,973 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 40466,609 ops/s
[info]                  ·gc.alloc.rate:                   664,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26090,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,619 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 40474,624 ops/s
[info]                  ·gc.alloc.rate:               664,501 MB/sec
[info]                  ·gc.alloc.rate.norm:          25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25928,180 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 40392,270 ops/s
[info]                  ·gc.alloc.rate:                   663,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25980,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,811 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 40260,577 ops/s
[info]                  ·gc.alloc.rate:                   660,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26013,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,814 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   40428,222 ±(99.9%) 418,021 ops/s [Average]
[info]   (min, avg, max) = (40260,577, 40428,222, 40547,032), stdev = 108,559
[info]   CI (99.9%): [40010,201, 40846,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   663,766 ±(99.9%) 6,941 MB/sec [Average]
[info]   (min, avg, max) = (660,955, 663,766, 665,697), stdev = 1,803
[info]   CI (99.9%): [656,824, 670,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (25840,010, 25840,010, 25840,011), stdev = 0,001
[info]   CI (99.9%): [25840,009, 25840,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668,130 ±(99.9%) 9,780 MB/sec [Average]
[info]   (min, avg, max) = (665,402, 668,130, 670,907), stdev = 2,540
[info]   CI (99.9%): [658,351, 677,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26009,912 ±(99.9%) 233,833 B/op [Average]
[info]   (min, avg, max) = (25928,180, 26009,912, 26090,038), stdev = 60,726
[info]   CI (99.9%): [25776,078, 26243,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1,099 ±(99.9%) 9,280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,099, 5,409), stdev = 2,410
[info]   CI (99.9%): [≈ 0, 10,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42,643 ±(99.9%) 360,196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42,643, 209,973), stdev = 93,542
[info]   CI (99.9%): [≈ 0, 402,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61,77% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2710,361 ops/s
[info] # Warmup Iteration   2: 5064,627 ops/s
[info] # Warmup Iteration   3: 5126,400 ops/s
[info] # Warmup Iteration   4: 5076,256 ops/s
[info] # Warmup Iteration   5: 5168,904 ops/s
[info] Iteration   1: 5174,399 ops/s
[info]                  ·gc.alloc.rate:               1318,312 MB/sec
[info]                  ·gc.alloc.rate.norm:          400984,085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 409524,031 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 5179,896 ops/s
[info]                  ·gc.alloc.rate:                   1319,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              400984,079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409656,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,970 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5166,344 ops/s
[info]                  ·gc.alloc.rate:               1316,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          400984,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205535,505 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 5153,663 ops/s
[info]                  ·gc.alloc.rate:                   1313,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              400984,079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     412434,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,355 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5135,021 ops/s
[info]                  ·gc.alloc.rate:                   1308,131 MB/sec
[info]                  ·gc.alloc.rate.norm:              400984,079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414448,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,760 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   5161,865 ±(99.9%) 69,155 ops/s [Average]
[info]   (min, avg, max) = (5135,021, 5161,865, 5179,896), stdev = 17,959
[info]   CI (99.9%): [5092,710, 5231,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1315,127 ±(99.9%) 17,808 MB/sec [Average]
[info]   (min, avg, max) = (1308,131, 1315,127, 1319,781), stdev = 4,625
[info]   CI (99.9%): [1297,320, 1332,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400984,083 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (400984,079, 400984,083, 400984,091), stdev = 0,005
[info]   CI (99.9%): [400984,062, 400984,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1214,428 ±(99.9%) 1161,938 MB/sec [Average]
[info]   (min, avg, max) = (674,653, 1214,428, 1352,058), stdev = 301,752
[info]   CI (99.9%): [52,490, 2376,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   370319,953 ±(99.9%) 354799,083 B/op [Average]
[info]   (min, avg, max) = (205535,505, 370319,953, 414448,847), stdev = 92140,195
[info]   CI (99.9%): [15520,870, 725119,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,617 ±(99.9%) 31,810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,617, 18,970), stdev = 8,261
[info]   CI (99.9%): [≈ 0, 39,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61,97% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4005,187 ops/s
[info] # Warmup Iteration   2: 5559,116 ops/s
[info] # Warmup Iteration   3: 5153,036 ops/s
[info] # Warmup Iteration   4: 5612,275 ops/s
[info] # Warmup Iteration   5: 5648,706 ops/s
[info] Iteration   1: 5665,985 ops/s
[info]                  ·gc.alloc.rate:               1087,610 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184999,294 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 5549,939 ops/s
[info]                  ·gc.alloc.rate:               1065,487 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 377419,357 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 5666,370 ops/s
[info]                  ·gc.alloc.rate:                   1087,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184629,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,781 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5036,089 ops/s
[info]                  ·gc.alloc.rate:                   966,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160,087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     415724,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 5670,881 ops/s
[info]                  ·gc.alloc.rate:               1088,363 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 184651,406 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   5517,853 ±(99.9%) 1055,497 ops/s [Average]
[info]   (min, avg, max) = (5036,089, 5517,853, 5670,881), stdev = 274,109
[info]   CI (99.9%): [4462,355, 6573,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1059,234 ±(99.9%) 202,333 MB/sec [Average]
[info]   (min, avg, max) = (966,862, 1059,234, 1088,363), stdev = 52,545
[info]   CI (99.9%): [856,900, 1261,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   302160,078 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (302160,072, 302160,078, 302160,087), stdev = 0,006
[info]   CI (99.9%): [302160,054, 302160,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   931,365 ±(99.9%) 1403,225 MB/sec [Average]
[info]   (min, avg, max) = (664,708, 931,365, 1330,869), stdev = 364,413
[info]   CI (99.9%): [≈ 0, 2334,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   269484,848 ±(99.9%) 449763,595 B/op [Average]
[info]   (min, avg, max) = (184629,296, 269484,848, 415724,890), stdev = 116802,177
[info]   CI (99.9%): [≈ 0, 719248,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,758 ±(99.9%) 22,127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,758, 13,011), stdev = 5,746
[info]   CI (99.9%): [≈ 0, 25,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62,17% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12591,148 ops/s
[info] # Warmup Iteration   2: 15347,667 ops/s
[info] # Warmup Iteration   3: 16558,622 ops/s
[info] # Warmup Iteration   4: 16405,295 ops/s
[info] # Warmup Iteration   5: 16459,715 ops/s
[info] Iteration   1: 16461,652 ops/s
[info]                  ·gc.alloc.rate:                   922,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127107,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,990 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16264,665 ops/s
[info]                  ·gc.alloc.rate:               911,552 MB/sec
[info]                  ·gc.alloc.rate.norm:          88205,891 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64359,672 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 16554,420 ops/s
[info]                  ·gc.alloc.rate:               927,452 MB/sec
[info]                  ·gc.alloc.rate.norm:          88184,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63228,645 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 16534,928 ops/s
[info]                  ·gc.alloc.rate:                   926,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126737,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,963 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16363,645 ops/s
[info]                  ·gc.alloc.rate:                   916,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64158,655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16435,862 ±(99.9%) 467,893 ops/s [Average]
[info]   (min, avg, max) = (16264,665, 16435,862, 16554,420), stdev = 121,510
[info]   CI (99.9%): [15967,969, 16903,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   921,018 ±(99.9%) 25,887 MB/sec [Average]
[info]   (min, avg, max) = (911,552, 921,018, 927,452), stdev = 6,723
[info]   CI (99.9%): [895,131, 946,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88193,199 ±(99.9%) 48,451 B/op [Average]
[info]   (min, avg, max) = (88184,025, 88193,199, 88208,025), stdev = 12,583
[info]   CI (99.9%): [88144,748, 88241,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931,666 ±(99.9%) 1402,166 MB/sec [Average]
[info]   (min, avg, max) = (664,990, 931,666, 1331,596), stdev = 364,138
[info]   CI (99.9%): [≈ 0, 2333,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89118,365 ±(99.9%) 132897,716 B/op [Average]
[info]   (min, avg, max) = (63228,645, 89118,365, 127107,840), stdev = 34513,115
[info]   CI (99.9%): [≈ 0, 222016,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,591 ±(99.9%) 6,390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,591, 3,963), stdev = 1,659
[info]   CI (99.9%): [≈ 0, 7,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,37% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13348,959 ops/s
[info] # Warmup Iteration   2: 18716,614 ops/s
[info] # Warmup Iteration   3: 18714,329 ops/s
[info] # Warmup Iteration   4: 18820,850 ops/s
[info] # Warmup Iteration   5: 18856,544 ops/s
[info] Iteration   1: 18915,079 ops/s
[info]                  ·gc.alloc.rate:               984,798 MB/sec
[info]                  ·gc.alloc.rate.norm:          81943,941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55892,648 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 18762,105 ops/s
[info]                  ·gc.alloc.rate:                   976,870 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112864,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,492 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18884,798 ops/s
[info]                  ·gc.alloc.rate:               983,227 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56147,942 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 18742,369 ops/s
[info]                  ·gc.alloc.rate:                   975,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113208,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18244,242 ops/s
[info]                  ·gc.alloc.rate:               949,762 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58177,610 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18709,719 ±(99.9%) 1042,708 ops/s [Average]
[info]   (min, avg, max) = (18244,242, 18709,719, 18915,079), stdev = 270,788
[info]   CI (99.9%): [17667,011, 19752,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   974,109 ±(99.9%) 54,488 MB/sec [Average]
[info]   (min, avg, max) = (949,762, 974,109, 984,798), stdev = 14,150
[info]   CI (99.9%): [919,621, 1028,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944,024 ±(99.9%) 0,255 B/op [Average]
[info]   (min, avg, max) = (81943,941, 81944,024, 81944,126), stdev = 0,066
[info]   CI (99.9%): [81943,770, 81944,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   942,684 ±(99.9%) 1420,708 MB/sec [Average]
[info]   (min, avg, max) = (671,715, 942,684, 1348,225), stdev = 368,953
[info]   CI (99.9%): [≈ 0, 2363,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   79258,171 ±(99.9%) 118784,834 B/op [Average]
[info]   (min, avg, max) = (55892,648, 79258,171, 113208,397), stdev = 30848,044
[info]   CI (99.9%): [≈ 0, 198043,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,398 ±(99.9%) 7,369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,398, 3,496), stdev = 1,914
[info]   CI (99.9%): [≈ 0, 8,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,58% complete, ETA 00:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265218,311 ops/s
[info] # Warmup Iteration   2: 285371,592 ops/s
[info] # Warmup Iteration   3: 283751,298 ops/s
[info] # Warmup Iteration   4: 286526,692 ops/s
[info] # Warmup Iteration   5: 285444,816 ops/s
[info] Iteration   1: 283396,205 ops/s
[info]                  ·gc.alloc.rate:                   1027,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3703,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,347 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 285608,666 ops/s
[info]                  ·gc.alloc.rate:                   1035,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7334,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,344 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 286056,694 ops/s
[info]                  ·gc.alloc.rate:               1036,651 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3661,518 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 283198,512 ops/s
[info]                  ·gc.alloc.rate:                   1026,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7398,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 287627,534 ops/s
[info]                  ·gc.alloc.rate:               1042,227 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3643,066 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   285177,522 ±(99.9%) 7216,994 ops/s [Average]
[info]   (min, avg, max) = (283198,512, 285177,522, 287627,534), stdev = 1874,230
[info]   CI (99.9%): [277960,528, 292394,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1033,468 ±(99.9%) 25,875 MB/sec [Average]
[info]   (min, avg, max) = (1026,391, 1033,468, 1042,227), stdev = 6,720
[info]   CI (99.9%): [1007,593, 1059,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5704,001, 5704,001, 5704,002), stdev = 0,001
[info]   CI (99.9%): [5704,001, 5704,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932,013 ±(99.9%) 1402,768 MB/sec [Average]
[info]   (min, avg, max) = (665,448, 932,013, 1331,259), stdev = 364,295
[info]   CI (99.9%): [≈ 0, 2334,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5148,134 ±(99.9%) 7798,419 B/op [Average]
[info]   (min, avg, max) = (3643,066, 5148,134, 7398,259), stdev = 2025,225
[info]   CI (99.9%): [≈ 0, 12946,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,184 ±(99.9%) 0,673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,184, 0,347), stdev = 0,175
[info]   CI (99.9%): [≈ 0, 0,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62,78% complete, ETA 00:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304894,148 ops/s
[info] # Warmup Iteration   2: 326229,077 ops/s
[info] # Warmup Iteration   3: 320011,591 ops/s
[info] # Warmup Iteration   4: 326030,789 ops/s
[info] # Warmup Iteration   5: 326325,613 ops/s
[info] Iteration   1: 323704,838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 328730,673 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 285399,809 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 330123,336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 329404,787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   319472,689 ±(99.9%) 73985,124 ops/s [Average]
[info]   (min, avg, max) = (285399,809, 319472,689, 330123,336), stdev = 19213,702
[info]   CI (99.9%): [245487,565, 393457,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62,98% complete, ETA 00:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12578,098 ops/s
[info] # Warmup Iteration   2: 16702,880 ops/s
[info] # Warmup Iteration   3: 16644,817 ops/s
[info] # Warmup Iteration   4: 16776,718 ops/s
[info] # Warmup Iteration   5: 16661,157 ops/s
[info] Iteration   1: 16825,717 ops/s
[info]                  ·gc.alloc.rate:               960,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          89848,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62179,373 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 16777,002 ops/s
[info]                  ·gc.alloc.rate:                   957,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              89844,754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124596,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,858 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 16852,880 ops/s
[info]                  ·gc.alloc.rate:               961,840 MB/sec
[info]                  ·gc.alloc.rate.norm:          89831,926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61959,047 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 16833,849 ops/s
[info]                  ·gc.alloc.rate:                   960,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832,144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124050,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,892 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16838,515 ops/s
[info]                  ·gc.alloc.rate:               960,890 MB/sec
[info]                  ·gc.alloc.rate.norm:          89832,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62041,681 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     47,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   16825,593 ±(99.9%) 111,284 ops/s [Average]
[info]   (min, avg, max) = (16777,002, 16825,593, 16852,880), stdev = 28,900
[info]   CI (99.9%): [16714,308, 16936,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   960,310 ±(99.9%) 6,300 MB/sec [Average]
[info]   (min, avg, max) = (957,524, 960,310, 961,840), stdev = 1,636
[info]   CI (99.9%): [954,010, 966,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89837,775 ±(99.9%) 30,611 B/op [Average]
[info]   (min, avg, max) = (89831,926, 89837,775, 89848,026), stdev = 7,950
[info]   CI (99.9%): [89807,164, 89868,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   929,283 ±(99.9%) 1399,200 MB/sec [Average]
[info]   (min, avg, max) = (663,402, 929,283, 1327,896), stdev = 363,368
[info]   CI (99.9%): [≈ 0, 2328,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86965,512 ±(99.9%) 131321,857 B/op [Average]
[info]   (min, avg, max) = (61959,047, 86965,512, 124596,898), stdev = 34103,869
[info]   CI (99.9%): [≈ 0, 218287,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,950 ±(99.9%) 10,625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,950, 5,858), stdev = 2,759
[info]   CI (99.9%): [≈ 0, 12,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   50,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 10,000, 47,000), stdev = 20,688
[info]   CI (99.9%): [50,000, 50,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63,18% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7698,379 ops/s
[info] # Warmup Iteration   2: 8471,130 ops/s
[info] # Warmup Iteration   3: 8499,932 ops/s
[info] # Warmup Iteration   4: 8478,706 ops/s
[info] # Warmup Iteration   5: 8438,415 ops/s
[info] Iteration   1: 8447,397 ops/s
[info]                  ·gc.alloc.rate:                   538,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95302,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,878 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 8419,425 ops/s
[info]                  ·gc.alloc.rate:                   536,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125251,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1014,753 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 8486,917 ops/s
[info]                  ·gc.alloc.rate:      541,171 MB/sec
[info]                  ·gc.alloc.rate.norm: 100340,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8374,751 ops/s
[info]                  ·gc.alloc.rate:                   533,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125924,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,735 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8465,833 ops/s
[info]                  ·gc.alloc.rate:               539,590 MB/sec
[info]                  ·gc.alloc.rate.norm:          100336,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123951,887 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   8438,865 ±(99.9%) 167,820 ops/s [Average]
[info]   (min, avg, max) = (8374,751, 8438,865, 8486,917), stdev = 43,582
[info]   CI (99.9%): [8271,045, 8606,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   537,998 ±(99.9%) 10,660 MB/sec [Average]
[info]   (min, avg, max) = (533,968, 537,998, 541,171), stdev = 2,768
[info]   CI (99.9%): [527,338, 548,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   100336,839 ±(99.9%) 6,811 B/op [Average]
[info]   (min, avg, max) = (100336,048, 100336,839, 100340,003), stdev = 1,769
[info]   CI (99.9%): [100330,029, 100343,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   503,653 ±(99.9%) 1115,491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503,653, 670,143), stdev = 289,689
[info]   CI (99.9%): [≈ 0, 1619,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   94086,017 ±(99.9%) 208527,427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94086,017, 125924,252), stdev = 54153,911
[info]   CI (99.9%): [≈ 0, 302613,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1,102 ±(99.9%) 9,313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,102, 5,428), stdev = 2,419
[info]   CI (99.9%): [≈ 0, 10,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   206,073 ±(99.9%) 1740,842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 206,073, 1014,753), stdev = 452,091
[info]   CI (99.9%): [≈ 0, 1946,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,38% complete, ETA 00:48:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 923237,538 ops/s
[info] # Warmup Iteration   2: 985112,324 ops/s
[info] # Warmup Iteration   3: 978019,147 ops/s
[info] # Warmup Iteration   4: 970096,100 ops/s
[info] # Warmup Iteration   5: 945501,793 ops/s
[info] Iteration   1: 984762,730 ops/s
[info]                  ·gc.alloc.rate:      40,044 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 982449,223 ops/s
[info]                  ·gc.alloc.rate:      39,953 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 979606,540 ops/s
[info]                  ·gc.alloc.rate:      39,835 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 982807,063 ops/s
[info]                  ·gc.alloc.rate:      39,968 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 984188,974 ops/s
[info]                  ·gc.alloc.rate:      40,018 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   982762,906 ±(99.9%) 7724,348 ops/s [Average]
[info]   (min, avg, max) = (979606,540, 982762,906, 984762,730), stdev = 2005,989
[info]   CI (99.9%): [975038,558, 990487,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   39,963 ±(99.9%) 0,311 MB/sec [Average]
[info]   (min, avg, max) = (39,835, 39,963, 40,044), stdev = 0,081
[info]   CI (99.9%): [39,652, 40,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64,000, 64,000, 64,000), stdev = 0,001
[info]   CI (99.9%): [64,000, 64,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63,58% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45821,470 ops/s
[info] # Warmup Iteration   2: 83600,826 ops/s
[info] # Warmup Iteration   3: 82428,276 ops/s
[info] # Warmup Iteration   4: 83208,993 ops/s
[info] # Warmup Iteration   5: 84086,810 ops/s
[info] Iteration   1: 83563,755 ops/s
[info]                  ·gc.alloc.rate:                   3768,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76812,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,176 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 83228,859 ops/s
[info]                  ·gc.alloc.rate:                   3753,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64337,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,968 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 83493,465 ops/s
[info]                  ·gc.alloc.rate:                   3764,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76991,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,177 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 83408,672 ops/s
[info]                  ·gc.alloc.rate:                   3761,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64263,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,178 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 83305,527 ops/s
[info]                  ·gc.alloc.rate:                   3755,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77244,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,573 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   83400,056 ±(99.9%) 523,180 ops/s [Average]
[info]   (min, avg, max) = (83228,859, 83400,056, 83563,755), stdev = 135,868
[info]   CI (99.9%): [82876,875, 83923,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3760,554 ±(99.9%) 23,901 MB/sec [Average]
[info]   (min, avg, max) = (3753,126, 3760,554, 3768,115), stdev = 6,207
[info]   CI (99.9%): [3736,653, 3784,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70968,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70968,005, 70968,005, 70968,005), stdev = 0,001
[info]   CI (99.9%): [70968,004, 70968,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3811,755 ±(99.9%) 1432,602 MB/sec [Average]
[info]   (min, avg, max) = (3402,492, 3811,755, 4087,745), stdev = 372,042
[info]   CI (99.9%): [2379,152, 5244,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71929,894 ±(99.9%) 26824,613 B/op [Average]
[info]   (min, avg, max) = (64263,426, 71929,894, 77244,419), stdev = 6966,267
[info]   CI (99.9%): [45105,281, 98754,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,104), stdev = 0,019
[info]   CI (99.9%): [0,003, 0,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,415 ±(99.9%) 1,362 B/op [Average]
[info]   (min, avg, max) = (1,176, 1,415, 1,968), stdev = 0,354
[info]   CI (99.9%): [0,052, 2,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,78% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 913854,548 ops/s
[info] # Warmup Iteration   2: 1244774,180 ops/s
[info] # Warmup Iteration   3: 1243189,498 ops/s
[info] # Warmup Iteration   4: 1240196,625 ops/s
[info] # Warmup Iteration   5: 1243517,270 ops/s
[info] Iteration   1: 1244304,360 ops/s
[info]                  ·gc.alloc.rate:               714,680 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 853,043 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1247649,098 ops/s
[info]                  ·gc.alloc.rate:                   716,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     851,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1108670,255 ops/s
[info]                  ·gc.alloc.rate:               636,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 958,351 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1243287,470 ops/s
[info]                  ·gc.alloc.rate:                   714,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     855,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1242689,338 ops/s
[info]                  ·gc.alloc.rate:               713,614 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 855,860 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1217320,104 ±(99.9%) 233993,478 ops/s [Average]
[info]   (min, avg, max) = (1108670,255, 1217320,104, 1247649,098), stdev = 60767,363
[info]   CI (99.9%): [983326,626, 1451313,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   699,156 ±(99.9%) 134,361 MB/sec [Average]
[info]   (min, avg, max) = (636,770, 699,156, 716,610), stdev = 34,893
[info]   CI (99.9%): [564,795, 833,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,185 ±(99.9%) 2,061 MB/sec [Average]
[info]   (min, avg, max) = (674,395, 675,185, 675,748), stdev = 0,535
[info]   CI (99.9%): [673,124, 677,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   874,871 ±(99.9%) 179,821 B/op [Average]
[info]   (min, avg, max) = (851,656, 874,871, 958,351), stdev = 46,699
[info]   CI (99.9%): [695,050, 1054,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,079), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,98% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 738703,837 ops/s
[info] # Warmup Iteration   2: 761902,742 ops/s
[info] # Warmup Iteration   3: 747449,162 ops/s
[info] # Warmup Iteration   4: 762208,388 ops/s
[info] # Warmup Iteration   5: 756920,004 ops/s
[info] Iteration   1: 757986,865 ops/s
[info]                  ·gc.alloc.rate:      204,203 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 759521,302 ops/s
[info]                  ·gc.alloc.rate:      204,672 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 688190,712 ops/s
[info]                  ·gc.alloc.rate:                   185,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1169,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 755280,182 ops/s
[info]                  ·gc.alloc.rate:      203,483 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 758396,781 ops/s
[info]                  ·gc.alloc.rate:               204,281 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1061,613 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   743875,168 ±(99.9%) 120014,936 ops/s [Average]
[info]   (min, avg, max) = (688190,712, 743875,168, 759521,302), stdev = 31167,498
[info]   CI (99.9%): [623860,232, 863890,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   200,409 ±(99.9%) 32,339 MB/sec [Average]
[info]   (min, avg, max) = (185,405, 200,409, 204,672), stdev = 8,398
[info]   CI (99.9%): [168,070, 232,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,001, 424,001, 424,001), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,618 ±(99.9%) 1078,891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,618, 511,611), stdev = 280,185
[info]   CI (99.9%): [≈ 0, 1283,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   446,322 ±(99.9%) 2357,950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 446,322, 1169,998), stdev = 612,352
[info]   CI (99.9%): [≈ 0, 2804,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,013), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,029), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64,19% complete, ETA 00:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1515542,907 ops/s
[info] # Warmup Iteration   2: 1624454,434 ops/s
[info] # Warmup Iteration   3: 1614359,656 ops/s
[info] # Warmup Iteration   4: 1614491,576 ops/s
[info] # Warmup Iteration   5: 1458119,787 ops/s
[info] Iteration   1: 1612627,377 ops/s
[info]                  ·gc.alloc.rate:      16,393 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1613933,421 ops/s
[info]                  ·gc.alloc.rate:      16,408 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1617957,963 ops/s
[info]                  ·gc.alloc.rate:      16,448 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1608261,946 ops/s
[info]                  ·gc.alloc.rate:      16,351 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1614668,178 ops/s
[info]                  ·gc.alloc.rate:      16,413 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1613489,777 ±(99.9%) 13562,808 ops/s [Average]
[info]   (min, avg, max) = (1608261,946, 1613489,777, 1617957,963), stdev = 3522,218
[info]   CI (99.9%): [1599926,969, 1627052,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   16,403 ±(99.9%) 0,136 MB/sec [Average]
[info]   (min, avg, max) = (16,351, 16,403, 16,448), stdev = 0,035
[info]   CI (99.9%): [16,267, 16,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64,39% complete, ETA 00:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30109,544 ops/s
[info] # Warmup Iteration   2: 49256,479 ops/s
[info] # Warmup Iteration   3: 48553,604 ops/s
[info] # Warmup Iteration   4: 49120,785 ops/s
[info] # Warmup Iteration   5: 49219,026 ops/s
[info] Iteration   1: 49268,711 ops/s
[info]                  ·gc.alloc.rate:                   2076,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64929,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,330 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 49449,823 ops/s
[info]                  ·gc.alloc.rate:                   2083,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64734,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,988 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 49217,934 ops/s
[info]                  ·gc.alloc.rate:                   2074,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65124,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,997 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47733,892 ops/s
[info]                  ·gc.alloc.rate:                   2011,850 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67192,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,686 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 49244,442 ops/s
[info]                  ·gc.alloc.rate:                   2075,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65188,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,331 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   48982,960 ±(99.9%) 2711,473 ops/s [Average]
[info]   (min, avg, max) = (47733,892, 48982,960, 49449,823), stdev = 704,161
[info]   CI (99.9%): [46271,488, 51694,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2064,265 ±(99.9%) 113,811 MB/sec [Average]
[info]   (min, avg, max) = (2011,850, 2064,265, 2083,953), stdev = 29,556
[info]   CI (99.9%): [1950,454, 2178,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66328,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66328,008, 66328,009, 66328,009), stdev = 0,001
[info]   CI (99.9%): [66328,007, 66328,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,087 ±(99.9%) 11,030 MB/sec [Average]
[info]   (min, avg, max) = (2032,537, 2036,087, 2039,437), stdev = 2,865
[info]   CI (99.9%): [2025,056, 2047,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65434,014 ±(99.9%) 3847,282 B/op [Average]
[info]   (min, avg, max) = (64734,373, 65434,014, 67192,759), stdev = 999,127
[info]   CI (99.9%): [61586,732, 69281,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,466 ±(99.9%) 2,108 B/op [Average]
[info]   (min, avg, max) = (0,686, 1,466, 1,997), stdev = 0,547
[info]   CI (99.9%): [≈ 0, 3,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64,59% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577638,119 ops/s
[info] # Warmup Iteration   2: 851101,271 ops/s
[info] # Warmup Iteration   3: 885501,681 ops/s
[info] # Warmup Iteration   4: 884379,836 ops/s
[info] # Warmup Iteration   5: 881598,278 ops/s
[info] Iteration   1: 880320,320 ops/s
[info]                  ·gc.alloc.rate:                   2796,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6028,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 874070,321 ops/s
[info]                  ·gc.alloc.rate:                   2776,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4869,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 884626,055 ops/s
[info]                  ·gc.alloc.rate:                   2810,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4820,141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,111 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 883611,414 ops/s
[info]                  ·gc.alloc.rate:                   2807,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4832,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 881939,907 ops/s
[info]                  ·gc.alloc.rate:                   2800,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4848,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   880913,603 ±(99.9%) 16027,225 ops/s [Average]
[info]   (min, avg, max) = (874070,321, 880913,603, 884626,055), stdev = 4162,220
[info]   CI (99.9%): [864886,378, 896940,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2798,372 ±(99.9%) 50,586 MB/sec [Average]
[info]   (min, avg, max) = (2776,908, 2798,372, 2810,191), stdev = 13,137
[info]   CI (99.9%): [2747,786, 2848,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5000,000, 5000,000, 5000,001), stdev = 0,001
[info]   CI (99.9%): [5000,000, 5000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2842,969 ±(99.9%) 1137,953 MB/sec [Average]
[info]   (min, avg, max) = (2704,433, 2842,969, 3371,555), stdev = 295,523
[info]   CI (99.9%): [1705,016, 3980,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5079,909 ±(99.9%) 2042,478 B/op [Average]
[info]   (min, avg, max) = (4820,141, 5079,909, 6028,188), stdev = 530,425
[info]   CI (99.9%): [3037,431, 7122,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,074 ±(99.9%) 0,144 B/op [Average]
[info]   (min, avg, max) = (0,037, 0,074, 0,112), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64,79% complete, ETA 00:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560416,359 ops/s
[info] # Warmup Iteration   2: 6191899,473 ops/s
[info] # Warmup Iteration   3: 6183283,143 ops/s
[info] # Warmup Iteration   4: 6195859,511 ops/s
[info] # Warmup Iteration   5: 6167303,120 ops/s
[info] Iteration   1: 6207253,811 ops/s
[info]                  ·gc.alloc.rate:      378,611 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6131208,525 ops/s
[info]                  ·gc.alloc.rate:               373,988 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131,314 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6131939,512 ops/s
[info]                  ·gc.alloc.rate:               373,957 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131,301 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6161575,539 ops/s
[info]                  ·gc.alloc.rate:      375,875 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6164940,559 ops/s
[info]                  ·gc.alloc.rate:                   376,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,682 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   6159383,589 ±(99.9%) 119838,794 ops/s [Average]
[info]   (min, avg, max) = (6131208,525, 6159383,589, 6207253,811), stdev = 31121,754
[info]   CI (99.9%): [6039544,796, 6279222,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   375,698 ±(99.9%) 7,357 MB/sec [Average]
[info]   (min, avg, max) = (373,957, 375,698, 378,611), stdev = 1,910
[info]   CI (99.9%): [368,341, 383,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,433 ±(99.9%) 1220,232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,433, 674,132), stdev = 316,890
[info]   CI (99.9%): [≈ 0, 1559,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   86,942 ±(99.9%) 312,266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86,942, 172,094), stdev = 81,095
[info]   CI (99.9%): [≈ 0, 399,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,534 ±(99.9%) 4,599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,534, 2,671), stdev = 1,194
[info]   CI (99.9%): [≈ 0, 5,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,136 ±(99.9%) 1,174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,136, 0,682), stdev = 0,305
[info]   CI (99.9%): [≈ 0, 1,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64,99% complete, ETA 00:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482518,342 ops/s
[info] # Warmup Iteration   2: 1103943,262 ops/s
[info] # Warmup Iteration   3: 1101014,039 ops/s
[info] # Warmup Iteration   4: 1105814,232 ops/s
[info] # Warmup Iteration   5: 1106719,311 ops/s
[info] Iteration   1: 1076314,108 ops/s
[info]                  ·gc.alloc.rate:               1285,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 988,193 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1106384,280 ops/s
[info]                  ·gc.alloc.rate:                   1321,609 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1923,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1105452,465 ops/s
[info]                  ·gc.alloc.rate:               1320,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1927,020 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1102096,868 ops/s
[info]                  ·gc.alloc.rate:                   1316,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1934,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1105720,411 ops/s
[info]                  ·gc.alloc.rate:               1320,662 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1929,358 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1099193,626 ±(99.9%) 49663,555 ops/s [Average]
[info]   (min, avg, max) = (1076314,108, 1099193,626, 1106384,280), stdev = 12897,467
[info]   CI (99.9%): [1049530,072, 1148857,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1312,952 ±(99.9%) 59,630 MB/sec [Average]
[info]   (min, avg, max) = (1285,469, 1312,952, 1321,609), stdev = 15,486
[info]   CI (99.9%): [1253,321, 1372,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1880,000, 1880,000, 1880,000), stdev = 0,001
[info]   CI (99.9%): [1880,000, 1880,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,343 ±(99.9%) 1168,118 MB/sec [Average]
[info]   (min, avg, max) = (675,686, 1218,343, 1355,334), stdev = 303,357
[info]   CI (99.9%): [50,225, 2386,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1740,599 ±(99.9%) 1619,685 B/op [Average]
[info]   (min, avg, max) = (988,193, 1740,599, 1934,735), stdev = 420,627
[info]   CI (99.9%): [120,913, 3360,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,024 ±(99.9%) 0,125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,059), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65,19% complete, ETA 00:46:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7332910,172 ops/s
[info] # Warmup Iteration   2: 8963058,693 ops/s
[info] # Warmup Iteration   3: 8152796,975 ops/s
[info] # Warmup Iteration   4: 8941847,331 ops/s
[info] # Warmup Iteration   5: 8945493,741 ops/s
[info] Iteration   1: 8908852,300 ops/s
[info]                  ·gc.alloc.rate:                   407,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90,372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8935069,957 ops/s
[info]                  ·gc.alloc.rate:               408,803 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90,114 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 8934856,111 ops/s
[info]                  ·gc.alloc.rate:                   408,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7338573,553 ops/s
[info]                  ·gc.alloc.rate:      335,723 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8925098,110 ops/s
[info]                  ·gc.alloc.rate:                   408,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,543 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8608490,006 ±(99.9%) 2733899,764 ops/s [Average]
[info]   (min, avg, max) = (7338573,553, 8608490,006, 8935069,957), stdev = 709985,087
[info]   CI (99.9%): [5874590,242, 11342389,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   393,812 ±(99.9%) 125,055 MB/sec [Average]
[info]   (min, avg, max) = (335,723, 393,812, 408,803), stdev = 32,476
[info]   CI (99.9%): [268,757, 518,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   442,009 ±(99.9%) 989,859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 442,009, 675,327), stdev = 257,063
[info]   CI (99.9%): [≈ 0, 1431,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   77,939 ±(99.9%) 174,553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77,939, 119,099), stdev = 45,331
[info]   CI (99.9%): [≈ 0, 252,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,628 ±(99.9%) 5,275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,628, 3,078), stdev = 1,370
[info]   CI (99.9%): [≈ 0, 5,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,111 ±(99.9%) 0,930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,111, 0,543), stdev = 0,242
[info]   CI (99.9%): [≈ 0, 1,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65,39% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91453,878 ops/s
[info] # Warmup Iteration   2: 344185,937 ops/s
[info] # Warmup Iteration   3: 345147,449 ops/s
[info] # Warmup Iteration   4: 345850,315 ops/s
[info] # Warmup Iteration   5: 344696,571 ops/s
[info] Iteration   1: 344597,834 ops/s
[info]                  ·gc.alloc.rate:                   1898,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              8672,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9274,601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,285 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 345382,021 ops/s
[info]                  ·gc.alloc.rate:                   1902,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              8672,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6174,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 345983,419 ops/s
[info]                  ·gc.alloc.rate:                   1906,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              8672,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9253,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,189 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 336682,377 ops/s
[info]                  ·gc.alloc.rate:                   1855,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              8672,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9520,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 341363,983 ops/s
[info]                  ·gc.alloc.rate:                   1880,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              8672,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9395,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,096 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   342801,927 ±(99.9%) 14853,784 ops/s [Average]
[info]   (min, avg, max) = (336682,377, 342801,927, 345983,419), stdev = 3857,481
[info]   CI (99.9%): [327948,143, 357655,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1888,803 ±(99.9%) 81,772 MB/sec [Average]
[info]   (min, avg, max) = (1855,234, 1888,803, 1906,478), stdev = 21,236
[info]   CI (99.9%): [1807,032, 1970,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8672,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8672,001, 8672,001, 8672,001), stdev = 0,001
[info]   CI (99.9%): [8672,001, 8672,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,820 ±(99.9%) 1171,068 MB/sec [Average]
[info]   (min, avg, max) = (1354,809, 1898,820, 2037,594), stdev = 304,123
[info]   CI (99.9%): [727,752, 3069,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8723,628 ±(99.9%) 5503,091 B/op [Average]
[info]   (min, avg, max) = (6174,272, 8723,628, 9520,337), stdev = 1429,135
[info]   CI (99.9%): [3220,537, 14226,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,153 ±(99.9%) 0,325 B/op [Average]
[info]   (min, avg, max) = (0,095, 0,153, 0,285), stdev = 0,084
[info]   CI (99.9%): [≈ 0, 0,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65,59% complete, ETA 00:45:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 586365,615 ops/s
[info] # Warmup Iteration   2: 812658,867 ops/s
[info] # Warmup Iteration   3: 815949,718 ops/s
[info] # Warmup Iteration   4: 818406,900 ops/s
[info] # Warmup Iteration   5: 825014,463 ops/s
[info] Iteration   1: 824581,122 ops/s
[info]                  ·gc.alloc.rate:                   1144,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2566,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 755111,435 ops/s
[info]                  ·gc.alloc.rate:               1047,822 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1400,921 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     9,000 ms
[info] Iteration   3: 819693,666 ops/s
[info]                  ·gc.alloc.rate:                   1137,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2580,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 818623,722 ops/s
[info]                  ·gc.alloc.rate:                   1135,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2584,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 824927,374 ops/s
[info]                  ·gc.alloc.rate:               1144,646 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1283,528 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   808587,464 ±(99.9%) 115624,354 ops/s [Average]
[info]   (min, avg, max) = (755111,435, 808587,464, 824927,374), stdev = 30027,277
[info]   CI (99.9%): [692963,110, 924211,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1121,995 ±(99.9%) 160,369 MB/sec [Average]
[info]   (min, avg, max) = (1047,822, 1121,995, 1144,646), stdev = 41,647
[info]   CI (99.9%): [961,627, 1282,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,000, 2184,001, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,000, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,558 ±(99.9%) 1417,114 MB/sec [Average]
[info]   (min, avg, max) = (672,122, 1075,558, 1344,739), stdev = 368,020
[info]   CI (99.9%): [≈ 0, 2492,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2083,294 ±(99.9%) 2609,982 B/op [Average]
[info]   (min, avg, max) = (1283,528, 2083,294, 2584,255), stdev = 677,804
[info]   CI (99.9%): [≈ 0, 4693,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,048 ±(99.9%) 0,201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,048, 0,120), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 9,000), stdev = 3,834
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65,79% complete, ETA 00:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2870,100 ops/s
[info] # Warmup Iteration   2: 4351,243 ops/s
[info] # Warmup Iteration   3: 4405,412 ops/s
[info] # Warmup Iteration   4: 4443,353 ops/s
[info] # Warmup Iteration   5: 4432,121 ops/s
[info] Iteration   1: 4396,814 ops/s
[info]                  ·gc.alloc.rate:                   2076,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     727899,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,451 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4400,292 ops/s
[info]                  ·gc.alloc.rate:                   2078,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     727952,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119,102 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4401,489 ops/s
[info]                  ·gc.alloc.rate:               2078,659 MB/sec
[info]                  ·gc.alloc.rate.norm:          743312,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2036,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 728144,701 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 4400,161 ops/s
[info]                  ·gc.alloc.rate:                   2078,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728786,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,107 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4397,331 ops/s
[info]                  ·gc.alloc.rate:                   2076,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729879,453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,796 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4399,217 ±(99.9%) 7,830 ops/s [Average]
[info]   (min, avg, max) = (4396,814, 4399,217, 4401,489), stdev = 2,034
[info]   CI (99.9%): [4391,387, 4407,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2077,665 ±(99.9%) 4,151 MB/sec [Average]
[info]   (min, avg, max) = (2076,472, 2077,665, 2078,659), stdev = 1,078
[info]   CI (99.9%): [2073,513, 2081,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312,094 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (743312,093, 743312,094, 743312,100), stdev = 0,003
[info]   CI (99.9%): [743312,082, 743312,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2036,354 ±(99.9%) 8,233 MB/sec [Average]
[info]   (min, avg, max) = (2033,416, 2036,354, 2038,988), stdev = 2,138
[info]   CI (99.9%): [2028,121, 2044,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   728532,621 ±(99.9%) 3201,931 B/op [Average]
[info]   (min, avg, max) = (727899,620, 728532,621, 729879,453), stdev = 831,531
[info]   CI (99.9%): [725330,689, 731734,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,117 ±(99.9%) 0,515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,333), stdev = 0,134
[info]   CI (99.9%): [≈ 0, 0,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41,691 ±(99.9%) 184,198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,691, 119,102), stdev = 47,836
[info]   CI (99.9%): [≈ 0, 225,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 66,00% complete, ETA 00:45:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3191,423 ops/s
[info] # Warmup Iteration   2: 5914,219 ops/s
[info] # Warmup Iteration   3: 5960,096 ops/s
[info] # Warmup Iteration   4: 5977,007 ops/s
[info] # Warmup Iteration   5: 5993,471 ops/s
[info] Iteration   1: 5997,810 ops/s
[info]                  ·gc.alloc.rate:                   2478,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710934,528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,307 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5980,682 ops/s
[info]                  ·gc.alloc.rate:                   2471,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714125,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,389 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5989,723 ops/s
[info]                  ·gc.alloc.rate:                   2474,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     535137,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,343 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5975,654 ops/s
[info]                  ·gc.alloc.rate:                   2469,583 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715831,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,407 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5991,357 ops/s
[info]                  ·gc.alloc.rate:                   2475,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714564,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,339 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5987,045 ±(99.9%) 34,002 ops/s [Average]
[info]   (min, avg, max) = (5975,654, 5987,045, 5997,810), stdev = 8,830
[info]   CI (99.9%): [5953,044, 6021,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2474,015 ±(99.9%) 13,135 MB/sec [Average]
[info]   (min, avg, max) = (2469,583, 2474,015, 2478,234), stdev = 3,411
[info]   CI (99.9%): [2460,880, 2487,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650352,070 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (650352,068, 650352,070, 650352,073), stdev = 0,003
[info]   CI (99.9%): [650352,059, 650352,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2579,586 ±(99.9%) 1169,211 MB/sec [Average]
[info]   (min, avg, max) = (2036,470, 2579,586, 2720,109), stdev = 303,640
[info]   CI (99.9%): [1410,375, 3748,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   678118,661 ±(99.9%) 307855,527 B/op [Average]
[info]   (min, avg, max) = (535137,752, 678118,661, 715831,157), stdev = 79949,103
[info]   CI (99.9%): [370263,135, 985974,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,001 MB/sec [Average]
[info]   (min, avg, max) = (0,104, 0,104, 0,104), stdev = 0,001
[info]   CI (99.9%): [0,104, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27,357 ±(99.9%) 0,156 B/op [Average]
[info]   (min, avg, max) = (27,307, 27,357, 27,407), stdev = 0,041
[info]   CI (99.9%): [27,201, 27,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66,20% complete, ETA 00:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43246,189 ops/s
[info] # Warmup Iteration   2: 46189,309 ops/s
[info] # Warmup Iteration   3: 44972,826 ops/s
[info] # Warmup Iteration   4: 41769,880 ops/s
[info] # Warmup Iteration   5: 46786,618 ops/s
[info] Iteration   1: 46937,809 ops/s
[info]                  ·gc.alloc.rate:                   757,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45294,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 47059,821 ops/s
[info]                  ·gc.alloc.rate:               759,988 MB/sec
[info]                  ·gc.alloc.rate.norm:          25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22523,910 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 47027,024 ops/s
[info]                  ·gc.alloc.rate:               759,388 MB/sec
[info]                  ·gc.alloc.rate.norm:          25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22536,838 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 46927,503 ops/s
[info]                  ·gc.alloc.rate:               757,864 MB/sec
[info]                  ·gc.alloc.rate.norm:          25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22562,032 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 46844,382 ops/s
[info]                  ·gc.alloc.rate:                   756,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22602,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,399 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   46959,308 ±(99.9%) 329,955 ops/s [Average]
[info]   (min, avg, max) = (46844,382, 46959,308, 47059,821), stdev = 85,688
[info]   CI (99.9%): [46629,353, 47289,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   758,311 ±(99.9%) 5,471 MB/sec [Average]
[info]   (min, avg, max) = (756,369, 758,311, 759,988), stdev = 1,421
[info]   CI (99.9%): [752,840, 763,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25416,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25416,009, 25416,009, 25416,009), stdev = 0,001
[info]   CI (99.9%): [25416,008, 25416,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   808,606 ±(99.9%) 1166,986 MB/sec [Average]
[info]   (min, avg, max) = (672,654, 808,606, 1350,740), stdev = 303,063
[info]   CI (99.9%): [≈ 0, 1975,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27103,966 ±(99.9%) 39155,781 B/op [Average]
[info]   (min, avg, max) = (22523,910, 27103,966, 45294,088), stdev = 10168,632
[info]   CI (99.9%): [≈ 0, 66259,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,594 ±(99.9%) 5,023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,594, 2,927), stdev = 1,304
[info]   CI (99.9%): [≈ 0, 5,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19,908 ±(99.9%) 168,420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19,908, 98,142), stdev = 43,738
[info]   CI (99.9%): [≈ 0, 188,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66,40% complete, ETA 00:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3158,894 ops/s
[info] # Warmup Iteration   2: 4199,226 ops/s
[info] # Warmup Iteration   3: 4246,130 ops/s
[info] # Warmup Iteration   4: 4241,704 ops/s
[info] # Warmup Iteration   5: 4234,933 ops/s
[info] Iteration   1: 4213,422 ops/s
[info]                  ·gc.alloc.rate:                   844,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              315592,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251384,590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,322 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4248,363 ops/s
[info]                  ·gc.alloc.rate:               851,880 MB/sec
[info]                  ·gc.alloc.rate.norm:          315592,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249314,364 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 4265,099 ops/s
[info]                  ·gc.alloc.rate:                   855,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              315592,103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     497250,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,681 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 4264,751 ops/s
[info]                  ·gc.alloc.rate:                   855,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              315592,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248870,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,362 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4257,116 ops/s
[info]                  ·gc.alloc.rate:               853,323 MB/sec
[info]                  ·gc.alloc.rate.norm:          315592,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 249338,469 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4249,750 ±(99.9%) 82,509 ops/s [Average]
[info]   (min, avg, max) = (4213,422, 4249,750, 4265,099), stdev = 21,427
[info]   CI (99.9%): [4167,242, 4332,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   852,081 ±(99.9%) 16,421 MB/sec [Average]
[info]   (min, avg, max) = (844,864, 852,081, 855,199), stdev = 4,265
[info]   CI (99.9%): [835,660, 868,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   315592,097 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (315592,096, 315592,097, 315592,103), stdev = 0,003
[info]   CI (99.9%): [315592,085, 315592,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   808,379 ±(99.9%) 1160,214 MB/sec [Average]
[info]   (min, avg, max) = (672,975, 808,379, 1347,366), stdev = 301,304
[info]   CI (99.9%): [≈ 0, 1968,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   299231,697 ±(99.9%) 426266,235 B/op [Average]
[info]   (min, avg, max) = (248870,886, 299231,697, 497250,175), stdev = 110699,988
[info]   CI (99.9%): [≈ 0, 725497,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,273 ±(99.9%) 38,936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,273, 23,322), stdev = 10,112
[info]   CI (99.9%): [≈ 0, 48,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66,60% complete, ETA 00:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_7fe6a5a1/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3143,226 ops/s
[info] # Warmup Iteration   2: 5298,426 ops/s
[info] # Warmup Iteration   3: 5401,287 ops/s
[info] # Warmup Iteration   4: 5383,045 ops/s
[info] # Warmup Iteration   5: 5373,544 ops/s
[info] Iteration   1: 5399,365 ops/s
[info]                  ·gc.alloc.rate:      541,583 MB/sec
[info]                  ·gc.alloc.rate.norm: 157877,246 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5351,686 ops/s
[info]                  ·gc.alloc.rate:                   536,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877,269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198297,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265,292 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5363,561 ops/s
[info]                  ·gc.alloc.rate:                   537,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877,376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197890,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,215 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 5378,368 ops/s
[info]                  ·gc.alloc.rate:                   539,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877,390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197338,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5384,714 ops/s
[info]                  ·gc.alloc.rate:               540,110 MB/sec
[info]                  ·gc.alloc.rate.norm:          157877,658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 197082,458 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5375,539 ±(99.9%) 71,323 ops/s [Average]
[info]   (min, avg, max) = (5351,686, 5375,539, 5399,365), stdev = 18,522
[info]   CI (99.9%): [5304,216, 5446,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   539,215 ±(99.9%) 7,111 MB/sec [Average]
[info]   (min, avg, max) = (536,842, 539,215, 541,583), stdev = 1,847
[info]   CI (99.9%): [532,104, 546,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157877,388 ±(99.9%) 0,631 B/op [Average]
[info]   (min, avg, max) = (157877,246, 157877,388, 157877,658), stdev = 0,164
[info]   CI (99.9%): [157876,757, 157878,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,454 ±(99.9%) 1161,215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,454, 674,407), stdev = 301,564
[info]   CI (99.9%): [≈ 0, 1700,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   158121,833 ±(99.9%) 340374,044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 158121,833, 198297,198), stdev = 88394,058
[info]   CI (99.9%): [≈ 0, 498495,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,193 ±(99.9%) 1,528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,193, 0,902), stdev = 0,397
[info]   CI (99.9%): [≈ 0, 1,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   56,720 ±(99.9%) 449,392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56,720, 265,292), stdev = 116,706
[info]   CI (99.9%): [≈ 0, 506,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66,80% complete, ETA 00:44:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6912,475 ops/s
[info] # Warmup Iteration   2: 7176,106 ops/s
[info] # Warmup Iteration   3: 7097,744 ops/s
[info] # Warmup Iteration   4: 7173,130 ops/s
[info] # Warmup Iteration   5: 7155,141 ops/s
[info] Iteration   1: 7053,419 ops/s
[info]                  ·gc.alloc.rate:               188,482 MB/sec
[info]                  ·gc.alloc.rate.norm:          42056,062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114146,898 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 7096,452 ops/s
[info]                  ·gc.alloc.rate:      189,659 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7085,144 ops/s
[info]                  ·gc.alloc.rate:                   189,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113631,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,751 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7021,012 ops/s
[info]                  ·gc.alloc.rate:      187,630 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,058 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7132,823 ops/s
[info]                  ·gc.alloc.rate:      190,579 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   7077,770 ±(99.9%) 163,920 ops/s [Average]
[info]   (min, avg, max) = (7021,012, 7077,770, 7132,823), stdev = 42,570
[info]   CI (99.9%): [6913,850, 7241,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   189,132 ±(99.9%) 4,341 MB/sec [Average]
[info]   (min, avg, max) = (187,630, 189,132, 190,579), stdev = 1,127
[info]   CI (99.9%): [184,791, 193,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056,059 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (42056,057, 42056,059, 42056,062), stdev = 0,003
[info]   CI (99.9%): [42056,050, 42056,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,614 ±(99.9%) 1078,873 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,614, 511,571), stdev = 280,180
[info]   CI (99.9%): [≈ 0, 1283,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45555,678 ±(99.9%) 240202,963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45555,678, 114146,898), stdev = 62379,947
[info]   CI (99.9%): [≈ 0, 285758,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,150 ±(99.9%) 1,293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,150, 0,751), stdev = 0,336
[info]   CI (99.9%): [≈ 0, 1,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67,00% complete, ETA 00:43:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7030,537 ops/s
[info] # Warmup Iteration   2: 7340,294 ops/s
[info] # Warmup Iteration   3: 7304,907 ops/s
[info] # Warmup Iteration   4: 7271,732 ops/s
[info] # Warmup Iteration   5: 7333,595 ops/s
[info] Iteration   1: 7287,750 ops/s
[info]                  ·gc.alloc.rate:      141,475 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7295,204 ops/s
[info]                  ·gc.alloc.rate:               141,616 MB/sec
[info]                  ·gc.alloc.rate.norm:          30552,056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110361,295 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 7326,783 ops/s
[info]                  ·gc.alloc.rate:      142,227 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7301,124 ops/s
[info]                  ·gc.alloc.rate:      141,733 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7316,085 ops/s
[info]                  ·gc.alloc.rate:      142,008 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7305,389 ±(99.9%) 61,041 ops/s [Average]
[info]   (min, avg, max) = (7287,750, 7305,389, 7326,783), stdev = 15,852
[info]   CI (99.9%): [7244,348, 7366,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   141,812 ±(99.9%) 1,170 MB/sec [Average]
[info]   (min, avg, max) = (141,475, 141,812, 142,227), stdev = 0,304
[info]   CI (99.9%): [140,642, 142,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552,061 ±(99.9%) 0,047 B/op [Average]
[info]   (min, avg, max) = (30552,056, 30552,061, 30552,083), stdev = 0,012
[info]   CI (99.9%): [30552,014, 30552,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102,310 ±(99.9%) 880,920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,310, 511,550), stdev = 228,772
[info]   CI (99.9%): [≈ 0, 983,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   22072,259 ±(99.9%) 190048,806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22072,259, 110361,295), stdev = 49355,071
[info]   CI (99.9%): [≈ 0, 212121,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67,20% complete, ETA 00:43:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7041,461 ops/s
[info] # Warmup Iteration   2: 9272,873 ops/s
[info] # Warmup Iteration   3: 9409,533 ops/s
[info] # Warmup Iteration   4: 9451,417 ops/s
[info] # Warmup Iteration   5: 9343,969 ops/s
[info] Iteration   1: 9366,453 ops/s
[info]                  ·gc.alloc.rate:                   2181,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     338836,999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9444,213 ops/s
[info]                  ·gc.alloc.rate:                   2199,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              366556,986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     336649,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,515 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9425,904 ops/s
[info]                  ·gc.alloc.rate:                   2195,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     337959,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,180 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9409,708 ops/s
[info]                  ·gc.alloc.rate:                   2191,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452270,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20,887 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9437,325 ops/s
[info]                  ·gc.alloc.rate:                   2197,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     338787,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,885 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   9416,721 ±(99.9%) 119,318 ops/s [Average]
[info]   (min, avg, max) = (9366,453, 9416,721, 9444,213), stdev = 30,987
[info]   CI (99.9%): [9297,403, 9536,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2193,078 ±(99.9%) 27,567 MB/sec [Average]
[info]   (min, avg, max) = (2181,372, 2193,078, 2199,643), stdev = 7,159
[info]   CI (99.9%): [2165,511, 2220,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366561,033 ±(99.9%) 40,950 B/op [Average]
[info]   (min, avg, max) = (366544,047, 366561,033, 366568,047), stdev = 10,635
[info]   CI (99.9%): [366520,083, 366601,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2159,122 ±(99.9%) 1173,512 MB/sec [Average]
[info]   (min, avg, max) = (2016,482, 2159,122, 2704,205), stdev = 304,757
[info]   CI (99.9%): [985,610, 3332,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   360900,898 ±(99.9%) 196708,633 B/op [Average]
[info]   (min, avg, max) = (336649,837, 360900,898, 452270,112), stdev = 51084,607
[info]   CI (99.9%): [164192,265, 557609,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,102 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (0,025, 0,102, 0,150), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17,132 ±(99.9%) 32,019 B/op [Average]
[info]   (min, avg, max) = (4,180, 17,132, 25,192), stdev = 8,315
[info]   CI (99.9%): [≈ 0, 49,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67,40% complete, ETA 00:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9065,147 ops/s
[info] # Warmup Iteration   2: 16912,268 ops/s
[info] # Warmup Iteration   3: 16763,059 ops/s
[info] # Warmup Iteration   4: 16809,930 ops/s
[info] # Warmup Iteration   5: 16966,782 ops/s
[info] Iteration   1: 16870,642 ops/s
[info]                  ·gc.alloc.rate:                   428,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              39952,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47721,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,942 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16870,233 ops/s
[info]                  ·gc.alloc.rate:               428,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47724,687 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16903,944 ops/s
[info]                  ·gc.alloc.rate:                   429,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              39952,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62757,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48,448 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 17032,872 ops/s
[info]                  ·gc.alloc.rate:      432,431 MB/sec
[info]                  ·gc.alloc.rate.norm: 39952,028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17059,734 ops/s
[info]                  ·gc.alloc.rate:                   432,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              39952,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62186,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,841 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   16947,485 ±(99.9%) 353,229 ops/s [Average]
[info]   (min, avg, max) = (16870,233, 16947,485, 17059,734), stdev = 91,733
[info]   CI (99.9%): [16594,256, 17300,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   430,216 ±(99.9%) 8,874 MB/sec [Average]
[info]   (min, avg, max) = (428,245, 430,216, 432,977), stdev = 2,305
[info]   CI (99.9%): [421,342, 439,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39952,027 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (39952,024, 39952,027, 39952,032), stdev = 0,003
[info]   CI (99.9%): [39952,015, 39952,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,235 ±(99.9%) 1067,644 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,235, 674,052), stdev = 277,264
[info]   CI (99.9%): [≈ 0, 1541,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44078,118 ±(99.9%) 99042,587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44078,118, 62757,047), stdev = 25721,045
[info]   CI (99.9%): [≈ 0, 143120,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,117 ±(99.9%) 0,872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,520), stdev = 0,226
[info]   CI (99.9%): [≈ 0, 0,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,846 ±(99.9%) 81,173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,846, 48,448), stdev = 21,080
[info]   CI (99.9%): [≈ 0, 92,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67,61% complete, ETA 00:42:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25064,914 ops/s
[info] # Warmup Iteration   2: 27818,242 ops/s
[info] # Warmup Iteration   3: 28223,846 ops/s
[info] # Warmup Iteration   4: 28218,352 ops/s
[info] # Warmup Iteration   5: 28169,655 ops/s
[info] Iteration   1: 28107,522 ops/s
[info]                  ·gc.alloc.rate:                   482,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28644,318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,726 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28209,941 ops/s
[info]                  ·gc.alloc.rate:               483,962 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28541,782 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 28219,020 ops/s
[info]                  ·gc.alloc.rate:                   484,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37632,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179,727 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 28240,197 ops/s
[info]                  ·gc.alloc.rate:      484,509 MB/sec
[info]                  ·gc.alloc.rate.norm: 27000,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28187,768 ops/s
[info]                  ·gc.alloc.rate:                   483,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37673,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,487 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   28192,890 ±(99.9%) 197,525 ops/s [Average]
[info]   (min, avg, max) = (28107,522, 28192,890, 28240,197), stdev = 51,297
[info]   CI (99.9%): [27995,365, 28390,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   483,657 ±(99.9%) 3,476 MB/sec [Average]
[info]   (min, avg, max) = (482,151, 483,657, 484,509), stdev = 0,903
[info]   CI (99.9%): [480,182, 487,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   27000,015 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (27000,014, 27000,015, 27000,017), stdev = 0,001
[info]   CI (99.9%): [27000,011, 27000,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,514 ±(99.9%) 1068,650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,514, 674,774), stdev = 277,525
[info]   CI (99.9%): [≈ 0, 1543,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26498,390 ±(99.9%) 59647,495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26498,390, 37673,612), stdev = 15490,265
[info]   CI (99.9%): [≈ 0, 86145,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,667 ±(99.9%) 5,502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,222), stdev = 1,429
[info]   CI (99.9%): [≈ 0, 6,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   37,188 ±(99.9%) 306,887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37,188, 179,727), stdev = 79,698
[info]   CI (99.9%): [≈ 0, 344,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67,81% complete, ETA 00:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1380,782 ops/s
[info] # Warmup Iteration   2: 2608,634 ops/s
[info] # Warmup Iteration   3: 2649,028 ops/s
[info] # Warmup Iteration   4: 2665,343 ops/s
[info] # Warmup Iteration   5: 2679,021 ops/s
[info] Iteration   1: 2669,116 ops/s
[info]                  ·gc.alloc.rate:               1695,339 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2027,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1195651,548 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 2678,063 ops/s
[info]                  ·gc.alloc.rate:               1701,127 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 795336,481 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2674,932 ops/s
[info]                  ·gc.alloc.rate:                   1699,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1195713,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61,226 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2678,122 ops/s
[info]                  ·gc.alloc.rate:                   1701,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796706,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48,926 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2674,464 ops/s
[info]                  ·gc.alloc.rate:               1698,845 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2034,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1197476,927 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2674,940 ±(99.9%) 14,151 ops/s [Average]
[info]   (min, avg, max) = (2669,116, 2674,940, 2678,122), stdev = 3,675
[info]   CI (99.9%): [2660,788, 2689,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1699,163 ±(99.9%) 9,281 MB/sec [Average]
[info]   (min, avg, max) = (1695,339, 1699,163, 1701,321), stdev = 2,410
[info]   CI (99.9%): [1689,882, 1708,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999760,155 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (999760,152, 999760,155, 999760,164), stdev = 0,005
[info]   CI (99.9%): [999760,134, 999760,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1760,727 ±(99.9%) 1427,858 MB/sec [Average]
[info]   (min, avg, max) = (1353,293, 1760,727, 2034,815), stdev = 370,810
[info]   CI (99.9%): [332,868, 3188,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1036176,996 ±(99.9%) 844187,393 B/op [Average]
[info]   (min, avg, max) = (795336,481, 1036176,996, 1197476,927), stdev = 219232,785
[info]   CI (99.9%): [191989,603, 1880364,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22,030 ±(99.9%) 117,360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22,030, 61,226), stdev = 30,478
[info]   CI (99.9%): [≈ 0, 139,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68,01% complete, ETA 00:42:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7641,083 ops/s
[info] # Warmup Iteration   2: 9047,194 ops/s
[info] # Warmup Iteration   3: 9052,854 ops/s
[info] # Warmup Iteration   4: 9008,975 ops/s
[info] # Warmup Iteration   5: 8907,235 ops/s
[info] Iteration   1: 9015,967 ops/s
[info]                  ·gc.alloc.rate:               1107,156 MB/sec
[info]                  ·gc.alloc.rate.norm:          193248,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234528,475 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 9016,634 ops/s
[info]                  ·gc.alloc.rate:               1107,190 MB/sec
[info]                  ·gc.alloc.rate.norm:          193248,737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117206,100 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8994,523 ops/s
[info]                  ·gc.alloc.rate:                   1104,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234959,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,642 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9006,948 ops/s
[info]                  ·gc.alloc.rate:               1106,060 MB/sec
[info]                  ·gc.alloc.rate.norm:          193272,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234762,770 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8990,957 ops/s
[info]                  ·gc.alloc.rate:               1104,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          193272,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117635,444 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   9005,006 ±(99.9%) 45,820 ops/s [Average]
[info]   (min, avg, max) = (8990,957, 9005,006, 9016,634), stdev = 11,899
[info]   CI (99.9%): [8959,186, 9050,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1105,752 ±(99.9%) 5,822 MB/sec [Average]
[info]   (min, avg, max) = (1104,020, 1105,752, 1107,190), stdev = 1,512
[info]   CI (99.9%): [1099,930, 1111,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   193262,584 ±(99.9%) 49,900 B/op [Average]
[info]   (min, avg, max) = (193248,045, 193262,584, 193272,049), stdev = 12,959
[info]   CI (99.9%): [193212,684, 193312,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1074,635 ±(99.9%) 1416,234 MB/sec [Average]
[info]   (min, avg, max) = (671,515, 1074,635, 1343,660), stdev = 367,791
[info]   CI (99.9%): [≈ 0, 2490,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   187818,427 ±(99.9%) 247459,062 B/op [Average]
[info]   (min, avg, max) = (117206,100, 187818,427, 234959,344), stdev = 64264,333
[info]   CI (99.9%): [≈ 0, 435277,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,728 ±(99.9%) 6,272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,728, 3,642), stdev = 1,629
[info]   CI (99.9%): [≈ 0, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68,21% complete, ETA 00:42:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6345,899 ops/s
[info] # Warmup Iteration   2: 8756,667 ops/s
[info] # Warmup Iteration   3: 8936,673 ops/s
[info] # Warmup Iteration   4: 8965,806 ops/s
[info] # Warmup Iteration   5: 8939,117 ops/s
[info] Iteration   1: 8949,664 ops/s
[info]                  ·gc.alloc.rate:                   1723,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              303112,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237428,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,321 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8926,703 ops/s
[info]                  ·gc.alloc.rate:                   1719,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              303112,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357570,523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,341 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8917,145 ops/s
[info]                  ·gc.alloc.rate:                   1717,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              303140,567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358401,607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8951,210 ops/s
[info]                  ·gc.alloc.rate:                   1724,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238312,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,660 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 8922,694 ops/s
[info]                  ·gc.alloc.rate:                   1718,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358924,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,029 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8933,483 ±(99.9%) 61,047 ops/s [Average]
[info]   (min, avg, max) = (8917,145, 8933,483, 8951,210), stdev = 15,854
[info]   CI (99.9%): [8872,436, 8994,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1720,445 ±(99.9%) 12,288 MB/sec [Average]
[info]   (min, avg, max) = (1717,330, 1720,445, 1724,174), stdev = 3,191
[info]   CI (99.9%): [1708,157, 1732,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   303127,351 ±(99.9%) 54,263 B/op [Average]
[info]   (min, avg, max) = (303112,046, 303127,351, 303140,567), stdev = 14,092
[info]   CI (99.9%): [303073,089, 303181,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1759,630 ±(99.9%) 1430,228 MB/sec [Average]
[info]   (min, avg, max) = (1350,060, 1759,630, 2034,217), stdev = 371,426
[info]   CI (99.9%): [329,403, 3189,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   310127,619 ±(99.9%) 254002,498 B/op [Average]
[info]   (min, avg, max) = (237428,904, 310127,619, 358924,334), stdev = 65963,642
[info]   CI (99.9%): [56125,122, 564130,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,125), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10,274 ±(99.9%) 27,216 B/op [Average]
[info]   (min, avg, max) = (3,660, 10,274, 22,029), stdev = 7,068
[info]   CI (99.9%): [≈ 0, 37,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68,41% complete, ETA 00:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16075,344 ops/s
[info] # Warmup Iteration   2: 57896,874 ops/s
[info] # Warmup Iteration   3: 58008,338 ops/s
[info] # Warmup Iteration   4: 57941,528 ops/s
[info] # Warmup Iteration   5: 58062,793 ops/s
[info] Iteration   1: 58419,496 ops/s
[info]                  ·gc.alloc.rate:                   546,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13781,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,195 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 58437,429 ops/s
[info]                  ·gc.alloc.rate:                   546,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18156,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 54150,842 ops/s
[info]                  ·gc.alloc.rate:               506,277 MB/sec
[info]                  ·gc.alloc.rate.norm:          14712,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19585,443 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 58433,939 ops/s
[info]                  ·gc.alloc.rate:      546,290 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 58393,034 ops/s
[info]                  ·gc.alloc.rate:                   545,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18114,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   57566,948 ±(99.9%) 7353,734 ops/s [Average]
[info]   (min, avg, max) = (54150,842, 57566,948, 58437,429), stdev = 1909,741
[info]   CI (99.9%): [50213,214, 64920,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   538,144 ±(99.9%) 68,600 MB/sec [Average]
[info]   (min, avg, max) = (506,277, 538,144, 546,290), stdev = 17,815
[info]   CI (99.9%): [469,544, 606,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712,008 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (14712,007, 14712,008, 14712,009), stdev = 0,001
[info]   CI (99.9%): [14712,005, 14712,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,344 ±(99.9%) 1122,858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,344, 674,163), stdev = 291,603
[info]   CI (99.9%): [≈ 0, 1629,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   13927,574 ±(99.9%) 31129,657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13927,574, 19585,443), stdev = 8084,273
[info]   CI (99.9%): [≈ 0, 45057,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,612 ±(99.9%) 5,165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,612, 3,011), stdev = 1,341
[info]   CI (99.9%): [≈ 0, 5,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   16,483 ±(99.9%) 139,102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,483, 81,099), stdev = 36,124
[info]   CI (99.9%): [≈ 0, 155,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68,61% complete, ETA 00:41:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_7fe6a5a1/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 28078,167 ops/s
[info] # Warmup Iteration   2: 43930,097 ops/s
[info] # Warmup Iteration   3: 44323,895 ops/s
[info] # Warmup Iteration   4: 44161,205 ops/s
[info] # Warmup Iteration   5: 44007,921 ops/s
[info] Iteration   1: 44257,084 ops/s
[info]                  ·gc.alloc.rate:                   658,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23972,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,887 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 44369,855 ops/s
[info]                  ·gc.alloc.rate:                   660,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23911,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,477 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 39231,733 ops/s
[info]                  ·gc.alloc.rate:               584,265 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27056,147 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 44121,168 ops/s
[info]                  ·gc.alloc.rate:               656,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24058,628 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 44205,545 ops/s
[info]                  ·gc.alloc.rate:                   658,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24022,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,741 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   43237,077 ±(99.9%) 8628,778 ops/s [Average]
[info]   (min, avg, max) = (39231,733, 43237,077, 44369,855), stdev = 2240,866
[info]   CI (99.9%): [34608,299, 51865,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   643,744 ±(99.9%) 128,135 MB/sec [Average]
[info]   (min, avg, max) = (584,265, 643,744, 660,589), stdev = 33,276
[info]   CI (99.9%): [515,609, 771,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431,824 ±(99.9%) 0,141 B/op [Average]
[info]   (min, avg, max) = (23431,775, 23431,824, 23431,860), stdev = 0,037
[info]   CI (99.9%): [23431,683, 23431,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,401 ±(99.9%) 1,031 MB/sec [Average]
[info]   (min, avg, max) = (674,103, 674,401, 674,636), stdev = 0,268
[info]   CI (99.9%): [673,370, 675,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24604,414 ±(99.9%) 5281,812 B/op [Average]
[info]   (min, avg, max) = (23911,824, 24604,414, 27056,147), stdev = 1371,670
[info]   CI (99.9%): [19322,602, 29886,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,169 ±(99.9%) 1,325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,169, 0,784), stdev = 0,344
[info]   CI (99.9%): [≈ 0, 1,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6,021 ±(99.9%) 47,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,021, 27,887), stdev = 12,239
[info]   CI (99.9%): [≈ 0, 53,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68,81% complete, ETA 00:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77890,917 ops/s
[info] # Warmup Iteration   2: 84842,529 ops/s
[info] # Warmup Iteration   3: 84360,900 ops/s
[info] # Warmup Iteration   4: 81627,897 ops/s
[info] # Warmup Iteration   5: 84403,319 ops/s
[info] Iteration   1: 84530,539 ops/s
[info]                  ·gc.alloc.rate:                   635,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12562,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60,330 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 83327,211 ops/s
[info]                  ·gc.alloc.rate:                   626,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12745,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,180 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 85032,447 ops/s
[info]                  ·gc.alloc.rate:               639,237 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12451,932 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 84625,747 ops/s
[info]                  ·gc.alloc.rate:      636,403 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 85096,097 ops/s
[info]                  ·gc.alloc.rate:                   639,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12443,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,385 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   84522,408 ±(99.9%) 2742,147 ops/s [Average]
[info]   (min, avg, max) = (83327,211, 84522,408, 85096,097), stdev = 712,127
[info]   CI (99.9%): [81780,261, 87264,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   635,467 ±(99.9%) 20,533 MB/sec [Average]
[info]   (min, avg, max) = (626,505, 635,467, 639,748), stdev = 5,332
[info]   CI (99.9%): [614,934, 656,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11832,005, 11832,005, 11832,006), stdev = 0,001
[info]   CI (99.9%): [11832,004, 11832,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,018 ±(99.9%) 1160,284 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,018, 674,873), stdev = 301,322
[info]   CI (99.9%): [≈ 0, 1699,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10040,696 ±(99.9%) 21618,448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10040,696, 12745,470), stdev = 5614,242
[info]   CI (99.9%): [≈ 0, 31659,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,665 ±(99.9%) 5,545 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,665, 3,240), stdev = 1,440
[info]   CI (99.9%): [≈ 0, 6,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12,379 ±(99.9%) 103,235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,379, 60,330), stdev = 26,810
[info]   CI (99.9%): [≈ 0, 115,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69,01% complete, ETA 00:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103928,695 ops/s
[info] # Warmup Iteration   2: 110355,928 ops/s
[info] # Warmup Iteration   3: 110185,109 ops/s
[info] # Warmup Iteration   4: 110399,666 ops/s
[info] # Warmup Iteration   5: 110237,397 ops/s
[info] Iteration   1: 110551,904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 110675,682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 110546,277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 110252,900 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 109805,133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   110366,379 ±(99.9%) 1348,172 ops/s [Average]
[info]   (min, avg, max) = (109805,133, 110366,379, 110675,682), stdev = 350,116
[info]   CI (99.9%): [109018,207, 111714,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,004, 0,004), stdev = 0,001
[info]   CI (99.9%): [0,004, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69,22% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3686,607 ops/s
[info] # Warmup Iteration   2: 6512,701 ops/s
[info] # Warmup Iteration   3: 6598,277 ops/s
[info] # Warmup Iteration   4: 6569,759 ops/s
[info] # Warmup Iteration   5: 6588,895 ops/s
[info] Iteration   1: 6573,701 ops/s
[info]                  ·gc.alloc.rate:                   2028,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              485720,597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486098,530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,983 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6595,401 ops/s
[info]                  ·gc.alloc.rate:                   2035,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              485719,691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485027,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,868 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6608,631 ops/s
[info]                  ·gc.alloc.rate:                   2039,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              485719,773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484555,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,957 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6564,550 ops/s
[info]                  ·gc.alloc.rate:                   2026,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              485720,156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488121,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,969 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6573,590 ops/s
[info]                  ·gc.alloc.rate:                   2028,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              485719,968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488006,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,984 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6583,174 ±(99.9%) 70,109 ops/s [Average]
[info]   (min, avg, max) = (6564,550, 6583,174, 6608,631), stdev = 18,207
[info]   CI (99.9%): [6513,066, 6653,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2031,608 ±(99.9%) 21,953 MB/sec [Average]
[info]   (min, avg, max) = (2026,072, 2031,608, 2039,542), stdev = 5,701
[info]   CI (99.9%): [2009,655, 2053,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   485720,037 ±(99.9%) 1,392 B/op [Average]
[info]   (min, avg, max) = (485719,691, 485720,037, 485720,597), stdev = 0,361
[info]   CI (99.9%): [485718,645, 485721,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2034,280 ±(99.9%) 11,110 MB/sec [Average]
[info]   (min, avg, max) = (2030,293, 2034,280, 2037,667), stdev = 2,885
[info]   CI (99.9%): [2023,169, 2045,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   486362,188 ±(99.9%) 6360,081 B/op [Average]
[info]   (min, avg, max) = (484555,995, 486362,188, 488121,948), stdev = 1651,693
[info]   CI (99.9%): [480002,107, 492722,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9,952 ±(99.9%) 27,081 B/op [Average]
[info]   (min, avg, max) = (4,957, 9,952, 19,868), stdev = 7,033
[info]   CI (99.9%): [≈ 0, 37,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69,42% complete, ETA 00:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4511,004 ops/s
[info] # Warmup Iteration   2: 4877,167 ops/s
[info] # Warmup Iteration   3: 4911,854 ops/s
[info] # Warmup Iteration   4: 4890,571 ops/s
[info] # Warmup Iteration   5: 4909,706 ops/s
[info] Iteration   1: 4892,102 ops/s
[info]                  ·gc.alloc.rate:               256,412 MB/sec
[info]                  ·gc.alloc.rate.norm:          82496,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164549,728 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 4925,938 ops/s
[info]                  ·gc.alloc.rate:      258,183 MB/sec
[info]                  ·gc.alloc.rate.norm: 82496,083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4899,919 ops/s
[info]                  ·gc.alloc.rate:                   256,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              82496,083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164281,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,257 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4900,890 ops/s
[info]                  ·gc.alloc.rate:      256,905 MB/sec
[info]                  ·gc.alloc.rate.norm: 82496,083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4892,299 ops/s
[info]                  ·gc.alloc.rate:               256,414 MB/sec
[info]                  ·gc.alloc.rate.norm:          82496,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164549,728 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4902,230 ±(99.9%) 53,439 ops/s [Average]
[info]   (min, avg, max) = (4892,102, 4902,230, 4925,938), stdev = 13,878
[info]   CI (99.9%): [4848,791, 4955,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   256,945 ±(99.9%) 2,802 MB/sec [Average]
[info]   (min, avg, max) = (256,412, 256,945, 258,183), stdev = 0,728
[info]   CI (99.9%): [254,144, 259,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   82496,086 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (82496,083, 82496,086, 82496,090), stdev = 0,004
[info]   CI (99.9%): [82496,071, 82496,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,863 ±(99.9%) 1078,665 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,863, 511,452), stdev = 280,126
[info]   CI (99.9%): [≈ 0, 1385,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   98676,128 ±(99.9%) 346860,751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98676,128, 164549,728), stdev = 90078,635
[info]   CI (99.9%): [≈ 0, 445536,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,451 ±(99.9%) 3,887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,451, 2,257), stdev = 1,009
[info]   CI (99.9%): [≈ 0, 4,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69,62% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4644109,941 ops/s
[info] # Warmup Iteration   2: 5729571,859 ops/s
[info] # Warmup Iteration   3: 5996918,329 ops/s
[info] # Warmup Iteration   4: 6027073,488 ops/s
[info] # Warmup Iteration   5: 6163749,514 ops/s
[info] Iteration   1: 6103613,264 ops/s
[info]                  ·gc.alloc.rate:                   3784,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4062,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 6162024,978 ops/s
[info]                  ·gc.alloc.rate:                   3821,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1039,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6108138,298 ops/s
[info]                  ·gc.alloc.rate:                   3787,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     875,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6120811,396 ops/s
[info]                  ·gc.alloc.rate:                   3795,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1049,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6150081,072 ops/s
[info]                  ·gc.alloc.rate:                   3813,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     871,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6128933,802 ±(99.9%) 99704,710 ops/s [Average]
[info]   (min, avg, max) = (6103613,264, 6128933,802, 6162024,978), stdev = 25892,996
[info]   CI (99.9%): [6029229,092, 6228638,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3800,560 ±(99.9%) 61,887 MB/sec [Average]
[info]   (min, avg, max) = (3784,909, 3800,560, 3821,402), stdev = 16,072
[info]   CI (99.9%): [3738,673, 3862,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3803,606 ±(99.9%) 1416,679 MB/sec [Average]
[info]   (min, avg, max) = (3398,162, 3803,606, 4082,396), stdev = 367,907
[info]   CI (99.9%): [2386,927, 5220,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   976,792 ±(99.9%) 363,937 B/op [Average]
[info]   (min, avg, max) = (871,039, 976,792, 1049,725), stdev = 94,513
[info]   CI (99.9%): [612,855, 1340,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,019, 0,027), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69,82% complete, ETA 00:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5696049,697 ops/s
[info] # Warmup Iteration   2: 44468935,009 ops/s
[info] # Warmup Iteration   3: 47244585,854 ops/s
[info] # Warmup Iteration   4: 47350534,108 ops/s
[info] # Warmup Iteration   5: 47372332,382 ops/s
[info] Iteration   1: 47223107,691 ops/s
[info]                  ·gc.alloc.rate:                   480,067 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 47292710,126 ops/s
[info]                  ·gc.alloc.rate:               480,815 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17,026 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 47295478,517 ops/s
[info]                  ·gc.alloc.rate:                   480,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 47149815,207 ops/s
[info]                  ·gc.alloc.rate:                   479,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45037995,885 ops/s
[info]                  ·gc.alloc.rate:      457,825 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   46799821,485 ±(99.9%) 3799432,223 ops/s [Average]
[info]   (min, avg, max) = (45037995,885, 46799821,485, 47295478,517), stdev = 986700,483
[info]   CI (99.9%): [43000389,262, 50599253,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   475,780 ±(99.9%) 38,718 MB/sec [Average]
[info]   (min, avg, max) = (457,825, 475,780, 480,815), stdev = 10,055
[info]   CI (99.9%): [437,062, 514,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   474,154 ±(99.9%) 1067,360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,154, 673,839), stdev = 277,190
[info]   CI (99.9%): [≈ 0, 1541,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15,797 ±(99.9%) 35,569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15,797, 22,490), stdev = 9,237
[info]   CI (99.9%): [≈ 0, 51,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,536 ±(99.9%) 4,527 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,536, 2,639), stdev = 1,176
[info]   CI (99.9%): [≈ 0, 5,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,088), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70,02% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5178389,969 ops/s
[info] # Warmup Iteration   2: 9606854,433 ops/s
[info] # Warmup Iteration   3: 9651565,246 ops/s
[info] # Warmup Iteration   4: 9649173,524 ops/s
[info] # Warmup Iteration   5: 9675469,160 ops/s
[info] Iteration   1: 9657838,507 ops/s
[info]                  ·gc.alloc.rate:                   3632,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4072,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     663,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 9709186,660 ops/s
[info]                  ·gc.alloc.rate:                   3651,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9660800,306 ops/s
[info]                  ·gc.alloc.rate:                   3633,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9614522,325 ops/s
[info]                  ·gc.alloc.rate:                   3616,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     668,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9674708,510 ops/s
[info]                  ·gc.alloc.rate:                   3638,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9663411,262 ±(99.9%) 131303,792 ops/s [Average]
[info]   (min, avg, max) = (9614522,325, 9663411,262, 9709186,660), stdev = 34099,178
[info]   CI (99.9%): [9532107,470, 9794715,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3634,555 ±(99.9%) 48,728 MB/sec [Average]
[info]   (min, avg, max) = (3616,574, 3634,555, 3651,800), stdev = 12,654
[info]   CI (99.9%): [3585,827, 3683,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (592,000, 592,000, 592,000), stdev = 0,001
[info]   CI (99.9%): [592,000, 592,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3673,031 ±(99.9%) 1426,264 MB/sec [Average]
[info]   (min, avg, max) = (3399,013, 3673,031, 4084,732), stdev = 370,396
[info]   CI (99.9%): [2246,767, 5099,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   598,396 ±(99.9%) 238,487 B/op [Average]
[info]   (min, avg, max) = (551,020, 598,396, 668,633), stdev = 61,934
[info]   CI (99.9%): [359,909, 836,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,010, 0,014), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70,22% complete, ETA 00:39:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46381865,918 ops/s
[info] # Warmup Iteration   2: 56573837,322 ops/s
[info] # Warmup Iteration   3: 45588192,227 ops/s
[info] # Warmup Iteration   4: 56768830,707 ops/s
[info] # Warmup Iteration   5: 56779585,435 ops/s
[info] Iteration   1: 56797899,829 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 57013328,171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56930978,815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56917776,908 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 56871239,601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   56906244,665 ±(99.9%) 305487,421 ops/s [Average]
[info]   (min, avg, max) = (56797899,829, 56906244,665, 57013328,171), stdev = 79334,113
[info]   CI (99.9%): [56600757,244, 57211732,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70,42% complete, ETA 00:39:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38182084,768 ops/s
[info] # Warmup Iteration   2: 45886122,736 ops/s
[info] # Warmup Iteration   3: 47157320,850 ops/s
[info] # Warmup Iteration   4: 47396126,930 ops/s
[info] # Warmup Iteration   5: 47377980,546 ops/s
[info] Iteration   1: 47267529,119 ops/s
[info]                  ·gc.alloc.rate:                   1681,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 47440181,919 ops/s
[info]                  ·gc.alloc.rate:                   1688,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 44427950,438 ops/s
[info]                  ·gc.alloc.rate:                   1581,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 47582300,790 ops/s
[info]                  ·gc.alloc.rate:                   1693,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 47391008,982 ops/s
[info]                  ·gc.alloc.rate:               1686,032 MB/sec
[info]                  ·gc.alloc.rate.norm:          56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44,850 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   46821794,250 ±(99.9%) 5171182,078 ops/s [Average]
[info]   (min, avg, max) = (44427950,438, 46821794,250, 47582300,790), stdev = 1342939,564
[info]   CI (99.9%): [41650612,171, 51992976,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1666,076 ±(99.9%) 183,454 MB/sec [Average]
[info]   (min, avg, max) = (1581,170, 1666,076, 1693,235), stdev = 47,642
[info]   CI (99.9%): [1482,622, 1849,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56,000, 56,000, 56,000), stdev = 0,001
[info]   CI (99.9%): [56,000, 56,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1616,673 ±(99.9%) 1418,070 MB/sec [Average]
[info]   (min, avg, max) = (1345,730, 1616,673, 2023,302), stdev = 368,268
[info]   CI (99.9%): [198,603, 3034,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   54,255 ±(99.9%) 45,171 B/op [Average]
[info]   (min, avg, max) = (44,641, 54,255, 67,156), stdev = 11,731
[info]   CI (99.9%): [9,084, 99,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70,62% complete, ETA 00:38:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5789876,700 ops/s
[info] # Warmup Iteration   2: 8843618,985 ops/s
[info] # Warmup Iteration   3: 9062644,748 ops/s
[info] # Warmup Iteration   4: 9028662,179 ops/s
[info] # Warmup Iteration   5: 9058489,392 ops/s
[info] Iteration   1: 9055208,284 ops/s
[info]                  ·gc.alloc.rate:                   4004,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4060,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     705,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8972106,553 ops/s
[info]                  ·gc.alloc.rate:                   3967,650 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     595,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9050735,684 ops/s
[info]                  ·gc.alloc.rate:                   4002,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4077,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709,107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9030566,902 ops/s
[info]                  ·gc.alloc.rate:                   3993,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 9044487,292 ops/s
[info]                  ·gc.alloc.rate:                   3999,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     710,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9030620,943 ±(99.9%) 130941,039 ops/s [Average]
[info]   (min, avg, max) = (8972106,553, 9030620,943, 9055208,284), stdev = 34004,972
[info]   CI (99.9%): [8899679,904, 9161561,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3993,481 ±(99.9%) 57,696 MB/sec [Average]
[info]   (min, avg, max) = (3967,650, 3993,481, 4004,367), stdev = 14,983
[info]   CI (99.9%): [3935,785, 4051,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   696,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (696,000, 696,000, 696,000), stdev = 0,001
[info]   CI (99.9%): [696,000, 696,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3939,365 ±(99.9%) 1178,759 MB/sec [Average]
[info]   (min, avg, max) = (3392,020, 3939,365, 4084,063), stdev = 306,120
[info]   CI (99.9%): [2760,607, 5118,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   686,422 ±(99.9%) 196,926 B/op [Average]
[info]   (min, avg, max) = (595,024, 686,422, 711,490), stdev = 51,141
[info]   CI (99.9%): [489,496, 883,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,001 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,083, 0,083), stdev = 0,001
[info]   CI (99.9%): [0,083, 0,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,014, 0,015, 0,015), stdev = 0,001
[info]   CI (99.9%): [0,014, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70,82% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9147704,439 ops/s
[info] # Warmup Iteration   2: 11444168,029 ops/s
[info] # Warmup Iteration   3: 11468399,000 ops/s
[info] # Warmup Iteration   4: 11497675,124 ops/s
[info] # Warmup Iteration   5: 11553353,346 ops/s
[info] Iteration   1: 11463207,851 ops/s
[info]                  ·gc.alloc.rate:                   4836,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     652,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11460617,998 ops/s
[info]                  ·gc.alloc.rate:                   4835,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4763,263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     654,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 11533328,440 ops/s
[info]                  ·gc.alloc.rate:                   4865,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4765,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 11527293,985 ops/s
[info]                  ·gc.alloc.rate:                   4863,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 11560548,665 ops/s
[info]                  ·gc.alloc.rate:                   4876,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   11508999,388 ±(99.9%) 172437,781 ops/s [Average]
[info]   (min, avg, max) = (11460617,998, 11508999,388, 11560548,665), stdev = 44781,544
[info]   CI (99.9%): [11336561,607, 11681437,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4855,492 ±(99.9%) 71,686 MB/sec [Average]
[info]   (min, avg, max) = (4835,518, 4855,492, 4876,666), stdev = 18,617
[info]   CI (99.9%): [4783,806, 4927,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   664,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (664,000, 664,000, 664,000), stdev = 0,001
[info]   CI (99.9%): [664,000, 664,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4764,819 ±(99.9%) 21,671 MB/sec [Average]
[info]   (min, avg, max) = (4756,046, 4764,819, 4770,072), stdev = 5,628
[info]   CI (99.9%): [4743,147, 4786,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   651,606 ±(99.9%) 7,402 B/op [Average]
[info]   (min, avg, max) = (649,368, 651,606, 654,078), stdev = 1,922
[info]   CI (99.9%): [644,204, 659,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,015
[info]   CI (99.9%): [0,027, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (0,009, 0,011, 0,014), stdev = 0,002
[info]   CI (99.9%): [0,004, 0,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71,03% complete, ETA 00:38:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16124451,517 ops/s
[info] # Warmup Iteration   2: 22768449,264 ops/s
[info] # Warmup Iteration   3: 22631189,353 ops/s
[info] # Warmup Iteration   4: 22627640,958 ops/s
[info] # Warmup Iteration   5: 22780783,896 ops/s
[info] Iteration   1: 22317288,605 ops/s
[info]                  ·gc.alloc.rate:                   2495,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 22462197,176 ops/s
[info]                  ·gc.alloc.rate:                   2512,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     189,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 22287650,123 ops/s
[info]                  ·gc.alloc.rate:                   2492,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 22294868,834 ops/s
[info]                  ·gc.alloc.rate:                   2493,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 22431170,714 ops/s
[info]                  ·gc.alloc.rate:                   2507,650 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22358635,090 ±(99.9%) 315194,995 ops/s [Average]
[info]   (min, avg, max) = (22287650,123, 22358635,090, 22462197,176), stdev = 81855,139
[info]   CI (99.9%): [22043440,096, 22673830,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2500,228 ±(99.9%) 34,723 MB/sec [Average]
[info]   (min, avg, max) = (2492,293, 2500,228, 2512,059), stdev = 9,017
[info]   CI (99.9%): [2465,505, 2534,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2433,608 ±(99.9%) 1433,383 MB/sec [Average]
[info]   (min, avg, max) = (2019,766, 2433,608, 2712,497), stdev = 372,245
[info]   CI (99.9%): [1000,225, 3866,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   171,269 ±(99.9%) 99,645 B/op [Average]
[info]   (min, avg, max) = (142,429, 171,269, 190,968), stdev = 25,877
[info]   CI (99.9%): [71,624, 270,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,003, 0,004), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71,23% complete, ETA 00:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8143221,026 ops/s
[info] # Warmup Iteration   2: 58939046,608 ops/s
[info] # Warmup Iteration   3: 63007436,099 ops/s
[info] # Warmup Iteration   4: 63806641,684 ops/s
[info] # Warmup Iteration   5: 59815339,406 ops/s
[info] Iteration   1: 59633481,631 ops/s
[info]                  ·gc.alloc.rate:                   1818,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 63284586,333 ops/s
[info]                  ·gc.alloc.rate:                   1930,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 63704127,526 ops/s
[info]                  ·gc.alloc.rate:                   1942,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 63576507,350 ops/s
[info]                  ·gc.alloc.rate:                   1939,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 63701919,411 ops/s
[info]                  ·gc.alloc.rate:                   1942,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   62780124,450 ±(99.9%) 6805286,324 ops/s [Average]
[info]   (min, avg, max) = (59633481,631, 62780124,450, 63704127,526), stdev = 1767311,247
[info]   CI (99.9%): [55974838,127, 69585410,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1914,701 ±(99.9%) 207,758 MB/sec [Average]
[info]   (min, avg, max) = (1818,629, 1914,701, 1942,868), stdev = 53,954
[info]   CI (99.9%): [1706,944, 2122,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   2022,837 ±(99.9%) 17,815 MB/sec [Average]
[info]   (min, avg, max) = (2016,937, 2022,837, 2028,487), stdev = 4,626
[info]   CI (99.9%): [2005,023, 2040,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   50,742 ±(99.9%) 5,376 B/op [Average]
[info]   (min, avg, max) = (49,970, 50,742, 53,234), stdev = 1,396
[info]   CI (99.9%): [45,366, 56,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,146), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,004), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71,43% complete, ETA 00:37:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5649213,837 ops/s
[info] # Warmup Iteration   2: 15556886,831 ops/s
[info] # Warmup Iteration   3: 15659550,111 ops/s
[info] # Warmup Iteration   4: 15641892,225 ops/s
[info] # Warmup Iteration   5: 15270770,348 ops/s
[info] Iteration   1: 15553305,808 ops/s
[info]                  ·gc.alloc.rate:                   3083,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     343,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 15518958,412 ops/s
[info]                  ·gc.alloc.rate:                   3076,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 15226375,505 ops/s
[info]                  ·gc.alloc.rate:                   3018,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 15198355,898 ops/s
[info]                  ·gc.alloc.rate:                   3012,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15403730,948 ops/s
[info]                  ·gc.alloc.rate:                   3053,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   15380145,314 ±(99.9%) 628323,333 ops/s [Average]
[info]   (min, avg, max) = (15198355,898, 15380145,314, 15553305,808), stdev = 163173,574
[info]   CI (99.9%): [14751821,982, 16008468,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   3048,753 ±(99.9%) 124,385 MB/sec [Average]
[info]   (min, avg, max) = (3012,885, 3048,753, 3083,185), stdev = 32,302
[info]   CI (99.9%): [2924,367, 3173,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (312,000, 312,000, 312,000), stdev = 0,001
[info]   CI (99.9%): [312,000, 312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2992,293 ±(99.9%) 1428,382 MB/sec [Average]
[info]   (min, avg, max) = (2718,841, 2992,293, 3401,654), stdev = 370,946
[info]   CI (99.9%): [1563,911, 4420,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   306,234 ±(99.9%) 146,143 B/op [Average]
[info]   (min, avg, max) = (275,756, 306,234, 351,630), stdev = 37,953
[info]   CI (99.9%): [160,092, 452,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,005, 0,008), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71,63% complete, ETA 00:37:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37346534,831 ops/s
[info] # Warmup Iteration   2: 49141532,551 ops/s
[info] # Warmup Iteration   3: 49325857,581 ops/s
[info] # Warmup Iteration   4: 49032033,374 ops/s
[info] # Warmup Iteration   5: 49457916,095 ops/s
[info] Iteration   1: 49562939,977 ops/s
[info]                  ·gc.alloc.rate:                   1007,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 49626093,142 ops/s
[info]                  ·gc.alloc.rate:               1008,971 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21,315 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 49571000,622 ops/s
[info]                  ·gc.alloc.rate:                   1007,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47071637,523 ops/s
[info]                  ·gc.alloc.rate:               957,362 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22,472 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 49580279,925 ops/s
[info]                  ·gc.alloc.rate:                   1008,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   49082390,238 ±(99.9%) 4329321,639 ops/s [Average]
[info]   (min, avg, max) = (47071637,523, 49082390,238, 49626093,142), stdev = 1124311,081
[info]   CI (99.9%): [44753068,599, 53411711,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   997,990 ±(99.9%) 87,476 MB/sec [Average]
[info]   (min, avg, max) = (957,362, 997,990, 1008,971), stdev = 22,717
[info]   CI (99.9%): [910,514, 1085,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,000, 32,000, 32,000), stdev = 0,001
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,648 ±(99.9%) 1418,204 MB/sec [Average]
[info]   (min, avg, max) = (672,085, 1075,648, 1345,454), stdev = 368,303
[info]   CI (99.9%): [≈ 0, 2493,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   34,372 ±(99.9%) 43,893 B/op [Average]
[info]   (min, avg, max) = (21,315, 34,372, 42,726), stdev = 11,399
[info]   CI (99.9%): [≈ 0, 78,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71,83% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39669263,465 ops/s
[info] # Warmup Iteration   2: 49611820,962 ops/s
[info] # Warmup Iteration   3: 53934158,101 ops/s
[info] # Warmup Iteration   4: 54067343,163 ops/s
[info] # Warmup Iteration   5: 53941679,988 ops/s
[info] Iteration   1: 54103475,798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 54151775,269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 53928225,508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 54077624,087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 53996447,755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   54051509,683 ±(99.9%) 342612,278 ops/s [Average]
[info]   (min, avg, max) = (53928225,508, 54051509,683, 54151775,269), stdev = 88975,320
[info]   CI (99.9%): [53708897,406, 54394121,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72,03% complete, ETA 00:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48388238,941 ops/s
[info] # Warmup Iteration   2: 43687772,216 ops/s
[info] # Warmup Iteration   3: 43594468,777 ops/s
[info] # Warmup Iteration   4: 44597625,621 ops/s
[info] # Warmup Iteration   5: 44661766,971 ops/s
[info] Iteration   1: 44462754,277 ops/s
[info]                  ·gc.alloc.rate:                   2260,028 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44700342,002 ops/s
[info]                  ·gc.alloc.rate:                   2272,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 44898650,676 ops/s
[info]                  ·gc.alloc.rate:                   2281,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44790200,517 ops/s
[info]                  ·gc.alloc.rate:                   2276,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44762694,444 ops/s
[info]                  ·gc.alloc.rate:                   2275,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   44722928,383 ±(99.9%) 624427,696 ops/s [Average]
[info]   (min, avg, max) = (44462754,277, 44722928,383, 44898650,676), stdev = 162161,890
[info]   CI (99.9%): [44098500,687, 45347356,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2273,228 ±(99.9%) 31,456 MB/sec [Average]
[info]   (min, avg, max) = (2260,028, 2273,228, 2281,948), stdev = 8,169
[info]   CI (99.9%): [2241,771, 2304,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2299,112 ±(99.9%) 1428,028 MB/sec [Average]
[info]   (min, avg, max) = (2021,937, 2299,112, 2709,747), stdev = 370,854
[info]   CI (99.9%): [871,084, 3727,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   80,906 ±(99.9%) 50,076 B/op [Average]
[info]   (min, avg, max) = (71,109, 80,906, 95,213), stdev = 13,005
[info]   CI (99.9%): [30,829, 130,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72,23% complete, ETA 00:36:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2117956,476 ops/s
[info] # Warmup Iteration   2: 2798238,899 ops/s
[info] # Warmup Iteration   3: 2831125,812 ops/s
[info] # Warmup Iteration   4: 2834112,748 ops/s
[info] # Warmup Iteration   5: 2827166,716 ops/s
[info] Iteration   1: 2827420,925 ops/s
[info]                  ·gc.alloc.rate:                   2313,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1495,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2843133,654 ops/s
[info]                  ·gc.alloc.rate:                   2326,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1118,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2835632,251 ops/s
[info]                  ·gc.alloc.rate:                   2320,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1498,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2836196,210 ops/s
[info]                  ·gc.alloc.rate:               2321,050 MB/sec
[info]                  ·gc.alloc.rate.norm:          1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028,881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1125,870 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 2829584,152 ops/s
[info]                  ·gc.alloc.rate:                   2315,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1507,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2834393,438 ±(99.9%) 23808,782 ops/s [Average]
[info]   (min, avg, max) = (2827420,925, 2834393,438, 2843133,654), stdev = 6183,065
[info]   CI (99.9%): [2810584,656, 2858202,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2319,470 ±(99.9%) 19,998 MB/sec [Average]
[info]   (min, avg, max) = (2313,844, 2319,470, 2326,843), stdev = 5,194
[info]   CI (99.9%): [2299,472, 2339,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1288,000, 1288,000, 1288,000), stdev = 0,001
[info]   CI (99.9%): [1288,000, 1288,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2428,963 ±(99.9%) 1421,422 MB/sec [Average]
[info]   (min, avg, max) = (2020,504, 2428,963, 2709,089), stdev = 369,139
[info]   CI (99.9%): [1007,541, 3850,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1349,096 ±(99.9%) 797,977 B/op [Average]
[info]   (min, avg, max) = (1118,429, 1349,096, 1507,145), stdev = 207,232
[info]   CI (99.9%): [551,119, 2147,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,035), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72,43% complete, ETA 00:36:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10617713,480 ops/s
[info] # Warmup Iteration   2: 12982878,197 ops/s
[info] # Warmup Iteration   3: 13550643,598 ops/s
[info] # Warmup Iteration   4: 13463800,041 ops/s
[info] # Warmup Iteration   5: 13387956,456 ops/s
[info] Iteration   1: 13494771,611 ops/s
[info]                  ·gc.alloc.rate:                   2606,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13454932,715 ops/s
[info]                  ·gc.alloc.rate:                   2598,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 13410409,034 ops/s
[info]                  ·gc.alloc.rate:                   2590,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13532737,075 ops/s
[info]                  ·gc.alloc.rate:                   2614,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 13365403,904 ops/s
[info]                  ·gc.alloc.rate:                   2581,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     319,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   13451650,868 ±(99.9%) 255310,829 ops/s [Average]
[info]   (min, avg, max) = (13365403,904, 13451650,868, 13532737,075), stdev = 66303,411
[info]   CI (99.9%): [13196340,039, 13706961,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2598,159 ±(99.9%) 49,741 MB/sec [Average]
[info]   (min, avg, max) = (2581,286, 2598,159, 2614,017), stdev = 12,918
[info]   CI (99.9%): [2548,419, 2647,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2706,364 ±(99.9%) 29,572 MB/sec [Average]
[info]   (min, avg, max) = (2696,136, 2706,364, 2714,981), stdev = 7,680
[info]   CI (99.9%): [2676,792, 2735,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   316,668 ±(99.9%) 8,018 B/op [Average]
[info]   (min, avg, max) = (314,466, 316,668, 319,745), stdev = 2,082
[info]   CI (99.9%): [308,650, 324,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,006, 0,007), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72,64% complete, ETA 00:36:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166232,412 ops/s
[info] # Warmup Iteration   2: 183396,138 ops/s
[info] # Warmup Iteration   3: 183840,445 ops/s
[info] # Warmup Iteration   4: 184207,084 ops/s
[info] # Warmup Iteration   5: 183676,679 ops/s
[info] Iteration   1: 183911,770 ops/s
[info]                  ·gc.alloc.rate:                   3373,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28950,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,534 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 183661,151 ops/s
[info]                  ·gc.alloc.rate:                   3368,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29053,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 183812,643 ops/s
[info]                  ·gc.alloc.rate:                   3372,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29077,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,713 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 183510,393 ops/s
[info]                  ·gc.alloc.rate:                   3366,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29157,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 181837,971 ops/s
[info]                  ·gc.alloc.rate:                   3335,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23561,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,360 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   183346,786 ±(99.9%) 3300,311 ops/s [Average]
[info]   (min, avg, max) = (181837,971, 183346,786, 183911,770), stdev = 857,080
[info]   CI (99.9%): [180046,475, 186647,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3363,289 ±(99.9%) 61,072 MB/sec [Average]
[info]   (min, avg, max) = (3335,389, 3363,289, 3373,786), stdev = 15,860
[info]   CI (99.9%): [3302,218, 3424,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28872,002, 28872,002, 28872,002), stdev = 0,001
[info]   CI (99.9%): [28872,002, 28872,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3258,145 ±(99.9%) 1154,468 MB/sec [Average]
[info]   (min, avg, max) = (2721,947, 3258,145, 3399,724), stdev = 299,812
[info]   CI (99.9%): [2103,676, 4412,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27960,314 ±(99.9%) 9472,213 B/op [Average]
[info]   (min, avg, max) = (23561,886, 27960,314, 29157,579), stdev = 2459,904
[info]   CI (99.9%): [18488,101, 37432,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,464 ±(99.9%) 0,780 B/op [Average]
[info]   (min, avg, max) = (0,179, 0,464, 0,713), stdev = 0,203
[info]   CI (99.9%): [≈ 0, 1,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72,84% complete, ETA 00:36:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12099,725 ops/s
[info] # Warmup Iteration   2: 28345,562 ops/s
[info] # Warmup Iteration   3: 28711,272 ops/s
[info] # Warmup Iteration   4: 28692,973 ops/s
[info] # Warmup Iteration   5: 28612,361 ops/s
[info] Iteration   1: 28725,947 ops/s
[info]                  ·gc.alloc.rate:                   2233,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148456,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,281 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28556,147 ops/s
[info]                  ·gc.alloc.rate:                   2219,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112159,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,442 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 28760,369 ops/s
[info]                  ·gc.alloc.rate:                   2235,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111425,780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,278 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 28647,630 ops/s
[info]                  ·gc.alloc.rate:                   2227,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     149305,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,431 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28654,509 ops/s
[info]                  ·gc.alloc.rate:               2227,350 MB/sec
[info]                  ·gc.alloc.rate.norm:          122352,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2040,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112061,278 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   28668,921 ±(99.9%) 304,381 ops/s [Average]
[info]   (min, avg, max) = (28556,147, 28668,921, 28760,369), stdev = 79,047
[info]   CI (99.9%): [28364,539, 28973,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2228,695 ±(99.9%) 23,631 MB/sec [Average]
[info]   (min, avg, max) = (2219,962, 2228,695, 2235,831), stdev = 6,137
[info]   CI (99.9%): [2205,064, 2252,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122352,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (122352,014, 122352,014, 122352,015), stdev = 0,001
[info]   CI (99.9%): [122352,013, 122352,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2307,728 ±(99.9%) 1427,151 MB/sec [Average]
[info]   (min, avg, max) = (2035,036, 2307,728, 2717,862), stdev = 370,627
[info]   CI (99.9%): [880,577, 3734,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   126681,775 ±(99.9%) 78049,298 B/op [Average]
[info]   (min, avg, max) = (111425,780, 126681,775, 149305,161), stdev = 20269,155
[info]   CI (99.9%): [48632,477, 204731,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,286 ±(99.9%) 5,402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,286, 3,442), stdev = 1,403
[info]   CI (99.9%): [≈ 0, 7,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,04% complete, ETA 00:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108753,935 ops/s
[info] # Warmup Iteration   2: 167181,575 ops/s
[info] # Warmup Iteration   3: 167639,798 ops/s
[info] # Warmup Iteration   4: 167134,775 ops/s
[info] # Warmup Iteration   5: 166787,011 ops/s
[info] Iteration   1: 167089,355 ops/s
[info]                  ·gc.alloc.rate:                   1553,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12742,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,392 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 167632,360 ops/s
[info]                  ·gc.alloc.rate:                   1558,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12714,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,782 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 167454,931 ops/s
[info]                  ·gc.alloc.rate:                   1556,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12736,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 151177,242 ops/s
[info]                  ·gc.alloc.rate:                   1405,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21174,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,217 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 166768,685 ops/s
[info]                  ·gc.alloc.rate:                   1550,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12810,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,196 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   164024,515 ±(99.9%) 27684,525 ops/s [Average]
[info]   (min, avg, max) = (151177,242, 164024,515, 167632,360), stdev = 7189,583
[info]   CI (99.9%): [136339,989, 191709,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1524,921 ±(99.9%) 257,039 MB/sec [Average]
[info]   (min, avg, max) = (1405,648, 1524,921, 1558,596), stdev = 66,752
[info]   CI (99.9%): [1267,882, 1781,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14632,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14632,002, 14632,003, 14632,003), stdev = 0,001
[info]   CI (99.9%): [14632,002, 14632,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,736 ±(99.9%) 1169,712 MB/sec [Average]
[info]   (min, avg, max) = (1352,744, 1490,736, 2034,129), stdev = 303,771
[info]   CI (99.9%): [321,024, 2660,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14435,810 ±(99.9%) 14505,431 B/op [Average]
[info]   (min, avg, max) = (12714,826, 14435,810, 21174,143), stdev = 3767,014
[info]   CI (99.9%): [≈ 0, 28941,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,396 ±(99.9%) 0,905 B/op [Average]
[info]   (min, avg, max) = (0,196, 0,396, 0,782), stdev = 0,235
[info]   CI (99.9%): [≈ 0, 1,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,24% complete, ETA 00:35:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 516818,982 ops/s
[info] # Warmup Iteration   2: 558792,514 ops/s
[info] # Warmup Iteration   3: 558710,697 ops/s
[info] # Warmup Iteration   4: 560485,296 ops/s
[info] # Warmup Iteration   5: 560245,415 ops/s
[info] Iteration   1: 553879,258 ops/s
[info]                  ·gc.alloc.rate:               1145,646 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1909,737 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 560895,813 ops/s
[info]                  ·gc.alloc.rate:                   1160,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3772,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 560814,592 ops/s
[info]                  ·gc.alloc.rate:                   1160,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3772,670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 561428,381 ops/s
[info]                  ·gc.alloc.rate:               1161,465 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1884,121 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 560251,971 ops/s
[info]                  ·gc.alloc.rate:                   1159,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3779,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   559454,003 ±(99.9%) 12107,002 ops/s [Average]
[info]   (min, avg, max) = (553879,258, 559454,003, 561428,381), stdev = 3144,150
[info]   CI (99.9%): [547347,001, 571561,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1157,310 ±(99.9%) 25,314 MB/sec [Average]
[info]   (min, avg, max) = (1145,646, 1157,310, 1161,465), stdev = 6,574
[info]   CI (99.9%): [1131,996, 1182,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3256,001, 3256,001, 3256,001), stdev = 0,001
[info]   CI (99.9%): [3256,001, 3256,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,588 ±(99.9%) 1418,586 MB/sec [Average]
[info]   (min, avg, max) = (671,954, 1075,588, 1345,582), stdev = 368,402
[info]   CI (99.9%): [≈ 0, 2494,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3023,684 ±(99.9%) 3960,872 B/op [Average]
[info]   (min, avg, max) = (1884,121, 3023,684, 3779,778), stdev = 1028,626
[info]   CI (99.9%): [≈ 0, 6984,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,082 ±(99.9%) 0,341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,082, 0,175), stdev = 0,089
[info]   CI (99.9%): [≈ 0, 0,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73,44% complete, ETA 00:35:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527965,154 ops/s
[info] # Warmup Iteration   2: 584186,377 ops/s
[info] # Warmup Iteration   3: 586303,971 ops/s
[info] # Warmup Iteration   4: 584263,601 ops/s
[info] # Warmup Iteration   5: 583555,125 ops/s
[info] Iteration   1: 583444,856 ops/s
[info]                  ·gc.alloc.rate:                   569,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1379,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 585799,938 ops/s
[info]                  ·gc.alloc.rate:                   571,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1812,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,441 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 586645,025 ops/s
[info]                  ·gc.alloc.rate:                   572,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1810,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 586076,673 ops/s
[info]                  ·gc.alloc.rate:                   572,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1806,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 481643,004 ops/s
[info]                  ·gc.alloc.rate:      470,101 MB/sec
[info]                  ·gc.alloc.rate.norm: 1536,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   564721,899 ±(99.9%) 178895,312 ops/s [Average]
[info]   (min, avg, max) = (481643,004, 564721,899, 586645,025), stdev = 46458,544
[info]   CI (99.9%): [385826,587, 743617,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   551,147 ±(99.9%) 174,519 MB/sec [Average]
[info]   (min, avg, max) = (470,101, 551,147, 572,489), stdev = 45,322
[info]   CI (99.9%): [376,628, 725,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1536,001, 1536,001, 1536,001), stdev = 0,001
[info]   CI (99.9%): [1536,000, 1536,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   506,785 ±(99.9%) 1124,090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,785, 674,837), stdev = 291,923
[info]   CI (99.9%): [≈ 0, 1630,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1361,982 ±(99.9%) 3018,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1361,982, 1812,966), stdev = 783,819
[info]   CI (99.9%): [≈ 0, 4380,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,142), stdev = 1,395
[info]   CI (99.9%): [≈ 0, 6,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,738 ±(99.9%) 14,432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,738, 8,441), stdev = 3,748
[info]   CI (99.9%): [≈ 0, 16,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73,64% complete, ETA 00:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37299,813 ops/s
[info] # Warmup Iteration   2: 60076,610 ops/s
[info] # Warmup Iteration   3: 60584,746 ops/s
[info] # Warmup Iteration   4: 60824,650 ops/s
[info] # Warmup Iteration   5: 60398,256 ops/s
[info] Iteration   1: 60629,094 ops/s
[info]                  ·gc.alloc.rate:                   1325,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35082,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,540 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 57086,805 ops/s
[info]                  ·gc.alloc.rate:                   1248,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37296,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,574 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 60533,043 ops/s
[info]                  ·gc.alloc.rate:                   1323,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35198,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,624 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 60837,250 ops/s
[info]                  ·gc.alloc.rate:               1329,996 MB/sec
[info]                  ·gc.alloc.rate.norm:          34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35040,414 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 60619,456 ops/s
[info]                  ·gc.alloc.rate:                   1325,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35192,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,081 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   59941,130 ±(99.9%) 6159,220 ops/s [Average]
[info]   (min, avg, max) = (57086,805, 59941,130, 60837,250), stdev = 1599,530
[info]   CI (99.9%): [53781,910, 66100,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1310,381 ±(99.9%) 134,487 MB/sec [Average]
[info]   (min, avg, max) = (1248,059, 1310,381, 1329,996), stdev = 34,926
[info]   CI (99.9%): [1175,894, 1444,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34408,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (34408,007, 34408,007, 34408,007), stdev = 0,001
[info]   CI (99.9%): [34408,006, 34408,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,543 ±(99.9%) 5,805 MB/sec [Average]
[info]   (min, avg, max) = (1351,395, 1353,543, 1355,308), stdev = 1,508
[info]   CI (99.9%): [1347,738, 1359,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35562,064 ±(99.9%) 3742,536 B/op [Average]
[info]   (min, avg, max) = (35040,414, 35562,064, 37296,332), stdev = 971,925
[info]   CI (99.9%): [31819,529, 39304,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,764 ±(99.9%) 2,365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,764, 1,624), stdev = 0,614
[info]   CI (99.9%): [≈ 0, 3,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73,84% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375485,498 ops/s
[info] # Warmup Iteration   2: 440522,084 ops/s
[info] # Warmup Iteration   3: 443778,832 ops/s
[info] # Warmup Iteration   4: 442130,807 ops/s
[info] # Warmup Iteration   5: 443212,108 ops/s
[info] Iteration   1: 442717,302 ops/s
[info]                  ·gc.alloc.rate:                   3004,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9605,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 442280,767 ops/s
[info]                  ·gc.alloc.rate:                   3001,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384,194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12043,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 442565,284 ops/s
[info]                  ·gc.alloc.rate:                   3003,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9647,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 443460,585 ops/s
[info]                  ·gc.alloc.rate:                   3009,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9640,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 443495,639 ops/s
[info]                  ·gc.alloc.rate:                   3009,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9651,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   442903,915 ±(99.9%) 2107,174 ops/s [Average]
[info]   (min, avg, max) = (442280,767, 442903,915, 443495,639), stdev = 547,227
[info]   CI (99.9%): [440796,741, 445011,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   3005,390 ±(99.9%) 14,186 MB/sec [Average]
[info]   (min, avg, max) = (3001,075, 3005,390, 3009,291), stdev = 3,684
[info]   CI (99.9%): [2991,204, 3019,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10680,001, 10680,001, 10680,001), stdev = 0,001
[info]   CI (99.9%): [10680,001, 10680,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2846,963 ±(99.9%) 1156,704 MB/sec [Average]
[info]   (min, avg, max) = (2702,061, 2846,963, 3384,194), stdev = 300,392
[info]   CI (99.9%): [1690,259, 4003,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10117,698 ±(99.9%) 4145,848 B/op [Average]
[info]   (min, avg, max) = (9605,450, 10117,698, 12043,416), stdev = 1076,664
[info]   CI (99.9%): [5971,850, 14263,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,192 ±(99.9%) 0,156 B/op [Average]
[info]   (min, avg, max) = (0,148, 0,192, 0,222), stdev = 0,041
[info]   CI (99.9%): [0,036, 0,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 4,000), stdev = 1,225
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,04% complete, ETA 00:34:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230483,177 ops/s
[info] # Warmup Iteration   2: 339011,048 ops/s
[info] # Warmup Iteration   3: 348488,901 ops/s
[info] # Warmup Iteration   4: 347641,672 ops/s
[info] # Warmup Iteration   5: 347990,223 ops/s
[info] Iteration   1: 341327,059 ops/s
[info]                  ·gc.alloc.rate:                   895,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3112,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 323754,493 ops/s
[info]                  ·gc.alloc.rate:                   849,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6566,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,202 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 334211,310 ops/s
[info]                  ·gc.alloc.rate:               876,550 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3182,360 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 348709,455 ops/s
[info]                  ·gc.alloc.rate:                   914,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3051,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,188 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 347245,767 ops/s
[info]                  ·gc.alloc.rate:                   910,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6131,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   339049,617 ±(99.9%) 39599,250 ops/s [Average]
[info]   (min, avg, max) = (323754,493, 339049,617, 348709,455), stdev = 10283,800
[info]   CI (99.9%): [299450,367, 378648,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   889,317 ±(99.9%) 103,987 MB/sec [Average]
[info]   (min, avg, max) = (849,204, 889,317, 914,696), stdev = 27,005
[info]   CI (99.9%): [785,330, 993,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4128,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4128,001, 4128,001, 4128,001), stdev = 0,001
[info]   CI (99.9%): [4128,001, 4128,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,205 ±(99.9%) 1426,464 MB/sec [Average]
[info]   (min, avg, max) = (675,070, 946,205, 1353,099), stdev = 370,448
[info]   CI (99.9%): [≈ 0, 2372,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4409,115 ±(99.9%) 6848,331 B/op [Average]
[info]   (min, avg, max) = (3051,612, 4409,115, 6566,856), stdev = 1778,490
[info]   CI (99.9%): [≈ 0, 11257,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,155 ±(99.9%) 0,425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,155, 0,288), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,25% complete, ETA 00:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1188190,998 ops/s
[info] # Warmup Iteration   2: 1347345,924 ops/s
[info] # Warmup Iteration   3: 1351795,308 ops/s
[info] # Warmup Iteration   4: 1314815,907 ops/s
[info] # Warmup Iteration   5: 1357223,274 ops/s
[info] Iteration   1: 1354458,912 ops/s
[info]                  ·gc.alloc.rate:                   2643,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3134,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1353002,031 ops/s
[info]                  ·gc.alloc.rate:                   2640,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3144,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1355913,117 ops/s
[info]                  ·gc.alloc.rate:                   2646,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3143,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1355202,052 ops/s
[info]                  ·gc.alloc.rate:                   2645,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3150,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1356054,120 ops/s
[info]                  ·gc.alloc.rate:                   2646,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3152,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1354926,046 ±(99.9%) 4810,641 ops/s [Average]
[info]   (min, avg, max) = (1353002,031, 1354926,046, 1356054,120), stdev = 1249,308
[info]   CI (99.9%): [1350115,405, 1359736,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2644,551 ±(99.9%) 9,034 MB/sec [Average]
[info]   (min, avg, max) = (2640,861, 2644,551, 2646,419), stdev = 2,346
[info]   CI (99.9%): [2635,517, 2653,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,000, 3072,000, 3072,000), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2707,564 ±(99.9%) 28,852 MB/sec [Average]
[info]   (min, avg, max) = (2697,566, 2707,564, 2715,999), stdev = 7,493
[info]   CI (99.9%): [2678,711, 2736,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3145,196 ±(99.9%) 27,494 B/op [Average]
[info]   (min, avg, max) = (3134,615, 3145,196, 3152,770), stdev = 7,140
[info]   CI (99.9%): [3117,703, 3172,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,048 ±(99.9%) 0,066 B/op [Average]
[info]   (min, avg, max) = (0,024, 0,048, 0,073), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74,45% complete, ETA 00:33:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84809,852 ops/s
[info] # Warmup Iteration   2: 123132,284 ops/s
[info] # Warmup Iteration   3: 123363,035 ops/s
[info] # Warmup Iteration   4: 122547,212 ops/s
[info] # Warmup Iteration   5: 124158,600 ops/s
[info] Iteration   1: 124345,409 ops/s
[info]                  ·gc.alloc.rate:                   4498,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51642,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,790 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 122634,677 ops/s
[info]                  ·gc.alloc.rate:                   4437,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61150,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,603 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 123688,112 ops/s
[info]                  ·gc.alloc.rate:                   4474,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51997,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,324 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 123502,126 ops/s
[info]                  ·gc.alloc.rate:                   4468,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60784,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,796 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 124121,955 ops/s
[info]                  ·gc.alloc.rate:                   4489,826 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4768,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60481,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,528 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   123658,456 ±(99.9%) 2554,357 ops/s [Average]
[info]   (min, avg, max) = (122634,677, 123658,456, 124345,409), stdev = 663,358
[info]   CI (99.9%): [121104,099, 126212,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4473,872 ±(99.9%) 91,638 MB/sec [Average]
[info]   (min, avg, max) = (4437,016, 4473,872, 4498,873), stdev = 23,798
[info]   CI (99.9%): [4382,234, 4565,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56944,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56944,003, 56944,004, 56944,004), stdev = 0,001
[info]   CI (99.9%): [56944,003, 56944,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4493,952 ±(99.9%) 1444,266 MB/sec [Average]
[info]   (min, avg, max) = (4080,004, 4493,952, 4770,097), stdev = 375,071
[info]   CI (99.9%): [3049,686, 5938,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57211,023 ±(99.9%) 18978,992 B/op [Average]
[info]   (min, avg, max) = (51642,216, 57211,023, 61150,193), stdev = 4928,784
[info]   CI (99.9%): [38232,031, 76190,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,125), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,008 ±(99.9%) 1,697 B/op [Average]
[info]   (min, avg, max) = (0,528, 1,008, 1,603), stdev = 0,441
[info]   CI (99.9%): [≈ 0, 2,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   33,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,600, 7,000), stdev = 0,548
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74,65% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588173,123 ops/s
[info] # Warmup Iteration   2: 639806,961 ops/s
[info] # Warmup Iteration   3: 643158,647 ops/s
[info] # Warmup Iteration   4: 644993,931 ops/s
[info] # Warmup Iteration   5: 640775,983 ops/s
[info] Iteration   1: 638661,619 ops/s
[info]                  ·gc.alloc.rate:                   2788,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6654,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 644730,074 ops/s
[info]                  ·gc.alloc.rate:                   2815,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6605,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 642091,409 ops/s
[info]                  ·gc.alloc.rate:                   2803,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6645,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 643384,881 ops/s
[info]                  ·gc.alloc.rate:                   2809,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6639,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 644873,138 ops/s
[info]                  ·gc.alloc.rate:                   2815,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6632,596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   642748,224 ±(99.9%) 9813,490 ops/s [Average]
[info]   (min, avg, max) = (638661,619, 642748,224, 644873,138), stdev = 2548,532
[info]   CI (99.9%): [632934,734, 652561,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2806,377 ±(99.9%) 42,506 MB/sec [Average]
[info]   (min, avg, max) = (2788,687, 2806,377, 2815,252), stdev = 11,039
[info]   CI (99.9%): [2763,871, 2848,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6872,001, 6872,001, 6872,001), stdev = 0,001
[info]   CI (99.9%): [6872,001, 6872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2709,776 ±(99.9%) 25,688 MB/sec [Average]
[info]   (min, avg, max) = (2700,500, 2709,776, 2717,175), stdev = 6,671
[info]   CI (99.9%): [2684,088, 2735,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6635,500 ±(99.9%) 71,855 B/op [Average]
[info]   (min, avg, max) = (6605,382, 6635,500, 6654,686), stdev = 18,661
[info]   CI (99.9%): [6563,645, 6707,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,102 ±(99.9%) 0,197 B/op [Average]
[info]   (min, avg, max) = (0,051, 0,102, 0,154), stdev = 0,051
[info]   CI (99.9%): [≈ 0, 0,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74,85% complete, ETA 00:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349329,008 ops/s
[info] # Warmup Iteration   2: 424660,423 ops/s
[info] # Warmup Iteration   3: 424286,561 ops/s
[info] # Warmup Iteration   4: 426948,271 ops/s
[info] # Warmup Iteration   5: 426916,190 ops/s
[info] Iteration   1: 427132,778 ops/s
[info]                  ·gc.alloc.rate:                   660,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2486,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,441 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 429451,903 ops/s
[info]                  ·gc.alloc.rate:                   663,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2473,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 428353,335 ops/s
[info]                  ·gc.alloc.rate:               661,813 MB/sec
[info]                  ·gc.alloc.rate.norm:          2432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2469,386 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 427763,604 ops/s
[info]                  ·gc.alloc.rate:                   661,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2472,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 427831,252 ops/s
[info]                  ·gc.alloc.rate:                   661,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2470,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   428106,575 ±(99.9%) 3341,702 ops/s [Average]
[info]   (min, avg, max) = (427132,778, 428106,575, 429451,903), stdev = 867,829
[info]   CI (99.9%): [424764,872, 431448,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   661,514 ±(99.9%) 5,273 MB/sec [Average]
[info]   (min, avg, max) = (660,021, 661,514, 663,684), stdev = 1,369
[info]   CI (99.9%): [656,241, 666,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2432,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2432,001, 2432,001, 2432,001), stdev = 0,001
[info]   CI (99.9%): [2432,001, 2432,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,027 ±(99.9%) 6,389 MB/sec [Average]
[info]   (min, avg, max) = (671,365, 673,027, 674,885), stdev = 1,659
[info]   CI (99.9%): [666,638, 679,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2474,331 ±(99.9%) 26,440 B/op [Average]
[info]   (min, avg, max) = (2469,386, 2474,331, 2486,255), stdev = 6,866
[info]   CI (99.9%): [2447,891, 2500,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,696 ±(99.9%) 5,770 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,696, 3,376), stdev = 1,498
[info]   CI (99.9%): [≈ 0, 6,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,565 ±(99.9%) 21,262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,565, 12,441), stdev = 5,522
[info]   CI (99.9%): [≈ 0, 23,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,05% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465985,128 ops/s
[info] # Warmup Iteration   2: 676014,205 ops/s
[info] # Warmup Iteration   3: 675711,213 ops/s
[info] # Warmup Iteration   4: 676345,863 ops/s
[info] # Warmup Iteration   5: 677029,181 ops/s
[info] Iteration   1: 676461,955 ops/s
[info]                  ·gc.alloc.rate:               495,118 MB/sec
[info]                  ·gc.alloc.rate.norm:          1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1190,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 676263,246 ops/s
[info]                  ·gc.alloc.rate:                   494,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,678 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 675006,496 ops/s
[info]                  ·gc.alloc.rate:      494,057 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 675115,938 ops/s
[info]                  ·gc.alloc.rate:                   494,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 672360,991 ops/s
[info]                  ·gc.alloc.rate:               492,126 MB/sec
[info]                  ·gc.alloc.rate.norm:          1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1579,589 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   675041,725 ±(99.9%) 6298,555 ops/s [Average]
[info]   (min, avg, max) = (672360,991, 675041,725, 676461,955), stdev = 1635,715
[info]   CI (99.9%): [668743,170, 681340,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   494,115 ±(99.9%) 4,608 MB/sec [Average]
[info]   (min, avg, max) = (492,126, 494,115, 495,118), stdev = 1,197
[info]   CI (99.9%): [489,507, 498,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1152,001, 1152,001, 1152,001), stdev = 0,001
[info]   CI (99.9%): [1152,001, 1152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507,061 ±(99.9%) 1124,842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,061, 674,788), stdev = 292,118
[info]   CI (99.9%): [≈ 0, 1631,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1182,310 ±(99.9%) 2624,193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1182,310, 1579,589), stdev = 681,495
[info]   CI (99.9%): [≈ 0, 3806,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,291), stdev = 0,127
[info]   CI (99.9%): [≈ 0, 0,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,155 ±(99.9%) 1,138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,155, 0,678), stdev = 0,295
[info]   CI (99.9%): [≈ 0, 1,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,25% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2276741,091 ops/s
[info] # Warmup Iteration   2: 2385431,995 ops/s
[info] # Warmup Iteration   3: 2193367,925 ops/s
[info] # Warmup Iteration   4: 2161646,381 ops/s
[info] # Warmup Iteration   5: 2161865,646 ops/s
[info] Iteration   1: 2223842,564 ops/s
[info]                  ·gc.alloc.rate:                   1028,460 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2220354,195 ops/s
[info]                  ·gc.alloc.rate:                   1026,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2216675,998 ops/s
[info]                  ·gc.alloc.rate:               1025,428 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477,237 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2218083,294 ops/s
[info]                  ·gc.alloc.rate:                   1025,973 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2215330,788 ops/s
[info]                  ·gc.alloc.rate:               1024,533 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477,496 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2218857,368 ±(99.9%) 12899,226 ops/s [Average]
[info]   (min, avg, max) = (2215330,788, 2218857,368, 2223842,564), stdev = 3349,888
[info]   CI (99.9%): [2205958,142, 2231756,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1026,277 ±(99.9%) 5,819 MB/sec [Average]
[info]   (min, avg, max) = (1024,533, 1026,277, 1028,460), stdev = 1,511
[info]   CI (99.9%): [1020,458, 1032,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,058 ±(99.9%) 1417,196 MB/sec [Average]
[info]   (min, avg, max) = (671,992, 941,058, 1344,253), stdev = 368,041
[info]   CI (99.9%): [≈ 0, 2358,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   667,512 ±(99.9%) 1004,767 B/op [Average]
[info]   (min, avg, max) = (476,123, 667,512, 953,805), stdev = 260,935
[info]   CI (99.9%): [≈ 0, 1672,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,044), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75,45% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2523300,619 ops/s
[info] # Warmup Iteration   2: 2581608,842 ops/s
[info] # Warmup Iteration   3: 2254763,525 ops/s
[info] # Warmup Iteration   4: 2252127,202 ops/s
[info] # Warmup Iteration   5: 2246482,838 ops/s
[info] Iteration   1: 2257411,980 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2262350,154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2196017,156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2252912,919 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2256995,647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2245137,571 ±(99.9%) 106517,805 ops/s [Average]
[info]   (min, avg, max) = (2196017,156, 2245137,571, 2262350,154), stdev = 27662,336
[info]   CI (99.9%): [2138619,766, 2351655,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75,65% complete, ETA 00:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373442,326 ops/s
[info] # Warmup Iteration   2: 435020,164 ops/s
[info] # Warmup Iteration   3: 425473,197 ops/s
[info] # Warmup Iteration   4: 432011,372 ops/s
[info] # Warmup Iteration   5: 429365,951 ops/s
[info] Iteration   1: 430737,974 ops/s
[info]                  ·gc.alloc.rate:                   619,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2460,566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,047 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 432415,570 ops/s
[info]                  ·gc.alloc.rate:      622,061 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 431310,051 ops/s
[info]                  ·gc.alloc.rate:                   620,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2457,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 431655,715 ops/s
[info]                  ·gc.alloc.rate:               620,926 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2445,643 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 431092,028 ops/s
[info]                  ·gc.alloc.rate:                   620,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2448,842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   431442,267 ±(99.9%) 2457,374 ops/s [Average]
[info]   (min, avg, max) = (430737,974, 431442,267, 432415,570), stdev = 638,172
[info]   CI (99.9%): [428984,893, 433899,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   620,596 ±(99.9%) 3,673 MB/sec [Average]
[info]   (min, avg, max) = (619,594, 620,596, 622,061), stdev = 0,954
[info]   CI (99.9%): [616,923, 624,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,623 ±(99.9%) 1157,286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,623, 673,389), stdev = 300,544
[info]   CI (99.9%): [≈ 0, 1694,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1962,467 ±(99.9%) 4224,424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1962,467, 2460,566), stdev = 1097,069
[info]   CI (99.9%): [≈ 0, 6186,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,781 ±(99.9%) 6,594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,781, 3,844), stdev = 1,712
[info]   CI (99.9%): [≈ 0, 7,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,855 ±(99.9%) 24,093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,855, 14,047), stdev = 6,257
[info]   CI (99.9%): [≈ 0, 26,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75,86% complete, ETA 00:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188002,200 ops/s
[info] # Warmup Iteration   2: 196096,886 ops/s
[info] # Warmup Iteration   3: 196669,379 ops/s
[info] # Warmup Iteration   4: 195891,998 ops/s
[info] # Warmup Iteration   5: 195659,409 ops/s
[info] Iteration   1: 196129,459 ops/s
[info]                  ·gc.alloc.rate:      500,420 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 196062,513 ops/s
[info]                  ·gc.alloc.rate:                   500,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4106,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 198950,660 ops/s
[info]                  ·gc.alloc.rate:                   507,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5337,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,615 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 197978,853 ops/s
[info]                  ·gc.alloc.rate:                   505,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5364,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,331 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 198659,237 ops/s
[info]                  ·gc.alloc.rate:                   506,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5329,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,330 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   197556,144 ±(99.9%) 5310,028 ops/s [Average]
[info]   (min, avg, max) = (196062,513, 197556,144, 198950,660), stdev = 1378,997
[info]   CI (99.9%): [192246,117, 202866,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   504,062 ±(99.9%) 13,527 MB/sec [Average]
[info]   (min, avg, max) = (500,253, 504,062, 507,623), stdev = 3,513
[info]   CI (99.9%): [490,535, 517,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,726 ±(99.9%) 1123,925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,726, 674,763), stdev = 291,880
[info]   CI (99.9%): [≈ 0, 1630,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4027,648 ±(99.9%) 8912,100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4027,648, 5364,061), stdev = 2314,444
[info]   CI (99.9%): [≈ 0, 12939,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,645 ±(99.9%) 5,310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,111), stdev = 1,379
[info]   CI (99.9%): [≈ 0, 5,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,102 ±(99.9%) 42,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,102, 24,615), stdev = 10,909
[info]   CI (99.9%): [≈ 0, 47,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76,06% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49225,176 ops/s
[info] # Warmup Iteration   2: 59973,248 ops/s
[info] # Warmup Iteration   3: 60009,644 ops/s
[info] # Warmup Iteration   4: 60267,715 ops/s
[info] # Warmup Iteration   5: 59338,538 ops/s
[info] Iteration   1: 59259,000 ops/s
[info]                  ·gc.alloc.rate:                   1997,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53592,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,658 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 60444,032 ops/s
[info]                  ·gc.alloc.rate:                   2037,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52616,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,542 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 60498,800 ops/s
[info]                  ·gc.alloc.rate:                   2038,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52678,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,625 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 59685,569 ops/s
[info]                  ·gc.alloc.rate:                   2011,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53467,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,098 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 59358,372 ops/s
[info]                  ·gc.alloc.rate:                   2000,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53848,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,552 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59849,155 ±(99.9%) 2271,414 ops/s [Average]
[info]   (min, avg, max) = (59259,000, 59849,155, 60498,800), stdev = 589,879
[info]   CI (99.9%): [57577,741, 62120,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2016,927 ±(99.9%) 76,894 MB/sec [Average]
[info]   (min, avg, max) = (1997,098, 2016,927, 2038,782), stdev = 19,969
[info]   CI (99.9%): [1940,033, 2093,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (53040,007, 53040,007, 53040,008), stdev = 0,001
[info]   CI (99.9%): [53040,005, 53040,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2024,404 ±(99.9%) 19,569 MB/sec [Average]
[info]   (min, avg, max) = (2017,913, 2024,404, 2030,521), stdev = 5,082
[info]   CI (99.9%): [2004,834, 2043,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53240,934 ±(99.9%) 2153,046 B/op [Average]
[info]   (min, avg, max) = (52616,997, 53240,934, 53848,754), stdev = 559,139
[info]   CI (99.9%): [51087,888, 55393,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,095 ±(99.9%) 2,108 B/op [Average]
[info]   (min, avg, max) = (0,542, 1,095, 1,658), stdev = 0,547
[info]   CI (99.9%): [≈ 0, 3,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,26% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54603,008 ops/s
[info] # Warmup Iteration   2: 90896,918 ops/s
[info] # Warmup Iteration   3: 90858,267 ops/s
[info] # Warmup Iteration   4: 91124,853 ops/s
[info] # Warmup Iteration   5: 90942,529 ops/s
[info] Iteration   1: 91309,231 ops/s
[info]                  ·gc.alloc.rate:                   1639,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23318,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,359 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 91096,191 ops/s
[info]                  ·gc.alloc.rate:                   1635,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35099,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,079 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 91385,496 ops/s
[info]                  ·gc.alloc.rate:               1641,104 MB/sec
[info]                  ·gc.alloc.rate.norm:          28264,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23345,027 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 81627,850 ops/s
[info]                  ·gc.alloc.rate:                   1466,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26149,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,803 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 91166,300 ops/s
[info]                  ·gc.alloc.rate:                   1637,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35159,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,359 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   89317,014 ±(99.9%) 16557,334 ops/s [Average]
[info]   (min, avg, max) = (81627,850, 89317,014, 91385,496), stdev = 4299,887
[info]   CI (99.9%): [72759,679, 105874,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1603,964 ±(99.9%) 296,977 MB/sec [Average]
[info]   (min, avg, max) = (1466,048, 1603,964, 1641,104), stdev = 77,124
[info]   CI (99.9%): [1306,986, 1900,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28264,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28264,004, 28264,005, 28264,005), stdev = 0,001
[info]   CI (99.9%): [28264,004, 28264,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1626,533 ±(99.9%) 1432,393 MB/sec [Average]
[info]   (min, avg, max) = (1352,748, 1626,533, 2036,429), stdev = 371,988
[info]   CI (99.9%): [194,140, 3058,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28614,453 ±(99.9%) 23326,728 B/op [Average]
[info]   (min, avg, max) = (23318,017, 28614,453, 35159,909), stdev = 6057,877
[info]   CI (99.9%): [5287,725, 51941,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,520 ±(99.9%) 1,627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,520, 1,079), stdev = 0,423
[info]   CI (99.9%): [≈ 0, 2,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,46% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96052,585 ops/s
[info] # Warmup Iteration   2: 106194,766 ops/s
[info] # Warmup Iteration   3: 107079,591 ops/s
[info] # Warmup Iteration   4: 106772,943 ops/s
[info] # Warmup Iteration   5: 105648,373 ops/s
[info] Iteration   1: 106361,966 ops/s
[info]                  ·gc.alloc.rate:                   1629,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19891,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,616 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 98775,661 ops/s
[info]                  ·gc.alloc.rate:                   1513,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32149,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,663 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 102086,688 ops/s
[info]                  ·gc.alloc.rate:                   1564,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20765,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,963 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 106930,882 ops/s
[info]                  ·gc.alloc.rate:               1638,826 MB/sec
[info]                  ·gc.alloc.rate.norm:          24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19844,204 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 106816,430 ops/s
[info]                  ·gc.alloc.rate:                   1636,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29835,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,920 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   104194,325 ±(99.9%) 13998,944 ops/s [Average]
[info]   (min, avg, max) = (98775,661, 104194,325, 106930,882), stdev = 3635,481
[info]   CI (99.9%): [90195,382, 118193,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1596,798 ±(99.9%) 214,254 MB/sec [Average]
[info]   (min, avg, max) = (1513,871, 1596,798, 1638,826), stdev = 55,641
[info]   CI (99.9%): [1382,543, 1811,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24120,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24120,004, 24120,004, 24120,004), stdev = 0,001
[info]   CI (99.9%): [24120,004, 24120,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1616,399 ±(99.9%) 1423,154 MB/sec [Average]
[info]   (min, avg, max) = (1344,226, 1616,399, 2024,651), stdev = 369,589
[info]   CI (99.9%): [193,245, 3039,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24497,395 ±(99.9%) 23091,925 B/op [Average]
[info]   (min, avg, max) = (19844,204, 24497,395, 32149,736), stdev = 5996,899
[info]   CI (99.9%): [1405,471, 47589,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,632 ±(99.9%) 1,483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,632, 0,963), stdev = 0,385
[info]   CI (99.9%): [≈ 0, 2,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76,66% complete, ETA 00:30:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11585,833 ops/s
[info] # Warmup Iteration   2: 20294,655 ops/s
[info] # Warmup Iteration   3: 20592,446 ops/s
[info] # Warmup Iteration   4: 20589,298 ops/s
[info] # Warmup Iteration   5: 20681,193 ops/s
[info] Iteration   1: 20726,614 ops/s
[info]                  ·gc.alloc.rate:                   1444,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102682,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,581 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 20762,061 ops/s
[info]                  ·gc.alloc.rate:               1446,877 MB/sec
[info]                  ·gc.alloc.rate.norm:          109672,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102559,974 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 20537,455 ops/s
[info]                  ·gc.alloc.rate:                   1431,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103770,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,595 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20269,944 ops/s
[info]                  ·gc.alloc.rate:                   1412,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105193,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,232 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 20698,155 ops/s
[info]                  ·gc.alloc.rate:                   1442,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103120,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,748 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20598,846 ±(99.9%) 781,526 ops/s [Average]
[info]   (min, avg, max) = (20269,944, 20598,846, 20762,061), stdev = 202,960
[info]   CI (99.9%): [19817,319, 21380,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1435,349 ±(99.9%) 54,319 MB/sec [Average]
[info]   (min, avg, max) = (1412,549, 1435,349, 1446,877), stdev = 14,106
[info]   CI (99.9%): [1381,030, 1489,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109672,021 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (109672,020, 109672,021, 109672,025), stdev = 0,002
[info]   CI (99.9%): [109672,013, 109672,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1354,008 ±(99.9%) 5,570 MB/sec [Average]
[info]   (min, avg, max) = (1352,230, 1354,008, 1355,891), stdev = 1,447
[info]   CI (99.9%): [1348,438, 1359,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   103465,406 ±(99.9%) 4143,678 B/op [Average]
[info]   (min, avg, max) = (102559,974, 103465,406, 105193,765), stdev = 1076,100
[info]   CI (99.9%): [99321,728, 107609,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,231 ±(99.9%) 6,980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,231, 4,748), stdev = 1,813
[info]   CI (99.9%): [≈ 0, 9,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,86% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117096,387 ops/s
[info] # Warmup Iteration   2: 178284,212 ops/s
[info] # Warmup Iteration   3: 179175,096 ops/s
[info] # Warmup Iteration   4: 178230,832 ops/s
[info] # Warmup Iteration   5: 178416,262 ops/s
[info] Iteration   1: 177945,483 ops/s
[info]                  ·gc.alloc.rate:                   1316,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11954,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,368 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 178687,298 ops/s
[info]                  ·gc.alloc.rate:                   1321,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11915,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,733 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 178778,364 ops/s
[info]                  ·gc.alloc.rate:                   1322,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11918,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 178060,914 ops/s
[info]                  ·gc.alloc.rate:                   1316,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11974,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 178640,953 ops/s
[info]                  ·gc.alloc.rate:                   1320,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11945,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,367 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   178422,602 ±(99.9%) 1494,785 ops/s [Average]
[info]   (min, avg, max) = (177945,483, 178422,602, 178778,364), stdev = 388,191
[info]   CI (99.9%): [176927,817, 179917,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1319,487 ±(99.9%) 10,801 MB/sec [Average]
[info]   (min, avg, max) = (1316,048, 1319,487, 1322,133), stdev = 2,805
[info]   CI (99.9%): [1308,686, 1330,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11640,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11640,002, 11640,002, 11640,002), stdev = 0,001
[info]   CI (99.9%): [11640,002, 11640,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,673 ±(99.9%) 6,080 MB/sec [Average]
[info]   (min, avg, max) = (1351,557, 1353,673, 1355,526), stdev = 1,579
[info]   CI (99.9%): [1347,593, 1359,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11941,619 ±(99.9%) 96,673 B/op [Average]
[info]   (min, avg, max) = (11915,503, 11941,619, 11974,979), stdev = 25,106
[info]   CI (99.9%): [11844,946, 12038,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,367 ±(99.9%) 0,864 B/op [Average]
[info]   (min, avg, max) = (0,183, 0,367, 0,733), stdev = 0,224
[info]   CI (99.9%): [≈ 0, 1,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77,06% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532782,726 ops/s
[info] # Warmup Iteration   2: 591544,505 ops/s
[info] # Warmup Iteration   3: 593433,818 ops/s
[info] # Warmup Iteration   4: 594799,891 ops/s
[info] # Warmup Iteration   5: 594877,959 ops/s
[info] Iteration   1: 571526,147 ops/s
[info]                  ·gc.alloc.rate:                   630,354 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1858,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,725 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 600231,483 ops/s
[info]                  ·gc.alloc.rate:                   662,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1769,376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 599588,981 ops/s
[info]                  ·gc.alloc.rate:               661,300 MB/sec
[info]                  ·gc.alloc.rate.norm:          1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1765,898 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 600910,159 ops/s
[info]                  ·gc.alloc.rate:                   662,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1762,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 601081,446 ops/s
[info]                  ·gc.alloc.rate:               662,932 MB/sec
[info]                  ·gc.alloc.rate.norm:          1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1759,780 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   594667,643 ±(99.9%) 49865,860 ops/s [Average]
[info]   (min, avg, max) = (571526,147, 594667,643, 601081,446), stdev = 12950,006
[info]   CI (99.9%): [544801,783, 644533,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   655,900 ±(99.9%) 55,049 MB/sec [Average]
[info]   (min, avg, max) = (630,354, 655,900, 662,932), stdev = 14,296
[info]   CI (99.9%): [600,851, 710,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1736,001, 1736,001, 1736,001), stdev = 0,001
[info]   CI (99.9%): [1736,001, 1736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,392 ±(99.9%) 4,871 MB/sec [Average]
[info]   (min, avg, max) = (672,013, 673,392, 674,795), stdev = 1,265
[info]   CI (99.9%): [668,521, 678,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1783,030 ±(99.9%) 162,171 B/op [Average]
[info]   (min, avg, max) = (1759,780, 1783,030, 1858,081), stdev = 42,115
[info]   CI (99.9%): [1620,859, 1945,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,168), stdev = 1,408
[info]   CI (99.9%): [≈ 0, 6,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,789 ±(99.9%) 14,934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,789, 8,725), stdev = 3,878
[info]   CI (99.9%): [≈ 0, 16,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77,26% complete, ETA 00:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530066,894 ops/s
[info] # Warmup Iteration   2: 575669,933 ops/s
[info] # Warmup Iteration   3: 576739,435 ops/s
[info] # Warmup Iteration   4: 573180,026 ops/s
[info] # Warmup Iteration   5: 574480,489 ops/s
[info] Iteration   1: 577106,565 ops/s
[info]                  ·gc.alloc.rate:      5,867 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 576281,239 ops/s
[info]                  ·gc.alloc.rate:      5,859 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 575405,490 ops/s
[info]                  ·gc.alloc.rate:      5,850 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 574538,056 ops/s
[info]                  ·gc.alloc.rate:      5,842 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 574009,403 ops/s
[info]                  ·gc.alloc.rate:      5,835 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   575468,151 ±(99.9%) 4848,778 ops/s [Average]
[info]   (min, avg, max) = (574009,403, 575468,151, 577106,565), stdev = 1259,212
[info]   CI (99.9%): [570619,372, 580316,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5,851 ±(99.9%) 0,050 MB/sec [Average]
[info]   (min, avg, max) = (5,835, 5,851, 5,867), stdev = 0,013
[info]   CI (99.9%): [5,801, 5,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77,46% complete, ETA 00:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15194,536 ops/s
[info] # Warmup Iteration   2: 23423,884 ops/s
[info] # Warmup Iteration   3: 23272,313 ops/s
[info] # Warmup Iteration   4: 22493,795 ops/s
[info] # Warmup Iteration   5: 22074,228 ops/s
[info] Iteration   1: 22565,121 ops/s
[info]                  ·gc.alloc.rate:               430,489 MB/sec
[info]                  ·gc.alloc.rate.norm:          30024,743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35681,969 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 21639,523 ops/s
[info]                  ·gc.alloc.rate:      412,811 MB/sec
[info]                  ·gc.alloc.rate.norm: 30024,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22410,631 ops/s
[info]                  ·gc.alloc.rate:                   427,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              30024,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47388,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,547 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23679,156 ops/s
[info]                  ·gc.alloc.rate:      451,762 MB/sec
[info]                  ·gc.alloc.rate.norm: 30024,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23631,231 ops/s
[info]                  ·gc.alloc.rate:                   450,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              30024,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44940,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,386 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   22785,132 ±(99.9%) 3343,768 ops/s [Average]
[info]   (min, avg, max) = (21639,523, 22785,132, 23679,156), stdev = 868,366
[info]   CI (99.9%): [19441,364, 26128,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   434,663 ±(99.9%) 63,761 MB/sec [Average]
[info]   (min, avg, max) = (412,811, 434,663, 451,762), stdev = 16,559
[info]   CI (99.9%): [370,902, 498,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30024,163 ±(99.9%) 1,249 B/op [Average]
[info]   (min, avg, max) = (30024,017, 30024,163, 30024,743), stdev = 0,324
[info]   CI (99.9%): [30022,915, 30025,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   372,207 ±(99.9%) 1333,253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,207, 674,768), stdev = 346,242
[info]   CI (99.9%): [≈ 0, 1705,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   25602,090 ±(99.9%) 91551,813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25602,090, 47388,244), stdev = 23775,715
[info]   CI (99.9%): [≈ 0, 117153,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,108 ±(99.9%) 0,888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,520), stdev = 0,231
[info]   CI (99.9%): [≈ 0, 0,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,587 ±(99.9%) 62,382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,587, 36,547), stdev = 16,200
[info]   CI (99.9%): [≈ 0, 69,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77,67% complete, ETA 00:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1523251,259 ops/s
[info] # Warmup Iteration   2: 2381676,822 ops/s
[info] # Warmup Iteration   3: 2430359,724 ops/s
[info] # Warmup Iteration   4: 2434208,137 ops/s
[info] # Warmup Iteration   5: 2412709,001 ops/s
[info] Iteration   1: 2419949,374 ops/s
[info]                  ·gc.alloc.rate:                   3394,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              2208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2198,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2430567,729 ops/s
[info]                  ·gc.alloc.rate:                   3409,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              2208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2193,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,067 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2441184,162 ops/s
[info]                  ·gc.alloc.rate:                   3424,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              2208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2626,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2437545,615 ops/s
[info]                  ·gc.alloc.rate:                   3419,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              2208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2194,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2417181,865 ops/s
[info]                  ·gc.alloc.rate:                   3390,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              2208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2215,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2429285,749 ±(99.9%) 40619,867 ops/s [Average]
[info]   (min, avg, max) = (2417181,865, 2429285,749, 2441184,162), stdev = 10548,851
[info]   CI (99.9%): [2388665,881, 2469905,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3407,752 ±(99.9%) 57,572 MB/sec [Average]
[info]   (min, avg, max) = (3390,696, 3407,752, 3424,447), stdev = 14,951
[info]   CI (99.9%): [3350,179, 3465,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2208,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2208,000, 2208,000, 2208,000), stdev = 0,001
[info]   CI (99.9%): [2208,000, 2208,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3528,320 ±(99.9%) 1173,408 MB/sec [Average]
[info]   (min, avg, max) = (3379,421, 3528,320, 4073,200), stdev = 304,730
[info]   CI (99.9%): [2354,912, 4701,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2285,721 ±(99.9%) 733,884 B/op [Average]
[info]   (min, avg, max) = (2193,891, 2285,721, 2626,301), stdev = 190,587
[info]   CI (99.9%): [1551,837, 3019,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,032 ±(99.9%) 0,079 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,032, 0,067), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77,87% complete, ETA 00:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93503,881 ops/s
[info] # Warmup Iteration   2: 886707,486 ops/s
[info] # Warmup Iteration   3: 891364,305 ops/s
[info] # Warmup Iteration   4: 894014,224 ops/s
[info] # Warmup Iteration   5: 889865,333 ops/s
[info] Iteration   1: 870991,438 ops/s
[info]                  ·gc.alloc.rate:                   553,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 874960,027 ops/s
[info]                  ·gc.alloc.rate:                   555,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1212,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,778 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 873438,620 ops/s
[info]                  ·gc.alloc.rate:                   554,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1214,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 874679,129 ops/s
[info]                  ·gc.alloc.rate:               555,785 MB/sec
[info]                  ·gc.alloc.rate.norm:          1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1209,320 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 871576,290 ops/s
[info]                  ·gc.alloc.rate:      553,742 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   873129,101 ±(99.9%) 6896,712 ops/s [Average]
[info]   (min, avg, max) = (870991,438, 873129,101, 874960,027), stdev = 1791,054
[info]   CI (99.9%): [866232,388, 880025,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   554,760 ±(99.9%) 4,461 MB/sec [Average]
[info]   (min, avg, max) = (553,390, 554,760, 555,928), stdev = 1,159
[info]   CI (99.9%): [550,299, 559,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,001), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,379 ±(99.9%) 1122,956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,379, 674,137), stdev = 291,628
[info]   CI (99.9%): [≈ 0, 1629,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   912,202 ±(99.9%) 2021,395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 912,202, 1214,676), stdev = 524,950
[info]   CI (99.9%): [≈ 0, 2933,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,537 ±(99.9%) 4,561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,537, 2,656), stdev = 1,185
[info]   CI (99.9%): [≈ 0, 5,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,966 ±(99.9%) 8,205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,966, 4,778), stdev = 2,131
[info]   CI (99.9%): [≈ 0, 9,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78,07% complete, ETA 00:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75244,006 ops/s
[info] # Warmup Iteration   2: 322864,498 ops/s
[info] # Warmup Iteration   3: 329528,849 ops/s
[info] # Warmup Iteration   4: 326967,684 ops/s
[info] # Warmup Iteration   5: 329716,286 ops/s
[info] Iteration   1: 327415,744 ops/s
[info]                  ·gc.alloc.rate:                   627,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3241,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,101 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 326306,829 ops/s
[info]                  ·gc.alloc.rate:                   625,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3253,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,301 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 326906,936 ops/s
[info]                  ·gc.alloc.rate:               626,506 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3250,481 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 324978,695 ops/s
[info]                  ·gc.alloc.rate:      622,771 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 324509,749 ops/s
[info]                  ·gc.alloc.rate:               621,795 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3274,105 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   326023,590 ±(99.9%) 4787,101 ops/s [Average]
[info]   (min, avg, max) = (324509,749, 326023,590, 327415,744), stdev = 1243,195
[info]   CI (99.9%): [321236,489, 330810,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   624,765 ±(99.9%) 9,271 MB/sec [Average]
[info]   (min, avg, max) = (621,795, 624,765, 627,416), stdev = 2,408
[info]   CI (99.9%): [615,494, 634,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,001, 3016,001, 3016,001), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,827 ±(99.9%) 1162,020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,827, 675,214), stdev = 301,773
[info]   CI (99.9%): [≈ 0, 1701,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2603,924 ±(99.9%) 5605,328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2603,924, 3274,105), stdev = 1455,686
[info]   CI (99.9%): [≈ 0, 8209,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,229), stdev = 0,099
[info]   CI (99.9%): [≈ 0, 0,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,280 ±(99.9%) 1,836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,280, 1,101), stdev = 0,477
[info]   CI (99.9%): [≈ 0, 2,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78,27% complete, ETA 00:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 642325,055 ops/s
[info] # Warmup Iteration   2: 805668,641 ops/s
[info] # Warmup Iteration   3: 745136,179 ops/s
[info] # Warmup Iteration   4: 811045,964 ops/s
[info] # Warmup Iteration   5: 803947,481 ops/s
[info] Iteration   1: 815673,875 ops/s
[info]                  ·gc.alloc.rate:               613,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 987,046 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 804562,824 ops/s
[info]                  ·gc.alloc.rate:                   605,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,103 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 799011,654 ops/s
[info]                  ·gc.alloc.rate:                   601,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1329,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 813568,421 ops/s
[info]                  ·gc.alloc.rate:                   612,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1301,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,081 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 811451,348 ops/s
[info]                  ·gc.alloc.rate:                   610,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1304,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   808853,625 ±(99.9%) 26592,358 ops/s [Average]
[info]   (min, avg, max) = (799011,654, 808853,625, 815673,875), stdev = 6905,951
[info]   CI (99.9%): [782261,266, 835445,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   608,483 ±(99.9%) 19,951 MB/sec [Average]
[info]   (min, avg, max) = (601,082, 608,483, 613,607), stdev = 5,181
[info]   CI (99.9%): [588,531, 628,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1184,001, 1184,001, 1184,001), stdev = 0,001
[info]   CI (99.9%): [1184,000, 1184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,310 ±(99.9%) 279,377 MB/sec [Average]
[info]   (min, avg, max) = (511,536, 641,310, 674,848), stdev = 72,553
[info]   CI (99.9%): [361,933, 920,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1248,491 ±(99.9%) 564,445 B/op [Average]
[info]   (min, avg, max) = (987,046, 1248,491, 1329,110), stdev = 146,584
[info]   CI (99.9%): [684,046, 1812,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,645 ±(99.9%) 5,329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,120), stdev = 1,384
[info]   CI (99.9%): [≈ 0, 5,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,261 ±(99.9%) 10,424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,261, 6,103), stdev = 2,707
[info]   CI (99.9%): [≈ 0, 11,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78,47% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3669502,764 ops/s
[info] # Warmup Iteration   2: 4737852,148 ops/s
[info] # Warmup Iteration   3: 4697413,659 ops/s
[info] # Warmup Iteration   4: 4733351,384 ops/s
[info] # Warmup Iteration   5: 4682500,007 ops/s
[info] Iteration   1: 4674939,973 ops/s
[info]                  ·gc.alloc.rate:                   1496,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4692813,704 ops/s
[info]                  ·gc.alloc.rate:                   1502,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 4731950,859 ops/s
[info]                  ·gc.alloc.rate:                   1515,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 4729477,276 ops/s
[info]                  ·gc.alloc.rate:                   1514,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4726958,581 ops/s
[info]                  ·gc.alloc.rate:                   1513,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     449,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4711228,079 ±(99.9%) 99407,625 ops/s [Average]
[info]   (min, avg, max) = (4674939,973, 4711228,079, 4731950,859), stdev = 25815,845
[info]   CI (99.9%): [4611820,454, 4810635,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1508,655 ±(99.9%) 31,742 MB/sec [Average]
[info]   (min, avg, max) = (1496,994, 1508,655, 1515,269), stdev = 8,243
[info]   CI (99.9%): [1476,914, 1540,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1480,704 ±(99.9%) 1158,397 MB/sec [Average]
[info]   (min, avg, max) = (1344,087, 1480,704, 2018,837), stdev = 300,832
[info]   CI (99.9%): [322,307, 2639,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   494,474 ±(99.9%) 381,098 B/op [Average]
[info]   (min, avg, max) = (448,423, 494,474, 671,494), stdev = 98,970
[info]   CI (99.9%): [113,377, 875,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,019 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,014, 0,021), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78,67% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7541419,676 ops/s
[info] # Warmup Iteration   2: 9382588,710 ops/s
[info] # Warmup Iteration   3: 9720480,105 ops/s
[info] # Warmup Iteration   4: 9726136,211 ops/s
[info] # Warmup Iteration   5: 9715079,517 ops/s
[info] Iteration   1: 9687886,111 ops/s
[info]                  ·gc.alloc.rate:                   787,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 9594641,213 ops/s
[info]                  ·gc.alloc.rate:               780,398 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110,364 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9737789,101 ops/s
[info]                  ·gc.alloc.rate:                   791,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9742661,831 ops/s
[info]                  ·gc.alloc.rate:               792,357 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108,568 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 9742653,051 ops/s
[info]                  ·gc.alloc.rate:                   792,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9701126,261 ±(99.9%) 245870,541 ops/s [Average]
[info]   (min, avg, max) = (9594641,213, 9701126,261, 9742661,831), stdev = 63851,799
[info]   CI (99.9%): [9455255,720, 9946996,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   788,955 ±(99.9%) 19,761 MB/sec [Average]
[info]   (min, avg, max) = (780,398, 788,955, 792,357), stdev = 5,132
[info]   CI (99.9%): [769,194, 808,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (128,000, 128,000, 128,000), stdev = 0,001
[info]   CI (99.9%): [128,000, 128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   807,265 ±(99.9%) 1155,270 MB/sec [Average]
[info]   (min, avg, max) = (672,066, 807,265, 1343,954), stdev = 300,020
[info]   CI (99.9%): [≈ 0, 1962,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   130,885 ±(99.9%) 185,699 B/op [Average]
[info]   (min, avg, max) = (108,568, 130,885, 217,143), stdev = 48,225
[info]   CI (99.9%): [≈ 0, 316,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78,87% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44123,937 ops/s
[info] # Warmup Iteration   2: 203432,563 ops/s
[info] # Warmup Iteration   3: 208221,165 ops/s
[info] # Warmup Iteration   4: 210722,082 ops/s
[info] # Warmup Iteration   5: 207917,513 ops/s
[info] Iteration   1: 207013,347 ops/s
[info]                  ·gc.alloc.rate:                   1403,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              10672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10274,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 209211,677 ops/s
[info]                  ·gc.alloc.rate:                   1418,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              10672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10177,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,313 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 209430,974 ops/s
[info]                  ·gc.alloc.rate:                   1420,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              10672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10173,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,469 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 209638,903 ops/s
[info]                  ·gc.alloc.rate:               1421,603 MB/sec
[info]                  ·gc.alloc.rate.norm:          10672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10171,319 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 208558,077 ops/s
[info]                  ·gc.alloc.rate:                   1414,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              10672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10231,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,157 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   208770,595 ±(99.9%) 4092,248 ops/s [Average]
[info]   (min, avg, max) = (207013,347, 208770,595, 209638,903), stdev = 1062,744
[info]   CI (99.9%): [204678,347, 212862,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1415,593 ±(99.9%) 27,809 MB/sec [Average]
[info]   (min, avg, max) = (1403,707, 1415,593, 1421,603), stdev = 7,222
[info]   CI (99.9%): [1387,784, 1443,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10672,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10672,002, 10672,002, 10672,002), stdev = 0,001
[info]   CI (99.9%): [10672,002, 10672,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,735 ±(99.9%) 6,434 MB/sec [Average]
[info]   (min, avg, max) = (1351,469, 1353,735, 1355,682), stdev = 1,671
[info]   CI (99.9%): [1347,301, 1360,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10205,843 ±(99.9%) 176,814 B/op [Average]
[info]   (min, avg, max) = (10171,319, 10205,843, 10274,845), stdev = 45,918
[info]   CI (99.9%): [10029,029, 10382,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,220 ±(99.9%) 0,686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,220, 0,469), stdev = 0,178
[info]   CI (99.9%): [≈ 0, 0,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79,07% complete, ETA 00:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237379,445 ops/s
[info] # Warmup Iteration   2: 328659,052 ops/s
[info] # Warmup Iteration   3: 335951,462 ops/s
[info] # Warmup Iteration   4: 338539,197 ops/s
[info] # Warmup Iteration   5: 334879,712 ops/s
[info] Iteration   1: 333467,276 ops/s
[info]                  ·gc.alloc.rate:                   654,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3184,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,270 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 331954,840 ops/s
[info]                  ·gc.alloc.rate:                   651,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3199,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,296 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 336934,580 ops/s
[info]                  ·gc.alloc.rate:               661,055 MB/sec
[info]                  ·gc.alloc.rate.norm:          3088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3142,561 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 337555,705 ops/s
[info]                  ·gc.alloc.rate:               662,333 MB/sec
[info]                  ·gc.alloc.rate.norm:          3088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3136,725 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 340223,241 ops/s
[info]                  ·gc.alloc.rate:                   667,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              3088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3109,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,289 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   336027,128 ±(99.9%) 12757,165 ops/s [Average]
[info]   (min, avg, max) = (331954,840, 336027,128, 340223,241), stdev = 3312,995
[info]   CI (99.9%): [323269,964, 348784,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   659,277 ±(99.9%) 25,038 MB/sec [Average]
[info]   (min, avg, max) = (651,275, 659,277, 667,478), stdev = 6,502
[info]   CI (99.9%): [634,238, 684,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3088,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3088,001, 3088,001, 3088,001), stdev = 0,001
[info]   CI (99.9%): [3088,001, 3088,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   673,401 ±(99.9%) 4,820 MB/sec [Average]
[info]   (min, avg, max) = (672,024, 673,401, 674,756), stdev = 1,252
[info]   CI (99.9%): [668,581, 678,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3154,450 ±(99.9%) 141,943 B/op [Average]
[info]   (min, avg, max) = (3109,033, 3154,450, 3199,112), stdev = 36,862
[info]   CI (99.9%): [3012,507, 3296,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,672 ±(99.9%) 5,519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,672, 3,235), stdev = 1,433
[info]   CI (99.9%): [≈ 0, 6,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,171 ±(99.9%) 26,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,171, 15,270), stdev = 6,765
[info]   CI (99.9%): [≈ 0, 29,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,28% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 918860,958 ops/s
[info] # Warmup Iteration   2: 991270,105 ops/s
[info] # Warmup Iteration   3: 989282,414 ops/s
[info] # Warmup Iteration   4: 989132,823 ops/s
[info] # Warmup Iteration   5: 989728,698 ops/s
[info] Iteration   1: 993779,677 ops/s
[info]                  ·gc.alloc.rate:      55,563 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 989169,284 ops/s
[info]                  ·gc.alloc.rate:      55,310 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 991608,637 ops/s
[info]                  ·gc.alloc.rate:      55,441 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 983731,732 ops/s
[info]                  ·gc.alloc.rate:               55,003 MB/sec
[info]                  ·gc.alloc.rate.norm:          88,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 818,437 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 995219,167 ops/s
[info]                  ·gc.alloc.rate:      55,657 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   990701,699 ±(99.9%) 17395,444 ops/s [Average]
[info]   (min, avg, max) = (983731,732, 990701,699, 995219,167), stdev = 4517,542
[info]   CI (99.9%): [973306,255, 1008097,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   55,395 ±(99.9%) 0,981 MB/sec [Average]
[info]   (min, avg, max) = (55,003, 55,395, 55,657), stdev = 0,255
[info]   CI (99.9%): [54,414, 56,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (88,000, 88,000, 88,000), stdev = 0,001
[info]   CI (99.9%): [88,000, 88,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102,310 ±(99.9%) 880,922 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,310, 511,551), stdev = 228,773
[info]   CI (99.9%): [≈ 0, 983,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   163,687 ±(99.9%) 1409,397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 163,687, 818,437), stdev = 366,016
[info]   CI (99.9%): [≈ 0, 1573,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79,48% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41069,544 ops/s
[info] # Warmup Iteration   2: 72490,533 ops/s
[info] # Warmup Iteration   3: 72314,757 ops/s
[info] # Warmup Iteration   4: 72970,754 ops/s
[info] # Warmup Iteration   5: 72832,189 ops/s
[info] Iteration   1: 72659,145 ops/s
[info]                  ·gc.alloc.rate:                   3373,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73576,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,353 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 72664,162 ops/s
[info]                  ·gc.alloc.rate:                   3374,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73656,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,353 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 73006,482 ops/s
[info]                  ·gc.alloc.rate:                   3390,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73369,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,692 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 72764,367 ops/s
[info]                  ·gc.alloc.rate:                   3378,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73620,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,450 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 72761,031 ops/s
[info]                  ·gc.alloc.rate:                   3378,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58940,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,900 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   72771,037 ±(99.9%) 542,930 ops/s [Average]
[info]   (min, avg, max) = (72659,145, 72771,037, 73006,482), stdev = 140,997
[info]   CI (99.9%): [72228,108, 73313,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3379,008 ±(99.9%) 25,217 MB/sec [Average]
[info]   (min, avg, max) = (3373,842, 3379,008, 3390,003), stdev = 6,549
[info]   CI (99.9%): [3353,792, 3404,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73080,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (73080,006, 73080,006, 73080,006), stdev = 0,001
[info]   CI (99.9%): [73080,004, 73080,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3265,863 ±(99.9%) 1164,840 MB/sec [Average]
[info]   (min, avg, max) = (2724,748, 3265,863, 3403,631), stdev = 302,505
[info]   CI (99.9%): [2101,023, 4430,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70632,553 ±(99.9%) 25170,647 B/op [Average]
[info]   (min, avg, max) = (58940,979, 70632,553, 73656,542), stdev = 6536,737
[info]   CI (99.9%): [45461,906, 95803,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,125), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,350 ±(99.9%) 3,230 B/op [Average]
[info]   (min, avg, max) = (0,450, 1,350, 2,692), stdev = 0,839
[info]   CI (99.9%): [≈ 0, 4,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,68% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 830893,444 ops/s
[info] # Warmup Iteration   2: 1209114,343 ops/s
[info] # Warmup Iteration   3: 1210017,179 ops/s
[info] # Warmup Iteration   4: 1208619,658 ops/s
[info] # Warmup Iteration   5: 1206759,325 ops/s
[info] Iteration   1: 1197740,973 ops/s
[info]                  ·gc.alloc.rate:               687,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 886,188 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1208330,315 ops/s
[info]                  ·gc.alloc.rate:                   694,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     879,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,081 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1206747,367 ops/s
[info]                  ·gc.alloc.rate:                   693,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     880,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1203640,600 ops/s
[info]                  ·gc.alloc.rate:               691,357 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 883,605 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1205994,397 ops/s
[info]                  ·gc.alloc.rate:               692,617 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 881,874 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1204490,730 ±(99.9%) 15920,653 ops/s [Average]
[info]   (min, avg, max) = (1197740,973, 1204490,730, 1208330,315), stdev = 4134,543
[info]   CI (99.9%): [1188570,078, 1220411,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   691,817 ±(99.9%) 9,154 MB/sec [Average]
[info]   (min, avg, max) = (687,941, 691,817, 694,077), stdev = 2,377
[info]   CI (99.9%): [682,663, 700,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,206 ±(99.9%) 2,123 MB/sec [Average]
[info]   (min, avg, max) = (674,386, 675,206, 675,759), stdev = 0,551
[info]   CI (99.9%): [673,083, 677,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   882,302 ±(99.9%) 10,353 B/op [Average]
[info]   (min, avg, max) = (879,378, 882,302, 886,188), stdev = 2,689
[info]   CI (99.9%): [871,948, 892,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,081), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,88% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 737460,500 ops/s
[info] # Warmup Iteration   2: 764379,388 ops/s
[info] # Warmup Iteration   3: 737168,219 ops/s
[info] # Warmup Iteration   4: 752661,139 ops/s
[info] # Warmup Iteration   5: 759308,528 ops/s
[info] Iteration   1: 752806,425 ops/s
[info]                  ·gc.alloc.rate:      210,445 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 757793,003 ops/s
[info]                  ·gc.alloc.rate:               211,815 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1062,453 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 761885,408 ops/s
[info]                  ·gc.alloc.rate:      213,012 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 758803,365 ops/s
[info]                  ·gc.alloc.rate:      212,138 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 759303,055 ops/s
[info]                  ·gc.alloc.rate:               212,218 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1060,375 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   758118,251 ±(99.9%) 12827,023 ops/s [Average]
[info]   (min, avg, max) = (752806,425, 758118,251, 761885,408), stdev = 3331,137
[info]   CI (99.9%): [745291,228, 770945,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   211,926 ±(99.9%) 3,609 MB/sec [Average]
[info]   (min, avg, max) = (210,445, 211,926, 213,012), stdev = 0,937
[info]   CI (99.9%): [208,317, 215,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,001, 440,001, 440,001), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,579 ±(99.9%) 1078,686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,579, 511,462), stdev = 280,131
[info]   CI (99.9%): [≈ 0, 1283,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   424,566 ±(99.9%) 2238,614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 424,566, 1062,453), stdev = 581,361
[info]   CI (99.9%): [≈ 0, 2663,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80,08% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 868060,673 ops/s
[info] # Warmup Iteration   2: 1018784,420 ops/s
[info] # Warmup Iteration   3: 1022155,366 ops/s
[info] # Warmup Iteration   4: 1019539,869 ops/s
[info] # Warmup Iteration   5: 1020211,908 ops/s
[info] Iteration   1: 1022248,934 ops/s
[info]                  ·gc.alloc.rate:      10,392 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1018785,915 ops/s
[info]                  ·gc.alloc.rate:      10,357 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1022966,705 ops/s
[info]                  ·gc.alloc.rate:      10,400 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1019802,350 ops/s
[info]                  ·gc.alloc.rate:      10,369 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1020150,314 ops/s
[info]                  ·gc.alloc.rate:      10,370 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1020790,843 ±(99.9%) 6743,449 ops/s [Average]
[info]   (min, avg, max) = (1018785,915, 1020790,843, 1022966,705), stdev = 1751,252
[info]   CI (99.9%): [1014047,395, 1027534,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10,378 ±(99.9%) 0,068 MB/sec [Average]
[info]   (min, avg, max) = (10,357, 10,378, 10,400), stdev = 0,018
[info]   CI (99.9%): [10,310, 10,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,28% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30177,972 ops/s
[info] # Warmup Iteration   2: 50707,105 ops/s
[info] # Warmup Iteration   3: 50911,362 ops/s
[info] # Warmup Iteration   4: 50942,153 ops/s
[info] # Warmup Iteration   5: 50894,113 ops/s
[info] Iteration   1: 51039,909 ops/s
[info]                  ·gc.alloc.rate:                   2159,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83573,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,851 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 51363,027 ops/s
[info]                  ·gc.alloc.rate:                   2173,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62353,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,913 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 50744,109 ops/s
[info]                  ·gc.alloc.rate:                   2147,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63174,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,937 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50912,241 ops/s
[info]                  ·gc.alloc.rate:                   2154,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63008,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 51305,445 ops/s
[info]                  ·gc.alloc.rate:                   2170,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              66600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62566,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,639 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   51072,946 ±(99.9%) 1006,437 ops/s [Average]
[info]   (min, avg, max) = (50744,109, 51072,946, 51363,027), stdev = 261,369
[info]   CI (99.9%): [50066,509, 52079,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2161,131 ±(99.9%) 42,277 MB/sec [Average]
[info]   (min, avg, max) = (2147,293, 2161,131, 2173,548), stdev = 10,979
[info]   CI (99.9%): [2118,854, 2203,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66600,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66600,008, 66600,008, 66600,009), stdev = 0,001
[info]   CI (99.9%): [66600,007, 66600,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2171,878 ±(99.9%) 1158,678 MB/sec [Average]
[info]   (min, avg, max) = (2034,952, 2171,878, 2710,145), stdev = 300,905
[info]   CI (99.9%): [1013,200, 3330,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66935,206 ±(99.9%) 35836,766 B/op [Average]
[info]   (min, avg, max) = (62353,278, 66935,206, 83573,066), stdev = 9306,694
[info]   CI (99.9%): [31098,441, 102771,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,183 ±(99.9%) 4,496 B/op [Average]
[info]   (min, avg, max) = (0,639, 2,183, 3,851), stdev = 1,168
[info]   CI (99.9%): [≈ 0, 6,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,48% complete, ETA 00:25:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275725,374 ops/s
[info] # Warmup Iteration   2: 311153,810 ops/s
[info] # Warmup Iteration   3: 310279,438 ops/s
[info] # Warmup Iteration   4: 308917,567 ops/s
[info] # Warmup Iteration   5: 312581,996 ops/s
[info] Iteration   1: 310388,616 ops/s
[info]                  ·gc.alloc.rate:                   1214,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6815,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,317 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 311335,167 ops/s
[info]                  ·gc.alloc.rate:                   1218,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6795,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 312739,579 ops/s
[info]                  ·gc.alloc.rate:               1223,943 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3382,222 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 311881,709 ops/s
[info]                  ·gc.alloc.rate:               1220,702 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6786,410 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 311257,582 ops/s
[info]                  ·gc.alloc.rate:                   1218,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6806,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   311520,531 ±(99.9%) 3335,457 ops/s [Average]
[info]   (min, avg, max) = (310388,616, 311520,531, 312739,579), stdev = 866,208
[info]   CI (99.9%): [308185,073, 314855,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1219,170 ±(99.9%) 13,093 MB/sec [Average]
[info]   (min, avg, max) = (1214,789, 1219,170, 1223,943), stdev = 3,400
[info]   CI (99.9%): [1206,077, 1232,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6160,001, 6160,001, 6160,001), stdev = 0,001
[info]   CI (99.9%): [6160,001, 6160,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,171 ±(99.9%) 1158,412 MB/sec [Average]
[info]   (min, avg, max) = (672,021, 1210,171, 1345,884), stdev = 300,836
[info]   CI (99.9%): [51,759, 2368,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6117,220 ±(99.9%) 5887,444 B/op [Average]
[info]   (min, avg, max) = (3382,222, 6117,220, 6815,646), stdev = 1528,951
[info]   CI (99.9%): [229,776, 12004,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,148 ±(99.9%) 0,545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,148, 0,317), stdev = 0,141
[info]   CI (99.9%): [≈ 0, 0,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,68% complete, ETA 00:25:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15944,594 ops/s
[info] # Warmup Iteration   2: 31453,769 ops/s
[info] # Warmup Iteration   3: 31594,628 ops/s
[info] # Warmup Iteration   4: 31431,240 ops/s
[info] # Warmup Iteration   5: 31587,040 ops/s
[info] Iteration   1: 31336,497 ops/s
[info]                  ·gc.alloc.rate:                   1710,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101933,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,045 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31678,199 ops/s
[info]                  ·gc.alloc.rate:                   1729,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67316,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,103 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31537,009 ops/s
[info]                  ·gc.alloc.rate:                   1721,542 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101490,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31584,725 ops/s
[info]                  ·gc.alloc.rate:                   1724,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101432,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,037 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31620,420 ops/s
[info]                  ·gc.alloc.rate:                   1725,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67601,937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,036 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   31551,370 ±(99.9%) 503,326 ops/s [Average]
[info]   (min, avg, max) = (31336,497, 31551,370, 31678,199), stdev = 130,712
[info]   CI (99.9%): [31048,044, 32054,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1722,319 ±(99.9%) 27,593 MB/sec [Average]
[info]   (min, avg, max) = (1710,564, 1722,319, 1729,480), stdev = 7,166
[info]   CI (99.9%): [1694,727, 1749,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85920,014 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (85920,013, 85920,014, 85920,015), stdev = 0,001
[info]   CI (99.9%): [85920,010, 85920,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,265 ±(99.9%) 1426,741 MB/sec [Average]
[info]   (min, avg, max) = (1355,020, 1762,265, 2035,656), stdev = 370,520
[info]   CI (99.9%): [335,525, 3189,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87955,005 ±(99.9%) 72049,667 B/op [Average]
[info]   (min, avg, max) = (67316,971, 87955,005, 101933,738), stdev = 18711,070
[info]   CI (99.9%): [15905,338, 160004,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,452 ±(99.9%) 3,553 B/op [Average]
[info]   (min, avg, max) = (1,036, 1,452, 3,103), stdev = 0,923
[info]   CI (99.9%): [≈ 0, 5,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,89% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97702,639 ops/s
[info] # Warmup Iteration   2: 149687,700 ops/s
[info] # Warmup Iteration   3: 149428,613 ops/s
[info] # Warmup Iteration   4: 150122,486 ops/s
[info] # Warmup Iteration   5: 150183,098 ops/s
[info] Iteration   1: 149520,411 ops/s
[info]                  ·gc.alloc.rate:                   1827,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21373,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 150293,461 ops/s
[info]                  ·gc.alloc.rate:                   1836,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21284,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,654 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 148981,164 ops/s
[info]                  ·gc.alloc.rate:                   1820,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21496,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,440 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 149816,304 ops/s
[info]                  ·gc.alloc.rate:                   1830,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14264,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,437 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 149685,099 ops/s
[info]                  ·gc.alloc.rate:                   1828,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21428,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   149659,288 ±(99.9%) 1833,241 ops/s [Average]
[info]   (min, avg, max) = (148981,164, 149659,288, 150293,461), stdev = 476,087
[info]   CI (99.9%): [147826,047, 151492,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1828,721 ±(99.9%) 22,377 MB/sec [Average]
[info]   (min, avg, max) = (1820,444, 1828,721, 1836,419), stdev = 5,811
[info]   CI (99.9%): [1806,344, 1851,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19232,003, 19232,003, 19232,003), stdev = 0,001
[info]   CI (99.9%): [19232,002, 19232,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1898,671 ±(99.9%) 1164,120 MB/sec [Average]
[info]   (min, avg, max) = (1357,890, 1898,671, 2037,747), stdev = 302,318
[info]   CI (99.9%): [734,551, 3062,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19969,454 ±(99.9%) 12284,773 B/op [Average]
[info]   (min, avg, max) = (14264,127, 19969,454, 21496,730), stdev = 3190,316
[info]   CI (99.9%): [7684,681, 32254,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,394 ±(99.9%) 0,702 B/op [Average]
[info]   (min, avg, max) = (0,219, 0,394, 0,654), stdev = 0,182
[info]   CI (99.9%): [≈ 0, 1,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,09% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348237,460 ops/s
[info] # Warmup Iteration   2: 384541,086 ops/s
[info] # Warmup Iteration   3: 387318,486 ops/s
[info] # Warmup Iteration   4: 389416,224 ops/s
[info] # Warmup Iteration   5: 383662,726 ops/s
[info] Iteration   1: 390366,396 ops/s
[info]                  ·gc.alloc.rate:                   1859,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8132,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 389154,547 ops/s
[info]                  ·gc.alloc.rate:                   1854,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8168,679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 390722,576 ops/s
[info]                  ·gc.alloc.rate:                   1861,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8149,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 388910,545 ops/s
[info]                  ·gc.alloc.rate:               1852,501 MB/sec
[info]                  ·gc.alloc.rate.norm:          7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025,951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8197,855 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 376548,729 ops/s
[info]                  ·gc.alloc.rate:                   1793,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5651,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,174 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   387140,559 ±(99.9%) 22992,306 ops/s [Average]
[info]   (min, avg, max) = (376548,729, 387140,559, 390722,576), stdev = 5971,029
[info]   CI (99.9%): [364148,253, 410132,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1844,025 ±(99.9%) 110,174 MB/sec [Average]
[info]   (min, avg, max) = (1793,233, 1844,025, 1861,149), stdev = 28,612
[info]   CI (99.9%): [1733,852, 1954,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7496,001, 7496,001, 7496,001), stdev = 0,001
[info]   CI (99.9%): [7496,001, 7496,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1887,779 ±(99.9%) 1153,202 MB/sec [Average]
[info]   (min, avg, max) = (1352,082, 1887,779, 2025,951), stdev = 299,483
[info]   CI (99.9%): [734,578, 3040,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7660,066 ±(99.9%) 4323,697 B/op [Average]
[info]   (min, avg, max) = (5651,920, 7660,066, 8197,855), stdev = 1122,851
[info]   CI (99.9%): [3336,368, 11983,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,186 ±(99.9%) 0,421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,186, 0,253), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81,29% complete, ETA 00:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422135,083 ops/s
[info] # Warmup Iteration   2: 461752,291 ops/s
[info] # Warmup Iteration   3: 462790,301 ops/s
[info] # Warmup Iteration   4: 463575,568 ops/s
[info] # Warmup Iteration   5: 454440,580 ops/s
[info] Iteration   1: 465358,080 ops/s
[info]                  ·gc.alloc.rate:                   1593,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4546,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,141 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 465964,177 ops/s
[info]                  ·gc.alloc.rate:               1596,211 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4542,826 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 459916,471 ops/s
[info]                  ·gc.alloc.rate:                   1575,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6912,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 463848,958 ops/s
[info]                  ·gc.alloc.rate:                   1589,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4574,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 465404,707 ops/s
[info]                  ·gc.alloc.rate:               1594,315 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4563,904 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   464098,479 ±(99.9%) 9495,783 ops/s [Average]
[info]   (min, avg, max) = (459916,471, 464098,479, 465964,177), stdev = 2466,025
[info]   CI (99.9%): [454602,696, 473594,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1589,895 ±(99.9%) 31,947 MB/sec [Average]
[info]   (min, avg, max) = (1575,788, 1589,895, 1596,211), stdev = 8,296
[info]   CI (99.9%): [1557,948, 1621,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,001, 5392,001, 5392,001), stdev = 0,001
[info]   CI (99.9%): [5392,001, 5392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1481,310 ±(99.9%) 1159,622 MB/sec [Average]
[info]   (min, avg, max) = (1343,915, 1481,310, 2020,008), stdev = 301,150
[info]   CI (99.9%): [321,687, 2640,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   5027,936 ±(99.9%) 4055,954 B/op [Average]
[info]   (min, avg, max) = (4542,826, 5027,936, 6912,024), stdev = 1053,318
[info]   CI (99.9%): [971,982, 9083,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,085 ±(99.9%) 0,357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,085, 0,214), stdev = 0,093
[info]   CI (99.9%): [≈ 0, 0,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81,49% complete, ETA 00:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35216,259 ops/s
[info] # Warmup Iteration   2: 58099,362 ops/s
[info] # Warmup Iteration   3: 59143,572 ops/s
[info] # Warmup Iteration   4: 58713,865 ops/s
[info] # Warmup Iteration   5: 55797,504 ops/s
[info] Iteration   1: 59178,112 ops/s
[info]                  ·gc.alloc.rate:                   1485,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35962,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 58737,760 ops/s
[info]                  ·gc.alloc.rate:               1474,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          39496,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36267,961 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 59223,607 ops/s
[info]                  ·gc.alloc.rate:                   1486,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35988,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,553 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 58934,051 ops/s
[info]                  ·gc.alloc.rate:                   1479,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54307,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,112 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 59112,715 ops/s
[info]                  ·gc.alloc.rate:                   1483,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36122,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   59037,249 ±(99.9%) 771,597 ops/s [Average]
[info]   (min, avg, max) = (58737,760, 59037,249, 59223,607), stdev = 200,381
[info]   CI (99.9%): [58265,652, 59808,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1481,531 ±(99.9%) 19,205 MB/sec [Average]
[info]   (min, avg, max) = (1474,078, 1481,531, 1486,222), stdev = 4,987
[info]   CI (99.9%): [1462,326, 1500,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39496,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (39496,007, 39496,007, 39496,008), stdev = 0,001
[info]   CI (99.9%): [39496,005, 39496,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,058 ±(99.9%) 1170,134 MB/sec [Average]
[info]   (min, avg, max) = (1352,230, 1490,058, 2033,648), stdev = 303,880
[info]   CI (99.9%): [319,924, 2660,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39729,829 ±(99.9%) 31382,449 B/op [Average]
[info]   (min, avg, max) = (35962,920, 39729,829, 54307,229), stdev = 8149,922
[info]   CI (99.9%): [8347,380, 71112,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,776 ±(99.9%) 1,911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,776, 1,112), stdev = 0,496
[info]   CI (99.9%): [≈ 0, 2,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81,69% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67436,896 ops/s
[info] # Warmup Iteration   2: 77988,645 ops/s
[info] # Warmup Iteration   3: 81797,019 ops/s
[info] # Warmup Iteration   4: 81552,539 ops/s
[info] # Warmup Iteration   5: 81784,785 ops/s
[info] Iteration   1: 81116,708 ops/s
[info]                  ·gc.alloc.rate:                   1677,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39119,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,212 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81500,012 ops/s
[info]                  ·gc.alloc.rate:                   1685,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25982,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,608 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 81929,889 ops/s
[info]                  ·gc.alloc.rate:                   1694,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38801,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,400 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 81813,255 ops/s
[info]                  ·gc.alloc.rate:               1691,885 MB/sec
[info]                  ·gc.alloc.rate.norm:          32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25940,516 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 81558,118 ops/s
[info]                  ·gc.alloc.rate:                   1686,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39087,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,803 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   81583,596 ±(99.9%) 1215,063 ops/s [Average]
[info]   (min, avg, max) = (81116,708, 81583,596, 81929,889), stdev = 315,548
[info]   CI (99.9%): [80368,533, 82798,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1686,954 ±(99.9%) 25,315 MB/sec [Average]
[info]   (min, avg, max) = (1677,252, 1686,954, 1694,101), stdev = 6,574
[info]   CI (99.9%): [1661,639, 1712,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32544,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32544,005, 32544,005, 32544,005), stdev = 0,001
[info]   CI (99.9%): [32544,004, 32544,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,086 ±(99.9%) 1420,344 MB/sec [Average]
[info]   (min, avg, max) = (1345,492, 1751,086, 2025,332), stdev = 368,859
[info]   CI (99.9%): [330,742, 3171,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33786,534 ±(99.9%) 27509,613 B/op [Average]
[info]   (min, avg, max) = (25940,516, 33786,534, 39119,991), stdev = 7144,159
[info]   CI (99.9%): [6276,922, 61296,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,805 ±(99.9%) 2,452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,805, 1,608), stdev = 0,637
[info]   CI (99.9%): [≈ 0, 3,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,89% complete, ETA 00:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86006,122 ops/s
[info] # Warmup Iteration   2: 147468,179 ops/s
[info] # Warmup Iteration   3: 148236,921 ops/s
[info] # Warmup Iteration   4: 147578,442 ops/s
[info] # Warmup Iteration   5: 148423,768 ops/s
[info] Iteration   1: 134058,417 ops/s
[info]                  ·gc.alloc.rate:                   659,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7918,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 148719,328 ops/s
[info]                  ·gc.alloc.rate:                   731,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7144,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 130280,496 ops/s
[info]                  ·gc.alloc.rate:               641,027 MB/sec
[info]                  ·gc.alloc.rate.norm:          7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8155,913 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 128335,093 ops/s
[info]                  ·gc.alloc.rate:                   631,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8287,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,511 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 126650,276 ops/s
[info]                  ·gc.alloc.rate:                   623,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8397,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   133608,722 ±(99.9%) 34216,654 ops/s [Average]
[info]   (min, avg, max) = (126650,276, 133608,722, 148719,328), stdev = 8885,956
[info]   CI (99.9%): [99392,068, 167825,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   657,406 ±(99.9%) 168,359 MB/sec [Average]
[info]   (min, avg, max) = (623,127, 657,406, 731,751), stdev = 43,722
[info]   CI (99.9%): [489,047, 825,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7744,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7744,003, 7744,003, 7744,003), stdev = 0,001
[info]   CI (99.9%): [7744,002, 7744,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,257 ±(99.9%) 2,139 MB/sec [Average]
[info]   (min, avg, max) = (674,464, 675,257, 675,833), stdev = 0,556
[info]   CI (99.9%): [673,118, 677,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7980,884 ±(99.9%) 1927,044 B/op [Average]
[info]   (min, avg, max) = (7144,703, 7980,884, 8397,912), stdev = 500,447
[info]   CI (99.9%): [6053,840, 9907,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,247 ±(99.9%) 0,698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,247, 0,511), stdev = 0,181
[info]   CI (99.9%): [≈ 0, 0,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,09% complete, ETA 00:23:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223841,707 ops/s
[info] # Warmup Iteration   2: 248903,926 ops/s
[info] # Warmup Iteration   3: 248423,573 ops/s
[info] # Warmup Iteration   4: 249368,195 ops/s
[info] # Warmup Iteration   5: 250295,207 ops/s
[info] Iteration   1: 232798,658 ops/s
[info]                  ·gc.alloc.rate:               958,452 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4548,062 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 249762,861 ops/s
[info]                  ·gc.alloc.rate:                   1028,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8468,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,262 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 245542,410 ops/s
[info]                  ·gc.alloc.rate:               1010,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4308,240 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 249655,119 ops/s
[info]                  ·gc.alloc.rate:                   1027,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8473,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 250151,377 ops/s
[info]                  ·gc.alloc.rate:                   1029,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4228,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   245582,085 ±(99.9%) 28450,793 ops/s [Average]
[info]   (min, avg, max) = (232798,658, 245582,085, 250151,377), stdev = 7388,581
[info]   CI (99.9%): [217131,292, 274032,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1011,062 ±(99.9%) 117,065 MB/sec [Average]
[info]   (min, avg, max) = (958,452, 1011,062, 1029,566), stdev = 30,401
[info]   CI (99.9%): [893,997, 1128,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6480,002, 6480,002, 6480,002), stdev = 0,001
[info]   CI (99.9%): [6480,001, 6480,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940,983 ±(99.9%) 1417,146 MB/sec [Average]
[info]   (min, avg, max) = (671,832, 940,983, 1344,227), stdev = 368,028
[info]   CI (99.9%): [≈ 0, 2358,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6005,439 ±(99.9%) 8679,404 B/op [Average]
[info]   (min, avg, max) = (4228,450, 6005,439, 8473,867), stdev = 2254,014
[info]   CI (99.9%): [≈ 0, 14684,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,105 ±(99.9%) 0,422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,105, 0,262), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82,29% complete, ETA 00:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9392,105 ops/s
[info] # Warmup Iteration   2: 19907,546 ops/s
[info] # Warmup Iteration   3: 19855,491 ops/s
[info] # Warmup Iteration   4: 18574,567 ops/s
[info] # Warmup Iteration   5: 19748,026 ops/s
[info] Iteration   1: 19467,628 ops/s
[info]                  ·gc.alloc.rate:                   1114,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              90088,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109208,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,366 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 20080,120 ops/s
[info]                  ·gc.alloc.rate:               1149,361 MB/sec
[info]                  ·gc.alloc.rate.norm:          90088,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105959,221 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 20068,069 ops/s
[info]                  ·gc.alloc.rate:               1148,645 MB/sec
[info]                  ·gc.alloc.rate.norm:          90088,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53021,703 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 19988,194 ops/s
[info]                  ·gc.alloc.rate:               1144,204 MB/sec
[info]                  ·gc.alloc.rate.norm:          90088,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106572,622 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 19955,765 ops/s
[info]                  ·gc.alloc.rate:                   1142,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              90088,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     106843,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,283 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   19911,955 ±(99.9%) 977,581 ops/s [Average]
[info]   (min, avg, max) = (19467,628, 19911,955, 20080,120), stdev = 253,875
[info]   CI (99.9%): [18934,374, 20889,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1139,777 ±(99.9%) 56,020 MB/sec [Average]
[info]   (min, avg, max) = (1114,288, 1139,777, 1149,361), stdev = 14,548
[info]   CI (99.9%): [1083,757, 1195,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90088,022 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (90088,020, 90088,022, 90088,028), stdev = 0,003
[info]   CI (99.9%): [90088,010, 90088,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1217,421 ±(99.9%) 1165,380 MB/sec [Average]
[info]   (min, avg, max) = (676,040, 1217,421, 1354,854), stdev = 302,645
[info]   CI (99.9%): [52,042, 2382,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   96321,089 ±(99.9%) 93326,092 B/op [Average]
[info]   (min, avg, max) = (53021,703, 96321,089, 109208,717), stdev = 24236,490
[info]   CI (99.9%): [2994,997, 189647,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,330 ±(99.9%) 7,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,330, 3,366), stdev = 1,821
[info]   CI (99.9%): [≈ 0, 8,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,49% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127448,403 ops/s
[info] # Warmup Iteration   2: 191493,829 ops/s
[info] # Warmup Iteration   3: 191401,060 ops/s
[info] # Warmup Iteration   4: 192438,970 ops/s
[info] # Warmup Iteration   5: 191695,260 ops/s
[info] Iteration   1: 191465,721 ops/s
[info]                  ·gc.alloc.rate:                   1232,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11103,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 192097,416 ops/s
[info]                  ·gc.alloc.rate:                   1236,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11078,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,512 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 192339,279 ops/s
[info]                  ·gc.alloc.rate:                   1237,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11069,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 191786,776 ops/s
[info]                  ·gc.alloc.rate:                   1234,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11112,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,342 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 192389,173 ops/s
[info]                  ·gc.alloc.rate:                   1237,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11083,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   192015,673 ±(99.9%) 1498,472 ops/s [Average]
[info]   (min, avg, max) = (191465,721, 192015,673, 192389,173), stdev = 389,148
[info]   CI (99.9%): [190517,201, 193514,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1235,620 ±(99.9%) 9,514 MB/sec [Average]
[info]   (min, avg, max) = (1232,082, 1235,620, 1237,970), stdev = 2,471
[info]   CI (99.9%): [1226,106, 1245,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10128,002, 10128,002, 10128,002), stdev = 0,001
[info]   CI (99.9%): [10128,002, 10128,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1352,916 ±(99.9%) 6,201 MB/sec [Average]
[info]   (min, avg, max) = (1350,776, 1352,916, 1354,731), stdev = 1,610
[info]   CI (99.9%): [1346,715, 1359,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11089,468 ±(99.9%) 69,355 B/op [Average]
[info]   (min, avg, max) = (11069,656, 11089,468, 11112,614), stdev = 18,011
[info]   CI (99.9%): [11020,113, 11158,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,273 ±(99.9%) 0,588 B/op [Average]
[info]   (min, avg, max) = (0,170, 0,273, 0,512), stdev = 0,153
[info]   CI (99.9%): [≈ 0, 0,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,70% complete, ETA 00:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567250,828 ops/s
[info] # Warmup Iteration   2: 633566,580 ops/s
[info] # Warmup Iteration   3: 634887,745 ops/s
[info] # Warmup Iteration   4: 635770,544 ops/s
[info] # Warmup Iteration   5: 632090,046 ops/s
[info] Iteration   1: 637393,523 ops/s
[info]                  ·gc.alloc.rate:                   709,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1666,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,845 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 637285,951 ops/s
[info]                  ·gc.alloc.rate:                   709,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1666,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 635562,227 ops/s
[info]                  ·gc.alloc.rate:               707,412 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1665,933 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 636433,234 ops/s
[info]                  ·gc.alloc.rate:                   708,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1663,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 637371,231 ops/s
[info]                  ·gc.alloc.rate:               709,527 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1659,582 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   636809,233 ±(99.9%) 3093,062 ops/s [Average]
[info]   (min, avg, max) = (635562,227, 636809,233, 637393,523), stdev = 803,258
[info]   CI (99.9%): [633716,171, 639902,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   708,864 ±(99.9%) 3,521 MB/sec [Average]
[info]   (min, avg, max) = (707,412, 708,864, 709,527), stdev = 0,914
[info]   CI (99.9%): [705,343, 712,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1752,001, 1752,001, 1752,001), stdev = 0,001
[info]   CI (99.9%): [1752,001, 1752,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,397 ±(99.9%) 4,764 MB/sec [Average]
[info]   (min, avg, max) = (672,099, 673,397, 674,759), stdev = 1,237
[info]   CI (99.9%): [668,634, 678,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1664,344 ±(99.9%) 11,078 B/op [Average]
[info]   (min, avg, max) = (1659,582, 1664,344, 1666,456), stdev = 2,877
[info]   CI (99.9%): [1653,266, 1675,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,652 ±(99.9%) 5,436 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,652, 3,177), stdev = 1,412
[info]   CI (99.9%): [≈ 0, 6,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,610 ±(99.9%) 13,423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,610, 7,845), stdev = 3,486
[info]   CI (99.9%): [≈ 0, 15,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82,90% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562204,028 ops/s
[info] # Warmup Iteration   2: 605714,193 ops/s
[info] # Warmup Iteration   3: 605723,266 ops/s
[info] # Warmup Iteration   4: 604697,366 ops/s
[info] # Warmup Iteration   5: 604238,159 ops/s
[info] Iteration   1: 604617,272 ops/s
[info]                  ·gc.alloc.rate:      12,293 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 605665,174 ops/s
[info]                  ·gc.alloc.rate:      12,314 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 605732,224 ops/s
[info]                  ·gc.alloc.rate:      12,316 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 603764,409 ops/s
[info]                  ·gc.alloc.rate:      12,277 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 605364,657 ops/s
[info]                  ·gc.alloc.rate:      12,305 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   605028,747 ±(99.9%) 3210,510 ops/s [Average]
[info]   (min, avg, max) = (603764,409, 605028,747, 605732,224), stdev = 833,759
[info]   CI (99.9%): [601818,238, 608239,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12,301 ±(99.9%) 0,062 MB/sec [Average]
[info]   (min, avg, max) = (12,277, 12,301, 12,316), stdev = 0,016
[info]   CI (99.9%): [12,239, 12,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,001, 32,001, 32,001), stdev = 0,001
[info]   CI (99.9%): [32,001, 32,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,10% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14880,370 ops/s
[info] # Warmup Iteration   2: 23258,126 ops/s
[info] # Warmup Iteration   3: 23043,195 ops/s
[info] # Warmup Iteration   4: 23273,304 ops/s
[info] # Warmup Iteration   5: 23434,001 ops/s
[info] Iteration   1: 23498,705 ops/s
[info]                  ·gc.alloc.rate:                   481,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34263,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,394 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 23009,704 ops/s
[info]                  ·gc.alloc.rate:                   471,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46132,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,781 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 21539,159 ops/s
[info]                  ·gc.alloc.rate:      441,519 MB/sec
[info]                  ·gc.alloc.rate.norm: 32264,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23532,787 ops/s
[info]                  ·gc.alloc.rate:                   482,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45106,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,392 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 22595,690 ops/s
[info]                  ·gc.alloc.rate:                   463,236 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47023,530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,450 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   22835,209 ±(99.9%) 3160,346 ops/s [Average]
[info]   (min, avg, max) = (21539,159, 22835,209, 23532,787), stdev = 820,732
[info]   CI (99.9%): [19674,862, 25995,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   468,143 ±(99.9%) 64,911 MB/sec [Average]
[info]   (min, avg, max) = (441,519, 468,143, 482,486), stdev = 16,857
[info]   CI (99.9%): [403,232, 533,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32264,157 ±(99.9%) 1,201 B/op [Average]
[info]   (min, avg, max) = (32264,017, 32264,157, 32264,715), stdev = 0,312
[info]   CI (99.9%): [32262,957, 32265,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   507,156 ±(99.9%) 1125,063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,156, 675,148), stdev = 292,175
[info]   CI (99.9%): [≈ 0, 1632,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34505,312 ±(99.9%) 76891,424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34505,312, 47023,530), stdev = 19968,459
[info]   CI (99.9%): [≈ 0, 111396,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,333), stdev = 0,142
[info]   CI (99.9%): [≈ 0, 0,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,404 ±(99.9%) 37,481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,404, 22,781), stdev = 9,734
[info]   CI (99.9%): [≈ 0, 42,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83,30% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74476,812 ops/s
[info] # Warmup Iteration   2: 85585,386 ops/s
[info] # Warmup Iteration   3: 86175,321 ops/s
[info] # Warmup Iteration   4: 86763,416 ops/s
[info] # Warmup Iteration   5: 86612,126 ops/s
[info] Iteration   1: 86173,125 ops/s
[info]                  ·gc.alloc.rate:                   1507,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24549,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,521 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 86390,130 ops/s
[info]                  ·gc.alloc.rate:                   1511,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36748,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,379 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 86654,904 ops/s
[info]                  ·gc.alloc.rate:               1515,579 MB/sec
[info]                  ·gc.alloc.rate.norm:          27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24443,304 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 86406,960 ops/s
[info]                  ·gc.alloc.rate:                   1511,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24537,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,758 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 86410,328 ops/s
[info]                  ·gc.alloc.rate:               1511,220 MB/sec
[info]                  ·gc.alloc.rate.norm:          27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24566,617 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   86407,089 ±(99.9%) 657,010 ops/s [Average]
[info]   (min, avg, max) = (86173,125, 86407,089, 86654,904), stdev = 170,623
[info]   CI (99.9%): [85750,079, 87064,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1511,281 ±(99.9%) 11,478 MB/sec [Average]
[info]   (min, avg, max) = (1507,154, 1511,281, 1515,579), stdev = 2,981
[info]   CI (99.9%): [1499,804, 1522,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27528,005, 27528,005, 27528,005), stdev = 0,001
[info]   CI (99.9%): [27528,004, 27528,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,576 ±(99.9%) 1155,251 MB/sec [Average]
[info]   (min, avg, max) = (1344,070, 1480,576, 2017,251), stdev = 300,015
[info]   CI (99.9%): [325,325, 2635,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26969,040 ±(99.9%) 21051,357 B/op [Average]
[info]   (min, avg, max) = (24443,304, 26969,040, 36748,280), stdev = 5466,970
[info]   CI (99.9%): [5917,684, 48020,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,532 ±(99.9%) 2,449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,532, 1,521), stdev = 0,636
[info]   CI (99.9%): [≈ 0, 2,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,50% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98208,986 ops/s
[info] # Warmup Iteration   2: 155222,470 ops/s
[info] # Warmup Iteration   3: 156697,702 ops/s
[info] # Warmup Iteration   4: 156418,244 ops/s
[info] # Warmup Iteration   5: 157040,903 ops/s
[info] Iteration   1: 156280,797 ops/s
[info]                  ·gc.alloc.rate:                   664,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6788,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,515 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 157109,521 ops/s
[info]                  ·gc.alloc.rate:                   667,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6753,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,209 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 156931,889 ops/s
[info]                  ·gc.alloc.rate:                   666,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6767,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,209 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 156827,263 ops/s
[info]                  ·gc.alloc.rate:               666,433 MB/sec
[info]                  ·gc.alloc.rate.norm:          6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6771,907 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 156705,744 ops/s
[info]                  ·gc.alloc.rate:                   665,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6783,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,209 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   156771,043 ±(99.9%) 1199,591 ops/s [Average]
[info]   (min, avg, max) = (156280,797, 156771,043, 157109,521), stdev = 311,530
[info]   CI (99.9%): [155571,451, 157970,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   666,176 ±(99.9%) 5,220 MB/sec [Average]
[info]   (min, avg, max) = (664,075, 666,176, 667,696), stdev = 1,356
[info]   CI (99.9%): [660,956, 671,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6688,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6688,003, 6688,003, 6688,003), stdev = 0,001
[info]   CI (99.9%): [6688,002, 6688,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,634 ±(99.9%) 2,033 MB/sec [Average]
[info]   (min, avg, max) = (674,046, 674,634, 675,377), stdev = 0,528
[info]   CI (99.9%): [672,601, 676,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6772,939 ±(99.9%) 53,774 B/op [Average]
[info]   (min, avg, max) = (6753,253, 6772,939, 6788,419), stdev = 13,965
[info]   CI (99.9%): [6719,165, 6826,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,250), stdev = 0,105
[info]   CI (99.9%): [≈ 0, 0,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,628 ±(99.9%) 4,077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,628, 2,515), stdev = 1,059
[info]   CI (99.9%): [≈ 0, 4,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,70% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216876,745 ops/s
[info] # Warmup Iteration   2: 234824,634 ops/s
[info] # Warmup Iteration   3: 235576,324 ops/s
[info] # Warmup Iteration   4: 235398,672 ops/s
[info] # Warmup Iteration   5: 236211,485 ops/s
[info] Iteration   1: 234765,798 ops/s
[info]                  ·gc.alloc.rate:                   836,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4523,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,419 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 236583,678 ops/s
[info]                  ·gc.alloc.rate:               842,939 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8950,637 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 235591,378 ops/s
[info]                  ·gc.alloc.rate:               839,339 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4489,803 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 235370,649 ops/s
[info]                  ·gc.alloc.rate:                   838,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4494,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,139 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 235783,620 ops/s
[info]                  ·gc.alloc.rate:               840,117 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4486,148 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   235619,025 ±(99.9%) 2545,576 ops/s [Average]
[info]   (min, avg, max) = (234765,798, 235619,025, 236583,678), stdev = 661,078
[info]   CI (99.9%): [233073,448, 238164,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   839,518 ±(99.9%) 8,993 MB/sec [Average]
[info]   (min, avg, max) = (836,515, 839,518, 842,939), stdev = 2,335
[info]   CI (99.9%): [830,525, 848,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5608,002, 5608,002, 5608,002), stdev = 0,001
[info]   CI (99.9%): [5608,001, 5608,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,253 ±(99.9%) 1158,347 MB/sec [Average]
[info]   (min, avg, max) = (671,980, 807,253, 1345,370), stdev = 300,819
[info]   CI (99.9%): [≈ 0, 1965,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5388,863 ±(99.9%) 7667,201 B/op [Average]
[info]   (min, avg, max) = (4486,148, 5388,863, 8950,637), stdev = 1991,148
[info]   CI (99.9%): [≈ 0, 13056,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,112 ±(99.9%) 0,701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,112, 0,419), stdev = 0,182
[info]   CI (99.9%): [≈ 0, 0,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,90% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32281,516 ops/s
[info] # Warmup Iteration   2: 46604,713 ops/s
[info] # Warmup Iteration   3: 46359,908 ops/s
[info] # Warmup Iteration   4: 47100,835 ops/s
[info] # Warmup Iteration   5: 47047,957 ops/s
[info] Iteration   1: 46846,515 ops/s
[info]                  ·gc.alloc.rate:                   1941,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68049,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,098 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 46984,107 ops/s
[info]                  ·gc.alloc.rate:                   1947,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67962,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,486 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 47107,464 ops/s
[info]                  ·gc.alloc.rate:                   1952,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67874,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,391 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47111,018 ops/s
[info]                  ·gc.alloc.rate:                   1952,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67968,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,695 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 46971,084 ops/s
[info]                  ·gc.alloc.rate:                   1946,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68215,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,697 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   47004,037 ±(99.9%) 423,739 ops/s [Average]
[info]   (min, avg, max) = (46846,515, 47004,037, 47111,018), stdev = 110,044
[info]   CI (99.9%): [46580,298, 47427,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1947,904 ±(99.9%) 17,668 MB/sec [Average]
[info]   (min, avg, max) = (1941,399, 1947,904, 1952,551), stdev = 4,588
[info]   CI (99.9%): [1930,237, 1965,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65224,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65224,009, 65224,009, 65224,009), stdev = 0,001
[info]   CI (99.9%): [65224,008, 65224,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2031,221 ±(99.9%) 16,067 MB/sec [Average]
[info]   (min, avg, max) = (2025,492, 2031,221, 2035,616), stdev = 4,173
[info]   CI (99.9%): [2015,154, 2047,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68013,941 ±(99.9%) 495,385 B/op [Average]
[info]   (min, avg, max) = (67874,038, 68013,941, 68215,579), stdev = 128,650
[info]   CI (99.9%): [67518,556, 68509,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,674 ±(99.9%) 4,497 B/op [Average]
[info]   (min, avg, max) = (0,695, 1,674, 3,486), stdev = 1,168
[info]   CI (99.9%): [≈ 0, 6,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84,10% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128949,185 ops/s
[info] # Warmup Iteration   2: 141254,672 ops/s
[info] # Warmup Iteration   3: 139906,347 ops/s
[info] # Warmup Iteration   4: 141160,466 ops/s
[info] # Warmup Iteration   5: 141859,176 ops/s
[info] Iteration   1: 141662,424 ops/s
[info]                  ·gc.alloc.rate:                   1312,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14933,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 142238,750 ops/s
[info]                  ·gc.alloc.rate:                   1318,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14874,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,461 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 142334,246 ops/s
[info]                  ·gc.alloc.rate:               1318,843 MB/sec
[info]                  ·gc.alloc.rate.norm:          14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14870,441 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 142000,190 ops/s
[info]                  ·gc.alloc.rate:                   1315,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7456,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,461 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 141720,722 ops/s
[info]                  ·gc.alloc.rate:                   1313,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14956,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   141991,266 ±(99.9%) 1155,665 ops/s [Average]
[info]   (min, avg, max) = (141662,424, 141991,266, 142334,246), stdev = 300,122
[info]   CI (99.9%): [140835,602, 143146,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1315,722 ±(99.9%) 10,896 MB/sec [Average]
[info]   (min, avg, max) = (1312,671, 1315,722, 1318,843), stdev = 2,830
[info]   CI (99.9%): [1304,826, 1326,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   14584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14584,003, 14584,003, 14584,003), stdev = 0,001
[info]   CI (99.9%): [14584,003, 14584,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,537 ±(99.9%) 1157,596 MB/sec [Average]
[info]   (min, avg, max) = (672,768, 1210,537, 1346,647), stdev = 300,624
[info]   CI (99.9%): [52,941, 2368,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13418,298 ±(99.9%) 12834,022 B/op [Average]
[info]   (min, avg, max) = (7456,501, 13418,298, 14956,832), stdev = 3332,955
[info]   CI (99.9%): [584,275, 26252,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,277 ±(99.9%) 0,742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,277, 0,461), stdev = 0,193
[info]   CI (99.9%): [≈ 0, 1,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84,31% complete, ETA 00:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230661,779 ops/s
[info] # Warmup Iteration   2: 298080,047 ops/s
[info] # Warmup Iteration   3: 299649,211 ops/s
[info] # Warmup Iteration   4: 300392,544 ops/s
[info] # Warmup Iteration   5: 300242,349 ops/s
[info] Iteration   1: 299590,219 ops/s
[info]                  ·gc.alloc.rate:                   1409,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7054,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,328 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 299926,121 ops/s
[info]                  ·gc.alloc.rate:                   1411,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7047,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 298801,963 ops/s
[info]                  ·gc.alloc.rate:                   1406,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7077,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 300362,905 ops/s
[info]                  ·gc.alloc.rate:                   1413,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10572,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,327 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 299651,840 ops/s
[info]                  ·gc.alloc.rate:                   1410,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7073,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,109 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   299666,610 ±(99.9%) 2200,131 ops/s [Average]
[info]   (min, avg, max) = (298801,963, 299666,610, 300362,905), stdev = 571,367
[info]   CI (99.9%): [297466,479, 301866,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1410,468 ±(99.9%) 10,803 MB/sec [Average]
[info]   (min, avg, max) = (1406,220, 1410,468, 1413,836), stdev = 2,805
[info]   CI (99.9%): [1399,665, 1421,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7408,001, 7408,001, 7408,002), stdev = 0,001
[info]   CI (99.9%): [7408,001, 7408,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1478,772 ±(99.9%) 1160,234 MB/sec [Average]
[info]   (min, avg, max) = (1342,663, 1478,772, 2017,762), stdev = 301,309
[info]   CI (99.9%): [318,538, 2639,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7765,080 ±(99.9%) 6043,071 B/op [Average]
[info]   (min, avg, max) = (7047,088, 7765,080, 10572,356), stdev = 1569,366
[info]   CI (99.9%): [1722,009, 13808,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,219 ±(99.9%) 0,420 B/op [Average]
[info]   (min, avg, max) = (0,109, 0,219, 0,328), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,51% complete, ETA 00:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384197,113 ops/s
[info] # Warmup Iteration   2: 583028,707 ops/s
[info] # Warmup Iteration   3: 576210,620 ops/s
[info] # Warmup Iteration   4: 579713,355 ops/s
[info] # Warmup Iteration   5: 583177,726 ops/s
[info] Iteration   1: 582114,249 ops/s
[info]                  ·gc.alloc.rate:                   467,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1383,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 583004,705 ops/s
[info]                  ·gc.alloc.rate:      468,227 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 582104,614 ops/s
[info]                  ·gc.alloc.rate:                   467,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1823,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,788 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 580917,428 ops/s
[info]                  ·gc.alloc.rate:                   466,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1827,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 581426,964 ops/s
[info]                  ·gc.alloc.rate:               466,896 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1827,381 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   581913,592 ±(99.9%) 3042,026 ops/s [Average]
[info]   (min, avg, max) = (580917,428, 581913,592, 583004,705), stdev = 790,005
[info]   CI (99.9%): [578871,566, 584955,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   467,327 ±(99.9%) 2,450 MB/sec [Average]
[info]   (min, avg, max) = (466,564, 467,327, 468,227), stdev = 0,636
[info]   CI (99.9%): [464,876, 469,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507,069 ±(99.9%) 1124,855 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,069, 674,997), stdev = 292,121
[info]   CI (99.9%): [≈ 0, 1631,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1372,226 ±(99.9%) 3044,722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1372,226, 1827,381), stdev = 790,705
[info]   CI (99.9%): [≈ 0, 4416,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,291), stdev = 0,122
[info]   CI (99.9%): [≈ 0, 0,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,214 ±(99.9%) 1,267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,214, 0,788), stdev = 0,329
[info]   CI (99.9%): [≈ 0, 1,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,71% complete, ETA 00:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 627862,876 ops/s
[info] # Warmup Iteration   2: 670225,634 ops/s
[info] # Warmup Iteration   3: 676504,200 ops/s
[info] # Warmup Iteration   4: 675948,876 ops/s
[info] # Warmup Iteration   5: 675361,446 ops/s
[info] Iteration   1: 674955,068 ops/s
[info]                  ·gc.alloc.rate:               356,774 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1192,850 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 678914,843 ops/s
[info]                  ·gc.alloc.rate:      358,923 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 677319,444 ops/s
[info]                  ·gc.alloc.rate:                   358,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1188,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 650845,922 ops/s
[info]                  ·gc.alloc.rate:               344,059 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1237,039 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 676496,841 ops/s
[info]                  ·gc.alloc.rate:      357,575 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   671706,423 ±(99.9%) 45240,135 ops/s [Average]
[info]   (min, avg, max) = (650845,922, 671706,423, 678914,843), stdev = 11748,719
[info]   CI (99.9%): [626466,288, 716946,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   355,074 ±(99.9%) 23,900 MB/sec [Average]
[info]   (min, avg, max) = (344,059, 355,074, 358,923), stdev = 6,207
[info]   CI (99.9%): [331,174, 378,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (832,001, 832,001, 832,001), stdev = 0,001
[info]   CI (99.9%): [832,001, 832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,920 ±(99.9%) 1078,867 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,920, 511,555), stdev = 280,178
[info]   CI (99.9%): [≈ 0, 1385,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   723,716 ±(99.9%) 2545,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 723,716, 1237,039), stdev = 660,930
[info]   CI (99.9%): [≈ 0, 3268,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,036), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84,91% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 770732,357 ops/s
[info] # Warmup Iteration   2: 853388,808 ops/s
[info] # Warmup Iteration   3: 878988,424 ops/s
[info] # Warmup Iteration   4: 879413,985 ops/s
[info] # Warmup Iteration   5: 878471,648 ops/s
[info] Iteration   1: 881065,534 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 878892,153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 881561,326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 879089,643 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 878569,269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   879835,585 ±(99.9%) 5287,105 ops/s [Average]
[info]   (min, avg, max) = (878569,269, 879835,585, 881561,326), stdev = 1373,044
[info]   CI (99.9%): [874548,480, 885122,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85,11% complete, ETA 00:19:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27882,810 ops/s
[info] # Warmup Iteration   2: 36977,365 ops/s
[info] # Warmup Iteration   3: 36099,942 ops/s
[info] # Warmup Iteration   4: 37409,418 ops/s
[info] # Warmup Iteration   5: 37433,518 ops/s
[info] Iteration   1: 37448,944 ops/s
[info]                  ·gc.alloc.rate:                   1865,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84512,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,750 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37147,310 ops/s
[info]                  ·gc.alloc.rate:                   1851,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85346,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,882 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37524,748 ops/s
[info]                  ·gc.alloc.rate:               1869,590 MB/sec
[info]                  ·gc.alloc.rate.norm:          78416,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56402,689 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 37332,507 ops/s
[info]                  ·gc.alloc.rate:                   1860,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85195,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,633 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 37420,802 ops/s
[info]                  ·gc.alloc.rate:                   1864,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85135,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,751 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   37374,862 ±(99.9%) 556,808 ops/s [Average]
[info]   (min, avg, max) = (37147,310, 37374,862, 37524,748), stdev = 144,601
[info]   CI (99.9%): [36818,054, 37931,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1862,157 ±(99.9%) 27,346 MB/sec [Average]
[info]   (min, avg, max) = (1851,008, 1862,157, 1869,590), stdev = 7,102
[info]   CI (99.9%): [1834,811, 1889,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (78416,011, 78416,011, 78416,012), stdev = 0,001
[info]   CI (99.9%): [78416,009, 78416,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1883,033 ±(99.9%) 1158,865 MB/sec [Average]
[info]   (min, avg, max) = (1344,750, 1883,033, 2024,012), stdev = 300,954
[info]   CI (99.9%): [724,168, 3041,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79318,576 ±(99.9%) 49343,430 B/op [Average]
[info]   (min, avg, max) = (56402,689, 79318,576, 85346,912), stdev = 12814,332
[info]   CI (99.9%): [29975,145, 128662,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,403 ±(99.9%) 3,847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,403, 2,633), stdev = 0,999
[info]   CI (99.9%): [≈ 0, 5,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85,31% complete, ETA 00:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144527,294 ops/s
[info] # Warmup Iteration   2: 152411,069 ops/s
[info] # Warmup Iteration   3: 152281,163 ops/s
[info] # Warmup Iteration   4: 152838,123 ops/s
[info] # Warmup Iteration   5: 152917,346 ops/s
[info] Iteration   1: 153019,195 ops/s
[info]                  ·gc.alloc.rate:                   1137,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13832,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,428 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 153159,354 ops/s
[info]                  ·gc.alloc.rate:                   1138,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13813,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 152909,817 ops/s
[info]                  ·gc.alloc.rate:                   1137,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13835,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,428 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 152830,813 ops/s
[info]                  ·gc.alloc.rate:               1136,560 MB/sec
[info]                  ·gc.alloc.rate.norm:          11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6920,954 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 152939,563 ops/s
[info]                  ·gc.alloc.rate:                   1137,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13845,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,428 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   152971,748 ±(99.9%) 480,101 ops/s [Average]
[info]   (min, avg, max) = (152830,813, 152971,748, 153159,354), stdev = 124,681
[info]   CI (99.9%): [152491,647, 153451,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1137,520 ±(99.9%) 3,510 MB/sec [Average]
[info]   (min, avg, max) = (1136,560, 1137,520, 1138,907), stdev = 0,911
[info]   CI (99.9%): [1134,010, 1141,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11704,003, 11704,003, 11704,003), stdev = 0,001
[info]   CI (99.9%): [11704,002, 11704,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,090 ±(99.9%) 1158,098 MB/sec [Average]
[info]   (min, avg, max) = (672,084, 1210,090, 1345,311), stdev = 300,754
[info]   CI (99.9%): [51,991, 2368,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12449,515 ±(99.9%) 11900,731 B/op [Average]
[info]   (min, avg, max) = (6920,954, 12449,515, 13845,935), stdev = 3090,582
[info]   CI (99.9%): [548,784, 24350,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,300 ±(99.9%) 0,738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,300, 0,428), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 1,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85,51% complete, ETA 00:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54159,396 ops/s
[info] # Warmup Iteration   2: 68396,909 ops/s
[info] # Warmup Iteration   3: 68458,835 ops/s
[info] # Warmup Iteration   4: 67912,412 ops/s
[info] # Warmup Iteration   5: 68945,644 ops/s
[info] Iteration   1: 67347,664 ops/s
[info]                  ·gc.alloc.rate:                   3050,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3377,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78930,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,865 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 69539,956 ops/s
[info]                  ·gc.alloc.rate:                   3150,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61300,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,356 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 69415,509 ops/s
[info]                  ·gc.alloc.rate:                   3143,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76885,304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,360 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 68980,957 ops/s
[info]                  ·gc.alloc.rate:                   3124,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77490,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,274 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 68828,923 ops/s
[info]                  ·gc.alloc.rate:               3117,541 MB/sec
[info]                  ·gc.alloc.rate.norm:          71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2719,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62188,946 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   68822,602 ±(99.9%) 3371,621 ops/s [Average]
[info]   (min, avg, max) = (67347,664, 68822,602, 69539,956), stdev = 875,599
[info]   CI (99.9%): [65450,981, 72194,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3117,358 ±(99.9%) 152,592 MB/sec [Average]
[info]   (min, avg, max) = (3050,626, 3117,358, 3150,099), stdev = 39,628
[info]   CI (99.9%): [2964,766, 3269,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71288,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71288,006, 71288,006, 71288,007), stdev = 0,001
[info]   CI (99.9%): [71288,005, 71288,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3118,656 ±(99.9%) 1422,053 MB/sec [Average]
[info]   (min, avg, max) = (2708,767, 3118,656, 3396,518), stdev = 369,303
[info]   CI (99.9%): [1696,602, 4540,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71359,048 ±(99.9%) 33938,085 B/op [Average]
[info]   (min, avg, max) = (61300,485, 71359,048, 78930,013), stdev = 8813,613
[info]   CI (99.9%): [37420,963, 105297,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,121 ±(99.9%) 0,318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,121, 0,208), stdev = 0,082
[info]   CI (99.9%): [≈ 0, 0,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,771 ±(99.9%) 7,372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,771, 4,865), stdev = 1,915
[info]   CI (99.9%): [≈ 0, 10,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,71% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100350,887 ops/s
[info] # Warmup Iteration   2: 146885,835 ops/s
[info] # Warmup Iteration   3: 144823,170 ops/s
[info] # Warmup Iteration   4: 144393,703 ops/s
[info] # Warmup Iteration   5: 143769,228 ops/s
[info] Iteration   1: 144325,231 ops/s
[info]                  ·gc.alloc.rate:                   1854,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22154,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,362 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 142767,227 ops/s
[info]                  ·gc.alloc.rate:               1834,553 MB/sec
[info]                  ·gc.alloc.rate.norm:          20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14942,733 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 145705,031 ops/s
[info]                  ·gc.alloc.rate:                   1872,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21980,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 145029,503 ops/s
[info]                  ·gc.alloc.rate:               1863,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2036,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22104,197 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 145803,830 ops/s
[info]                  ·gc.alloc.rate:                   1873,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14667,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,449 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   144726,164 ±(99.9%) 4797,778 ops/s [Average]
[info]   (min, avg, max) = (142767,227, 144726,164, 145803,830), stdev = 1245,968
[info]   CI (99.9%): [139928,387, 149523,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1859,669 ±(99.9%) 61,435 MB/sec [Average]
[info]   (min, avg, max) = (1834,553, 1859,669, 1873,359), stdev = 15,954
[info]   CI (99.9%): [1798,234, 1921,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20224,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20224,003, 20224,003, 20224,003), stdev = 0,001
[info]   CI (99.9%): [20224,002, 20224,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1763,478 ±(99.9%) 1428,628 MB/sec [Average]
[info]   (min, avg, max) = (1355,480, 1763,478, 2036,926), stdev = 371,010
[info]   CI (99.9%): [334,851, 3192,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19169,723 ±(99.9%) 15348,885 B/op [Average]
[info]   (min, avg, max) = (14667,410, 19169,723, 22154,191), stdev = 3986,057
[info]   CI (99.9%): [3820,838, 34518,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,407 ±(99.9%) 2,177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,407, 1,362), stdev = 0,565
[info]   CI (99.9%): [≈ 0, 2,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,92% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531072,574 ops/s
[info] # Warmup Iteration   2: 555452,941 ops/s
[info] # Warmup Iteration   3: 556272,856 ops/s
[info] # Warmup Iteration   4: 556082,056 ops/s
[info] # Warmup Iteration   5: 557687,798 ops/s
[info] Iteration   1: 558410,663 ops/s
[info]                  ·gc.alloc.rate:                   1458,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3788,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 559045,469 ops/s
[info]                  ·gc.alloc.rate:                   1460,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3784,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,176 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 558499,422 ops/s
[info]                  ·gc.alloc.rate:                   1459,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3791,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 553227,663 ops/s
[info]                  ·gc.alloc.rate:                   1445,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3831,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 557135,449 ops/s
[info]                  ·gc.alloc.rate:                   1455,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5714,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   557263,733 ±(99.9%) 9096,668 ops/s [Average]
[info]   (min, avg, max) = (553227,663, 557263,733, 559045,469), stdev = 2362,376
[info]   CI (99.9%): [548167,065, 566360,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1455,927 ±(99.9%) 23,573 MB/sec [Average]
[info]   (min, avg, max) = (1445,519, 1455,927, 1460,720), stdev = 6,122
[info]   CI (99.9%): [1432,353, 1479,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,670 ±(99.9%) 1166,864 MB/sec [Average]
[info]   (min, avg, max) = (1344,097, 1480,670, 2022,745), stdev = 303,031
[info]   CI (99.9%): [313,806, 2647,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4182,066 ±(99.9%) 3299,785 B/op [Average]
[info]   (min, avg, max) = (3784,437, 4182,066, 5714,644), stdev = 856,944
[info]   CI (99.9%): [882,281, 7481,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,106 ±(99.9%) 0,188 B/op [Average]
[info]   (min, avg, max) = (0,059, 0,106, 0,176), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86,12% complete, ETA 00:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9661,575 ops/s
[info] # Warmup Iteration   2: 17895,980 ops/s
[info] # Warmup Iteration   3: 17925,348 ops/s
[info] # Warmup Iteration   4: 18026,715 ops/s
[info] # Warmup Iteration   5: 18025,688 ops/s
[info] Iteration   1: 18067,560 ops/s
[info]                  ·gc.alloc.rate:                   2301,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236063,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,440 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18080,427 ops/s
[info]                  ·gc.alloc.rate:                   2302,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177139,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,812 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18104,296 ops/s
[info]                  ·gc.alloc.rate:                   2306,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177088,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,429 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18102,251 ops/s
[info]                  ·gc.alloc.rate:                   2305,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236314,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,239 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18091,069 ops/s
[info]                  ·gc.alloc.rate:                   2305,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177457,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,243 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   18089,121 ±(99.9%) 59,247 ops/s [Average]
[info]   (min, avg, max) = (18067,560, 18089,121, 18104,296), stdev = 15,386
[info]   CI (99.9%): [18029,874, 18148,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2304,265 ±(99.9%) 8,088 MB/sec [Average]
[info]   (min, avg, max) = (2301,393, 2304,265, 2306,118), stdev = 2,100
[info]   CI (99.9%): [2296,178, 2312,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200488,024 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (200488,023, 200488,024, 200488,030), stdev = 0,003
[info]   CI (99.9%): [200488,012, 200488,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2307,929 ±(99.9%) 1427,087 MB/sec [Average]
[info]   (min, avg, max) = (2034,564, 2307,929, 2718,028), stdev = 370,610
[info]   CI (99.9%): [880,841, 3735,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   200812,721 ±(99.9%) 124353,867 B/op [Average]
[info]   (min, avg, max) = (177088,718, 200812,721, 236314,723), stdev = 32294,304
[info]   CI (99.9%): [76458,854, 325166,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,433 ±(99.9%) 8,535 B/op [Average]
[info]   (min, avg, max) = (1,812, 5,433, 7,243), stdev = 2,216
[info]   CI (99.9%): [≈ 0, 13,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86,32% complete, ETA 00:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35514,074 ops/s
[info] # Warmup Iteration   2: 47021,470 ops/s
[info] # Warmup Iteration   3: 47219,213 ops/s
[info] # Warmup Iteration   4: 47823,809 ops/s
[info] # Warmup Iteration   5: 47687,373 ops/s
[info] Iteration   1: 47871,454 ops/s
[info]                  ·gc.alloc.rate:                   2546,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88571,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,159 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 46727,725 ops/s
[info]                  ·gc.alloc.rate:                   2486,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68190,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,701 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 47835,133 ops/s
[info]                  ·gc.alloc.rate:                   2545,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88984,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,479 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47693,471 ops/s
[info]                  ·gc.alloc.rate:                   2537,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89416,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,748 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 47450,437 ops/s
[info]                  ·gc.alloc.rate:                   2523,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90008,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,833 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   47515,644 ±(99.9%) 1811,609 ops/s [Average]
[info]   (min, avg, max) = (46727,725, 47515,644, 47871,454), stdev = 470,469
[info]   CI (99.9%): [45704,035, 49327,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2527,899 ±(99.9%) 95,499 MB/sec [Average]
[info]   (min, avg, max) = (2486,568, 2527,899, 2546,704), stdev = 24,801
[info]   CI (99.9%): [2432,399, 2623,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83728,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (83728,009, 83728,009, 83728,009), stdev = 0,001
[info]   CI (99.9%): [83728,008, 83728,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2569,372 ±(99.9%) 1171,859 MB/sec [Average]
[info]   (min, avg, max) = (2025,126, 2569,372, 2713,224), stdev = 304,328
[info]   CI (99.9%): [1397,512, 3741,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   85034,284 ±(99.9%) 36315,858 B/op [Average]
[info]   (min, avg, max) = (68190,307, 85034,284, 90008,610), stdev = 9431,113
[info]   CI (99.9%): [48718,426, 121350,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,121 ±(99.9%) 0,262 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,121, 0,187), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,984 ±(99.9%) 8,609 B/op [Average]
[info]   (min, avg, max) = (0,701, 3,984, 6,159), stdev = 2,236
[info]   CI (99.9%): [≈ 0, 12,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,52% complete, ETA 00:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_7fe6a5a1/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 179883,361 ops/s
[info] # Warmup Iteration   2: 264862,365 ops/s
[info] # Warmup Iteration   3: 268037,230 ops/s
[info] # Warmup Iteration   4: 268027,976 ops/s
[info] # Warmup Iteration   5: 267254,304 ops/s
[info] Iteration   1: 265755,453 ops/s
[info]                  ·gc.alloc.rate:                   1235,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8000,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,370 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 267663,391 ops/s
[info]                  ·gc.alloc.rate:                   1244,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7947,318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 266182,621 ops/s
[info]                  ·gc.alloc.rate:                   1237,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7999,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 267056,976 ops/s
[info]                  ·gc.alloc.rate:                   1242,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7976,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,245 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 267231,307 ops/s
[info]                  ·gc.alloc.rate:                   1242,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7979,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   266777,950 ±(99.9%) 3024,233 ops/s [Average]
[info]   (min, avg, max) = (265755,453, 266777,950, 267663,391), stdev = 785,384
[info]   CI (99.9%): [263753,716, 269802,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1240,761 ±(99.9%) 14,104 MB/sec [Average]
[info]   (min, avg, max) = (1235,979, 1240,761, 1244,908), stdev = 3,663
[info]   CI (99.9%): [1226,657, 1254,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7320,002, 7320,002, 7320,002), stdev = 0,001
[info]   CI (99.9%): [7320,001, 7320,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1352,718 ±(99.9%) 5,824 MB/sec [Average]
[info]   (min, avg, max) = (1350,873, 1352,718, 1354,654), stdev = 1,513
[info]   CI (99.9%): [1346,893, 1358,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7980,548 ±(99.9%) 83,414 B/op [Average]
[info]   (min, avg, max) = (7947,318, 7980,548, 8000,452), stdev = 21,662
[info]   CI (99.9%): [7897,133, 8063,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,197 ±(99.9%) 0,425 B/op [Average]
[info]   (min, avg, max) = (0,122, 0,197, 0,370), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,72% complete, ETA 00:17:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1223395,109 ops/s
[info] # Warmup Iteration   2: 1238288,902 ops/s
[info] # Warmup Iteration   3: 1237692,735 ops/s
[info] # Warmup Iteration   4: 1237791,610 ops/s
[info] # Warmup Iteration   5: 1182317,102 ops/s
[info] Iteration   1: 1209934,375 ops/s
[info]                  ·gc.alloc.rate:                   608,869 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     877,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,072 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1195401,209 ops/s
[info]                  ·gc.alloc.rate:      601,599 MB/sec
[info]                  ·gc.alloc.rate.norm: 792,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1222056,844 ops/s
[info]                  ·gc.alloc.rate:                   614,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     869,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1244544,071 ops/s
[info]                  ·gc.alloc.rate:                   626,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     850,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1238825,547 ops/s
[info]                  ·gc.alloc.rate:                   623,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     854,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1222152,409 ±(99.9%) 78071,657 ops/s [Average]
[info]   (min, avg, max) = (1195401,209, 1222152,409, 1244544,071), stdev = 20274,962
[info]   CI (99.9%): [1144080,752, 1300224,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   615,011 ±(99.9%) 39,210 MB/sec [Average]
[info]   (min, avg, max) = (601,599, 615,011, 626,328), stdev = 10,183
[info]   CI (99.9%): [575,801, 654,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (792,000, 792,000, 792,000), stdev = 0,001
[info]   CI (99.9%): [792,000, 792,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,027 ±(99.9%) 1160,302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,027, 674,806), stdev = 301,327
[info]   CI (99.9%): [≈ 0, 1699,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   690,482 ±(99.9%) 1486,902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 690,482, 877,770), stdev = 386,144
[info]   CI (99.9%): [≈ 0, 2177,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,131), stdev = 1,391
[info]   CI (99.9%): [≈ 0, 5,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,836 ±(99.9%) 6,967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,836, 4,072), stdev = 1,809
[info]   CI (99.9%): [≈ 0, 7,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86,92% complete, ETA 00:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1268803,838 ops/s
[info] # Warmup Iteration   2: 1292031,570 ops/s
[info] # Warmup Iteration   3: 1283273,435 ops/s
[info] # Warmup Iteration   4: 1283252,997 ops/s
[info] # Warmup Iteration   5: 1283368,633 ops/s
[info] Iteration   1: 1285479,797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1283634,472 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1285810,011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1283450,824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1267718,267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1281218,674 ±(99.9%) 29345,665 ops/s [Average]
[info]   (min, avg, max) = (1267718,267, 1281218,674, 1285810,011), stdev = 7620,976
[info]   CI (99.9%): [1251873,010, 1310564,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87,12% complete, ETA 00:17:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23579,860 ops/s
[info] # Warmup Iteration   2: 37048,428 ops/s
[info] # Warmup Iteration   3: 36848,294 ops/s
[info] # Warmup Iteration   4: 36930,166 ops/s
[info] # Warmup Iteration   5: 36790,823 ops/s
[info] Iteration   1: 36005,820 ops/s
[info]                  ·gc.alloc.rate:                   1927,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88735,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,640 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 36752,827 ops/s
[info]                  ·gc.alloc.rate:                   1967,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87062,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,457 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37159,001 ops/s
[info]                  ·gc.alloc.rate:                   1989,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86196,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,645 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 37075,073 ops/s
[info]                  ·gc.alloc.rate:                   1985,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86455,279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,767 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37044,549 ops/s
[info]                  ·gc.alloc.rate:                   1983,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86584,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,422 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   36807,454 ±(99.9%) 1823,496 ops/s [Average]
[info]   (min, avg, max) = (36005,820, 36807,454, 37159,001), stdev = 473,556
[info]   CI (99.9%): [34983,958, 38630,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1970,810 ±(99.9%) 97,910 MB/sec [Average]
[info]   (min, avg, max) = (1927,748, 1970,810, 1989,698), stdev = 25,427
[info]   CI (99.9%): [1872,900, 2068,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   84280,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84280,011, 84280,011, 84280,012), stdev = 0,001
[info]   CI (99.9%): [84280,010, 84280,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2034,328 ±(99.9%) 12,048 MB/sec [Average]
[info]   (min, avg, max) = (2029,654, 2034,328, 2037,438), stdev = 3,129
[info]   CI (99.9%): [2022,280, 2046,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87006,777 ±(99.9%) 3912,939 B/op [Average]
[info]   (min, avg, max) = (86196,310, 87006,777, 88735,293), stdev = 1016,178
[info]   CI (99.9%): [83093,838, 90919,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,386 ±(99.9%) 4,496 B/op [Average]
[info]   (min, avg, max) = (1,767, 3,386, 4,457), stdev = 1,168
[info]   CI (99.9%): [≈ 0, 7,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87,32% complete, ETA 00:16:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437605,424 ops/s
[info] # Warmup Iteration   2: 766614,488 ops/s
[info] # Warmup Iteration   3: 796211,604 ops/s
[info] # Warmup Iteration   4: 798138,766 ops/s
[info] # Warmup Iteration   5: 796696,788 ops/s
[info] Iteration   1: 796056,584 ops/s
[info]                  ·gc.alloc.rate:                   2415,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5322,908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 799080,036 ops/s
[info]                  ·gc.alloc.rate:                   2425,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5314,372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 790376,386 ops/s
[info]                  ·gc.alloc.rate:                   2398,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4037,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 797719,924 ops/s
[info]                  ·gc.alloc.rate:                   2420,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5343,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 793546,361 ops/s
[info]                  ·gc.alloc.rate:                   2407,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4035,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   795355,858 ±(99.9%) 13341,626 ops/s [Average]
[info]   (min, avg, max) = (790376,386, 795355,858, 799080,036), stdev = 3464,778
[info]   CI (99.9%): [782014,233, 808697,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2413,470 ±(99.9%) 41,317 MB/sec [Average]
[info]   (min, avg, max) = (2398,326, 2413,470, 2425,116), stdev = 10,730
[info]   CI (99.9%): [2372,154, 2454,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4776,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4776,001, 4776,001, 4776,001), stdev = 0,001
[info]   CI (99.9%): [4776,000, 4776,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2432,123 ±(99.9%) 1411,164 MB/sec [Average]
[info]   (min, avg, max) = (2027,451, 2432,123, 2708,420), stdev = 366,475
[info]   CI (99.9%): [1020,959, 3843,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4810,649 ±(99.9%) 2722,218 B/op [Average]
[info]   (min, avg, max) = (4035,175, 4810,649, 5343,347), stdev = 706,951
[info]   CI (99.9%): [2088,431, 7532,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,091 ±(99.9%) 0,132 B/op [Average]
[info]   (min, avg, max) = (0,041, 0,091, 0,123), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87,53% complete, ETA 00:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 783183,280 ops/s
[info] # Warmup Iteration   2: 1747294,527 ops/s
[info] # Warmup Iteration   3: 1737193,950 ops/s
[info] # Warmup Iteration   4: 1745489,661 ops/s
[info] # Warmup Iteration   5: 1743458,099 ops/s
[info] Iteration   1: 1681163,598 ops/s
[info]                  ·gc.alloc.rate:                   1196,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1265,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1739055,966 ops/s
[info]                  ·gc.alloc.rate:                   1237,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1223,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1742880,516 ops/s
[info]                  ·gc.alloc.rate:               1240,195 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 611,113 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1740998,702 ops/s
[info]                  ·gc.alloc.rate:                   1238,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1224,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1744088,989 ops/s
[info]                  ·gc.alloc.rate:                   1240,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1729637,554 ±(99.9%) 104602,347 ops/s [Average]
[info]   (min, avg, max) = (1681163,598, 1729637,554, 1744088,989), stdev = 27164,897
[info]   CI (99.9%): [1625035,207, 1834239,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1230,806 ±(99.9%) 74,299 MB/sec [Average]
[info]   (min, avg, max) = (1196,371, 1230,806, 1240,997), stdev = 19,295
[info]   CI (99.9%): [1156,507, 1305,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,896 ±(99.9%) 1164,989 MB/sec [Average]
[info]   (min, avg, max) = (676,695, 1217,896, 1354,999), stdev = 302,544
[info]   CI (99.9%): [52,907, 2382,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1109,420 ±(99.9%) 1074,893 B/op [Average]
[info]   (min, avg, max) = (611,113, 1109,420, 1265,246), stdev = 279,146
[info]   CI (99.9%): [34,527, 2184,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,038), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87,73% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6819545,046 ops/s
[info] # Warmup Iteration   2: 8497983,180 ops/s
[info] # Warmup Iteration   3: 8256447,952 ops/s
[info] # Warmup Iteration   4: 8556563,807 ops/s
[info] # Warmup Iteration   5: 8572553,157 ops/s
[info] Iteration   1: 8520711,760 ops/s
[info]                  ·gc.alloc.rate:                   259,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8475119,904 ops/s
[info]                  ·gc.alloc.rate:      258,505 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8382977,578 ops/s
[info]                  ·gc.alloc.rate:               255,656 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96,042 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 8521848,338 ops/s
[info]                  ·gc.alloc.rate:      259,985 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8494146,596 ops/s
[info]                  ·gc.alloc.rate:                   259,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8478960,835 ±(99.9%) 219863,198 ops/s [Average]
[info]   (min, avg, max) = (8382977,578, 8478960,835, 8521848,338), stdev = 57097,774
[info]   CI (99.9%): [8259097,637, 8698824,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   258,608 ±(99.9%) 6,765 MB/sec [Average]
[info]   (min, avg, max) = (255,656, 258,608, 259,985), stdev = 1,757
[info]   CI (99.9%): [251,842, 265,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,926 ±(99.9%) 1078,887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,926, 511,579), stdev = 280,183
[info]   CI (99.9%): [≈ 0, 1385,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   57,065 ±(99.9%) 200,603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57,065, 96,042), stdev = 52,096
[info]   CI (99.9%): [≈ 0, 257,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87,93% complete, ETA 00:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91188,166 ops/s
[info] # Warmup Iteration   2: 262337,639 ops/s
[info] # Warmup Iteration   3: 264019,660 ops/s
[info] # Warmup Iteration   4: 264355,746 ops/s
[info] # Warmup Iteration   5: 262663,349 ops/s
[info] Iteration   1: 252879,571 ops/s
[info]                  ·gc.alloc.rate:               1785,291 MB/sec
[info]                  ·gc.alloc.rate.norm:          11112,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8423,995 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 263953,152 ops/s
[info]                  ·gc.alloc.rate:                   1863,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              11112,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12120,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 264714,591 ops/s
[info]                  ·gc.alloc.rate:                   1868,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              11112,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12092,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,248 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 261812,238 ops/s
[info]                  ·gc.alloc.rate:                   1848,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              11112,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12242,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,250 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 263740,639 ops/s
[info]                  ·gc.alloc.rate:               1861,951 MB/sec
[info]                  ·gc.alloc.rate.norm:          11112,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1358,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8106,850 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   261420,038 ±(99.9%) 18839,580 ops/s [Average]
[info]   (min, avg, max) = (252879,571, 261420,038, 264714,591), stdev = 4892,579
[info]   CI (99.9%): [242580,458, 280259,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1845,680 ±(99.9%) 133,126 MB/sec [Average]
[info]   (min, avg, max) = (1785,291, 1845,680, 1868,864), stdev = 34,572
[info]   CI (99.9%): [1712,554, 1978,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11112,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11112,002, 11112,002, 11112,002), stdev = 0,001
[info]   CI (99.9%): [11112,001, 11112,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,036 ±(99.9%) 1431,116 MB/sec [Average]
[info]   (min, avg, max) = (1353,427, 1763,036, 2036,775), stdev = 371,656
[info]   CI (99.9%): [331,920, 3194,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10597,357 ±(99.9%) 8211,329 B/op [Average]
[info]   (min, avg, max) = (8106,850, 10597,357, 12242,890), stdev = 2132,456
[info]   CI (99.9%): [2386,028, 18808,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,174 ±(99.9%) 0,642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,174, 0,372), stdev = 0,167
[info]   CI (99.9%): [≈ 0, 0,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88,13% complete, ETA 00:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598674,237 ops/s
[info] # Warmup Iteration   2: 1053945,094 ops/s
[info] # Warmup Iteration   3: 1055311,116 ops/s
[info] # Warmup Iteration   4: 1052512,433 ops/s
[info] # Warmup Iteration   5: 1061380,786 ops/s
[info] Iteration   1: 1054663,884 ops/s
[info]                  ·gc.alloc.rate:                   1549,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2003,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1059070,905 ops/s
[info]                  ·gc.alloc.rate:                   1555,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1995,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1067281,707 ops/s
[info]                  ·gc.alloc.rate:                   1567,819 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2974,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1067123,871 ops/s
[info]                  ·gc.alloc.rate:                   1567,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1985,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1067791,207 ops/s
[info]                  ·gc.alloc.rate:                   1568,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1986,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1063186,315 ±(99.9%) 23027,532 ops/s [Average]
[info]   (min, avg, max) = (1054663,884, 1063186,315, 1067791,207), stdev = 5980,177
[info]   CI (99.9%): [1040158,783, 1086213,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1561,843 ±(99.9%) 33,829 MB/sec [Average]
[info]   (min, avg, max) = (1549,258, 1561,843, 1568,484), stdev = 8,785
[info]   CI (99.9%): [1528,014, 1595,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2312,000, 2312,000, 2312,000), stdev = 0,001
[info]   CI (99.9%): [2312,000, 2312,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,337 ±(99.9%) 1157,256 MB/sec [Average]
[info]   (min, avg, max) = (1342,799, 1479,337, 2016,939), stdev = 300,536
[info]   CI (99.9%): [322,081, 2636,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2189,146 ±(99.9%) 1690,350 B/op [Average]
[info]   (min, avg, max) = (1985,545, 2189,146, 2974,299), stdev = 438,978
[info]   CI (99.9%): [498,796, 3879,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,068 ±(99.9%) 0,155 B/op [Average]
[info]   (min, avg, max) = (0,031, 0,068, 0,124), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88,33% complete, ETA 00:15:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_7fe6a5a1/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1247228,728 ops/s
[info] # Warmup Iteration   2: 2723771,974 ops/s
[info] # Warmup Iteration   3: 2726400,948 ops/s
[info] # Warmup Iteration   4: 2725448,056 ops/s
[info] # Warmup Iteration   5: 2720624,672 ops/s
[info] Iteration   1: 2724550,402 ops/s
[info]                  ·gc.alloc.rate:                   1121,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     780,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2671618,944 ops/s
[info]                  ·gc.alloc.rate:                   1100,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2717149,599 ops/s
[info]                  ·gc.alloc.rate:               1118,670 MB/sec
[info]                  ·gc.alloc.rate.norm:          648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 391,412 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2708672,614 ops/s
[info]                  ·gc.alloc.rate:                   1115,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2718840,156 ops/s
[info]                  ·gc.alloc.rate:                   1119,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     783,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2708166,343 ±(99.9%) 81662,600 ops/s [Average]
[info]   (min, avg, max) = (2671618,944, 2708166,343, 2724550,402), stdev = 21207,518
[info]   CI (99.9%): [2626503,743, 2789828,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1115,014 ±(99.9%) 33,418 MB/sec [Average]
[info]   (min, avg, max) = (1100,031, 1115,014, 1121,594), stdev = 8,679
[info]   CI (99.9%): [1081,596, 1148,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1216,625 ±(99.9%) 1164,366 MB/sec [Average]
[info]   (min, avg, max) = (675,711, 1216,625, 1353,075), stdev = 302,382
[info]   CI (99.9%): [52,259, 2380,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   707,347 ±(99.9%) 680,467 B/op [Average]
[info]   (min, avg, max) = (391,412, 707,347, 796,062), stdev = 176,715
[info]   CI (99.9%): [26,880, 1387,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88,53% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4764603,775 ops/s
[info] # Warmup Iteration   2: 6403714,138 ops/s
[info] # Warmup Iteration   3: 6541274,693 ops/s
[info] # Warmup Iteration   4: 6316661,070 ops/s
[info] # Warmup Iteration   5: 5856605,086 ops/s
[info] Iteration   1: 6584010,856 ops/s
[info]                  ·gc.alloc.rate:                   736,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,751 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6566603,023 ops/s
[info]                  ·gc.alloc.rate:                   734,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6607609,277 ops/s
[info]                  ·gc.alloc.rate:                   738,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 6542140,309 ops/s
[info]                  ·gc.alloc.rate:                   731,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6568192,201 ops/s
[info]                  ·gc.alloc.rate:                   734,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6573711,133 ±(99.9%) 92992,638 ops/s [Average]
[info]   (min, avg, max) = (6542140,309, 6573711,133, 6607609,277), stdev = 24149,893
[info]   CI (99.9%): [6480718,495, 6666703,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   735,093 ±(99.9%) 10,312 MB/sec [Average]
[info]   (min, avg, max) = (731,611, 735,093, 738,866), stdev = 2,678
[info]   CI (99.9%): [724,781, 745,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,809 ±(99.9%) 1154,179 MB/sec [Average]
[info]   (min, avg, max) = (672,721, 807,809, 1343,991), stdev = 299,737
[info]   CI (99.9%): [≈ 0, 1961,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   193,443 ±(99.9%) 276,950 B/op [Average]
[info]   (min, avg, max) = (160,244, 193,443, 322,098), stdev = 71,923
[info]   CI (99.9%): [≈ 0, 470,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,653 ±(99.9%) 5,355 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,653, 3,141), stdev = 1,391
[info]   CI (99.9%): [≈ 0, 6,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,156 ±(99.9%) 1,280 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,156, 0,751), stdev = 0,332
[info]   CI (99.9%): [≈ 0, 1,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88,73% complete, ETA 00:14:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4901942,228 ops/s
[info] # Warmup Iteration   2: 6502394,662 ops/s
[info] # Warmup Iteration   3: 6591340,317 ops/s
[info] # Warmup Iteration   4: 6568575,776 ops/s
[info] # Warmup Iteration   5: 6609320,520 ops/s
[info] Iteration   1: 6564419,055 ops/s
[info]                  ·gc.alloc.rate:               400,376 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,649 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 6572925,561 ops/s
[info]                  ·gc.alloc.rate:                   400,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6587280,711 ops/s
[info]                  ·gc.alloc.rate:               401,766 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,224 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6599661,380 ops/s
[info]                  ·gc.alloc.rate:      402,555 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6494615,550 ops/s
[info]                  ·gc.alloc.rate:                   396,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,769 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6563780,451 ±(99.9%) 157682,901 ops/s [Average]
[info]   (min, avg, max) = (6494615,550, 6563780,451, 6599661,380), stdev = 40949,749
[info]   CI (99.9%): [6406097,551, 6721463,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   400,344 ±(99.9%) 9,678 MB/sec [Average]
[info]   (min, avg, max) = (396,099, 400,344, 402,555), stdev = 2,513
[info]   CI (99.9%): [390,665, 410,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   441,856 ±(99.9%) 989,269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,856, 674,688), stdev = 256,910
[info]   CI (99.9%): [≈ 0, 1431,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   106,177 ±(99.9%) 238,591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106,177, 163,520), stdev = 61,961
[info]   CI (99.9%): [≈ 0, 344,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,640 ±(99.9%) 5,450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,640, 3,172), stdev = 1,415
[info]   CI (99.9%): [≈ 0, 6,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,155 ±(99.9%) 1,321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,155, 0,769), stdev = 0,343
[info]   CI (99.9%): [≈ 0, 1,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88,93% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110747,691 ops/s
[info] # Warmup Iteration   2: 385334,921 ops/s
[info] # Warmup Iteration   3: 388253,183 ops/s
[info] # Warmup Iteration   4: 360909,044 ops/s
[info] # Warmup Iteration   5: 387000,031 ops/s
[info] Iteration   1: 387466,206 ops/s
[info]                  ·gc.alloc.rate:                   1973,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8247,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 385608,903 ops/s
[info]                  ·gc.alloc.rate:                   1963,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8295,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,255 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 387595,959 ops/s
[info]                  ·gc.alloc.rate:                   1973,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8262,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,254 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 385978,636 ops/s
[info]                  ·gc.alloc.rate:                   1966,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8305,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 384764,757 ops/s
[info]                  ·gc.alloc.rate:               1959,529 MB/sec
[info]                  ·gc.alloc.rate.norm:          8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2038,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8338,682 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   386282,892 ±(99.9%) 4706,592 ops/s [Average]
[info]   (min, avg, max) = (384764,757, 386282,892, 387595,959), stdev = 1222,287
[info]   CI (99.9%): [381576,300, 390989,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1967,373 ±(99.9%) 23,933 MB/sec [Average]
[info]   (min, avg, max) = (1959,529, 1967,373, 1973,910), stdev = 6,215
[info]   CI (99.9%): [1943,440, 1991,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8016,001, 8016,001, 8016,001), stdev = 0,001
[info]   CI (99.9%): [8016,001, 8016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2034,641 ±(99.9%) 12,333 MB/sec [Average]
[info]   (min, avg, max) = (2030,548, 2034,641, 2038,409), stdev = 3,203
[info]   CI (99.9%): [2022,308, 2046,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8290,168 ±(99.9%) 138,285 B/op [Average]
[info]   (min, avg, max) = (8247,950, 8290,168, 8338,682), stdev = 35,912
[info]   CI (99.9%): [8151,883, 8428,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,169 ±(99.9%) 0,400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,169, 0,255), stdev = 0,104
[info]   CI (99.9%): [≈ 0, 0,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89,13% complete, ETA 00:14:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57017,378 ops/s
[info] # Warmup Iteration   2: 66918,029 ops/s
[info] # Warmup Iteration   3: 66882,933 ops/s
[info] # Warmup Iteration   4: 65916,549 ops/s
[info] # Warmup Iteration   5: 67292,747 ops/s
[info] Iteration   1: 67203,621 ops/s
[info]                  ·gc.alloc.rate:                   1922,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47249,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,975 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 67249,900 ops/s
[info]                  ·gc.alloc.rate:               1923,460 MB/sec
[info]                  ·gc.alloc.rate.norm:          45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47295,507 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 66958,107 ops/s
[info]                  ·gc.alloc.rate:                   1915,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31705,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,489 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 67205,260 ops/s
[info]                  ·gc.alloc.rate:                   1922,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47437,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,437 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 67293,929 ops/s
[info]                  ·gc.alloc.rate:                   1924,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47450,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,974 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   67182,163 ±(99.9%) 503,077 ops/s [Average]
[info]   (min, avg, max) = (66958,107, 67182,163, 67293,929), stdev = 130,647
[info]   CI (99.9%): [66679,086, 67685,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1921,489 ±(99.9%) 14,416 MB/sec [Average]
[info]   (min, avg, max) = (1915,016, 1921,489, 1924,517), stdev = 3,744
[info]   CI (99.9%): [1907,073, 1935,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45016,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (45016,006, 45016,006, 45016,007), stdev = 0,001
[info]   CI (99.9%): [45016,005, 45016,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,298 ±(99.9%) 1161,498 MB/sec [Average]
[info]   (min, avg, max) = (1348,768, 1888,298, 2028,610), stdev = 301,637
[info]   CI (99.9%): [726,800, 3049,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44227,853 ±(99.9%) 26957,873 B/op [Average]
[info]   (min, avg, max) = (31705,286, 44227,853, 47450,825), stdev = 7000,874
[info]   CI (99.9%): [17269,980, 71185,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,975 ±(99.9%) 3,511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,975, 2,437), stdev = 0,912
[info]   CI (99.9%): [≈ 0, 4,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,34% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80107,083 ops/s
[info] # Warmup Iteration   2: 125953,697 ops/s
[info] # Warmup Iteration   3: 126327,607 ops/s
[info] # Warmup Iteration   4: 125527,303 ops/s
[info] # Warmup Iteration   5: 126026,452 ops/s
[info] Iteration   1: 126026,658 ops/s
[info]                  ·gc.alloc.rate:                   1935,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              24168,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25372,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,780 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 125843,103 ops/s
[info]                  ·gc.alloc.rate:                   1932,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              24168,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25434,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,781 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 124901,286 ops/s
[info]                  ·gc.alloc.rate:                   1918,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              24168,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25650,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,525 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 124499,348 ops/s
[info]                  ·gc.alloc.rate:               1912,029 MB/sec
[info]                  ·gc.alloc.rate.norm:          24168,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1358,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17170,995 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 126002,036 ops/s
[info]                  ·gc.alloc.rate:                   1934,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              24168,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25464,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   125454,486 ±(99.9%) 2720,456 ops/s [Average]
[info]   (min, avg, max) = (124499,348, 125454,486, 126026,658), stdev = 706,494
[info]   CI (99.9%): [122734,030, 128174,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1926,628 ±(99.9%) 40,927 MB/sec [Average]
[info]   (min, avg, max) = (1912,029, 1926,628, 1935,342), stdev = 10,629
[info]   CI (99.9%): [1885,701, 1967,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24168,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24168,003, 24168,003, 24168,004), stdev = 0,001
[info]   CI (99.9%): [24168,003, 24168,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,756 ±(99.9%) 1165,204 MB/sec [Average]
[info]   (min, avg, max) = (1358,467, 1899,756, 2038,360), stdev = 302,600
[info]   CI (99.9%): [734,552, 3064,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23818,607 ±(99.9%) 14315,057 B/op [Average]
[info]   (min, avg, max) = (17170,995, 23818,607, 25650,771), stdev = 3717,575
[info]   CI (99.9%): [9503,550, 38133,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,469 ±(99.9%) 1,307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,469, 0,781), stdev = 0,339
[info]   CI (99.9%): [≈ 0, 1,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,54% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162586,362 ops/s
[info] # Warmup Iteration   2: 182071,242 ops/s
[info] # Warmup Iteration   3: 182967,093 ops/s
[info] # Warmup Iteration   4: 180203,368 ops/s
[info] # Warmup Iteration   5: 183162,472 ops/s
[info] Iteration   1: 183435,054 ops/s
[info]                  ·gc.alloc.rate:                   2694,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23159,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,357 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 183356,216 ops/s
[info]                  ·gc.alloc.rate:                   2693,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23215,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,357 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 183134,330 ops/s
[info]                  ·gc.alloc.rate:                   2690,973 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23274,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,358 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 182578,083 ops/s
[info]                  ·gc.alloc.rate:                   2682,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17541,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 183219,099 ops/s
[info]                  ·gc.alloc.rate:                   2691,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23333,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,536 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   183144,557 ±(99.9%) 1299,760 ops/s [Average]
[info]   (min, avg, max) = (182578,083, 183144,557, 183435,054), stdev = 337,543
[info]   CI (99.9%): [181844,797, 184444,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2690,386 ±(99.9%) 18,668 MB/sec [Average]
[info]   (min, avg, max) = (2682,137, 2690,386, 2694,363), stdev = 4,848
[info]   CI (99.9%): [2671,718, 2709,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23120,002, 23120,002, 23120,002), stdev = 0,001
[info]   CI (99.9%): [23120,002, 23120,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2572,690 ±(99.9%) 1157,604 MB/sec [Average]
[info]   (min, avg, max) = (2035,027, 2572,690, 2715,895), stdev = 300,626
[info]   CI (99.9%): [1415,086, 3730,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22105,096 ±(99.9%) 9825,767 B/op [Average]
[info]   (min, avg, max) = (17541,917, 22105,096, 23333,859), stdev = 2551,721
[info]   CI (99.9%): [12279,329, 31930,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,358 ±(99.9%) 0,486 B/op [Average]
[info]   (min, avg, max) = (0,179, 0,358, 0,536), stdev = 0,126
[info]   CI (99.9%): [≈ 0, 0,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89,74% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38565,664 ops/s
[info] # Warmup Iteration   2: 57365,174 ops/s
[info] # Warmup Iteration   3: 57784,927 ops/s
[info] # Warmup Iteration   4: 58050,020 ops/s
[info] # Warmup Iteration   5: 57715,863 ops/s
[info] Iteration   1: 57849,643 ops/s
[info]                  ·gc.alloc.rate:                   3040,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73924,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,699 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 57907,306 ops/s
[info]                  ·gc.alloc.rate:                   3043,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92400,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,566 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 58211,641 ops/s
[info]                  ·gc.alloc.rate:                   3059,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73609,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,126 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 57909,100 ops/s
[info]                  ·gc.alloc.rate:                   3043,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92509,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,131 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 57895,994 ops/s
[info]                  ·gc.alloc.rate:                   3042,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74042,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,132 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   57954,737 ±(99.9%) 560,754 ops/s [Average]
[info]   (min, avg, max) = (57849,643, 57954,737, 58211,641), stdev = 145,626
[info]   CI (99.9%): [57393,983, 58515,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3045,853 ±(99.9%) 30,356 MB/sec [Average]
[info]   (min, avg, max) = (3040,268, 3045,853, 3059,773), stdev = 7,883
[info]   CI (99.9%): [3015,497, 3076,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82720,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82720,007, 82720,007, 82720,008), stdev = 0,001
[info]   CI (99.9%): [82720,006, 82720,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2993,223 ±(99.9%) 1435,082 MB/sec [Average]
[info]   (min, avg, max) = (2717,012, 2993,223, 3403,747), stdev = 372,686
[info]   CI (99.9%): [1558,142, 4428,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81297,163 ±(99.9%) 39225,874 B/op [Average]
[info]   (min, avg, max) = (73609,243, 81297,163, 92509,165), stdev = 10186,835
[info]   CI (99.9%): [42071,289, 120523,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,131 ±(99.9%) 1,543 B/op [Average]
[info]   (min, avg, max) = (0,566, 1,131, 1,699), stdev = 0,401
[info]   CI (99.9%): [≈ 0, 2,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89,94% complete, ETA 00:13:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76083,265 ops/s
[info] # Warmup Iteration   2: 86204,797 ops/s
[info] # Warmup Iteration   3: 86781,352 ops/s
[info] # Warmup Iteration   4: 86915,141 ops/s
[info] # Warmup Iteration   5: 86235,274 ops/s
[info] Iteration   1: 86836,496 ops/s
[info]                  ·gc.alloc.rate:                   1770,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36555,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,755 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 83381,008 ops/s
[info]                  ·gc.alloc.rate:                   1700,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25411,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 86054,585 ops/s
[info]                  ·gc.alloc.rate:                   1754,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36975,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,761 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 86757,003 ops/s
[info]                  ·gc.alloc.rate:                   1769,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24480,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,755 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 86544,550 ops/s
[info]                  ·gc.alloc.rate:                   1764,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36859,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,757 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   85914,728 ±(99.9%) 5578,471 ops/s [Average]
[info]   (min, avg, max) = (83381,008, 85914,728, 86836,496), stdev = 1448,711
[info]   CI (99.9%): [80336,257, 91493,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1752,045 ±(99.9%) 113,567 MB/sec [Average]
[info]   (min, avg, max) = (1700,477, 1752,045, 1770,803), stdev = 29,493
[info]   CI (99.9%): [1638,478, 1865,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   32096,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32096,005, 32096,005, 32096,005), stdev = 0,001
[info]   CI (99.9%): [32096,004, 32096,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1752,201 ±(99.9%) 1421,070 MB/sec [Average]
[info]   (min, avg, max) = (1346,313, 1752,201, 2026,550), stdev = 369,047
[info]   CI (99.9%): [331,130, 3173,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   32056,606 ±(99.9%) 25033,809 B/op [Average]
[info]   (min, avg, max) = (24480,750, 32056,606, 36975,742), stdev = 6501,201
[info]   CI (99.9%): [7022,797, 57090,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,001 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,042, 0,042), stdev = 0,001
[info]   CI (99.9%): [0,042, 0,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,763 ±(99.9%) 0,051 B/op [Average]
[info]   (min, avg, max) = (0,755, 0,763, 0,786), stdev = 0,013
[info]   CI (99.9%): [0,712, 0,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90,14% complete, ETA 00:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228547,654 ops/s
[info] # Warmup Iteration   2: 281796,166 ops/s
[info] # Warmup Iteration   3: 264794,506 ops/s
[info] # Warmup Iteration   4: 273681,439 ops/s
[info] # Warmup Iteration   5: 281686,916 ops/s
[info] Iteration   1: 281949,295 ops/s
[info]                  ·gc.alloc.rate:                   1341,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7495,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,232 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 281087,981 ops/s
[info]                  ·gc.alloc.rate:                   1337,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7518,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 280383,835 ops/s
[info]                  ·gc.alloc.rate:               1333,676 MB/sec
[info]                  ·gc.alloc.rate.norm:          7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3768,830 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 280074,980 ops/s
[info]                  ·gc.alloc.rate:                   1332,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7553,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,351 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 284037,146 ops/s
[info]                  ·gc.alloc.rate:                   1351,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7455,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   281506,647 ±(99.9%) 6114,231 ops/s [Average]
[info]   (min, avg, max) = (280074,980, 281506,647, 284037,146), stdev = 1587,846
[info]   CI (99.9%): [275392,417, 287620,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1339,264 ±(99.9%) 29,039 MB/sec [Average]
[info]   (min, avg, max) = (1332,579, 1339,264, 1351,231), stdev = 7,541
[info]   CI (99.9%): [1310,225, 1368,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7488,001, 7488,001, 7488,002), stdev = 0,001
[info]   CI (99.9%): [7488,001, 7488,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,313 ±(99.9%) 1158,207 MB/sec [Average]
[info]   (min, avg, max) = (671,260, 1209,313, 1345,357), stdev = 300,783
[info]   CI (99.9%): [51,106, 2367,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6758,455 ±(99.9%) 6436,854 B/op [Average]
[info]   (min, avg, max) = (3768,830, 6758,455, 7553,352), stdev = 1671,630
[info]   CI (99.9%): [321,602, 13195,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,186 ±(99.9%) 0,514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,186, 0,351), stdev = 0,133
[info]   CI (99.9%): [≈ 0, 0,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,34% complete, ETA 00:12:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411743,669 ops/s
[info] # Warmup Iteration   2: 633024,371 ops/s
[info] # Warmup Iteration   3: 624479,781 ops/s
[info] # Warmup Iteration   4: 634591,457 ops/s
[info] # Warmup Iteration   5: 633451,192 ops/s
[info] Iteration   1: 636146,239 ops/s
[info]                  ·gc.alloc.rate:      549,579 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 633862,235 ops/s
[info]                  ·gc.alloc.rate:                   547,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,827 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 636652,731 ops/s
[info]                  ·gc.alloc.rate:                   550,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1667,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 632578,859 ops/s
[info]                  ·gc.alloc.rate:               546,627 MB/sec
[info]                  ·gc.alloc.rate.norm:          1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1679,706 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 630324,552 ops/s
[info]                  ·gc.alloc.rate:               544,617 MB/sec
[info]                  ·gc.alloc.rate.norm:          1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1685,717 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   633912,923 ±(99.9%) 10032,563 ops/s [Average]
[info]   (min, avg, max) = (630324,552, 633912,923, 636652,731), stdev = 2605,425
[info]   CI (99.9%): [623880,361, 643945,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   547,718 ±(99.9%) 8,561 MB/sec [Average]
[info]   (min, avg, max) = (544,617, 547,718, 550,063), stdev = 2,223
[info]   CI (99.9%): [539,157, 556,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1360,001, 1360,001, 1360,001), stdev = 0,001
[info]   CI (99.9%): [1360,001, 1360,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,803 ±(99.9%) 1161,967 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,803, 675,126), stdev = 301,759
[info]   CI (99.9%): [≈ 0, 1701,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1341,507 ±(99.9%) 2887,811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1341,507, 1685,717), stdev = 749,955
[info]   CI (99.9%): [≈ 0, 4229,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,333), stdev = 0,145
[info]   CI (99.9%): [≈ 0, 0,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,186 ±(99.9%) 1,390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,186, 0,827), stdev = 0,361
[info]   CI (99.9%): [≈ 0, 1,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,54% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424567,276 ops/s
[info] # Warmup Iteration   2: 425114,070 ops/s
[info] # Warmup Iteration   3: 392160,351 ops/s
[info] # Warmup Iteration   4: 399370,080 ops/s
[info] # Warmup Iteration   5: 394262,593 ops/s
[info] Iteration   1: 398961,074 ops/s
[info]                  ·gc.alloc.rate:      214,964 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 398936,340 ops/s
[info]                  ·gc.alloc.rate:               214,937 MB/sec
[info]                  ·gc.alloc.rate.norm:          848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2018,165 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 400025,524 ops/s
[info]                  ·gc.alloc.rate:      215,533 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 398540,428 ops/s
[info]                  ·gc.alloc.rate:      214,742 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 396863,319 ops/s
[info]                  ·gc.alloc.rate:                   213,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2028,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   398665,337 ±(99.9%) 4421,490 ops/s [Average]
[info]   (min, avg, max) = (396863,319, 398665,337, 400025,524), stdev = 1148,247
[info]   CI (99.9%): [394243,847, 403086,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   214,795 ±(99.9%) 2,424 MB/sec [Average]
[info]   (min, avg, max) = (213,801, 214,795, 215,533), stdev = 0,629
[info]   CI (99.9%): [212,372, 217,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,001, 848,001, 848,001), stdev = 0,001
[info]   CI (99.9%): [848,001, 848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,603 ±(99.9%) 1078,810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,603, 511,530), stdev = 280,164
[info]   CI (99.9%): [≈ 0, 1283,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   809,374 ±(99.9%) 4267,619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 809,374, 2028,704), stdev = 1108,287
[info]   CI (99.9%): [≈ 0, 5076,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,033 ±(99.9%) 0,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,165), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90,74% complete, ETA 00:12:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664871,602 ops/s
[info] # Warmup Iteration   2: 703484,175 ops/s
[info] # Warmup Iteration   3: 700957,475 ops/s
[info] # Warmup Iteration   4: 698841,013 ops/s
[info] # Warmup Iteration   5: 699590,928 ops/s
[info] Iteration   1: 695958,400 ops/s
[info]                  ·gc.alloc.rate:      7,075 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 699092,265 ops/s
[info]                  ·gc.alloc.rate:      7,107 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 701267,397 ops/s
[info]                  ·gc.alloc.rate:      7,129 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 696444,836 ops/s
[info]                  ·gc.alloc.rate:      7,081 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 701073,585 ops/s
[info]                  ·gc.alloc.rate:      7,127 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   698767,297 ±(99.9%) 9618,674 ops/s [Average]
[info]   (min, avg, max) = (695958,400, 698767,297, 701267,397), stdev = 2497,939
[info]   CI (99.9%): [689148,623, 708385,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7,104 ±(99.9%) 0,097 MB/sec [Average]
[info]   (min, avg, max) = (7,075, 7,104, 7,129), stdev = 0,025
[info]   CI (99.9%): [7,007, 7,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90,95% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24904,883 ops/s
[info] # Warmup Iteration   2: 33590,534 ops/s
[info] # Warmup Iteration   3: 33803,618 ops/s
[info] # Warmup Iteration   4: 33666,462 ops/s
[info] # Warmup Iteration   5: 33812,425 ops/s
[info] Iteration   1: 33495,802 ops/s
[info]                  ·gc.alloc.rate:               1970,174 MB/sec
[info]                  ·gc.alloc.rate.norm:          92576,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94517,058 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 32111,103 ops/s
[info]                  ·gc.alloc.rate:               1888,670 MB/sec
[info]                  ·gc.alloc.rate.norm:          92576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98804,921 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 33582,637 ops/s
[info]                  ·gc.alloc.rate:                   1975,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94634,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,878 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33865,080 ops/s
[info]                  ·gc.alloc.rate:                   1992,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94062,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,935 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33866,974 ops/s
[info]                  ·gc.alloc.rate:                   1991,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94181,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,967 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   33384,319 ±(99.9%) 2814,479 ops/s [Average]
[info]   (min, avg, max) = (32111,103, 33384,319, 33866,974), stdev = 730,911
[info]   CI (99.9%): [30569,840, 36198,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1963,609 ±(99.9%) 165,642 MB/sec [Average]
[info]   (min, avg, max) = (1888,670, 1963,609, 1992,038), stdev = 43,017
[info]   CI (99.9%): [1797,967, 2129,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   92576,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (92576,012, 92576,012, 92576,013), stdev = 0,001
[info]   CI (99.9%): [92576,011, 92576,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2019,375 ±(99.9%) 23,290 MB/sec [Average]
[info]   (min, avg, max) = (2011,483, 2019,375, 2026,388), stdev = 6,048
[info]   CI (99.9%): [1996,085, 2042,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   95240,017 ±(99.9%) 7726,567 B/op [Average]
[info]   (min, avg, max) = (94062,889, 95240,017, 98804,921), stdev = 2006,565
[info]   CI (99.9%): [87513,451, 102966,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,556 ±(99.9%) 7,789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,556, 4,878), stdev = 2,023
[info]   CI (99.9%): [≈ 0, 9,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91,15% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143945,991 ops/s
[info] # Warmup Iteration   2: 153776,899 ops/s
[info] # Warmup Iteration   3: 154228,691 ops/s
[info] # Warmup Iteration   4: 154480,636 ops/s
[info] # Warmup Iteration   5: 154709,259 ops/s
[info] Iteration   1: 154948,159 ops/s
[info]                  ·gc.alloc.rate:               1160,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6827,301 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 154012,319 ops/s
[info]                  ·gc.alloc.rate:                   1153,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13736,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 153973,179 ops/s
[info]                  ·gc.alloc.rate:                   1152,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13739,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 153808,917 ops/s
[info]                  ·gc.alloc.rate:               1151,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6876,958 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 154450,212 ops/s
[info]                  ·gc.alloc.rate:                   1156,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13710,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,424 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   154238,557 ±(99.9%) 1779,785 ops/s [Average]
[info]   (min, avg, max) = (153808,917, 154238,557, 154948,159), stdev = 462,205
[info]   CI (99.9%): [152458,772, 156018,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1154,794 ±(99.9%) 13,342 MB/sec [Average]
[info]   (min, avg, max) = (1151,682, 1154,794, 1160,196), stdev = 3,465
[info]   CI (99.9%): [1141,451, 1168,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11784,003, 11784,003, 11784,003), stdev = 0,001
[info]   CI (99.9%): [11784,002, 11784,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,554 ±(99.9%) 1418,045 MB/sec [Average]
[info]   (min, avg, max) = (672,104, 1075,554, 1345,322), stdev = 368,262
[info]   CI (99.9%): [≈ 0, 2493,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10978,181 ±(99.9%) 14503,872 B/op [Average]
[info]   (min, avg, max) = (6827,301, 10978,181, 13739,628), stdev = 3766,609
[info]   CI (99.9%): [≈ 0, 25482,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,255 ±(99.9%) 0,896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,255, 0,426), stdev = 0,233
[info]   CI (99.9%): [≈ 0, 1,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91,35% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5098769,800 ops/s
[info] # Warmup Iteration   2: 5679919,508 ops/s
[info] # Warmup Iteration   3: 5752235,430 ops/s
[info] # Warmup Iteration   4: 5735886,824 ops/s
[info] # Warmup Iteration   5: 5741147,443 ops/s
[info] Iteration   1: 5750430,684 ops/s
[info]                  ·gc.alloc.rate:                   4237,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1114,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5725436,017 ops/s
[info]                  ·gc.alloc.rate:                   4219,475 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4077,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1121,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5699726,539 ops/s
[info]                  ·gc.alloc.rate:                   4200,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1127,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5753592,248 ops/s
[info]                  ·gc.alloc.rate:                   4240,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4765,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1303,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 5699905,797 ops/s
[info]                  ·gc.alloc.rate:                   4200,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1128,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5725818,257 ±(99.9%) 100588,548 ops/s [Average]
[info]   (min, avg, max) = (5699726,539, 5725818,257, 5753592,248), stdev = 26122,526
[info]   CI (99.9%): [5625229,709, 5826406,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   4219,794 ±(99.9%) 74,293 MB/sec [Average]
[info]   (min, avg, max) = (4200,526, 4219,794, 4240,656), stdev = 19,294
[info]   CI (99.9%): [4145,501, 4294,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,000, 1160,000, 1160,000), stdev = 0,001
[info]   CI (99.9%): [1160,000, 1160,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4216,763 ±(99.9%) 1182,035 MB/sec [Average]
[info]   (min, avg, max) = (4069,975, 4216,763, 4765,764), stdev = 306,971
[info]   CI (99.9%): [3034,728, 5398,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1159,005 ±(99.9%) 312,145 B/op [Average]
[info]   (min, avg, max) = (1114,110, 1159,005, 1303,640), stdev = 81,063
[info]   CI (99.9%): [846,860, 1471,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,021, 0,029), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91,55% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1861944,856 ops/s
[info] # Warmup Iteration   2: 8429613,486 ops/s
[info] # Warmup Iteration   3: 8668092,279 ops/s
[info] # Warmup Iteration   4: 8650836,731 ops/s
[info] # Warmup Iteration   5: 8605832,767 ops/s
[info] Iteration   1: 8655157,352 ops/s
[info]                  ·gc.alloc.rate:               923,900 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,336 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 8612521,804 ops/s
[info]                  ·gc.alloc.rate:               919,313 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,941 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 8646409,503 ops/s
[info]                  ·gc.alloc.rate:                   922,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244,679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8079499,643 ops/s
[info]                  ·gc.alloc.rate:               862,532 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130,931 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8647391,141 ops/s
[info]                  ·gc.alloc.rate:                   922,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   8528195,889 ±(99.9%) 967922,680 ops/s [Average]
[info]   (min, avg, max) = (8079499,643, 8528195,889, 8655157,352), stdev = 251366,446
[info]   CI (99.9%): [7560273,209, 9496118,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   910,327 ±(99.9%) 103,104 MB/sec [Average]
[info]   (min, avg, max) = (862,532, 910,327, 923,900), stdev = 26,776
[info]   CI (99.9%): [807,223, 1013,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   806,795 ±(99.9%) 1156,823 MB/sec [Average]
[info]   (min, avg, max) = (672,035, 806,795, 1344,208), stdev = 300,423
[info]   CI (99.9%): [≈ 0, 1963,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   148,643 ±(99.9%) 207,200 B/op [Average]
[info]   (min, avg, max) = (122,329, 148,643, 244,679), stdev = 53,809
[info]   CI (99.9%): [≈ 0, 355,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,019), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,75% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3597019,349 ops/s
[info] # Warmup Iteration   2: 5204943,599 ops/s
[info] # Warmup Iteration   3: 5166343,442 ops/s
[info] # Warmup Iteration   4: 5114274,299 ops/s
[info] # Warmup Iteration   5: 5152117,159 ops/s
[info] Iteration   1: 5136763,997 ops/s
[info]                  ·gc.alloc.rate:                   2429,012 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5131265,718 ops/s
[info]                  ·gc.alloc.rate:                   2425,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5167383,317 ops/s
[info]                  ·gc.alloc.rate:                   2442,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     826,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5025815,577 ops/s
[info]                  ·gc.alloc.rate:                   2375,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     638,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5144433,519 ops/s
[info]                  ·gc.alloc.rate:                   2431,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5121132,425 ±(99.9%) 211911,549 ops/s [Average]
[info]   (min, avg, max) = (5025815,577, 5121132,425, 5167383,317), stdev = 55032,756
[info]   CI (99.9%): [4909220,876, 5333043,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2420,967 ±(99.9%) 99,950 MB/sec [Average]
[info]   (min, avg, max) = (2375,946, 2420,967, 2442,714), stdev = 25,957
[info]   CI (99.9%): [2321,017, 2520,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2442,521 ±(99.9%) 1429,805 MB/sec [Average]
[info]   (min, avg, max) = (2033,246, 2442,521, 2718,934), stdev = 371,316
[info]   CI (99.9%): [1012,717, 3872,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   750,000 ±(99.9%) 419,086 B/op [Average]
[info]   (min, avg, max) = (623,578, 750,000, 832,029), stdev = 108,835
[info]   CI (99.9%): [330,914, 1169,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,017, 0,026), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,95% complete, ETA 00:10:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8228848,019 ops/s
[info] # Warmup Iteration   2: 8984697,493 ops/s
[info] # Warmup Iteration   3: 9085355,367 ops/s
[info] # Warmup Iteration   4: 9104344,394 ops/s
[info] # Warmup Iteration   5: 9052604,236 ops/s
[info] Iteration   1: 9084286,718 ops/s
[info]                  ·gc.alloc.rate:               969,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 233,108 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 9091008,076 ops/s
[info]                  ·gc.alloc.rate:               970,345 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116,362 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9083077,027 ops/s
[info]                  ·gc.alloc.rate:                   969,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8951492,160 ops/s
[info]                  ·gc.alloc.rate:                   955,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 9077733,531 ops/s
[info]                  ·gc.alloc.rate:               968,903 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116,523 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   9057519,502 ±(99.9%) 228955,996 ops/s [Average]
[info]   (min, avg, max) = (8951492,160, 9057519,502, 9091008,076), stdev = 59459,145
[info]   CI (99.9%): [8828563,506, 9286475,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   966,780 ±(99.9%) 24,386 MB/sec [Average]
[info]   (min, avg, max) = (955,489, 966,780, 970,345), stdev = 6,333
[info]   CI (99.9%): [942,394, 991,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,152 ±(99.9%) 1418,911 MB/sec [Average]
[info]   (min, avg, max) = (672,018, 941,152, 1345,480), stdev = 368,487
[info]   CI (99.9%): [≈ 0, 2360,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   163,757 ±(99.9%) 249,490 B/op [Average]
[info]   (min, avg, max) = (116,362, 163,757, 236,335), stdev = 64,792
[info]   CI (99.9%): [≈ 0, 413,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92,15% complete, ETA 00:10:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5159774,514 ops/s
[info] # Warmup Iteration   2: 6420896,295 ops/s
[info] # Warmup Iteration   3: 6490968,000 ops/s
[info] # Warmup Iteration   4: 6444367,525 ops/s
[info] # Warmup Iteration   5: 6453402,446 ops/s
[info] Iteration   1: 6453460,869 ops/s
[info]                  ·gc.alloc.rate:                   3378,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     823,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6420392,126 ops/s
[info]                  ·gc.alloc.rate:                   3361,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384,929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6373354,243 ops/s
[info]                  ·gc.alloc.rate:                   3336,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     837,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6470841,537 ops/s
[info]                  ·gc.alloc.rate:                   3387,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     826,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6461550,571 ops/s
[info]                  ·gc.alloc.rate:               3382,818 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3401,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 828,438 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   6435919,869 ±(99.9%) 153298,563 ops/s [Average]
[info]   (min, avg, max) = (6373354,243, 6435919,869, 6470841,537), stdev = 39811,150
[info]   CI (99.9%): [6282621,306, 6589218,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3369,551 ±(99.9%) 80,511 MB/sec [Average]
[info]   (min, avg, max) = (3336,621, 3369,551, 3387,957), stdev = 20,909
[info]   CI (99.9%): [3289,039, 3450,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3390,348 ±(99.9%) 39,259 MB/sec [Average]
[info]   (min, avg, max) = (3375,790, 3390,348, 3401,036), stdev = 10,195
[info]   CI (99.9%): [3351,090, 3429,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   829,110 ±(99.9%) 20,728 B/op [Average]
[info]   (min, avg, max) = (823,266, 829,110, 837,694), stdev = 5,383
[info]   CI (99.9%): [808,382, 849,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92,35% complete, ETA 00:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4777298,413 ops/s
[info] # Warmup Iteration   2: 5059660,134 ops/s
[info] # Warmup Iteration   3: 5003227,700 ops/s
[info] # Warmup Iteration   4: 4921032,173 ops/s
[info] # Warmup Iteration   5: 5039241,008 ops/s
[info] Iteration   1: 5017428,462 ops/s
[info]                  ·gc.alloc.rate:                   2626,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4991586,091 ops/s
[info]                  ·gc.alloc.rate:                   2613,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     852,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5035505,843 ops/s
[info]                  ·gc.alloc.rate:                   2636,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5038004,245 ops/s
[info]                  ·gc.alloc.rate:                   2637,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     847,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5025153,956 ops/s
[info]                  ·gc.alloc.rate:                   2630,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     850,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   5021535,719 ±(99.9%) 71866,834 ops/s [Average]
[info]   (min, avg, max) = (4991586,091, 5021535,719, 5038004,245), stdev = 18663,588
[info]   CI (99.9%): [4949668,886, 5093402,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2629,015 ±(99.9%) 37,461 MB/sec [Average]
[info]   (min, avg, max) = (2613,638, 2629,015, 2637,922), stdev = 9,729
[info]   CI (99.9%): [2591,554, 2666,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2708,125 ±(99.9%) 29,707 MB/sec [Average]
[info]   (min, avg, max) = (2697,021, 2708,125, 2716,349), stdev = 7,715
[info]   CI (99.9%): [2678,418, 2737,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   848,801 ±(99.9%) 11,025 B/op [Average]
[info]   (min, avg, max) = (846,140, 848,801, 852,734), stdev = 2,863
[info]   CI (99.9%): [837,776, 859,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,016 ±(99.9%) 0,022 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,016, 0,026), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92,56% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2798803,773 ops/s
[info] # Warmup Iteration   2: 3413945,757 ops/s
[info] # Warmup Iteration   3: 3468854,517 ops/s
[info] # Warmup Iteration   4: 3454041,234 ops/s
[info] # Warmup Iteration   5: 3206348,856 ops/s
[info] Iteration   1: 3440232,883 ops/s
[info]                  ·gc.alloc.rate:                   821,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     308,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3481670,100 ops/s
[info]                  ·gc.alloc.rate:                   831,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3475088,319 ops/s
[info]                  ·gc.alloc.rate:                   830,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     608,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3470005,740 ops/s
[info]                  ·gc.alloc.rate:               829,039 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 304,529 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 3476326,085 ops/s
[info]                  ·gc.alloc.rate:               830,404 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 303,976 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3468664,625 ±(99.9%) 63251,053 ops/s [Average]
[info]   (min, avg, max) = (3440232,883, 3468664,625, 3481670,100), stdev = 16426,098
[info]   CI (99.9%): [3405413,572, 3531915,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   828,668 ±(99.9%) 15,075 MB/sec [Average]
[info]   (min, avg, max) = (821,888, 828,668, 831,800), stdev = 3,915
[info]   CI (99.9%): [813,594, 843,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (376,000, 376,000, 376,000), stdev = 0,001
[info]   CI (99.9%): [376,000, 376,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   806,648 ±(99.9%) 1155,628 MB/sec [Average]
[info]   (min, avg, max) = (671,338, 806,648, 1343,501), stdev = 300,113
[info]   CI (99.9%): [≈ 0, 1962,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   365,903 ±(99.9%) 522,197 B/op [Average]
[info]   (min, avg, max) = (303,829, 365,903, 608,468), stdev = 135,613
[info]   CI (99.9%): [≈ 0, 888,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,029), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92,76% complete, ETA 00:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1831498,944 ops/s
[info] # Warmup Iteration   2: 6685459,236 ops/s
[info] # Warmup Iteration   3: 6824836,959 ops/s
[info] # Warmup Iteration   4: 6857993,001 ops/s
[info] # Warmup Iteration   5: 6842801,798 ops/s
[info] Iteration   1: 6846181,662 ops/s
[info]                  ·gc.alloc.rate:                   661,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,599 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6147105,500 ops/s
[info]                  ·gc.alloc.rate:               593,698 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172,605 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 6858825,562 ops/s
[info]                  ·gc.alloc.rate:                   662,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 6842839,017 ops/s
[info]                  ·gc.alloc.rate:               660,899 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154,737 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 5731236,166 ops/s
[info]                  ·gc.alloc.rate:                   553,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6485237,581 ±(99.9%) 2001389,392 ops/s [Average]
[info]   (min, avg, max) = (5731236,166, 6485237,581, 6858825,562), stdev = 519754,470
[info]   CI (99.9%): [4483848,189, 8486626,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   626,323 ±(99.9%) 193,383 MB/sec [Average]
[info]   (min, avg, max) = (553,438, 626,323, 662,382), stdev = 50,221
[info]   CI (99.9%): [432,940, 819,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   673,166 ±(99.9%) 3,639 MB/sec [Average]
[info]   (min, avg, max) = (672,006, 673,166, 674,178), stdev = 0,945
[info]   CI (99.9%): [669,527, 676,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   164,250 ±(99.9%) 52,959 B/op [Average]
[info]   (min, avg, max) = (154,377, 164,250, 184,564), stdev = 13,753
[info]   CI (99.9%): [111,291, 217,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,550 ±(99.9%) 4,427 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,550, 2,606), stdev = 1,150
[info]   CI (99.9%): [≈ 0, 4,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,127 ±(99.9%) 1,016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,127, 0,599), stdev = 0,264
[info]   CI (99.9%): [≈ 0, 1,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92,96% complete, ETA 00:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1700743,938 ops/s
[info] # Warmup Iteration   2: 2212147,737 ops/s
[info] # Warmup Iteration   3: 2198702,817 ops/s
[info] # Warmup Iteration   4: 2208706,622 ops/s
[info] # Warmup Iteration   5: 2211752,264 ops/s
[info] Iteration   1: 2212432,442 ops/s
[info]                  ·gc.alloc.rate:                   685,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     477,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2214953,881 ops/s
[info]                  ·gc.alloc.rate:                   686,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     477,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2213028,427 ops/s
[info]                  ·gc.alloc.rate:                   686,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     478,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2210025,903 ops/s
[info]                  ·gc.alloc.rate:               685,289 MB/sec
[info]                  ·gc.alloc.rate.norm:          488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,333 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2210943,782 ops/s
[info]                  ·gc.alloc.rate:               685,471 MB/sec
[info]                  ·gc.alloc.rate.norm:          488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,135 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2212276,887 ±(99.9%) 7356,495 ops/s [Average]
[info]   (min, avg, max) = (2210025,903, 2212276,887, 2214953,881), stdev = 1910,458
[info]   CI (99.9%): [2204920,392, 2219633,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   685,942 ±(99.9%) 2,350 MB/sec [Average]
[info]   (min, avg, max) = (685,289, 685,942, 686,841), stdev = 0,610
[info]   CI (99.9%): [683,592, 688,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (488,000, 488,000, 488,000), stdev = 0,001
[info]   CI (99.9%): [488,000, 488,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   672,490 ±(99.9%) 2,619 MB/sec [Average]
[info]   (min, avg, max) = (671,414, 672,490, 673,118), stdev = 0,680
[info]   CI (99.9%): [669,871, 675,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   478,430 ±(99.9%) 2,951 B/op [Average]
[info]   (min, avg, max) = (477,631, 478,430, 479,333), stdev = 0,766
[info]   CI (99.9%): [475,479, 481,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,044), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93,16% complete, ETA 00:09:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9852069,959 ops/s
[info] # Warmup Iteration   2: 10632872,830 ops/s
[info] # Warmup Iteration   3: 10734972,719 ops/s
[info] # Warmup Iteration   4: 10750124,313 ops/s
[info] # Warmup Iteration   5: 10721343,799 ops/s
[info] Iteration   1: 10053727,053 ops/s
[info]                  ·gc.alloc.rate:               971,011 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105,328 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 10608106,047 ops/s
[info]                  ·gc.alloc.rate:                   1024,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10751709,771 ops/s
[info]                  ·gc.alloc.rate:               1038,287 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98,382 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 10398221,753 ops/s
[info]                  ·gc.alloc.rate:                   1004,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10732532,337 ops/s
[info]                  ·gc.alloc.rate:               1036,400 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98,558 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   10508859,392 ±(99.9%) 1119739,718 ops/s [Average]
[info]   (min, avg, max) = (10053727,053, 10508859,392, 10751709,771), stdev = 290792,849
[info]   CI (99.9%): [9389119,674, 11628599,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1014,907 ±(99.9%) 107,916 MB/sec [Average]
[info]   (min, avg, max) = (971,011, 1014,907, 1038,287), stdev = 28,025
[info]   CI (99.9%): [906,991, 1122,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,070 ±(99.9%) 1417,150 MB/sec [Average]
[info]   (min, avg, max) = (672,012, 941,070, 1344,234), stdev = 368,029
[info]   CI (99.9%): [≈ 0, 2358,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   141,029 ±(99.9%) 212,692 B/op [Average]
[info]   (min, avg, max) = (98,382, 141,029, 203,451), stdev = 55,235
[info]   CI (99.9%): [≈ 0, 353,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,009), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93,36% complete, ETA 00:08:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8676725,851 ops/s
[info] # Warmup Iteration   2: 9214100,621 ops/s
[info] # Warmup Iteration   3: 9194900,668 ops/s
[info] # Warmup Iteration   4: 9165932,618 ops/s
[info] # Warmup Iteration   5: 9093306,086 ops/s
[info] Iteration   1: 9116427,100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9159919,559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9185857,512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9159312,315 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9164834,096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9157270,116 ±(99.9%) 97296,315 ops/s [Average]
[info]   (min, avg, max) = (9116427,100, 9157270,116, 9185857,512), stdev = 25267,544
[info]   CI (99.9%): [9059973,801, 9254566,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93,56% complete, ETA 00:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3224328,526 ops/s
[info] # Warmup Iteration   2: 3851156,069 ops/s
[info] # Warmup Iteration   3: 3714471,041 ops/s
[info] # Warmup Iteration   4: 3862082,211 ops/s
[info] # Warmup Iteration   5: 3842130,746 ops/s
[info] Iteration   1: 3877049,736 ops/s
[info]                  ·gc.alloc.rate:                   1241,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3888345,365 ops/s
[info]                  ·gc.alloc.rate:                   1245,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3917947,908 ops/s
[info]                  ·gc.alloc.rate:                   1254,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3912793,323 ops/s
[info]                  ·gc.alloc.rate:               1253,004 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 269,931 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 3883487,245 ops/s
[info]                  ·gc.alloc.rate:                   1243,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3895924,715 ±(99.9%) 70425,031 ops/s [Average]
[info]   (min, avg, max) = (3877049,736, 3895924,715, 3917947,908), stdev = 18289,157
[info]   CI (99.9%): [3825499,684, 3966349,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1247,546 ±(99.9%) 22,638 MB/sec [Average]
[info]   (min, avg, max) = (1241,512, 1247,546, 1254,592), stdev = 5,879
[info]   CI (99.9%): [1224,909, 1270,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,960 ±(99.9%) 1153,529 MB/sec [Average]
[info]   (min, avg, max) = (671,079, 1206,960, 1342,653), stdev = 299,568
[info]   CI (99.9%): [53,430, 2360,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   487,849 ±(99.9%) 469,165 B/op [Average]
[info]   (min, avg, max) = (269,931, 487,849, 544,211), stdev = 121,841
[info]   CI (99.9%): [18,683, 957,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,025), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93,76% complete, ETA 00:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371081,535 ops/s
[info] # Warmup Iteration   2: 382504,260 ops/s
[info] # Warmup Iteration   3: 378530,141 ops/s
[info] # Warmup Iteration   4: 383178,950 ops/s
[info] # Warmup Iteration   5: 386689,767 ops/s
[info] Iteration   1: 381646,345 ops/s
[info]                  ·gc.alloc.rate:               184,283 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2109,601 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 384636,091 ops/s
[info]                  ·gc.alloc.rate:      185,743 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 383326,455 ops/s
[info]                  ·gc.alloc.rate:               185,091 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2100,352 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 383580,524 ops/s
[info]                  ·gc.alloc.rate:      185,233 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 383686,719 ops/s
[info]                  ·gc.alloc.rate:      185,258 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   383375,227 ±(99.9%) 4183,032 ops/s [Average]
[info]   (min, avg, max) = (381646,345, 383375,227, 384636,091), stdev = 1086,320
[info]   CI (99.9%): [379192,195, 387558,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   185,122 ±(99.9%) 2,039 MB/sec [Average]
[info]   (min, avg, max) = (184,283, 185,122, 185,743), stdev = 0,530
[info]   CI (99.9%): [183,082, 187,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   760,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,001, 760,001, 760,001), stdev = 0,001
[info]   CI (99.9%): [760,001, 760,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,610 ±(99.9%) 1078,850 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,610, 511,529), stdev = 280,174
[info]   CI (99.9%): [≈ 0, 1283,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   841,991 ±(99.9%) 4439,591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 841,991, 2109,601), stdev = 1152,948
[info]   CI (99.9%): [≈ 0, 5281,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93,96% complete, ETA 00:08:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1284720,353 ops/s
[info] # Warmup Iteration   2: 1660435,608 ops/s
[info] # Warmup Iteration   3: 1674334,776 ops/s
[info] # Warmup Iteration   4: 1675948,576 ops/s
[info] # Warmup Iteration   5: 1685765,025 ops/s
[info] Iteration   1: 1672000,579 ops/s
[info]                  ·gc.alloc.rate:                   2957,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2541,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1683634,397 ops/s
[info]                  ·gc.alloc.rate:                   2978,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3162,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1674093,472 ops/s
[info]                  ·gc.alloc.rate:                   2961,203 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2549,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1669615,915 ops/s
[info]                  ·gc.alloc.rate:                   2953,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3200,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1678055,566 ops/s
[info]                  ·gc.alloc.rate:                   2967,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2550,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1675479,986 ±(99.9%) 21226,101 ops/s [Average]
[info]   (min, avg, max) = (1669615,915, 1675479,986, 1683634,397), stdev = 5512,351
[info]   CI (99.9%): [1654253,885, 1696706,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2963,709 ±(99.9%) 37,792 MB/sec [Average]
[info]   (min, avg, max) = (2953,459, 2963,709, 2978,458), stdev = 9,814
[info]   CI (99.9%): [2925,917, 3001,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2784,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2784,000, 2784,000, 2784,000), stdev = 0,001
[info]   CI (99.9%): [2784,000, 2784,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2981,886 ±(99.9%) 1432,281 MB/sec [Average]
[info]   (min, avg, max) = (2700,196, 2981,886, 3394,786), stdev = 371,959
[info]   CI (99.9%): [1549,605, 4414,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2800,911 ±(99.9%) 1338,528 B/op [Average]
[info]   (min, avg, max) = (2541,794, 2800,911, 3200,006), stdev = 347,611
[info]   CI (99.9%): [1462,383, 4139,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,051 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (0,039, 0,051, 0,059), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94,16% complete, ETA 00:07:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274486,817 ops/s
[info] # Warmup Iteration   2: 2427789,110 ops/s
[info] # Warmup Iteration   3: 2422605,086 ops/s
[info] # Warmup Iteration   4: 2423106,198 ops/s
[info] # Warmup Iteration   5: 2408075,788 ops/s
[info] Iteration   1: 2422975,675 ops/s
[info]                  ·gc.alloc.rate:                   677,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,695 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2445138,419 ops/s
[info]                  ·gc.alloc.rate:                   683,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2431803,577 ops/s
[info]                  ·gc.alloc.rate:               679,843 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 435,418 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2434195,465 ops/s
[info]                  ·gc.alloc.rate:                   680,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2437599,859 ops/s
[info]                  ·gc.alloc.rate:                   681,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2434342,599 ±(99.9%) 31213,663 ops/s [Average]
[info]   (min, avg, max) = (2422975,675, 2434342,599, 2445138,419), stdev = 8106,089
[info]   CI (99.9%): [2403128,936, 2465556,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   680,547 ±(99.9%) 8,695 MB/sec [Average]
[info]   (min, avg, max) = (677,364, 680,547, 683,553), stdev = 2,258
[info]   CI (99.9%): [671,852, 689,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   673,156 ±(99.9%) 3,517 MB/sec [Average]
[info]   (min, avg, max) = (672,012, 673,156, 674,118), stdev = 0,913
[info]   CI (99.9%): [669,639, 676,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   435,226 ±(99.9%) 6,204 B/op [Average]
[info]   (min, avg, max) = (433,927, 435,226, 437,861), stdev = 1,611
[info]   CI (99.9%): [429,022, 441,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,543 ±(99.9%) 4,450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,543, 2,610), stdev = 1,156
[info]   CI (99.9%): [≈ 0, 4,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,352 ±(99.9%) 2,891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,352, 1,695), stdev = 0,751
[info]   CI (99.9%): [≈ 0, 3,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,37% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 851770,830 ops/s
[info] # Warmup Iteration   2: 1588755,352 ops/s
[info] # Warmup Iteration   3: 1587967,371 ops/s
[info] # Warmup Iteration   4: 1594925,063 ops/s
[info] # Warmup Iteration   5: 1587834,043 ops/s
[info] Iteration   1: 1589588,468 ops/s
[info]                  ·gc.alloc.rate:               1026,151 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 668,400 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1581817,314 ops/s
[info]                  ·gc.alloc.rate:                   1021,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1344,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1593549,120 ops/s
[info]                  ·gc.alloc.rate:               1028,613 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 668,051 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1589344,278 ops/s
[info]                  ·gc.alloc.rate:                   1026,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1340,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1590227,922 ops/s
[info]                  ·gc.alloc.rate:               1026,632 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 670,106 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1588905,420 ±(99.9%) 16586,104 ops/s [Average]
[info]   (min, avg, max) = (1581817,314, 1588905,420, 1593549,120), stdev = 4307,359
[info]   CI (99.9%): [1572319,316, 1605491,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1025,716 ±(99.9%) 10,634 MB/sec [Average]
[info]   (min, avg, max) = (1021,136, 1025,716, 1028,613), stdev = 2,762
[info]   CI (99.9%): [1015,082, 1036,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1016,000, 1016,000, 1016,000), stdev = 0,001
[info]   CI (99.9%): [1016,000, 1016,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,723 ±(99.9%) 1426,500 MB/sec [Average]
[info]   (min, avg, max) = (675,078, 946,723, 1353,574), stdev = 370,458
[info]   CI (99.9%): [≈ 0, 2373,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   938,316 ±(99.9%) 1420,820 B/op [Average]
[info]   (min, avg, max) = (668,051, 938,316, 1344,703), stdev = 368,982
[info]   CI (99.9%): [≈ 0, 2359,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,57% complete, ETA 00:07:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2325161,571 ops/s
[info] # Warmup Iteration   2: 2840252,626 ops/s
[info] # Warmup Iteration   3: 2858820,469 ops/s
[info] # Warmup Iteration   4: 2845979,292 ops/s
[info] # Warmup Iteration   5: 2866755,577 ops/s
[info] Iteration   1: 2874952,683 ops/s
[info]                  ·gc.alloc.rate:                   803,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2878310,743 ops/s
[info]                  ·gc.alloc.rate:               804,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367,892 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2878824,589 ops/s
[info]                  ·gc.alloc.rate:                   804,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2852539,200 ops/s
[info]                  ·gc.alloc.rate:                   797,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2868850,418 ops/s
[info]                  ·gc.alloc.rate:               801,904 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368,708 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2870695,527 ±(99.9%) 41972,601 ops/s [Average]
[info]   (min, avg, max) = (2852539,200, 2870695,527, 2878824,589), stdev = 10900,151
[info]   CI (99.9%): [2828722,925, 2912668,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   802,509 ±(99.9%) 11,688 MB/sec [Average]
[info]   (min, avg, max) = (797,490, 802,509, 804,779), stdev = 3,035
[info]   CI (99.9%): [790,821, 814,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,273 ±(99.9%) 1155,692 MB/sec [Average]
[info]   (min, avg, max) = (671,974, 807,273, 1344,158), stdev = 300,130
[info]   CI (99.9%): [≈ 0, 1962,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   443,079 ±(99.9%) 642,624 B/op [Average]
[info]   (min, avg, max) = (367,797, 443,079, 741,614), stdev = 166,887
[info]   CI (99.9%): [≈ 0, 1085,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94,77% complete, ETA 00:06:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 882585,413 ops/s
[info] # Warmup Iteration   2: 1284279,658 ops/s
[info] # Warmup Iteration   3: 1277603,774 ops/s
[info] # Warmup Iteration   4: 1266109,073 ops/s
[info] # Warmup Iteration   5: 1249168,220 ops/s
[info] Iteration   1: 1297193,746 ops/s
[info]                  ·gc.alloc.rate:                   870,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     817,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1294378,767 ops/s
[info]                  ·gc.alloc.rate:                   868,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1631,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1295499,647 ops/s
[info]                  ·gc.alloc.rate:               869,164 MB/sec
[info]                  ·gc.alloc.rate.norm:          1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 814,055 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1293892,237 ops/s
[info]                  ·gc.alloc.rate:                   868,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1278657,473 ops/s
[info]                  ·gc.alloc.rate:                   857,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1649,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1291924,374 ±(99.9%) 28973,123 ops/s [Average]
[info]   (min, avg, max) = (1278657,473, 1291924,374, 1297193,746), stdev = 7524,228
[info]   CI (99.9%): [1262951,251, 1320897,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   866,835 ±(99.9%) 19,673 MB/sec [Average]
[info]   (min, avg, max) = (857,827, 866,835, 870,447), stdev = 5,109
[info]   CI (99.9%): [847,162, 886,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1056,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1056,000, 1056,000, 1056,000), stdev = 0,001
[info]   CI (99.9%): [1056,000, 1056,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   939,099 ±(99.9%) 1412,417 MB/sec [Average]
[info]   (min, avg, max) = (670,026, 939,099, 1341,802), stdev = 366,800
[info]   CI (99.9%): [≈ 0, 2351,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1145,439 ±(99.9%) 1740,237 B/op [Average]
[info]   (min, avg, max) = (814,055, 1145,439, 1649,572), stdev = 451,934
[info]   CI (99.9%): [≈ 0, 2885,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,041 ±(99.9%) 0,111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,041, 0,076), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94,97% complete, ETA 00:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002103,702 ops/s
[info] # Warmup Iteration   2: 1219393,718 ops/s
[info] # Warmup Iteration   3: 1222557,101 ops/s
[info] # Warmup Iteration   4: 1227569,582 ops/s
[info] # Warmup Iteration   5: 1197873,310 ops/s
[info] Iteration   1: 1223257,568 ops/s
[info]                  ·gc.alloc.rate:                   1660,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1729,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1222223,156 ops/s
[info]                  ·gc.alloc.rate:                   1658,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2598,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1222468,744 ops/s
[info]                  ·gc.alloc.rate:                   1659,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1733,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1223550,861 ops/s
[info]                  ·gc.alloc.rate:                   1660,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2602,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1178358,265 ops/s
[info]                  ·gc.alloc.rate:                   1599,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1803,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1213971,719 ±(99.9%) 76689,485 ops/s [Average]
[info]   (min, avg, max) = (1178358,265, 1213971,719, 1223550,861), stdev = 19916,016
[info]   CI (99.9%): [1137282,234, 1290661,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1647,504 ±(99.9%) 104,438 MB/sec [Average]
[info]   (min, avg, max) = (1599,005, 1647,504, 1660,607), stdev = 27,122
[info]   CI (99.9%): [1543,065, 1751,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2136,000, 2136,000, 2136,000), stdev = 0,001
[info]   CI (99.9%): [2136,000, 2136,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,279 ±(99.9%) 1420,205 MB/sec [Average]
[info]   (min, avg, max) = (1344,070, 1616,279, 2022,984), stdev = 368,823
[info]   CI (99.9%): [196,074, 3036,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2093,370 ±(99.9%) 1784,791 B/op [Average]
[info]   (min, avg, max) = (1729,358, 2093,370, 2602,117), stdev = 463,505
[info]   CI (99.9%): [308,579, 3878,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,048 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (0,027, 0,048, 0,080), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95,17% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1282540,482 ops/s
[info] # Warmup Iteration   2: 1914175,261 ops/s
[info] # Warmup Iteration   3: 1932532,758 ops/s
[info] # Warmup Iteration   4: 1864166,583 ops/s
[info] # Warmup Iteration   5: 1914597,740 ops/s
[info] Iteration   1: 1938708,693 ops/s
[info]                  ·gc.alloc.rate:                   1626,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1635,318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1934230,902 ops/s
[info]                  ·gc.alloc.rate:               1622,365 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1093,338 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1942555,994 ops/s
[info]                  ·gc.alloc.rate:                   1629,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1089,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1924348,279 ops/s
[info]                  ·gc.alloc.rate:                   1613,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1651,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1930461,233 ops/s
[info]                  ·gc.alloc.rate:                   1618,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1099,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1934061,020 ±(99.9%) 27302,268 ops/s [Average]
[info]   (min, avg, max) = (1924348,279, 1934061,020, 1942555,994), stdev = 7090,312
[info]   CI (99.9%): [1906758,753, 1961363,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1622,056 ±(99.9%) 22,902 MB/sec [Average]
[info]   (min, avg, max) = (1613,991, 1622,056, 1629,134), stdev = 5,948
[info]   CI (99.9%): [1599,154, 1644,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1320,000, 1320,000, 1320,000), stdev = 0,001
[info]   CI (99.9%): [1320,000, 1320,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,267 ±(99.9%) 1415,791 MB/sec [Average]
[info]   (min, avg, max) = (1343,782, 1614,267, 2019,635), stdev = 367,676
[info]   CI (99.9%): [198,477, 3030,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1313,959 ±(99.9%) 1158,811 B/op [Average]
[info]   (min, avg, max) = (1089,646, 1313,959, 1651,755), stdev = 300,940
[info]   CI (99.9%): [155,148, 2472,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,030 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,030, 0,051), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95,37% complete, ETA 00:06:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305849,248 ops/s
[info] # Warmup Iteration   2: 2957888,147 ops/s
[info] # Warmup Iteration   3: 2962183,341 ops/s
[info] # Warmup Iteration   4: 2973283,820 ops/s
[info] # Warmup Iteration   5: 2960779,727 ops/s
[info] Iteration   1: 2978316,041 ops/s
[info]                  ·gc.alloc.rate:               772,120 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356,244 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2980672,122 ops/s
[info]                  ·gc.alloc.rate:                   772,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2978775,154 ops/s
[info]                  ·gc.alloc.rate:               772,216 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 355,486 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2974482,154 ops/s
[info]                  ·gc.alloc.rate:               771,157 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 355,645 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2975346,243 ops/s
[info]                  ·gc.alloc.rate:                   771,255 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2977518,343 ±(99.9%) 9835,866 ops/s [Average]
[info]   (min, avg, max) = (2974482,154, 2977518,343, 2980672,122), stdev = 2554,343
[info]   CI (99.9%): [2967682,477, 2987354,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   771,887 ±(99.9%) 2,536 MB/sec [Average]
[info]   (min, avg, max) = (771,157, 771,887, 772,687), stdev = 0,659
[info]   CI (99.9%): [769,351, 774,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   672,819 ±(99.9%) 3,191 MB/sec [Average]
[info]   (min, avg, max) = (672,092, 672,819, 674,174), stdev = 0,829
[info]   CI (99.9%): [669,629, 676,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   355,636 ±(99.9%) 1,418 B/op [Average]
[info]   (min, avg, max) = (355,260, 355,636, 356,244), stdev = 0,368
[info]   CI (99.9%): [354,218, 357,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,011), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,57% complete, ETA 00:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1679409,716 ops/s
[info] # Warmup Iteration   2: 2906068,164 ops/s
[info] # Warmup Iteration   3: 2914712,881 ops/s
[info] # Warmup Iteration   4: 2955166,427 ops/s
[info] # Warmup Iteration   5: 2825776,531 ops/s
[info] Iteration   1: 2917667,357 ops/s
[info]                  ·gc.alloc.rate:                   1379,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2843123,843 ops/s
[info]                  ·gc.alloc.rate:                   1343,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     746,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2937865,909 ops/s
[info]                  ·gc.alloc.rate:                   1388,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     723,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2935703,153 ops/s
[info]                  ·gc.alloc.rate:                   1387,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2946753,514 ops/s
[info]                  ·gc.alloc.rate:                   1392,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2916222,755 ±(99.9%) 162522,460 ops/s [Average]
[info]   (min, avg, max) = (2843123,843, 2916222,755, 2946753,514), stdev = 42206,567
[info]   CI (99.9%): [2753700,296, 3078745,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1378,465 ±(99.9%) 76,851 MB/sec [Average]
[info]   (min, avg, max) = (1343,893, 1378,465, 1392,825), stdev = 19,958
[info]   CI (99.9%): [1301,614, 1455,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1349,744 ±(99.9%) 9,464 MB/sec [Average]
[info]   (min, avg, max) = (1346,714, 1349,744, 1352,740), stdev = 2,458
[info]   CI (99.9%): [1340,280, 1359,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   728,613 ±(99.9%) 38,498 B/op [Average]
[info]   (min, avg, max) = (722,588, 728,613, 746,291), stdev = 9,998
[info]   CI (99.9%): [690,116, 767,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,044 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,023, 0,035), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,77% complete, ETA 00:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2319053,958 ops/s
[info] # Warmup Iteration   2: 2983696,033 ops/s
[info] # Warmup Iteration   3: 2985518,297 ops/s
[info] # Warmup Iteration   4: 2965641,037 ops/s
[info] # Warmup Iteration   5: 2833142,415 ops/s
[info] Iteration   1: 3000905,037 ops/s
[info]                  ·gc.alloc.rate:                   777,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 3012479,307 ops/s
[info]                  ·gc.alloc.rate:               780,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 351,504 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 3010231,088 ops/s
[info]                  ·gc.alloc.rate:               780,328 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 351,738 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 3005370,741 ops/s
[info]                  ·gc.alloc.rate:                   779,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351,958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 3008008,545 ops/s
[info]                  ·gc.alloc.rate:               779,654 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 351,651 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3007398,943 ±(99.9%) 17272,958 ops/s [Average]
[info]   (min, avg, max) = (3000905,037, 3007398,943, 3012479,307), stdev = 4485,732
[info]   CI (99.9%): [2990125,986, 3024671,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   779,589 ±(99.9%) 4,597 MB/sec [Average]
[info]   (min, avg, max) = (777,878, 779,589, 780,994), stdev = 1,194
[info]   CI (99.9%): [774,993, 784,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672,863 ±(99.9%) 4,205 MB/sec [Average]
[info]   (min, avg, max) = (671,975, 672,863, 674,691), stdev = 1,092
[info]   CI (99.9%): [668,658, 677,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   352,146 ±(99.9%) 3,783 B/op [Average]
[info]   (min, avg, max) = (351,504, 352,146, 353,878), stdev = 0,982
[info]   CI (99.9%): [348,363, 355,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,044), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95,98% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2164603,060 ops/s
[info] # Warmup Iteration   2: 2845373,454 ops/s
[info] # Warmup Iteration   3: 2863803,222 ops/s
[info] # Warmup Iteration   4: 2865904,123 ops/s
[info] # Warmup Iteration   5: 2862953,135 ops/s
[info] Iteration   1: 2868648,951 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2859166,270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2869535,703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2859474,520 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2867551,631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2864875,415 ±(99.9%) 19717,778 ops/s [Average]
[info]   (min, avg, max) = (2859166,270, 2864875,415, 2869535,703), stdev = 5120,644
[info]   CI (99.9%): [2845157,637, 2884593,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96,18% complete, ETA 00:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2346794,214 ops/s
[info] # Warmup Iteration   2: 2898002,356 ops/s
[info] # Warmup Iteration   3: 2901224,678 ops/s
[info] # Warmup Iteration   4: 2936092,176 ops/s
[info] # Warmup Iteration   5: 2935695,322 ops/s
[info] Iteration   1: 2934310,717 ops/s
[info]                  ·gc.alloc.rate:                   1416,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2908598,953 ops/s
[info]                  ·gc.alloc.rate:                   1404,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     725,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2918349,996 ops/s
[info]                  ·gc.alloc.rate:                   1409,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1085,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2927441,200 ops/s
[info]                  ·gc.alloc.rate:               1413,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 722,308 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2917718,982 ops/s
[info]                  ·gc.alloc.rate:                   1408,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     725,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2921283,970 ±(99.9%) 38014,000 ops/s [Average]
[info]   (min, avg, max) = (2908598,953, 2921283,970, 2934310,717), stdev = 9872,115
[info]   CI (99.9%): [2883269,970, 2959297,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1410,639 ±(99.9%) 18,440 MB/sec [Average]
[info]   (min, avg, max) = (1404,589, 1410,639, 1416,969), stdev = 4,789
[info]   CI (99.9%): [1392,200, 1429,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1476,742 ±(99.9%) 1154,036 MB/sec [Average]
[info]   (min, avg, max) = (1340,920, 1476,742, 2012,851), stdev = 299,700
[info]   CI (99.9%): [322,706, 2630,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   795,696 ±(99.9%) 624,071 B/op [Average]
[info]   (min, avg, max) = (719,211, 795,696, 1085,574), stdev = 162,069
[info]   CI (99.9%): [171,625, 1419,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,016 ±(99.9%) 0,049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,034), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96,38% complete, ETA 00:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7949,631 ops/s
[info] # Warmup Iteration   2: 12255,581 ops/s
[info] # Warmup Iteration   3: 12877,039 ops/s
[info] # Warmup Iteration   4: 13351,117 ops/s
[info] # Warmup Iteration   5: 13760,548 ops/s
[info] Iteration   1: 13739,385 ops/s
[info]                  ·gc.alloc.rate:               2051,787 MB/sec
[info]                  ·gc.alloc.rate.norm:          235037,873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230880,519 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 13816,591 ops/s
[info]                  ·gc.alloc.rate:                   2063,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              235040,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229990,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,390 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13794,818 ops/s
[info]                  ·gc.alloc.rate:                   2060,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              235040,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230644,163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,083 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13594,603 ops/s
[info]                  ·gc.alloc.rate:                   2030,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              235030,160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234537,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,639 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13889,767 ops/s
[info]                  ·gc.alloc.rate:               2073,822 MB/sec
[info]                  ·gc.alloc.rate.norm:          235016,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229859,513 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   13767,033 ±(99.9%) 425,265 ops/s [Average]
[info]   (min, avg, max) = (13594,603, 13767,033, 13889,767), stdev = 110,440
[info]   CI (99.9%): [13341,768, 14192,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2055,900 ±(99.9%) 62,980 MB/sec [Average]
[info]   (min, avg, max) = (2030,284, 2055,900, 2073,822), stdev = 16,356
[info]   CI (99.9%): [1992,919, 2118,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   235032,826 ±(99.9%) 39,388 B/op [Average]
[info]   (min, avg, max) = (235016,032, 235032,826, 235040,037), stdev = 10,229
[info]   CI (99.9%): [234993,439, 235072,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2022,117 ±(99.9%) 19,864 MB/sec [Average]
[info]   (min, avg, max) = (2015,495, 2022,117, 2028,320), stdev = 5,159
[info]   CI (99.9%): [2002,253, 2041,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   231182,412 ±(99.9%) 7409,487 B/op [Average]
[info]   (min, avg, max) = (229859,513, 231182,412, 234537,719), stdev = 1924,220
[info]   CI (99.9%): [223772,926, 238591,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,126), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7,622 ±(99.9%) 27,755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,622, 14,390), stdev = 7,208
[info]   CI (99.9%): [≈ 0, 35,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96,58% complete, ETA 00:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7186,171 ops/s
[info] # Warmup Iteration   2: 16418,112 ops/s
[info] # Warmup Iteration   3: 16741,093 ops/s
[info] # Warmup Iteration   4: 16737,391 ops/s
[info] # Warmup Iteration   5: 16652,057 ops/s
[info] Iteration   1: 16883,898 ops/s
[info]                  ·gc.alloc.rate:      238,303 MB/sec
[info]                  ·gc.alloc.rate.norm: 22216,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16788,831 ops/s
[info]                  ·gc.alloc.rate:               236,988 MB/sec
[info]                  ·gc.alloc.rate.norm:          22216,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47954,884 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 17011,257 ops/s
[info]                  ·gc.alloc.rate:      239,828 MB/sec
[info]                  ·gc.alloc.rate.norm: 22189,699 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16918,857 ops/s
[info]                  ·gc.alloc.rate:               238,491 MB/sec
[info]                  ·gc.alloc.rate.norm:          22184,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47583,690 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 16945,734 ops/s
[info]                  ·gc.alloc.rate:      238,832 MB/sec
[info]                  ·gc.alloc.rate.norm: 22184,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   16909,715 ±(99.9%) 316,193 ops/s [Average]
[info]   (min, avg, max) = (16788,831, 16909,715, 17011,257), stdev = 82,114
[info]   CI (99.9%): [16593,522, 17225,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   238,489 ±(99.9%) 3,944 MB/sec [Average]
[info]   (min, avg, max) = (236,988, 238,489, 239,828), stdev = 1,024
[info]   CI (99.9%): [234,545, 242,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22197,961 ±(99.9%) 64,130 B/op [Average]
[info]   (min, avg, max) = (22184,024, 22197,961, 22216,030), stdev = 16,654
[info]   CI (99.9%): [22133,831, 22262,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,622 ±(99.9%) 1078,912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,622, 511,556), stdev = 280,190
[info]   CI (99.9%): [≈ 0, 1283,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19107,715 ±(99.9%) 100750,732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19107,715, 47954,884), stdev = 26164,645
[info]   CI (99.9%): [≈ 0, 119858,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96,78% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22107,736 ops/s
[info] # Warmup Iteration   2: 25493,470 ops/s
[info] # Warmup Iteration   3: 42207,259 ops/s
[info] # Warmup Iteration   4: 42531,027 ops/s
[info] # Warmup Iteration   5: 42479,917 ops/s
[info] Iteration   1: 42414,250 ops/s
[info]                  ·gc.alloc.rate:      381,574 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42386,764 ops/s
[info]                  ·gc.alloc.rate:                   381,333 MB/sec
[info]                  ·gc.alloc.rate.norm:              14160,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18994,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,450 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 42596,595 ops/s
[info]                  ·gc.alloc.rate:               383,237 MB/sec
[info]                  ·gc.alloc.rate.norm:          14160,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18902,574 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 42330,034 ops/s
[info]                  ·gc.alloc.rate:               380,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          14160,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19019,541 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 42563,165 ops/s
[info]                  ·gc.alloc.rate:      382,898 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   42458,162 ±(99.9%) 445,879 ops/s [Average]
[info]   (min, avg, max) = (42330,034, 42458,162, 42596,595), stdev = 115,793
[info]   CI (99.9%): [42012,283, 42904,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   381,983 ±(99.9%) 3,961 MB/sec [Average]
[info]   (min, avg, max) = (380,873, 381,983, 383,237), stdev = 1,029
[info]   CI (99.9%): [378,022, 385,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14160,010 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (14160,010, 14160,010, 14160,011), stdev = 0,001
[info]   CI (99.9%): [14160,008, 14160,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,940 ±(99.9%) 1078,939 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,940, 511,594), stdev = 280,197
[info]   CI (99.9%): [≈ 0, 1385,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11383,307 ±(99.9%) 40014,278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11383,307, 19019,541), stdev = 10391,581
[info]   CI (99.9%): [≈ 0, 51397,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,039), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,290 ±(99.9%) 2,497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,290, 1,450), stdev = 0,648
[info]   CI (99.9%): [≈ 0, 2,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96,98% complete, ETA 00:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1567,086 ops/s
[info] # Warmup Iteration   2: 3649,510 ops/s
[info] # Warmup Iteration   3: 3431,188 ops/s
[info] # Warmup Iteration   4: 3964,647 ops/s
[info] # Warmup Iteration   5: 4122,389 ops/s
[info] Iteration   1: 4114,263 ops/s
[info]                  ·gc.alloc.rate:                   1341,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              513104,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516516,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,963 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 4123,729 ops/s
[info]                  ·gc.alloc.rate:               1344,900 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 515772,292 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 4116,257 ops/s
[info]                  ·gc.alloc.rate:               1342,501 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 517029,215 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 4119,664 ops/s
[info]                  ·gc.alloc.rate:                   1343,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              513104,107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517036,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,854 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4124,912 ops/s
[info]                  ·gc.alloc.rate:               1345,303 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 516917,980 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   4119,765 ±(99.9%) 17,729 ops/s [Average]
[info]   (min, avg, max) = (4114,263, 4119,765, 4124,912), stdev = 4,604
[info]   CI (99.9%): [4102,036, 4137,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1343,622 ±(99.9%) 5,847 MB/sec [Average]
[info]   (min, avg, max) = (1341,749, 1343,622, 1345,303), stdev = 1,518
[info]   CI (99.9%): [1337,775, 1349,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513104,101 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (513104,099, 513104,101, 513104,107), stdev = 0,003
[info]   CI (99.9%): [513104,087, 513104,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1352,919 ±(99.9%) 6,909 MB/sec [Average]
[info]   (min, avg, max) = (1350,672, 1352,919, 1355,303), stdev = 1,794
[info]   CI (99.9%): [1346,009, 1359,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   516654,360 ±(99.9%) 2067,399 B/op [Average]
[info]   (min, avg, max) = (515772,292, 516654,360, 517036,261), stdev = 536,897
[info]   CI (99.9%): [514586,961, 518721,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,363 ±(99.9%) 39,923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,363, 23,854), stdev = 10,368
[info]   CI (99.9%): [≈ 0, 46,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 7,000), stdev = 2,168
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97,18% complete, ETA 00:03:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_7fe6a5a1/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 37089,208 ops/s
[info] # Warmup Iteration   2: 70694,006 ops/s
[info] # Warmup Iteration   3: 70524,189 ops/s
[info] # Warmup Iteration   4: 70370,517 ops/s
[info] # Warmup Iteration   5: 70860,977 ops/s
[info] Iteration   1: 70599,757 ops/s
[info]                  ·gc.alloc.rate:                   901,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15026,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,856 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 70480,629 ops/s
[info]                  ·gc.alloc.rate:               900,098 MB/sec
[info]                  ·gc.alloc.rate.norm:          20099,987 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30112,944 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 65340,197 ops/s
[info]                  ·gc.alloc.rate:               834,441 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16243,872 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 70452,223 ops/s
[info]                  ·gc.alloc.rate:                   899,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15072,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,465 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 70699,292 ops/s
[info]                  ·gc.alloc.rate:               902,791 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15020,539 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   69514,420 ±(99.9%) 8993,345 ops/s [Average]
[info]   (min, avg, max) = (65340,197, 69514,420, 70699,292), stdev = 2335,543
[info]   CI (99.9%): [60521,075, 78507,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   887,754 ±(99.9%) 114,856 MB/sec [Average]
[info]   (min, avg, max) = (834,441, 887,754, 902,791), stdev = 29,828
[info]   CI (99.9%): [772,898, 1002,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100,009 ±(99.9%) 0,126 B/op [Average]
[info]   (min, avg, max) = (20099,973, 20100,009, 20100,055), stdev = 0,033
[info]   CI (99.9%): [20099,883, 20100,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   809,263 ±(99.9%) 1160,726 MB/sec [Average]
[info]   (min, avg, max) = (674,087, 809,263, 1348,489), stdev = 301,437
[info]   CI (99.9%): [≈ 0, 1969,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18295,415 ±(99.9%) 25517,304 B/op [Average]
[info]   (min, avg, max) = (15020,539, 18295,415, 30112,944), stdev = 6626,763
[info]   CI (99.9%): [≈ 0, 43812,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,464 ±(99.9%) 3,095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,464, 1,856), stdev = 0,804
[info]   CI (99.9%): [≈ 0, 3,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97,38% complete, ETA 00:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80812,936 ops/s
[info] # Warmup Iteration   2: 95956,768 ops/s
[info] # Warmup Iteration   3: 95930,290 ops/s
[info] # Warmup Iteration   4: 95925,175 ops/s
[info] # Warmup Iteration   5: 94692,128 ops/s
[info] Iteration   1: 95822,215 ops/s
[info]                  ·gc.alloc.rate:                   626,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11082,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53,096 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 96342,915 ops/s
[info]                  ·gc.alloc.rate:      629,815 MB/sec
[info]                  ·gc.alloc.rate.norm: 10288,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 96463,181 ops/s
[info]                  ·gc.alloc.rate:                   630,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11008,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 96367,784 ops/s
[info]                  ·gc.alloc.rate:                   629,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10987,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,340 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 96569,467 ops/s
[info]                  ·gc.alloc.rate:               631,178 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10964,961 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   96313,112 ±(99.9%) 1111,189 ops/s [Average]
[info]   (min, avg, max) = (95822,215, 96313,112, 96569,467), stdev = 288,572
[info]   CI (99.9%): [95201,923, 97424,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   629,572 ±(99.9%) 7,273 MB/sec [Average]
[info]   (min, avg, max) = (626,330, 629,572, 631,178), stdev = 1,889
[info]   CI (99.9%): [622,299, 636,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10288,004, 10288,004, 10288,005), stdev = 0,001
[info]   CI (99.9%): [10288,004, 10288,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,996 ±(99.9%) 1160,235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,996, 674,716), stdev = 301,309
[info]   CI (99.9%): [≈ 0, 1699,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8808,832 ±(99.9%) 18962,434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8808,832, 11082,555), stdev = 4924,484
[info]   CI (99.9%): [≈ 0, 27771,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,663 ±(99.9%) 5,532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,663, 3,232), stdev = 1,437
[info]   CI (99.9%): [≈ 0, 6,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,891 ±(99.9%) 90,864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,891, 53,096), stdev = 23,597
[info]   CI (99.9%): [≈ 0, 101,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97,59% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90181,990 ops/s
[info] # Warmup Iteration   2: 102321,973 ops/s
[info] # Warmup Iteration   3: 100520,215 ops/s
[info] # Warmup Iteration   4: 102521,309 ops/s
[info] # Warmup Iteration   5: 102047,691 ops/s
[info] Iteration   1: 92960,984 ops/s
[info]                  ·gc.alloc.rate:      6,145 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 102423,799 ops/s
[info]                  ·gc.alloc.rate:      6,769 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 92394,095 ops/s
[info]                  ·gc.alloc.rate:      6,105 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 101984,984 ops/s
[info]                  ·gc.alloc.rate:      6,740 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 102091,234 ops/s
[info]                  ·gc.alloc.rate:      6,746 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   98371,019 ±(99.9%) 20037,956 ops/s [Average]
[info]   (min, avg, max) = (92394,095, 98371,019, 102423,799), stdev = 5203,793
[info]   CI (99.9%): [78333,064, 118408,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6,501 ±(99.9%) 1,324 MB/sec [Average]
[info]   (min, avg, max) = (6,105, 6,501, 6,769), stdev = 0,344
[info]   CI (99.9%): [5,178, 7,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,004, 104,004, 104,004), stdev = 0,001
[info]   CI (99.9%): [104,003, 104,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97,79% complete, ETA 00:02:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 382824,454 ops/s
[info] # Warmup Iteration   2: 428855,657 ops/s
[info] # Warmup Iteration   3: 432691,422 ops/s
[info] # Warmup Iteration   4: 432503,334 ops/s
[info] # Warmup Iteration   5: 430598,616 ops/s
[info] Iteration   1: 435408,809 ops/s
[info]                  ·gc.alloc.rate:                   2332,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7305,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,150 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 435639,968 ops/s
[info]                  ·gc.alloc.rate:                   2333,900 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9751,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,226 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 431424,824 ops/s
[info]                  ·gc.alloc.rate:                   2311,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7396,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 433556,703 ops/s
[info]                  ·gc.alloc.rate:                   2322,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9831,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 434456,589 ops/s
[info]                  ·gc.alloc.rate:                   2326,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7370,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   434097,379 ±(99.9%) 6575,290 ops/s [Average]
[info]   (min, avg, max) = (431424,824, 434097,379, 435639,968), stdev = 1707,582
[info]   CI (99.9%): [427522,088, 440672,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2325,467 ±(99.9%) 35,531 MB/sec [Average]
[info]   (min, avg, max) = (2311,015, 2325,467, 2333,900), stdev = 9,227
[info]   CI (99.9%): [2289,936, 2360,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8432,001, 8432,001, 8432,001), stdev = 0,001
[info]   CI (99.9%): [8432,001, 8432,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2297,937 ±(99.9%) 1426,686 MB/sec [Average]
[info]   (min, avg, max) = (2020,867, 2297,937, 2708,339), stdev = 370,506
[info]   CI (99.9%): [871,251, 3724,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8331,090 ±(99.9%) 5136,682 B/op [Average]
[info]   (min, avg, max) = (7305,069, 8331,090, 9831,526), stdev = 1333,980
[info]   CI (99.9%): [3194,408, 13467,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,151 ±(99.9%) 0,205 B/op [Average]
[info]   (min, avg, max) = (0,075, 0,151, 0,226), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97,99% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284599,762 ops/s
[info] # Warmup Iteration   2: 478415,290 ops/s
[info] # Warmup Iteration   3: 478191,618 ops/s
[info] # Warmup Iteration   4: 479625,765 ops/s
[info] # Warmup Iteration   5: 480667,210 ops/s
[info] Iteration   1: 480143,005 ops/s
[info]                  ·gc.alloc.rate:               573,549 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2200,992 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 477318,586 ops/s
[info]                  ·gc.alloc.rate:                   570,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2214,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,755 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 480969,388 ops/s
[info]                  ·gc.alloc.rate:                   574,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2199,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 476126,071 ops/s
[info]                  ·gc.alloc.rate:               568,789 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2221,760 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 477321,214 ops/s
[info]                  ·gc.alloc.rate:               570,350 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2218,381 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   478375,653 ±(99.9%) 7971,123 ops/s [Average]
[info]   (min, avg, max) = (476126,071, 478375,653, 480969,388), stdev = 2070,075
[info]   CI (99.9%): [470404,530, 486346,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   571,488 ±(99.9%) 9,417 MB/sec [Average]
[info]   (min, avg, max) = (568,789, 571,488, 574,557), stdev = 2,446
[info]   CI (99.9%): [562,070, 580,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1880,001, 1880,001, 1880,001), stdev = 0,001
[info]   CI (99.9%): [1880,001, 1880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   672,068 ±(99.9%) 2,421 MB/sec [Average]
[info]   (min, avg, max) = (671,477, 672,068, 673,007), stdev = 0,629
[info]   CI (99.9%): [669,647, 674,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2210,910 ±(99.9%) 39,175 B/op [Average]
[info]   (min, avg, max) = (2199,401, 2210,910, 2221,760), stdev = 10,174
[info]   CI (99.9%): [2171,735, 2250,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,229), stdev = 0,099
[info]   CI (99.9%): [≈ 0, 0,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,192 ±(99.9%) 1,259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,192, 0,755), stdev = 0,327
[info]   CI (99.9%): [≈ 0, 1,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,19% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1231350,481 ops/s
[info] # Warmup Iteration   2: 1315352,035 ops/s
[info] # Warmup Iteration   3: 1337650,884 ops/s
[info] # Warmup Iteration   4: 1346842,563 ops/s
[info] # Warmup Iteration   5: 1341532,589 ops/s
[info] Iteration   1: 1341372,073 ops/s
[info]                  ·gc.alloc.rate:                   702,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,673 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1347116,122 ops/s
[info]                  ·gc.alloc.rate:                   705,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     788,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1346991,144 ops/s
[info]                  ·gc.alloc.rate:               705,138 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 786,149 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1346514,660 ops/s
[info]                  ·gc.alloc.rate:               704,882 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 786,375 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1345423,186 ops/s
[info]                  ·gc.alloc.rate:                   704,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1345483,437 ±(99.9%) 9215,278 ops/s [Average]
[info]   (min, avg, max) = (1341372,073, 1345483,437, 1347116,122), stdev = 2393,178
[info]   CI (99.9%): [1336268,159, 1354698,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   704,338 ±(99.9%) 4,787 MB/sec [Average]
[info]   (min, avg, max) = (702,244, 704,338, 705,251), stdev = 1,243
[info]   CI (99.9%): [699,551, 709,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,367 ±(99.9%) 5,019 MB/sec [Average]
[info]   (min, avg, max) = (671,901, 673,367, 674,779), stdev = 1,303
[info]   CI (99.9%): [668,348, 678,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   787,771 ±(99.9%) 9,183 B/op [Average]
[info]   (min, avg, max) = (786,149, 787,771, 791,698), stdev = 2,385
[info]   CI (99.9%): [778,588, 796,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,130), stdev = 1,388
[info]   CI (99.9%): [≈ 0, 5,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,759 ±(99.9%) 6,274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,759, 3,673), stdev = 1,629
[info]   CI (99.9%): [≈ 0, 7,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98,39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85065,580 ops/s
[info] # Warmup Iteration   2: 123971,808 ops/s
[info] # Warmup Iteration   3: 125722,362 ops/s
[info] # Warmup Iteration   4: 124800,260 ops/s
[info] # Warmup Iteration   5: 124844,190 ops/s
[info] Iteration   1: 124829,597 ops/s
[info]                  ·gc.alloc.rate:                   4335,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51433,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,050 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 126072,307 ops/s
[info]                  ·gc.alloc.rate:                   4378,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59482,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,299 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 125745,417 ops/s
[info]                  ·gc.alloc.rate:                   4367,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51137,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,521 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 125969,799 ops/s
[info]                  ·gc.alloc.rate:                   4375,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59596,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,780 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 124374,177 ops/s
[info]                  ·gc.alloc.rate:                   4319,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51738,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,790 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   125398,259 ±(99.9%) 2903,114 ops/s [Average]
[info]   (min, avg, max) = (124374,177, 125398,259, 126072,307), stdev = 753,929
[info]   CI (99.9%): [122495,146, 128301,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4355,326 ±(99.9%) 101,496 MB/sec [Average]
[info]   (min, avg, max) = (4319,457, 4355,326, 4378,909), stdev = 26,358
[info]   CI (99.9%): [4253,830, 4456,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54664,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54664,003, 54664,003, 54664,004), stdev = 0,001
[info]   CI (99.9%): [54664,003, 54664,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,661 ±(99.9%) 1441,060 MB/sec [Average]
[info]   (min, avg, max) = (4079,376, 4357,661, 4770,324), stdev = 374,239
[info]   CI (99.9%): [2916,601, 5798,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54677,703 ±(99.9%) 17110,278 B/op [Average]
[info]   (min, avg, max) = (51137,849, 54677,703, 59596,907), stdev = 4443,485
[info]   CI (99.9%): [37567,425, 71787,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,888 ±(99.9%) 1,141 B/op [Average]
[info]   (min, avg, max) = (0,521, 0,888, 1,299), stdev = 0,296
[info]   CI (99.9%): [≈ 0, 2,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98,59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 601978,871 ops/s
[info] # Warmup Iteration   2: 650505,027 ops/s
[info] # Warmup Iteration   3: 652769,127 ops/s
[info] # Warmup Iteration   4: 620547,694 ops/s
[info] # Warmup Iteration   5: 653635,281 ops/s
[info] Iteration   1: 652189,530 ops/s
[info]                  ·gc.alloc.rate:                   1902,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4868,836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 653785,824 ops/s
[info]                  ·gc.alloc.rate:                   1907,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4865,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 596517,251 ops/s
[info]                  ·gc.alloc.rate:                   1740,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3558,808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 655193,360 ops/s
[info]                  ·gc.alloc.rate:                   1911,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4865,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 655876,652 ops/s
[info]                  ·gc.alloc.rate:                   1913,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4868,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   642712,523 ±(99.9%) 99587,739 ops/s [Average]
[info]   (min, avg, max) = (596517,251, 642712,523, 655876,652), stdev = 25862,620
[info]   CI (99.9%): [543124,784, 742300,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1875,139 ±(99.9%) 290,638 MB/sec [Average]
[info]   (min, avg, max) = (1740,316, 1875,139, 1913,295), stdev = 75,478
[info]   CI (99.9%): [1584,501, 2165,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4592,001, 4592,001, 4592,001), stdev = 0,001
[info]   CI (99.9%): [4592,001, 4592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1888,326 ±(99.9%) 1161,597 MB/sec [Average]
[info]   (min, avg, max) = (1348,748, 1888,326, 2028,592), stdev = 301,663
[info]   CI (99.9%): [726,729, 3049,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4605,481 ±(99.9%) 2253,050 B/op [Average]
[info]   (min, avg, max) = (3558,808, 4605,481, 4868,836), stdev = 585,110
[info]   CI (99.9%): [2352,430, 6858,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 0,288 B/op [Average]
[info]   (min, avg, max) = (0,100, 0,154, 0,251), stdev = 0,075
[info]   CI (99.9%): [≈ 0, 0,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98,79% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356769,849 ops/s
[info] # Warmup Iteration   2: 436196,480 ops/s
[info] # Warmup Iteration   3: 439770,188 ops/s
[info] # Warmup Iteration   4: 440753,975 ops/s
[info] # Warmup Iteration   5: 438379,197 ops/s
[info] Iteration   1: 442296,602 ops/s
[info]                  ·gc.alloc.rate:                   703,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2401,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,843 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 442888,391 ops/s
[info]                  ·gc.alloc.rate:                   704,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2397,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 442106,109 ops/s
[info]                  ·gc.alloc.rate:                   703,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2392,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 440198,812 ops/s
[info]                  ·gc.alloc.rate:               700,393 MB/sec
[info]                  ·gc.alloc.rate.norm:          2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2402,943 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 436014,744 ops/s
[info]                  ·gc.alloc.rate:                   693,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2423,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   440700,931 ±(99.9%) 10808,955 ops/s [Average]
[info]   (min, avg, max) = (436014,744, 440700,931, 442888,391), stdev = 2807,051
[info]   CI (99.9%): [429891,977, 451509,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   701,123 ±(99.9%) 17,268 MB/sec [Average]
[info]   (min, avg, max) = (693,615, 701,123, 704,634), stdev = 4,484
[info]   CI (99.9%): [683,855, 718,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2504,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2504,001, 2504,001, 2504,001), stdev = 0,001
[info]   CI (99.9%): [2504,001, 2504,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,000 ±(99.9%) 6,285 MB/sec [Average]
[info]   (min, avg, max) = (671,339, 673,000, 674,760), stdev = 1,632
[info]   CI (99.9%): [666,715, 679,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2403,620 ±(99.9%) 45,580 B/op [Average]
[info]   (min, avg, max) = (2392,574, 2403,620, 2423,580), stdev = 11,837
[info]   CI (99.9%): [2358,040, 2449,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,686 ±(99.9%) 5,687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,686, 3,328), stdev = 1,477
[info]   CI (99.9%): [≈ 0, 6,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,443 ±(99.9%) 20,237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,443, 11,843), stdev = 5,256
[info]   CI (99.9%): [≈ 0, 22,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,99% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 549417,702 ops/s
[info] # Warmup Iteration   2: 817819,120 ops/s
[info] # Warmup Iteration   3: 817264,796 ops/s
[info] # Warmup Iteration   4: 817098,558 ops/s
[info] # Warmup Iteration   5: 816714,839 ops/s
[info] Iteration   1: 819275,982 ops/s
[info]                  ·gc.alloc.rate:                   624,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1295,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,560 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 820839,708 ops/s
[info]                  ·gc.alloc.rate:                   625,819 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1293,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 819619,087 ops/s
[info]                  ·gc.alloc.rate:               624,905 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1296,270 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 817111,364 ops/s
[info]                  ·gc.alloc.rate:                   623,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1300,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 815128,467 ops/s
[info]                  ·gc.alloc.rate:               621,417 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1304,079 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   818394,922 ±(99.9%) 8731,941 ops/s [Average]
[info]   (min, avg, max) = (815128,467, 818394,922, 820839,708), stdev = 2267,657
[info]   CI (99.9%): [809662,981, 827126,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   623,956 ±(99.9%) 6,719 MB/sec [Average]
[info]   (min, avg, max) = (621,417, 623,956, 625,819), stdev = 1,745
[info]   CI (99.9%): [617,237, 630,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1200,000, 1200,001, 1200,001), stdev = 0,001
[info]   CI (99.9%): [1200,000, 1200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,851 ±(99.9%) 1,598 MB/sec [Average]
[info]   (min, avg, max) = (674,393, 674,851, 675,314), stdev = 0,415
[info]   CI (99.9%): [673,253, 676,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1297,891 ±(99.9%) 16,553 B/op [Average]
[info]   (min, avg, max) = (1293,211, 1297,891, 1304,079), stdev = 4,299
[info]   CI (99.9%): [1281,338, 1314,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,291), stdev = 0,125
[info]   CI (99.9%): [≈ 0, 0,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,136 ±(99.9%) 0,921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,136, 0,560), stdev = 0,239
[info]   CI (99.9%): [≈ 0, 1,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2074997,647 ops/s
[info] # Warmup Iteration   2: 2274854,401 ops/s
[info] # Warmup Iteration   3: 2265331,890 ops/s
[info] # Warmup Iteration   4: 2264553,040 ops/s
[info] # Warmup Iteration   5: 2097113,190 ops/s
[info] Iteration   1: 2129652,367 ops/s
[info]                  ·gc.alloc.rate:               985,097 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 497,219 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 2273053,059 ops/s
[info]                  ·gc.alloc.rate:                   1051,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2276701,632 ops/s
[info]                  ·gc.alloc.rate:               1053,002 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464,605 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2270519,955 ops/s
[info]                  ·gc.alloc.rate:                   1050,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2276293,733 ops/s
[info]                  ·gc.alloc.rate:               1052,779 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464,699 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   2245244,149 ±(99.9%) 249009,801 ops/s [Average]
[info]   (min, avg, max) = (2129652,367, 2245244,149, 2276701,632), stdev = 64667,055
[info]   CI (99.9%): [1996234,347, 2494253,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1038,535 ±(99.9%) 115,106 MB/sec [Average]
[info]   (min, avg, max) = (985,097, 1038,535, 1053,002), stdev = 29,893
[info]   CI (99.9%): [923,429, 1153,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,108 ±(99.9%) 1417,438 MB/sec [Average]
[info]   (min, avg, max) = (672,013, 941,108, 1344,487), stdev = 368,104
[info]   CI (99.9%): [≈ 0, 2358,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   657,818 ±(99.9%) 962,630 B/op [Average]
[info]   (min, avg, max) = (464,605, 657,818, 931,732), stdev = 249,992
[info]   CI (99.9%): [≈ 0, 1620,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,043), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99,40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1896562,455 ops/s
[info] # Warmup Iteration   2: 2354785,392 ops/s
[info] # Warmup Iteration   3: 2358093,385 ops/s
[info] # Warmup Iteration   4: 2353163,570 ops/s
[info] # Warmup Iteration   5: 2356704,458 ops/s
[info] Iteration   1: 2357806,102 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2362198,654 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2360391,447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2352591,307 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2357694,985 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2358136,499 ±(99.9%) 13968,758 ops/s [Average]
[info]   (min, avg, max) = (2352591,307, 2358136,499, 2362198,654), stdev = 3627,642
[info]   CI (99.9%): [2344167,741, 2372105,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99,60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345094,122 ops/s
[info] # Warmup Iteration   2: 417935,717 ops/s
[info] # Warmup Iteration   3: 418038,432 ops/s
[info] # Warmup Iteration   4: 418975,293 ops/s
[info] # Warmup Iteration   5: 416391,282 ops/s
[info] Iteration   1: 419732,024 ops/s
[info]                  ·gc.alloc.rate:      620,826 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 417319,566 ops/s
[info]                  ·gc.alloc.rate:                   617,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2539,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,461 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 418958,044 ops/s
[info]                  ·gc.alloc.rate:                   619,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2529,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 415198,688 ops/s
[info]                  ·gc.alloc.rate:               614,178 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2542,648 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 394925,787 ops/s
[info]                  ·gc.alloc.rate:               584,027 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2673,266 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   413226,822 ±(99.9%) 39958,258 ops/s [Average]
[info]   (min, avg, max) = (394925,787, 413226,822, 419732,024), stdev = 10377,033
[info]   CI (99.9%): [373268,564, 453185,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   611,165 ±(99.9%) 59,220 MB/sec [Average]
[info]   (min, avg, max) = (584,027, 611,165, 620,826), stdev = 15,379
[info]   CI (99.9%): [551,945, 670,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2328,001, 2328,001, 2328,001), stdev = 0,001
[info]   CI (99.9%): [2328,001, 2328,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,613 ±(99.9%) 1157,262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,613, 673,394), stdev = 300,537
[info]   CI (99.9%): [≈ 0, 1694,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2057,070 ±(99.9%) 4433,832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2057,070, 2673,266), stdev = 1151,452
[info]   CI (99.9%): [≈ 0, 6490,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,775 ±(99.9%) 6,585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,775, 3,834), stdev = 1,710
[info]   CI (99.9%): [≈ 0, 7,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,923 ±(99.9%) 24,837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,923, 14,461), stdev = 6,450
[info]   CI (99.9%): [≈ 0, 27,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99,80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188694,412 ops/s
[info] # Warmup Iteration   2: 197719,838 ops/s
[info] # Warmup Iteration   3: 197005,526 ops/s
[info] # Warmup Iteration   4: 197147,933 ops/s
[info] # Warmup Iteration   5: 196649,988 ops/s
[info] Iteration   1: 197499,988 ops/s
[info]                  ·gc.alloc.rate:                   511,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4076,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 198382,818 ops/s
[info]                  ·gc.alloc.rate:      514,298 MB/sec
[info]                  ·gc.alloc.rate.norm: 4080,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 197832,178 ops/s
[info]                  ·gc.alloc.rate:                   512,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5367,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,820 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 197482,695 ops/s
[info]                  ·gc.alloc.rate:                   511,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5377,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,498 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 197951,922 ops/s
[info]                  ·gc.alloc.rate:               513,066 MB/sec
[info]                  ·gc.alloc.rate.norm:          4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5348,959 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   197829,920 ±(99.9%) 1427,865 ops/s [Average]
[info]   (min, avg, max) = (197482,695, 197829,920, 198382,818), stdev = 370,812
[info]   CI (99.9%): [196402,056, 199257,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   512,807 ±(99.9%) 3,742 MB/sec [Average]
[info]   (min, avg, max) = (511,937, 512,807, 514,298), stdev = 0,972
[info]   CI (99.9%): [509,065, 516,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4080,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4080,002, 4080,002, 4080,002), stdev = 0,001
[info]   CI (99.9%): [4080,002, 4080,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,709 ±(99.9%) 1123,886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,709, 674,752), stdev = 291,870
[info]   CI (99.9%): [≈ 0, 1630,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4034,174 ±(99.9%) 8945,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4034,174, 5377,422), stdev = 2323,158
[info]   CI (99.9%): [≈ 0, 12979,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 5,337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 3,119), stdev = 1,386
[info]   CI (99.9%): [≈ 0, 5,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,097 ±(99.9%) 42,463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,097, 24,820), stdev = 11,027
[info]   CI (99.9%): [≈ 0, 47,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # Run complete. Total time: 02:12:37
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    861186,570 ±   20056,858   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2263,110 ±      52,886  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4136,000 ±       0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      2294,472 ±    1408,795  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5      4190,907 ±    2494,245    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,062 ±       0,098  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,114 ±       0,178    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        17,000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5         7,000                    ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1848322,755 ±   40736,795   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1230,702 ±      27,297  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1048,000 ±       0,001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1217,828 ±    1164,830  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      1037,631 ±     999,554    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,050 ±       0,146  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,043 ±       0,124    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5         9,000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         4,000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   4062503,120 ±   36465,350   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       268,437 ±       2,495  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104,000 ±       0,001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       306,902 ±    1078,804  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       119,100 ±     418,655    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3,000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         4,000                    ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    190392,213 ±    4980,523   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1519,368 ±      39,456  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     12560,002 ±       0,001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1490,192 ±    1170,027  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5     12323,880 ±    9815,763    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,017 ±       0,067  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,137 ±       0,550    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        11,000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         5,000                    ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    648511,430 ±    7522,815   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1911,797 ±      21,853  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4640,001 ±       0,001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      1885,939 ±    1169,305  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5      4578,523 ±    2867,398    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,037 ±       0,119  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,091 ±       0,289    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        14,000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         5,000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2355105,124 ±   20345,809   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       766,133 ±       6,600  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       512,000 ±       0,001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       674,885 ±       2,005  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       451,022 ±       4,879    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,012 ±       0,072  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,008 ±       0,048    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         5,000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         1,000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  14590462,782 ±  813504,348   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       741,668 ±      41,356  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80,000 ±       0,001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       673,471 ±       5,005  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        72,657 ±       4,384    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,647 ±       5,347  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,071 ±       0,586    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         5,000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  18706011,208 ± 2392124,942   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    358212,788 ±     848,555   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1132,511 ±       2,725  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      4976,001 ±       0,001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1081,713 ±    1425,319  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      4753,554 ±    6271,731    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,110 ±       0,459    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         8,000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         3,000                    ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1825844,137 ±   16669,262   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2821,048 ±      25,368  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2708,362 ±      28,692  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      2334,862 ±      27,235    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,042 ±       0,098  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,036 ±       0,085    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        20,000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         7,000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  11459627,598 ±  566769,534   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1397,943 ±      68,694  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1480,260 ±    1162,072  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       203,214 ±     156,323    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,054 ±       0,146  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,007 ±       0,020    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5        11,000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2836695,169 ±   92054,807   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1859,971 ±      60,283  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1032,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1898,837 ±    1168,470  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      1053,848 ±     654,709    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,046 ±       0,036  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,025 ±       0,020    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         5,000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  11421473,110 ±  101096,506   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1451,528 ±      12,538  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1480,194 ±    1153,592  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       203,947 ±     158,836    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,054 ±       0,091  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,007 ±       0,013    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        11,000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         4,000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    722475,850 ±    6088,685   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1891,217 ±      16,246  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4120,001 ±       0,001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1898,762 ±    1168,154  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4137,377 ±    2566,810    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,042 ±       0,057  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,091 ±       0,124    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5         7,000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2120891,952 ±   22811,530   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1810,996 ±      19,585  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1344,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1884,967 ±    1153,962  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1399,224 ±     864,037    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,050 ±       0,072  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,037 ±       0,053    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  20707128,284 ±  587863,202   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       631,517 ±      17,990  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       538,736 ±    1159,674  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40,868 ±      87,978    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,542 ±       4,491  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,041 ±       0,340    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4,000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         3,000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6568385,397 ±  281483,535   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1802,840 ±      77,629  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1761,778 ±    1426,576  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       422,043 ±     338,815    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,046 ±       0,105  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,011 ±       0,025    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        13,000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         5,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  26254809,223 ±  353587,994   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       800,592 ±      11,108  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       807,187 ±    1155,032  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        48,434 ±      69,997    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,029 ±       0,122  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,002 ±       0,007    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         6,000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  26866357,515 ±  266643,975   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1439983,201 ±   38298,834   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2203,281 ±      58,207  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2408,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2308,168 ±    1429,962  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2523,800 ±    1598,251    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,054 ±       0,072  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,059 ±       0,078    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        17,000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5         8,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    390988,972 ±    2813,737   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2152,223 ±      15,570  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2160,937 ±    1180,034  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8699,480 ±    4765,706    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,151 ±       0,270    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        16,000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    502945,949 ±  125224,386   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       672,354 ±     167,406  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2104,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       674,966 ±       1,769  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2119,980 ±     581,207    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,017 ±       0,036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,053 ±       0,115    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         2,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1217618,368 ±   11920,159   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       810,740 ±       7,836  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       807,253 ±    1156,794  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1043,364 ±    1492,789    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,038 ±       0,202    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    126650,682 ±    7656,480   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4379,114 ±     264,518  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54416,003 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4358,234 ±    1440,625  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     54157,122 ±   17584,373    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,062 ±       0,098  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,780 ±       1,283    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32,000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        14,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    686510,757 ±   31502,456   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      2100,578 ±      96,678  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      2025,559 ±      18,065  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4644,621 ±     249,568    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,124 ±       0,098    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        15,000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    416624,279 ±    3123,640   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       645,894 ±       4,744  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2440,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       673,009 ±       6,260  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2542,450 ±      42,086    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,691 ±       5,723  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,615 ±      21,671    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    712282,179 ±   18894,746   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       524,982 ±      13,999  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       506,926 ±    1124,484  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1120,120 ±    2477,291    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,083 ±       0,478  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,184 ±       1,052    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3112207,317 ±   66448,079   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1439,563 ±      31,011  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1345,773 ±       6,868  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       680,585 ±      13,874    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,050 ±       0,108  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,025 ±       0,055    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         4,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3351444,321 ±   17215,887   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    447749,702 ±    3110,992   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       644,041 ±       4,538  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       671,656 ±       6,381  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2361,082 ±      28,654    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,785 ±       6,538  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,768 ±      23,045    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    196053,508 ±    2642,087   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       500,267 ±       6,723  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5      4016,002 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       372,191 ±    1333,214  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2982,228 ±   10676,285    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,638 ±       5,342  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         5,118 ±      42,838    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         3,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     27987,414 ±     525,866   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1714,772 ±      31,971  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     96432,015 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1751,036 ±    1414,208  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     98453,617 ±   79131,882    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,644 ±       6,859    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     38435,828 ±     294,429   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       961,807 ±       7,455  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39384,011 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       946,681 ±    1428,459  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     38785,430 ±   58783,060    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,683 ±       4,290    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     49161,571 ±     371,111   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       732,388 ±       5,698  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448,009 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       807,792 ±    1157,313  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     25858,597 ±   36983,032    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,656 ±       5,428  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        21,073 ±     174,337    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     30871,127 ±     581,401   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1635,116 ±      30,943  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83360,014 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1622,381 ±    1421,911  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     82741,919 ±   73183,328    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,042 ±       0,170  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2,121 ±       8,652    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     34075,184 ±     966,514   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1902,613 ±      53,621  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     87872,012 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1886,134 ±    1155,154  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     87095,409 ±   52950,823    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,115 ±       4,837    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        10,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     32737,569 ±     635,248   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1761,282 ±      33,753  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84672,013 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1763,058 ±    1435,788  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     84783,403 ±   69554,741    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1,203 ±       5,043    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     37265,332 ±    1446,262   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1886,831 ±      73,206  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     79688,011 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1887,500 ±    1152,830  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     79733,807 ±   49058,066    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±       0,113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1,766 ±       4,870    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         6,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     37808,651 ±     303,114   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1840,278 ±      14,309  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     76608,011 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5      1887,177 ±    1165,426  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     78564,824 ±   48619,378    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         0,867 ±       2,359    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5         7,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5     10028,419 ±     338,616   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1292,349 ±      43,847  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202832,041 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,562 ±    1153,426  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    189465,127 ±  182274,746    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3,279 ±      12,649    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     25525,222 ±     155,218   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1983,286 ±      12,337  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122288,017 ±       0,003    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2023,317 ±      19,076  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    124756,712 ±    1606,025    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,796 ±       4,404    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        15,000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     49375,905 ±    4905,883   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1215,794 ±     120,818  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38752,008 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1218,822 ±    1169,053  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     38986,154 ±   38940,300    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,071 ±       3,949    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     71395,728 ±    1160,131   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       922,495 ±      14,950  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336,006 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,171 ±    1417,845  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     20748,640 ±   31265,859    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,551 ±       3,160    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     38825,124 ±     500,710   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2592,770 ±      33,362  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105104,011 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2581,871 ±    1180,042  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    104641,382 ±   47106,755    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,058 ±       0,105  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,362 ±       4,223    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19,000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     36944,368 ±     306,444   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2020,313 ±      16,820  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     86072,012 ±       0,003    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2035,938 ±      10,766  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     86738,064 ±     957,691    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,050 ±       0,044  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,128 ±       1,875    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        15,000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     52922,269 ±     563,801   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2205,688 ±      22,998  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     65600,008 ±       0,002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2161,163 ±    1163,316  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     64284,924 ±   34963,015    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,992 ±       3,626    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        16,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     53474,952 ±     423,671   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      2135,532 ±      17,064  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     62856,008 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      2025,701 ±      17,244  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     59623,698 ±     953,754    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1,593 ±       1,284    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        15,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    421029,314 ±    5076,205   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2129,344 ±      26,034  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2159,962 ±    1144,486  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      8077,141 ±    4386,947    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,050 ±       0,044  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,187 ±       0,163    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        16,000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1680112,265 ±   13375,617   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       529,480 ±       4,260  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,489 ±    1123,260  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       474,428 ±    1051,276    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,533 ±       4,579  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,499 ±       4,284    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    721385,997 ±    4622,270   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       579,285 ±       3,494  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1264,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       539,755 ±    1161,863  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1177,856 ±    2535,438    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±       0,201  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,073 ±       0,439    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         2,000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1829432,664 ±  473402,173   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       353,356 ±      91,450  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306,937 ±    1078,928  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       258,287 ±     908,574    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         3,000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    115825,381 ±     850,842   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      4204,746 ±      30,866  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57136,004 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4220,865 ±    1182,119  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     57352,155 ±   15846,055    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,071 ±       0,166  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,962 ±       2,259    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        31,000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        13,000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    712858,359 ±    9891,788   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1862,386 ±      25,749  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1752,947 ±    1422,216  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3870,728 ±    3147,523    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,113  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,092 ±       0,250    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    362280,567 ±    3643,967   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       557,961 ±       5,604  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2424,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       506,612 ±    1123,601  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2202,684 ±    4886,305    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,693 ±       5,875  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         3,021 ±      25,624    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1304820,693 ±   20646,119   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       603,553 ±       9,558  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5       641,066 ±     278,719  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       772,980 ±     326,113    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,537 ±       4,473  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,646 ±       5,386    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1138788,902 ±   17637,713   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       804,572 ±      12,401  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       810,736 ±    1160,454  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1120,834 ±    1609,773    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,035 ±       0,198    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         6,000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         2,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   1749992,486 ±   11134,116   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       809,459 ±       4,959  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,297 ±    1156,781  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       725,877 ±    1036,892    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,026 ±       0,140    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1806042,193 ±    9346,659   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    573870,575 ±    3007,253   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       676,735 ±       3,527  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1856,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       671,714 ±       6,193  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1842,234 ±      20,100    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,784 ±       6,524  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,153 ±      17,923    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    204768,172 ±   13693,048   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       522,496 ±      34,858  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4016,002 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       506,791 ±    1124,094  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3874,961 ±    8616,879    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,639 ±       5,300  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4,969 ±      41,282    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    161332,273 ±    1217,332   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1937,016 ±      14,877  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18896,003 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1888,318 ±    1152,905  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     18417,106 ±   11153,721    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,067 ±       0,119  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,649 ±       1,156    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        14,000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5         6,000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    490215,288 ±    6809,073   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       393,694 ±       5,417  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1264,001 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,366 ±    1068,150  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1524,204 ±    3429,190    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±       0,166  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,107 ±       0,534    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5    914354,174 ±    9350,115   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       176,600 ±       1,840  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,611 ±    1078,853  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       353,211 ±    1862,383    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2,000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     97820,198 ±    1385,563   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4164,719 ±      59,045  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67008,004 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4220,153 ±    1157,590  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     67912,877 ±   19535,360    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,104 ±       0,113  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,675 ±       1,836    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        31,000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        14,000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    272419,750 ±    1061,657   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1243,420 ±       4,801  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7184,002 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1210,290 ±    1155,731  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      6992,835 ±    6680,530    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,042 ±       0,113  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,241 ±       0,655    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    295961,469 ±    1792,294   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1310,242 ±       8,153  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968,001 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1209,300 ±    1157,684  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      6432,935 ±    6179,168    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,244 ±       0,632    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   2211379,445 ±   15561,846   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1135,261 ±       8,212  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1217,986 ±    1164,309  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       866,885 ±     828,770    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,027 ±       0,063    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   2149581,813 ±   21863,013   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       579,084 ±       5,917  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       641,306 ±     279,365  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       469,451 ±     200,594    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,646 ±       5,326  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,473 ±       3,898    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2133653,188 ±    7027,227   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     51520,232 ±     249,789   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2171,449 ±      11,355  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     66336,008 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2291,427 ±    1420,053  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     70004,054 ±   43468,440    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,067 ±       0,067  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,035 ±       2,045    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        17,000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         7,000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5    168135,387 ±    1325,686   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       895,627 ±       7,134  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      8384,003 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       806,763 ±    1156,825  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7552,521 ±   10836,060    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,156 ±       0,822    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         6,000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         2,000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    253060,107 ±    1707,630   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2604,713 ±      17,516  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2571,767 ±    1164,690  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     15997,753 ±    7333,936    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,337 ±       0,272    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        19,000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         7,000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    379795,266 ±    2383,743   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1820,442 ±      11,199  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7544,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1899,535 ±    1167,055  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7872,587 ±    4855,619    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,207 ±       0,297    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        14,000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1406564,395 ±    8861,755   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       486,173 ±       3,179  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,539 ±    1068,719  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       530,978 ±    1195,136    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,641 ±       5,429  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,716 ±       6,065    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     90028,062 ±   12783,535   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3781,205 ±     537,365  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66104,005 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3676,230 ±    1433,590  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     64262,696 ±   22678,315    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,071 ±       0,146  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,224 ±       2,468    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        27,000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        11,000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    258927,846 ±    3936,290   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2742,703 ±      41,775  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16672,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2708,629 ±      27,497  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     16465,008 ±     217,648    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,054 ±       0,072  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,329 ±       0,436    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        20,000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         9,000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    252188,395 ±    6502,625   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2136,883 ±      55,550  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13336,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2158,804 ±    1142,924  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     13472,891 ±    7122,759    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,337 ±       0,753    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        16,000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1389246,665 ±    6074,189   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       812,055 ±       3,189  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       811,138 ±    1165,414  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       918,722 ±    1315,699    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,024 ±       0,064    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2741312,499 ±   60560,343   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       933,612 ±      20,838  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941,219 ±    1416,343  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       540,464 ±     814,398    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,010 ±       0,050    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         7,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   3102858,673 ±   18054,157   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    340846,571 ±    3533,073   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2789,310 ±      28,553  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2855,472 ±    1177,748  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     13188,433 ±    5584,887    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,250 ±       0,202    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        21,000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5    101287,237 ±     792,294   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       751,663 ±       5,953  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     11680,004 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       672,892 ±       4,108  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10456,015 ±      80,737    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,324 ±       1,525    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         2,000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     31372,097 ±     769,993   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1796,782 ±      44,037  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     90144,013 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1751,607 ±    1417,282  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     87923,934 ±   72060,847    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,673 ±       4,596    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5    106661,553 ±     744,564   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       960,668 ±       6,731  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176,004 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941,227 ±    1417,640  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     13887,403 ±   20894,668    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,430 ±       2,304    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     69071,059 ±     670,089   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1138,197 ±      10,959  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     25936,006 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1082,814 ±    1427,813  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     24676,799 ±   32569,399    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,570 ±       3,005    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    146933,610 ±    1770,802   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       947,046 ±      11,523  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144,003 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,218 ±    1417,945  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     10078,396 ±   15142,716    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,223 ±       1,211    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     39568,907 ±    4826,578   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2066,011 ±     252,297  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82176,010 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2036,948 ±       9,829  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     81087,899 ±   10308,434    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,033 ±       0,108  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,325 ±       4,245    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     75952,678 ±     452,890   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1366,273 ±       7,969  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     28312,005 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1345,346 ±       5,470  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     27878,427 ±     226,040    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,604 ±       1,897    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10,000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     41850,311 ±     533,023   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       549,882 ±       6,949  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     20680,010 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       506,603 ±    1123,571  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     19071,607 ±   42269,341    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,684 ±       5,798  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        25,706 ±     217,973    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     47449,650 ±    2657,121   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       440,170 ±      24,701  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14600,009 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       372,093 ±    1332,768  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     12267,926 ±   43955,989    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,824 ±       4,345    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     48267,969 ±    4099,172   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       424,202 ±      36,105  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     13832,009 ±       0,003    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       339,515 ±    1220,664  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     11140,849 ±   39917,216    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,631 ±       5,387  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20,422 ±     174,163    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     48013,833 ±    9945,811   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       367,051 ±      75,923  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032,009 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5       306,953 ±    1078,985  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     10275,724 ±   36277,247    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,006 ±       0,040  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,206 ±       1,297    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         3,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     36562,857 ±     275,752   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       546,358 ±       4,016  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     23520,011 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       506,729 ±    1123,984  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21820,584 ±   48399,148    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,646 ±       5,430  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        27,787 ±     233,479    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     23666,911 ±     180,603   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       887,800 ±       6,696  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59040,018 ±       0,003    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941,711 ±    1420,620  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     62655,510 ±   94897,363    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,664 ±       8,781    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     23320,025 ±     393,421   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       660,999 ±      11,091  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44608,516 ±       4,287    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       675,170 ±       2,381  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     45565,467 ±     685,102    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,054 ±       0,156  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3,652 ±      10,520    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     95051,230 ±   16083,457   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       247,379 ±      41,932  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,004 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       306,938 ±    1078,932  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      5210,635 ±   18342,586    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,008 ±       0,073  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,147 ±       1,263    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     18337,062 ±     598,228   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1164,428 ±      37,851  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     99944,024 ±       0,009    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1213,957 ±    1162,871  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    104251,578 ±  100526,220    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,491 ±      10,356    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     22806,923 ±     268,592   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5       786,203 ±       9,221  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     54256,019 ±       0,004    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       808,034 ±    1156,473  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     55730,733 ±   79182,864    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,008 ±       7,406    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         2,000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     66438,279 ±    2037,119   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1006,783 ±      30,653  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     23848,006 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1074,625 ±    1417,085  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     25497,078 ±   34076,990    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,494 ±       1,900    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         8,000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5     99021,619 ±    2235,864   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1174,203 ±      26,494  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664,004 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1218,328 ±    1165,185  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     19343,236 ±   18228,160    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,396 ±       1,657    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    213992,603 ±   69028,467   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       339,374 ±     109,400  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496,002 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       306,949 ±    1078,968  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2256,483 ±    7984,856    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    276524,432 ±    1238,903   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     76771,618 ±   13068,141   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1197,213 ±     203,689  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     24544,005 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1206,780 ±    1155,260  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     24832,822 ±   24863,724    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,511 ±       1,757    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     20879,493 ±     291,900   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       361,156 ±       5,120  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     27224,020 ±       0,003    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       306,920 ±    1078,867  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     23180,745 ±   81484,294    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,004 ±       0,029  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,316 ±       2,216    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     30389,495 ±     202,881   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       632,065 ±       4,193  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     32736,014 ±       0,002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       538,709 ±    1159,623  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     27905,439 ±   60068,682    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,683 ±       5,749  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        35,356 ±     297,523    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         3,000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5    104655,326 ±   13708,990   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1370,880 ±     179,682  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20616,004 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1490,114 ±    1163,506  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     22382,651 ±   16267,590    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,371 ±       1,287    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    134121,501 ±   15981,118   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       523,615 ±      62,153  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144,003 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       506,824 ±    1124,179  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5981,447 ±   13352,350    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,647 ±       5,436  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         7,491 ±      62,874    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     24890,832 ±      63,857   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1374,008 ±       3,438  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86880,017 ±       0,003    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1353,739 ±       6,248  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     85598,370 ±     271,526    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,053 ±       5,555    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        10,000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     29446,434 ±     877,420   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       562,036 ±      16,690  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30040,014 ±       0,004    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       506,757 ±    1124,013  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     26990,333 ±   59826,634    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,654 ±       5,496  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34,871 ±     292,885    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    210384,321 ±    1984,582   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       731,463 ±       6,903  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472,002 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       807,330 ±    1155,788  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      6037,718 ±    8610,163    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,693 ±       5,694  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5,194 ±      42,715    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6,000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    309914,210 ±    2317,150   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       313,458 ±       2,263  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,622 ±    1078,914  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1041,056 ±    5489,198    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,021 ±       0,182    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         2,000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    561018,109 ±  101259,520   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       430,576 ±      77,604  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,550 ±    1220,827  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       933,907 ±    3358,764    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,633 ±       5,403  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,742 ±      14,877    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    622024,938 ±    3280,795   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    345356,719 ±    3104,750   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       954,902 ±       8,911  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       946,092 ±    1423,564  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4312,584 ±    6498,066    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±       0,184  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,152 ±       0,842    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         3,000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     47475,172 ±     530,922   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       220,065 ±       2,498  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      7296,009 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       204,611 ±    1078,853  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      6798,891 ±   35848,784    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,004 ±       0,030  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,117 ±       1,008    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         2,000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     44496,623 ±    3144,333   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1984,785 ±     140,108  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200,009 ±       0,002    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2023,316 ±      20,310  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     71583,062 ±    5356,631    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,058 ±       0,104  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         2,059 ±       3,630    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    329628,860 ±    2779,656   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       341,795 ±       2,843  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       441,654 ±     988,407  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2108,868 ±    4723,356    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,535 ±       4,514  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,557 ±      21,595    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    113252,232 ±    1231,924   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1246,293 ±      13,438  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17320,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1354,005 ±       6,017  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18817,024 ±     219,747    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,405 ±       1,497    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    473278,746 ±    3275,397   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       307,919 ±       2,134  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       306,928 ±    1078,894  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1021,621 ±    3591,149    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,010 ±       0,060  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,033 ±       0,200    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     45824,858 ±     925,543   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2445,033 ±      49,110  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     83976,009 ±       0,002    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2446,277 ±    1427,968  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     84059,357 ±   50225,574    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,067 ±       0,105  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,287 ±       3,579    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        18,000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         7,000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     87698,464 ±    1662,748   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1603,817 ±      30,078  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     28784,005 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1616,307 ±    1423,501  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     29005,543 ±   25479,551    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,522 ±       1,286    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5    101394,662 ±     680,687   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       488,075 ±       3,421  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      7576,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       474,518 ±    1068,626  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      7371,003 ±   16610,128    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,689 ±       5,787  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        10,711 ±      90,031    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    123104,809 ±   26746,849   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       376,705 ±      81,780  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       339,373 ±    1219,926  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4231,916 ±   15206,799    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,532 ±       4,581  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6,626 ±      57,052    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5    110838,503 ±     791,697   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       366,193 ±       2,545  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,502 ±    1220,580  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4825,015 ±   17356,874    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,237 ±       1,488    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    125386,085 ±     874,998   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       383,671 ±       2,778  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       441,871 ±     989,314  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5547,708 ±   12423,255    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,642 ±       5,512  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8,064 ±      69,240    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    123542,336 ±   10597,073   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       280,691 ±      24,064  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5       306,935 ±    1078,921  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3946,382 ±   13880,691    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,007 ±       0,057  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,088 ±       0,760    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         9,000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5     11580,146 ±      30,510   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1904,510 ±       5,325  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    258853,714 ±      17,221    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1886,786 ±    1151,739  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    256445,423 ±  156553,869    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,829 ±       7,703    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        14,000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     11725,058 ±     513,597   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1813,753 ±      79,275  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243466,768 ±      33,393    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1899,345 ±    1168,072  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    255132,637 ±  160749,704    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         7,272 ±       6,053    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        14,000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    208635,722 ±    1958,981   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       542,968 ±       5,016  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096,002 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       507,310 ±    1125,533  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3829,005 ±    8490,777    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,579 ±       4,789  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         4,380 ±      36,218    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6661,320 ±     463,300   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1769,217 ±     123,142  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    418000,107 ±       0,372    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1763,712 ±    1434,145  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    416142,705 ±  325585,101    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6,891 ±      21,570    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5     11073,620 ±    1213,943   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1781,270 ±     195,203  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    253172,216 ±      32,918    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1753,973 ±    1425,536  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    250011,044 ±  216281,455    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,373 ±      15,199    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     29034,570 ±    2096,394   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1504,732 ±     108,598  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81568,015 ±       0,003    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1479,375 ±    1161,658  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     80122,201 ±   60359,569    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,361 ±       3,687    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     34487,891 ±     407,462   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1686,045 ±      19,432  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944,012 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1627,796 ±    1435,240  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     74260,376 ±   64909,544    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,949 ±       2,582    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    384989,489 ±    5715,523   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       851,247 ±      12,651  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       942,941 ±    1417,640  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3858,838 ±    5850,986    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,154 ±       0,587    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7,000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    450902,443 ±    4844,650   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     30785,707 ±     160,936   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1619,984 ±       8,833  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824,014 ±       0,004    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1746,309 ±    1417,579  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     89299,483 ±   72830,242    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,703 ±       4,671    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5     12116,039 ±     285,832   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       677,536 ±      16,069  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     88016,585 ±       4,724    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       673,989 ±       4,871  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     87557,949 ±    1753,429    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,587 ±       4,917  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        76,205 ±     638,815    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5    113959,837 ±    1326,749   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1856,491 ±      21,853  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640,004 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1752,998 ±    1422,493  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     24206,531 ±   19556,665    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,042 ±       0,080  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,575 ±       1,103    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        13,000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    540668,958 ±   92844,999   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       560,660 ±      96,386  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       641,100 ±     278,807  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1861,678 ±     547,133    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,547 ±       4,530  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,552 ±      12,849    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    329098,203 ±   50558,622   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       456,667 ±      70,079  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2184,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       372,073 ±    1332,747  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1816,397 ±    6562,590    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±       0,244  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,160 ±       1,163    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3,000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         2,000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    770834,331 ±    7819,367   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       501,489 ±       5,145  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,522 ±    1068,735  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       969,551 ±    2183,018    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,638 ±       5,350  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,307 ±      10,955    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     86789,883 ±     614,858   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3798,647 ±      28,466  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68880,005 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3810,546 ±    1434,467  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     69098,246 ±   26123,749    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,075 ±       0,185  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,359 ±       3,344    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        28,000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        11,000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    222601,759 ±    1984,148   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1690,436 ±      15,025  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11952,002 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1751,409 ±    1420,472  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     12381,783 ±   10014,581    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±       0,001  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,294 ±       0,003    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        13,000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    269565,885 ±    2191,917   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1605,882 ±      13,220  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9376,002 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1614,247 ±    1411,923  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9427,909 ±    8313,302    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,033 ±       0,108  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,195 ±       0,629    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12,000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1076643,673 ±   53813,554   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       585,565 ±      29,149  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       538,748 ±    1159,699  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       788,961 ±    1698,925    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,539 ±       4,550  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,784 ±       6,623    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    928819,630 ±  150123,373   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       731,748 ±     118,338  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       675,445 ±       2,546  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1146,298 ±     195,878    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,042 ±       0,239    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         2,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1258900,999 ±   14605,558   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       684,663 ±       7,858  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,430 ±       4,777  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       841,959 ±       6,204    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,658 ±       5,350  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,821 ±       6,676    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1178981,286 ±    6140,306   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     38030,016 ±     660,084   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1986,238 ±      34,563  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     82200,011 ±       0,002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2019,449 ±      23,376  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     83575,374 ±    1276,328    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,046 ±       0,088  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,895 ±       3,635    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15,000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5    146507,357 ±    2233,990   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1275,682 ±      19,663  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     13704,003 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1344,989 ±       4,782  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     14448,688 ±     195,794    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,537 ±       0,988    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5        10,000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    151174,733 ±    2013,965   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1865,640 ±      25,295  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     19424,003 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1885,877 ±    1154,543  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     19636,980 ±   12073,082    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,113  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,650 ±       1,178    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        14,000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    207224,800 ±   21401,041   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1096,545 ±     112,875  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8328,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1082,566 ±    1427,918  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      8165,852 ±   10104,631    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,281 ±       0,883    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    256762,209 ±    4462,749   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1169,394 ±      20,525  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      7168,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1075,636 ±    1417,284  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      6588,925 ±    8632,711    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,127 ±       0,693    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         8,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     78640,602 ±    1612,036   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3318,398 ±      67,696  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66408,005 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3402,008 ±      13,206  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     68082,838 ±    1487,620    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,054 ±       0,091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,084 ±       1,838    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        25,000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        10,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    159921,705 ±    1530,113   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1803,710 ±      17,883  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17752,003 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1752,111 ±    1418,696  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     17238,918 ±   13850,455    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,164 ±       0,660    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    202272,327 ±   34146,602   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       703,279 ±     118,335  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,071 ±       6,000  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      5245,293 ±     918,364    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,700 ±       5,802  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,504 ±      45,700    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         3,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    595264,762 ±    7065,125   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       602,093 ±       7,219  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       539,788 ±    1161,934  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1425,370 ±    3068,230    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,046 ±       0,200  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,121 ±       0,527    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    574513,995 ±  120720,260   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       440,941 ±      92,599  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       474,520 ±    1068,657  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1308,121 ±    2894,736    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,641 ±       5,356  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,713 ±      14,310    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    622834,374 ±    2786,592   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    313726,812 ±   32033,120   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       864,280 ±      88,382  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       810,715 ±    1163,838  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4061,634 ±    5697,402    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,188 ±       0,714    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     41195,196 ±     438,032   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       190,970 ±       2,016  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      7296,010 ±       0,002    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       204,636 ±    1078,986  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7833,531 ±   41303,959    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         2,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     12211,666 ±     348,492   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1561,614 ±      45,073  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    201278,550 ±      10,235    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1615,057 ±    1421,755  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    208154,010 ±  182827,972    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2,154 ±      11,358    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     12458,075 ±     102,690   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1476,456 ±      12,285  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    186529,508 ±      39,209    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1490,599 ±    1170,806  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    188347,372 ±  148834,267    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1,578 ±       9,054    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    222132,643 ±    1239,635   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1445,251 ±       7,811  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240,002 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1347,486 ±       5,950  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      9547,332 ±      78,574    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,295 ±       0,695    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      9384,891 ±     445,761   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1747,720 ±      83,478  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293096,723 ±       5,849    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1763,760 ±    1433,837  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    295997,808 ±  244633,938    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4,172 ±      11,094    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     11884,092 ±     506,213   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1404,283 ±      59,812  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    185963,473 ±      25,034    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1481,887 ±    1166,450  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    196058,115 ±  148578,429    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3,297 ±      11,588    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     25975,380 ±     443,821   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1090,615 ±      18,622  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66080,016 ±       0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1074,545 ±    1416,965  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     65117,800 ±   85990,995    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±       0,185  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,014 ±      11,167    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     30788,740 ±     388,763   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1184,531 ±      14,935  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552,014 ±       0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1218,487 ±    1165,607  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     62301,853 ±   59766,843    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,489 ±       6,214    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         9,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    799719,629 ±   10261,071   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1442,980 ±      19,053  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840,001 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1347,442 ±       5,577  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      2651,992 ±      35,493    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,058 ±       0,088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,115 ±       0,173    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    792451,121 ±   16406,493   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     28430,244 ±     147,466   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1199,664 ±       5,790  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66416,015 ±       0,004    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1072,390 ±    1412,915  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     59360,403 ±   78105,419    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,922 ±       3,711    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5     16136,390 ±     793,206   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       586,099 ±      28,932  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     57168,027 ±       0,014    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       641,794 ±     280,536  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     62625,072 ±   28125,073    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,585 ±       4,832  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        56,783 ±     468,589    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         5,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     34680,724 ±    1101,316   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1724,718 ±      54,884  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     78272,012 ±       0,003    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1750,995 ±    1414,190  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     79391,292 ±   62564,955    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,881 ±       5,715    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     35049,602 ±     456,324   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1600,920 ±      20,748  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     71888,012 ±       0,003    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1491,131 ±    1167,428  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     66941,272 ±   51904,734    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,685 ±       5,371    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        11,000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    391837,868 ±    2201,443   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1019,734 ±       5,910  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1077,567 ±    1421,047  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4329,372 ±    5721,092    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,084 ±       0,322    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     20005,726 ±     394,633   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2059,036 ±      40,420  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    161984,022 ±       0,012    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2037,010 ±       9,769  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    160254,137 ±    2821,365    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3,611 ±       8,310    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     33331,791 ±    1017,545   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1614,698 ±      49,242  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     76248,013 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1618,035 ±    1427,686  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     76453,552 ±   68467,854    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,785 ±       3,152    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     63214,528 ±     726,569   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1533,315 ±      17,308  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38176,007 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,281 ±    1156,948  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     36823,551 ±   28584,121    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,622 ±       1,668    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    145626,927 ±    2165,713   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1233,880 ±      18,286  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     13336,003 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1218,655 ±    1168,679  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     13161,845 ±   12506,104    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,314 ±       1,160    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1140389,846 ±  182367,594   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1223,137 ±     195,496  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688,000 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1212,621 ±    1160,371  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1661,288 ±    1414,639    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,051 ±       0,194    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1011903,164 ±    4036,835   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     71308,594 ±     319,690   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1658,258 ±       7,903  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     36600,006 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1612,508 ±    1416,459  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     35585,683 ±   31157,961    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,643 ±       2,373    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     30753,234 ±     295,629   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       381,392 ±       3,718  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     19520,014 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       441,981 ±     989,793  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22639,289 ±   50693,197    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,572 ±       4,865  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        29,315 ±     249,114    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     18548,924 ±     976,804   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1655,665 ±      87,024  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    140479,848 ±       1,513    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1615,781 ±    1418,960  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    136985,673 ±  117560,764    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,812 ±      10,266    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     19333,020 ±     297,809   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1561,547 ±      24,498  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127118,802 ±      54,393    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1491,049 ±    1166,385  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    121347,161 ±   93928,146    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,036  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2,032 ±       2,902    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        11,000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    440199,132 ±    3113,768   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1145,578 ±       8,224  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1212,382 ±    1160,126  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4334,032 ±    4137,287    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,149 ±       0,351    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     14626,041 ±     326,794   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1972,002 ±      44,174  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    212200,030 ±       0,012    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2036,393 ±      10,281  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    219134,291 ±    4620,635    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         5,369 ±       9,799    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     19121,894 ±     371,256   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1597,358 ±      30,588  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    131484,452 ±      38,149    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1617,258 ±    1415,401  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    133196,344 ±  118155,577    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±       0,164  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3,086 ±      13,544    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     44522,254 ±    2939,317   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1384,217 ±      91,716  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928,010 ±       0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1344,109 ±       6,248  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     47521,411 ±    3108,572    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,589 ±       3,661    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     52985,257 ±     485,663   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1405,541 ±      12,766  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752,008 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,909 ±       6,053  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     40248,073 ±     243,958    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,618 ±       2,912    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1328878,635 ±  171853,720   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1209,091 ±     156,512  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432,000 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1212,561 ±    1160,470  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1428,275 ±    1259,880    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,049 ±       0,149    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1575578,874 ±   11689,110   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     41580,360 ±    6992,944   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1312,509 ±     220,961  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49680,010 ±       0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207,085 ±    1152,529  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     45342,324 ±   38234,197    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,618 ±       2,490    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     30084,310 ±     191,833   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       363,317 ±       2,328  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     19008,014 ±       0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       306,934 ±    1078,915  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     16070,439 ±   56489,960    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,006 ±       0,031  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,292 ±       1,619    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     91277,914 ±     896,878   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1565,874 ±      15,298  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     27000,005 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1615,648 ±    1417,651  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     27867,243 ±   24647,264    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,503 ±       1,854    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12,000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         5,000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    392912,999 ±    1664,163   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       786,852 ±       3,271  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       807,145 ±    1155,696  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3233,456 ±    4632,658    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,100 ±       0,418    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    290806,182 ±   12101,104   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       631,151 ±      26,282  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3416,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       674,988 ±       2,452  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3653,618 ±     159,776    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,046 ±       0,154  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,246 ±       0,826    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    566984,230 ±    4509,894   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       714,706 ±       5,606  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       807,817 ±    1156,000  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2242,842 ±    3216,050    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,650 ±       5,376  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,809 ±      14,955    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     78581,673 ±    2022,163   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3504,532 ±      90,751  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70192,005 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3536,244 ±    1166,954  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     70822,573 ±   22987,785    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,083 ±       0,179  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,669 ±       3,581    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26,000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        10,000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    240867,032 ±    2019,404   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1699,327 ±      14,312  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11104,002 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1749,895 ±    1419,659  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     11436,845 ±    9326,731    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,272 ±       0,827    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        13,000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    754425,840 ±    8980,776   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       590,555 ±       7,155  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       538,782 ±    1159,773  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1124,550 ±    2420,731    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,536 ±       4,527  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,122 ±       9,476    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    543498,595 ±    5215,243   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       558,015 ±       5,368  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       539,755 ±    1161,864  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1562,889 ±    3364,295    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,072 ±       0,382    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    643471,415 ±  130985,821   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       503,716 ±     102,258  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,804 ±    1124,139  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1258,234 ±    2835,687    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,637 ±       5,322  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,511 ±      12,588    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    792200,015 ±    5393,133   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     33668,736 ±     842,514   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1722,175 ±      42,079  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     80496,012 ±       0,002    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1747,385 ±    1407,961  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     81649,577 ±   65264,897    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,154  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,143 ±       7,242    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      8805,215 ±     228,680   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1355,599 ±      35,257  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    242296,047 ±       0,007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1345,109 ±       3,972  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    240429,665 ±    6127,100    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,497 ±       7,893    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      9298,301 ±     151,710   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1340,020 ±      21,919  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226824,046 ±       0,007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1354,389 ±       6,324  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    229258,807 ±    3078,511    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         6,349 ±      11,423    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    164697,856 ±    7574,855   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1595,681 ±      73,121  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248,003 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1618,551 ±    1426,685  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     15469,866 ±   13689,701    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,238 ±       0,994    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        12,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      8232,423 ±     217,326   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1497,307 ±      39,621  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286256,329 ±       1,947    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1490,961 ±    1167,355  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    285298,756 ±  230609,689    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5,569 ±      29,804    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      8710,170 ±     131,606   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1309,063 ±      19,184  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    236516,516 ±      46,380    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5      1346,492 ±       4,238  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    243281,920 ±    3809,598    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         6,019 ±      21,972    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     21135,625 ±    3392,927   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       958,950 ±     153,805  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71409,383 ±      11,739    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5       940,238 ±    1416,583  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70710,416 ±  114743,866    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,248 ±       4,945    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     23929,275 ±    4301,278   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1014,099 ±     182,296  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696,018 ±       0,005    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       946,506 ±    1423,177  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     61968,165 ±   88503,528    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1,340 ±       7,293    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    496324,951 ±    9062,498   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1125,336 ±      20,348  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1212,342 ±    1161,160  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3841,644 ±    3652,617    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,158 ±       0,384    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         9,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    603619,278 ±   10424,664   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     20094,086 ±    3398,003   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       926,437 ±     156,849  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72561,900 ±      16,173    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5       938,353 ±    1413,283  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     73113,340 ±  104146,505    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±       0,174  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1,915 ±      13,330    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5     11508,839 ±     523,079   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5       622,933 ±      28,119  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5     85192,621 ±       5,014    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5       539,456 ±    1161,227  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     73585,375 ±  158438,922    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,581 ±       4,820  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        79,919 ±     664,021    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         2,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     15677,393 ±     850,221   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1503,568 ±      81,627  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    150944,028 ±       0,015    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,968 ±    1162,272  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    148465,685 ±  112926,763    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,096 ±       8,098    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     15980,954 ±     229,911   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1462,656 ±      20,889  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144048,202 ±       1,494    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,891 ±       6,057  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    133436,779 ±    2246,125    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,053 ±       7,909    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    273041,699 ±   19959,087   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1579,304 ±     115,152  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1481,189 ±    1159,032  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      8550,162 ±    6982,921    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,167 ±       0,613    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     13703,291 ±     172,200   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1714,975 ±      21,199  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    196976,033 ±       0,014    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1762,041 ±    1428,987  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    202347,009 ±  163370,562    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3,820 ±      10,475    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        13,000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     14470,810 ±    1063,738   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1412,775 ±     104,045  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    153645,275 ±      47,438    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1479,594 ±    1154,434  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    160801,223 ±  121231,824    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4,040 ±      12,793    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     32495,956 ±     684,694   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1121,379 ±      23,482  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312,013 ±       0,003    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1074,552 ±    1415,748  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     51971,918 ±   67668,474    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,005 ±       3,870    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         8,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     67238,781 ±    4384,440   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1070,430 ±      69,621  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     25056,006 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1082,170 ±    1425,774  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     25361,875 ±   33731,438    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,675 ±       2,491    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    761378,507 ±    1967,850   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1044,795 ±       2,754  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       940,990 ±    1417,327  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1945,355 ±    2929,603    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,052 ±       0,272    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    852386,631 ±    3402,854   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     75449,676 ±    1089,556   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1479,920 ±      21,324  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     30872,006 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1490,093 ±    1169,348  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     31092,734 ±   24642,236    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,521 ±       1,394    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     21233,242 ±     123,561   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       469,464 ±       2,854  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     34800,020 ±       0,003    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       474,467 ±    1068,519  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     35190,168 ±   79278,237    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,661 ±       5,567  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        49,027 ±     412,742    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     21284,790 ±     683,798   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       797,464 ±      25,770  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     58968,020 ±       0,011    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       807,829 ±    1165,948  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     59773,500 ±   86921,656    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,669 ±       5,669  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        49,627 ±     420,722    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     20600,505 ±     426,818   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       576,515 ±      11,927  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44048,288 ±       2,304    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       539,779 ±    1161,916  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     41281,858 ±   88867,948    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,174  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,914 ±      13,337    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    119033,499 ±    2278,711   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       298,888 ±       5,790  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952,004 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306,944 ±    1078,953  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4058,502 ±   14266,348    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,003 ±       0,024  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,036 ±       0,313    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     15966,801 ±      75,430   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1007,904 ±       4,694  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99352,028 ±       0,013    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       942,937 ±    1420,883  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     92948,626 ±  140067,625    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,641 ±       8,655    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         7,000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     18915,460 ±     127,752   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       645,790 ±       4,070  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     53733,947 ±      40,037    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       641,815 ±     280,535  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     53396,258 ±   23087,045    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,575 ±       4,788  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        47,829 ±     398,243    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         5,000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     64272,752 ±    4391,985   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1146,341 ±      78,246  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     28072,007 ±       0,002    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1208,929 ±    1157,208  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     29657,234 ±   28999,314    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,046 ±       0,105  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,127 ±       2,582    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9,000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         3,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     72310,732 ±    1792,963   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1168,774 ±      28,883  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     25440,006 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1213,691 ±    1161,060  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26437,584 ±   25524,560    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,543 ±       2,275    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    260734,576 ±   17257,299   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       499,620 ±      33,119  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016,002 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       474,784 ±    1069,563  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2869,496 ±    6428,705    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,573 ±       4,799  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3,430 ±      28,735    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    392438,752 ±    1675,868   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     81994,774 ±    4156,275   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1319,073 ±      67,013  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     25320,005 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1207,133 ±    1156,069  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     23186,141 ±   22380,327    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,640 ±       1,751    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9,000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     17361,570 ±     163,247   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       380,757 ±       3,601  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     34520,025 ±       0,010    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       441,977 ±     989,791  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     40086,080 ±   89827,235    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,575 ±       4,793  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        52,249 ±     435,333    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    142507,451 ±    1919,086   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2064,423 ±      27,598  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2024,724 ±      18,272  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     22361,652 ±     165,317    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,598 ±       1,348    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    748225,414 ±    5219,657   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       414,549 ±       2,813  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,275 ±    1067,785  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       998,155 ±    2247,691    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,537 ±       4,537  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,133 ±       9,564    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    416200,107 ±    2765,391   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       414,654 ±       2,732  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1568,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,391 ±    1068,225  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1794,086 ±    4037,394    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,042 ±       0,234  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,157 ±       0,881    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    868876,865 ±    7599,786   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       300,314 ±       2,618  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,639 ±    1079,004  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       370,838 ±    1955,324    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,005 ±       0,044  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,009 ±       0,080    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         2,000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     93733,311 ±     919,233   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      4017,844 ±      39,327  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67464,004 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      4083,265 ±      17,169  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     68562,956 ±     903,270    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,087 ±       0,132  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,468 ±       2,211    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        30,000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        11,000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    237756,855 ±   33121,535   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1502,074 ±     209,464  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9944,002 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1480,712 ±    1154,220  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9798,652 ±    7317,043    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,195 ±       0,484    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        11,000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    314944,419 ±   18314,737   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1640,879 ±      95,228  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1615,203 ±    1419,931  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      8077,171 ±    7203,016    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,169 ±       0,741    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        12,000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         5,000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1518703,428 ±  360867,904   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       517,218 ±     122,891  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       506,512 ±    1123,335  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       510,818 ±    1132,805    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,536 ±       4,540  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,538 ±       4,559    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1489292,834 ±   13382,526   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       870,500 ±       7,895  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       811,096 ±    1164,431  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       856,996 ±    1226,288    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,026 ±       0,139    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6,000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1530928,019 ±   10203,184   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       521,379 ±       3,622  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,754 ±    1123,998  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       521,170 ±    1155,322    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,647 ±       5,338  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,665 ±       5,490    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1654858,179 ±    8930,796   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     44408,349 ±     486,668   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2059,091 ±      22,737  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     72976,010 ±       0,002    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2020,736 ±      22,914  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     71617,314 ±    1319,388    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,475 ±       2,006    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5    135093,494 ±    1189,952   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1175,563 ±      10,406  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     13696,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1075,586 ±    1417,345  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12535,787 ±   16568,954    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,108  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,340 ±       1,254    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         8,000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     64608,094 ±    1980,058   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1289,962 ±      39,723  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31424,007 ±       0,002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1344,824 ±       3,409  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     32762,263 ±    1074,120    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,013 ±       3,074    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10,000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     91695,797 ±    1522,150   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       962,506 ±      15,809  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16520,005 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       946,928 ±    1428,608  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     16259,658 ±   24617,429    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,143 ±       1,227    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    293325,078 ±    2012,677   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       954,152 ±       6,409  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941,168 ±    1417,701  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5051,778 ±    7627,642    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,112 ±       0,609    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     37694,503 ±     279,965   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1720,918 ±      12,762  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     71856,012 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1623,432 ±    1426,968  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     67795,653 ±   59810,261    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±       0,185  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,391 ±       7,706    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     54285,939 ±     866,567   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       905,882 ±      14,611  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26264,008 ±       0,002    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       806,733 ±    1156,752  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     23377,532 ±   33302,865    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,604 ±       2,327    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         6,000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         2,000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     62245,842 ±     396,111   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       923,494 ±       5,872  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352,007 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       805,957 ±    1155,614  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     20377,411 ±   29172,711    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,421 ±       2,217    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6,000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         2,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5    102970,049 ±    3508,763   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1410,505 ±      48,057  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560,004 ±       0,053    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1354,746 ±       6,425  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20708,982 ±     696,621    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,256 ±       1,038    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    306935,653 ±    3139,978   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       978,221 ±      10,031  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,593 ±    1418,131  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5518,188 ±    7307,114    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,085 ±       0,344    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    359415,111 ±   17585,862   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     80264,937 ±     916,698   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1190,456 ±      13,346  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344,005 ±       0,096    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1072,487 ±    1413,530  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     21046,456 ±   27910,460    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,408 ±       1,575    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8,000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5     11442,583 ±     165,196   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       283,596 ±       4,048  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     39008,622 ±       5,015    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       306,915 ±    1078,851  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     42186,377 ±  148292,927    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,007 ±       0,058  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,924 ±       7,958    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     31047,563 ±     234,403   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1576,924 ±      11,901  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     79936,013 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1615,207 ±    1418,052  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     81876,221 ±   71871,591    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,901 ±       5,308    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     33640,725 ±    2506,681   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1316,169 ±      98,043  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61576,012 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1354,334 ±       6,814  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     63380,854 ±    4811,307    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,369 ±       4,303    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    550443,046 ±   84290,138   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1432,493 ±     219,353  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1345,753 ±       6,625  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3853,255 ±     638,601    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,037 ±       0,132  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,105 ±       0,370    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     25279,920 ±    1705,662   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1921,950 ±     129,103  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    119656,017 ±       0,004    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1899,274 ±    1170,514  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    118369,914 ±   75612,878    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3,106 ±       4,366    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     31013,852 ±     222,614   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1399,902 ±       9,244  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     71032,013 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1344,668 ±       4,600  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     68229,490 ±     407,032    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±       0,121  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,480 ±       6,175    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     78933,512 ±    1251,638   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1670,719 ±      26,008  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33312,005 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1614,888 ±    1418,938  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     32211,538 ±   28576,924    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,414 ±       1,595    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        12,000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    177912,569 ±    4732,071   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1348,463 ±      35,256  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     11928,002 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,725 ±       6,266  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     11983,844 ±     323,930    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,258 ±       0,636    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1395720,422 ±  471362,015   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1156,351 ±     390,599  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304,000 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1075,567 ±    1417,112  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1235,326 ±    1857,725    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,026 ±       0,132    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1385611,207 ±    6668,867   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    138523,514 ±   11870,460   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1561,694 ±     133,773  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     17744,003 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1490,668 ±    1167,201  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16927,677 ±   12846,678    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,328 ±       1,509    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     38342,721 ±     408,527   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       506,728 ±       5,437  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     20800,011 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       506,740 ±    1123,972  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20825,119 ±   46183,387    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,661 ±       5,554  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        27,139 ±     228,198    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     41105,686 ±     305,901   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1474,455 ±      10,774  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56456,010 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1490,683 ±    1167,116  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     57090,756 ±   45087,513    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,798 ±       3,768    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    736874,126 ±   16928,213   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1438,218 ±      32,855  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072,001 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1345,717 ±       6,661  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2874,517 ±      77,848    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,098 ±       0,142    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        10,000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     30681,906 ±     646,009   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2232,828 ±      46,314  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114536,014 ±       0,004    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2172,427 ±    1170,208  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    111449,644 ±   60454,797    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,067 ±       0,088  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3,415 ±       4,475    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16,000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     39384,625 ±     632,242   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1644,569 ±      26,383  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     65720,011 ±       0,003    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1615,825 ±    1418,974  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     64594,056 ±   57214,774    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,017 ±       0,036  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,666 ±       1,434    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        12,000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    400099,933 ±    8394,263   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1112,399 ±      23,225  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376,001 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1082,883 ±    1428,091  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4256,617 ±    5576,793    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,082 ±       0,314    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8,000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1760772,587 ±  353853,801   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1029,261 ±     206,636  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,667 ±    1418,307  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       952,333 ±    1135,563    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,176  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,026 ±       0,156    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1770270,312 ±   40375,157   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    259667,072 ±    2868,277   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1681,525 ±      18,856  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192,002 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1762,315 ±    1428,519  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10685,744 ±    8743,039    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,252 ±       0,594    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     59926,492 ±     578,545   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       401,449 ±       3,959  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     10544,007 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       339,545 ±    1220,801  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      8914,810 ±   32062,508    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,644 ±       5,495  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        16,928 ±     144,436    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     90005,685 ±    1064,313   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1691,302 ±      20,244  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     29576,005 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1745,868 ±    1415,733  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     30530,294 ±   24755,516    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,054 ±       0,122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,947 ±       2,138    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     96666,788 ±     682,053   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1120,312 ±       7,947  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     18240,004 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1081,630 ±    1426,721  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     17618,217 ±   23326,545    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,407 ±       1,432    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    117775,206 ±     930,704   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1240,401 ±       9,835  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576,004 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,664 ±    1153,512  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16127,727 ±   15448,089    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,390 ±       1,625    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     42904,870 ±     500,433   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2132,001 ±      24,816  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     78208,010 ±       0,002    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2171,565 ±    1169,708  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     79658,002 ±   42840,055    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,833 ±       4,455    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        16,000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     88312,064 ±    2874,561   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1532,935 ±      49,892  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     27320,005 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1610,492 ±    1419,964  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     28695,117 ±   25122,458    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,037 ±       0,132  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,666 ±       2,340    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        12,000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    140247,020 ±     804,098   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       620,194 ±       3,467  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6960,003 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       537,137 ±    1156,239  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      6025,703 ±   12970,867    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,842 ±       7,120  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         9,455 ±      79,913    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    175764,150 ±    1527,647   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       260,872 ±       2,288  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336,002 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306,923 ±    1078,877  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2748,603 ±    9661,809    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         2,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    769016,297 ±   71641,302   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       953,764 ±      88,703  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       938,467 ±    1414,048  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1933,158 ±    3062,262    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,061 ±       0,286    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    781905,915 ±    5954,777   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    231923,817 ±    6570,394   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       757,966 ±      21,237  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144,002 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       803,819 ±    1163,646  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5467,025 ±    8121,129    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,924 ±       7,909  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6,348 ±      54,358    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     29929,841 ±     238,381   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       167,029 ±       1,307  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      8784,014 ±       0,002    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204,601 ±    1078,802  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10776,964 ±   56823,952    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,002 ±       0,020  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,121 ±       1,040    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         2,000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    149307,332 ±    2834,310   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1838,837 ±      34,669  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19384,003 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1885,934 ±    1160,916  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19889,632 ±   12450,262    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,062 ±       0,127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,659 ±       1,343    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        14,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    200522,364 ±    2909,240   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1060,994 ±      15,078  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8328,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1082,004 ±    1425,291  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      8496,383 ±   11230,058    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±       0,104  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,196 ±       0,817    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    535704,218 ±    2745,735   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1040,151 ±       5,390  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       941,095 ±    1417,211  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2765,753 ±    4174,785    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,073 ±       0,387    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     76983,827 ±    2860,134   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3248,181 ±     121,337  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66408,006 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3265,347 ±    1174,815  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     66779,547 ±   24846,470    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,062 ±       0,057  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,275 ±       1,123    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        11,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    138746,038 ±    2355,157   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1562,072 ±      26,694  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17720,003 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1615,336 ±    1417,097  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18332,312 ±   16256,367    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,426 ±       0,997    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        12,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    196251,973 ±    3356,019   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       672,347 ±      11,551  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5392,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       673,029 ±       6,297  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      5397,581 ±     123,583    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,696 ±       5,770  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5,625 ±      46,644    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    322959,595 ±    3132,217   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       318,456 ±       3,051  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204,623 ±    1078,917  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       998,009 ±    5262,223    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         2,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         2,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1131233,959 ±   13380,168   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       839,510 ±       9,897  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168,000 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       807,295 ±    1158,577  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1123,336 ±    1614,778    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,035 ±       0,184    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1342014,747 ±   32731,713   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    350065,968 ±    1111,694   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       955,543 ±       3,211  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       946,144 ±    1423,123  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4254,743 ±    6412,192    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,150 ±       0,655    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         2,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     42895,734 ±     174,232   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       133,435 ±       0,504  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4896,010 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102,325 ±     881,052  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3759,951 ±   32374,315    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         1,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      5917,700 ±     203,363   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1165,702 ±      39,826  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    310024,071 ±       0,010    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1197,507 ±    1147,034  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    318783,509 ±  308881,153    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±       0,088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        12,185 ±      23,393    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      5760,459 ±      42,133   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1059,063 ±       7,548  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    289344,073 ±       0,011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1077,660 ±    1420,372  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    294343,439 ±  387049,250    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5,680 ±      21,864    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     40428,222 ±     418,021   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       663,766 ±       6,941  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840,010 ±       0,002    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       668,130 ±       9,780  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     26009,912 ±     233,833    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1,099 ±       9,280  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        42,643 ±     360,196    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      5161,865 ±      69,155   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1315,127 ±      17,808  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    400984,083 ±       0,021    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1214,428 ±    1161,938  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    370319,953 ±  354799,083    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,104  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         7,617 ±      31,810    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5      5517,853 ±    1055,497   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1059,234 ±     202,333  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    302160,078 ±       0,023    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5       931,365 ±    1403,225  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    269484,848 ±  449763,595    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3,758 ±      22,127    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     16435,862 ±     467,893   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       921,018 ±      25,887  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88193,199 ±      48,451    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       931,666 ±    1402,166  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     89118,365 ±  132897,716    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,591 ±       6,390    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     18709,719 ±    1042,708   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       974,109 ±      54,488  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944,024 ±       0,255    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       942,684 ±    1420,708  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     79258,171 ±  118784,834    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,398 ±       7,369    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    285177,522 ±    7216,994   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1033,468 ±      25,875  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704,001 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       932,013 ±    1402,768  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5148,134 ±    7798,419    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,184 ±       0,673    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    319472,689 ±   73985,124   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     16825,593 ±     111,284   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       960,310 ±       6,300  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     89837,775 ±      30,611    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       929,283 ±    1399,200  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     86965,512 ±  131321,857    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,950 ±      10,625    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        50,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      8438,865 ±     167,820   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       537,998 ±      10,660  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    100336,839 ±       6,811    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       503,653 ±    1115,491  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     94086,017 ±  208527,427    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1,102 ±       9,313  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       206,073 ±    1740,842    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         6,000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5    982762,906 ±    7724,348   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        39,963 ±       0,311  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64,000 ±       0,001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     83400,056 ±     523,180   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3760,554 ±      23,901  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     70968,005 ±       0,001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5      3811,755 ±    1432,602  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     71929,894 ±   26824,613    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,075 ±       0,072  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,415 ±       1,362    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        28,000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        11,000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1217320,104 ±  233993,478   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       699,156 ±     134,361  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5       675,185 ±       2,061  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5       874,871 ±     179,821    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±       0,113  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,026 ±       0,143    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5,000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         2,000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5    743875,168 ±  120014,936   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       200,409 ±      32,339  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       424,001 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       204,618 ±    1078,891  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5       446,322 ±    2357,950    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,003 ±       0,022  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,006 ±       0,050    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2,000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         3,000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1613489,777 ±   13562,808   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        16,403 ±       0,136  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     48982,960 ±    2711,473   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      2064,265 ±     113,811  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66328,009 ±       0,001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2036,087 ±      11,030  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     65434,014 ±    3847,282    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,046 ±       0,067  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1,466 ±       2,108    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        15,000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5         5,000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    880913,603 ±   16027,225   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2798,372 ±      50,586  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5000,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2842,969 ±    1137,953  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      5079,909 ±    2042,478    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,042 ±       0,080  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,074 ±       0,144    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        21,000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         9,000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   6159383,589 ±  119838,794   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       375,698 ±       7,357  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       339,433 ±    1220,232  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        86,942 ±     312,266    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,534 ±       4,599  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,136 ±       1,174    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         6,000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5   1099193,626 ±   49663,555   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1312,952 ±      59,630  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1880,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      1218,343 ±    1168,118  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      1740,599 ±    1619,685    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,017 ±       0,088  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,024 ±       0,125    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         9,000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         4,000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   8608490,006 ± 2733899,764   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       393,812 ±     125,055  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       442,009 ±     989,859  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        77,939 ±     174,553    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,628 ±       5,275  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,111 ±       0,930    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    342801,927 ±   14853,784   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1888,803 ±      81,772  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8672,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1898,820 ±    1171,068  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      8723,628 ±    5503,091    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,033 ±       0,072  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,153 ±       0,325    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        14,000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         6,000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    808587,464 ±  115624,354   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1121,995 ±     160,369  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      2184,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1075,558 ±    1417,114  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2083,294 ±    2609,982    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,048 ±       0,201    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         8,000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5        11,000                    ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      4399,217 ±       7,830   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2077,665 ±       4,151  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    743312,094 ±       0,012    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2036,354 ±       8,233  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5    728532,621 ±    3201,931    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,117 ±       0,515  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5        41,691 ±     184,198    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        15,000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         8,000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5987,045 ±      34,002   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2474,015 ±      13,135  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650352,070 ±       0,011    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2579,586 ±    1169,211  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    678118,661 ±  307855,527    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,104 ±       0,001  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        27,357 ±       0,156    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        19,000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         8,000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     46959,308 ±     329,955   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       758,311 ±       5,471  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     25416,009 ±       0,001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       808,606 ±    1166,986  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     27103,966 ±   39155,781    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,594 ±       5,023  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        19,908 ±     168,420    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         4,000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4249,750 ±      82,509   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       852,081 ±      16,421  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    315592,097 ±       0,012    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       808,379 ±    1160,214  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    299231,697 ±  426266,235    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,025 ±       0,104  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         9,273 ±      38,936    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      5375,539 ±      71,323   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       539,215 ±       7,111  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    157877,388 ±       0,631    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       539,454 ±    1161,215  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    158121,833 ±  340374,044    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,193 ±       1,528  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        56,720 ±     449,392    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         4,000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         2,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      7077,770 ±     163,920   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       189,132 ±       4,341  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056,059 ±       0,010    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       204,614 ±    1078,873  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     45555,678 ±  240202,963    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,001 ±       0,006  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,150 ±       1,293    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2,000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      7305,389 ±      61,041   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       141,812 ±       1,170  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552,061 ±       0,047    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       102,310 ±     880,920  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     22072,259 ±  190048,806    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1,000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         2,000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      9416,721 ±     119,318   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2193,078 ±      27,567  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366561,033 ±      40,950    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2159,122 ±    1173,512  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    360900,898 ±  196708,633    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,102 ±       0,191  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        17,132 ±      32,019    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        16,000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     16947,485 ±     353,229   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       430,216 ±       8,874  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     39952,027 ±       0,012    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       474,235 ±    1067,644  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     44078,118 ±   99042,587    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,117 ±       0,872  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        10,846 ±      81,173    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         3,000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     28192,890 ±     197,525   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       483,657 ±       3,476  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     27000,015 ±       0,004    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       474,514 ±    1068,650  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     26498,390 ±   59647,495    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,667 ±       5,502  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        37,188 ±     306,887    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2674,940 ±      14,151   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1699,163 ±       9,281  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    999760,155 ±       0,021    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1760,727 ±    1427,858  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5   1036176,996 ±  844187,393    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,037 ±       0,200  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        22,030 ±     117,360    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        13,000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      9005,006 ±      45,820   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1105,752 ±       5,822  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    193262,584 ±      49,900    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1074,635 ±    1416,234  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    187818,427 ±  247459,062    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,004 ±       0,036  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,728 ±       6,272    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         8,000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         4,000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      8933,483 ±      61,047   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1720,445 ±      12,288  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    303127,351 ±      54,263    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1759,630 ±    1430,228  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    310127,619 ±  254002,498    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,058 ±       0,154  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        10,274 ±      27,216    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        13,000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     57566,948 ±    7353,734   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       538,144 ±      68,600  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712,008 ±       0,003    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       506,344 ±    1122,858  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     13927,574 ±   31129,657    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,612 ±       5,165  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        16,483 ±     139,102    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     43237,077 ±    8628,778   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       643,744 ±     128,135  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431,824 ±       0,141    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       674,401 ±       1,031  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     24604,414 ±    5281,812    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,169 ±       1,325  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         6,021 ±      47,128    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         5,000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         2,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     84522,408 ±    2742,147   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       635,467 ±      20,533  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832,005 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       539,018 ±    1160,284  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     10040,696 ±   21618,448    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,665 ±       5,545  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5        12,379 ±     103,235    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         2,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5    110366,379 ±    1348,172   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0,004 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      6583,174 ±      70,109   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      2031,608 ±      21,953  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    485720,037 ±       1,392    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      2034,280 ±      11,110  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5    486362,188 ±    6360,081    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,042 ±       0,113  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         9,952 ±      27,081    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        15,000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5         8,000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      4902,230 ±      53,439   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5       256,945 ±       2,802  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5     82496,086 ±       0,014    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306,863 ±    1078,665  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     98676,128 ±  346860,751    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,001 ±       0,012  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,451 ±       3,887    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         6,000                    ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   6128933,802 ±   99704,710   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3800,560 ±      61,887  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976,000 ±       0,001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      3803,606 ±    1416,679  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       976,792 ±     363,937    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,075 ±       0,108  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,019 ±       0,028    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        28,000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        11,000                    ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  46799821,485 ± 3799432,223   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       475,780 ±      38,718  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16,000 ±       0,001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       474,154 ±    1067,360  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        15,797 ±      35,569    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,536 ±       4,527  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,018 ±       0,151    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         4,000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   9663411,262 ±  131303,792   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3634,555 ±      48,728  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592,000 ±       0,001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      3673,031 ±    1426,264  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       598,396 ±     238,487    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,062 ±       0,098  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,010 ±       0,016    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        27,000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        11,000                    ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  56906244,665 ±  305487,421   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  46821794,250 ± 5171182,078   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1666,076 ±     183,454  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56,000 ±       0,001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1616,673 ±    1418,070  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        54,255 ±      45,171    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,046 ±       0,105  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,002 ±       0,003    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5        12,000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         5,000                    ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   9030620,943 ±  130941,039   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      3993,481 ±      57,696  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       696,000 ±       0,001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      3939,365 ±    1178,759  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       686,422 ±     196,926    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,083 ±       0,001  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,015 ±       0,001    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        29,000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        11,000                    ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5  11508999,388 ±  172437,781   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4855,492 ±      71,686  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       664,000 ±       0,001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      4764,819 ±      21,671  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5       651,606 ±       7,402    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,083 ±       0,057  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,011 ±       0,008    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        35,000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        12,000                    ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  22358635,090 ±  315194,995   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2500,228 ±      34,723  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176,000 ±       0,001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2433,608 ±    1433,383  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       171,269 ±      99,645    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,046 ±       0,067  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,003 ±       0,005    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        18,000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  62780124,450 ± 6805286,324   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1914,701 ±     207,758  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48,000 ±       0,001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2022,837 ±      17,815  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        50,742 ±       5,376    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,087 ±       0,174  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,002 ±       0,004    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        15,000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  15380145,314 ±  628323,333   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      3048,753 ±     124,385  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312,000 ±       0,001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2992,293 ±    1428,382  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       306,234 ±     146,143    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,050 ±       0,072  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,005 ±       0,007    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        22,000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         9,000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  49082390,238 ± 4329321,639   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       997,990 ±      87,476  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32,000 ±       0,001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      1075,648 ±    1418,204  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        34,372 ±      43,893    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,025 ±       0,088  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,001 ±       0,003    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         8,000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  54051509,683 ±  342612,278   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  44722928,383 ±  624427,696   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2273,228 ±      31,456  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80,000 ±       0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2299,112 ±    1428,028  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        80,906 ±      50,076    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,046 ±       0,036  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,002 ±       0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        17,000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2834393,438 ±   23808,782   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2319,470 ±      19,998  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288,000 ±       0,001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2428,963 ±    1421,422  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      1349,096 ±     797,977    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,042 ±       0,098  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,023 ±       0,054    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        18,000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         7,000                    ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5  13451650,868 ±  255310,829   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5      2598,159 ±      49,741  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5       304,000 ±       0,001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2706,364 ±      29,572  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       316,668 ±       8,018    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,050 ±       0,044  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,006 ±       0,005    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        20,000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5         8,000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    183346,786 ±    3300,311   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      3363,289 ±      61,072  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872,002 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      3258,145 ±    1154,468  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     27960,314 ±    9472,213    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,054 ±       0,091  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,464 ±       0,780    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        24,000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        10,000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     28668,921 ±     304,381   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2228,695 ±      23,631  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122352,014 ±       0,002    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2307,728 ±    1427,151  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    126681,775 ±   78049,298    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±       0,098  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,286 ±       5,402    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        17,000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    164024,515 ±   27684,525   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1524,921 ±     257,039  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     14632,003 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1490,736 ±    1169,712  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     14435,810 ±   14505,431    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,042 ±       0,098  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,396 ±       0,905    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11,000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    559454,003 ±   12107,002   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1157,310 ±      25,314  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1075,588 ±    1418,586  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3023,684 ±    3960,872    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,122  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,082 ±       0,341    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    564721,899 ±  178895,312   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       551,147 ±     174,519  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5       506,785 ±    1124,090  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1361,982 ±    3018,206    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,647 ±       5,372  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1,738 ±      14,432    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         4,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         5,000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     59941,130 ±    6159,220   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1310,381 ±     134,487  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34408,007 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1353,543 ±       5,805  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     35562,064 ±    3742,536    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±       0,091  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,764 ±       2,365    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10,000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    442903,915 ±    2107,174   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      3005,390 ±      14,186  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2846,963 ±    1156,704  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10117,698 ±    4145,848    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,192 ±       0,156    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        22,000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        10,000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    339049,617 ±   39599,250   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       889,317 ±     103,987  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4128,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       946,205 ±    1426,464  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4409,115 ±    6848,331    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,155 ±       0,425    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1354926,046 ±    4810,641   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      2644,551 ±       9,034  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3072,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2707,564 ±      28,852  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3145,196 ±      27,494    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,048 ±       0,066    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        20,000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7,000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    123658,456 ±    2554,357   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4473,872 ±      91,638  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56944,004 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      4493,952 ±    1444,266  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     57211,023 ±   18978,992    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,079 ±       0,132  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,008 ±       1,697    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        33,000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        14,000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    642748,224 ±    9813,490   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2806,377 ±      42,506  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2709,776 ±      25,688  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      6635,500 ±      71,855    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±       0,080  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,102 ±       0,197    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        20,000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    428106,575 ±    3341,702   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       661,514 ±       5,273  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2432,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       673,027 ±       6,389  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      2474,331 ±      26,440    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,696 ±       5,770  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,565 ±      21,262    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    675041,725 ±    6298,555   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       494,115 ±       4,608  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       507,061 ±    1124,842  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1182,310 ±    2624,193    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,067 ±       0,489  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,155 ±       1,138    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2218857,368 ±   12899,226   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1026,277 ±       5,819  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       941,058 ±    1417,196  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       667,512 ±    1004,767    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,021 ±       0,086    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2245137,571 ±  106517,805   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    431442,267 ±    2457,374   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       620,596 ±       3,673  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537,623 ±    1157,286  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1962,467 ±    4224,424    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,781 ±       6,594  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,855 ±      24,093    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    197556,144 ±    5310,028   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       504,062 ±      13,527  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4016,002 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       506,726 ±    1123,925  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      4027,648 ±    8912,100    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,645 ±       5,310  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,102 ±      42,006    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     59849,155 ±    2271,414   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2016,927 ±      76,894  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53040,007 ±       0,002    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2024,404 ±      19,569  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     53240,934 ±    2153,046    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±       0,080  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,095 ±       2,108    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15,000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     89317,014 ±   16557,334   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1603,964 ±     296,977  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28264,005 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1626,533 ±    1432,393  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28614,453 ±   23326,728    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,029 ±       0,091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,520 ±       1,627    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        12,000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5    104194,325 ±   13998,944   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1596,798 ±     214,254  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24120,004 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1616,399 ±    1423,154  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24497,395 ±   23091,925    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±       0,098  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,632 ±       1,483    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        12,000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         5,000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     20598,846 ±     781,526   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1435,349 ±      54,319  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109672,021 ±       0,008    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1354,008 ±       5,570  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    103465,406 ±    4143,678    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,231 ±       6,980    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10,000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         4,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    178422,602 ±    1494,785   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1319,487 ±      10,801  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     11640,002 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1353,673 ±       6,080  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     11941,619 ±      96,673    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±       0,098  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,367 ±       0,864    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         5,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    594667,643 ±   49865,860   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       655,900 ±      55,049  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       673,392 ±       4,871  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1783,030 ±     162,171    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,650 ±       5,421  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1,789 ±      14,934    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         4,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    575468,151 ±    4848,778   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5,851 ±       0,050  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     22785,132 ±    3343,768   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       434,663 ±      63,761  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30024,163 ±       1,249    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       372,207 ±    1333,253  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     25602,090 ±   91551,813    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,108 ±       0,888  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7,587 ±      62,382    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         3,000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         3,000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2429285,749 ±   40619,867   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3407,752 ±      57,572  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2208,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      3528,320 ±    1173,408  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2285,721 ±     733,884    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,050 ±       0,122  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,032 ±       0,079    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        26,000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        10,000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    873129,101 ±    6896,712   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       554,760 ±       4,461  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       506,379 ±    1122,956  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       912,202 ±    2021,395    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,537 ±       4,561  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,966 ±       8,205    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    326023,590 ±    4787,101   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       624,765 ±       9,271  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3016,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       539,827 ±    1162,020  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      2603,924 ±    5605,328    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,058 ±       0,382  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0,280 ±       1,836    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         2,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    808853,625 ±   26592,358   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       608,483 ±      19,951  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       641,310 ±     279,377  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1248,491 ±     564,445    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0,645 ±       5,329  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         1,261 ±      10,424    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4711228,079 ±   99407,625   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1508,655 ±      31,742  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5      1480,704 ±    1158,397  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       494,474 ±     381,098    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,042 ±       0,057  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,014 ±       0,019    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        11,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         4,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9701126,261 ±  245870,541   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       788,955 ±      19,761  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       807,265 ±    1155,270  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       130,885 ±     185,699    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0,029 ±       0,122  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0,005 ±       0,020    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         6,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         2,000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    208770,595 ±    4092,248   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1415,593 ±      27,809  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10672,002 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1353,735 ±       6,434  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     10205,843 ±     176,814    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,029 ±       0,091  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,220 ±       0,686    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        10,000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    336027,128 ±   12757,165   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       659,277 ±      25,038  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      3088,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       673,401 ±       4,820  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      3154,450 ±     141,943    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,672 ±       5,519  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         3,171 ±      26,050    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5         4,000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5    990701,699 ±   17395,444   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        55,395 ±       0,981  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102,310 ±     880,922  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       163,687 ±    1409,397    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1,000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     72771,037 ±     542,930   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3379,008 ±      25,217  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73080,006 ±       0,002    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3265,863 ±    1164,840  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     70632,553 ±   25170,647    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,150  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,350 ±       3,230    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24,000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        11,000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1204490,730 ±   15920,653   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       691,817 ±       9,154  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       675,206 ±       2,123  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       882,302 ±      10,353    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,105  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,022 ±       0,136    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5    758118,251 ±   12827,023   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       211,926 ±       3,609  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440,001 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204,579 ±    1078,686  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       424,566 ±    2238,614    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2,000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1020790,843 ±    6743,449   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        10,378 ±       0,068  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     51072,946 ±    1006,437   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2161,131 ±      42,277  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66600,008 ±       0,001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2171,878 ±    1158,678  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     66935,206 ±   35836,766    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,071 ±       0,146  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,183 ±       4,496    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        16,000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    311520,531 ±    3335,457   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1219,170 ±      13,093  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1210,171 ±    1158,412  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6117,220 ±    5887,444    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,029 ±       0,108  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,148 ±       0,545    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         9,000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         3,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     31551,370 ±     503,326   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1722,319 ±      27,593  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85920,014 ±       0,003    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1762,265 ±    1426,741  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     87955,005 ±   72049,667    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±       0,072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1,452 ±       3,553    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        13,000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5         6,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    149659,288 ±    1833,241   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1828,721 ±      22,377  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232,003 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1898,671 ±    1164,120  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     19969,454 ±   12284,773    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,037 ±       0,067  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,394 ±       0,702    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        14,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         7,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    387140,559 ±   22992,306   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1844,025 ±     110,174  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1887,779 ±    1153,202  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7660,066 ±    4323,697    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,046 ±       0,105  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,186 ±       0,421    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        14,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5         5,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    464098,479 ±    9495,783   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1589,895 ±      31,947  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1481,310 ±    1159,622  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      5027,936 ±    4055,954    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0,025 ±       0,105  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0,085 ±       0,357    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        11,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         4,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     59037,249 ±     771,597   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1481,531 ±      19,205  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39496,007 ±       0,002    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1490,058 ±    1170,134  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     39729,829 ±   31382,449    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,029 ±       0,072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,776 ±       1,911    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11,000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         5,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     81583,596 ±    1215,063   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1686,954 ±      25,315  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32544,005 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5      1751,086 ±    1420,344  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     33786,534 ±   27509,613    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±       0,127  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,805 ±       2,452    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        13,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5         6,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    133608,722 ±   34216,654   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       657,406 ±     168,359  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7744,003 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       675,257 ±       2,139  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7980,884 ±    1927,044    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,021 ±       0,057  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,247 ±       0,698    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         2,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    245582,085 ±   28450,793   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5      1011,062 ±     117,065  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480,002 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       940,983 ±    1417,146  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      6005,439 ±    8679,404    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,017 ±       0,067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,105 ±       0,422    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         7,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         2,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     19911,955 ±     977,581   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1139,777 ±      56,020  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90088,022 ±       0,013    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1217,421 ±    1165,380  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     96321,089 ±   93326,092    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,017 ±       0,088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,330 ±       7,012    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         9,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    192015,673 ±    1498,472   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1235,620 ±       9,514  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     10128,002 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1352,916 ±       6,201  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     11089,468 ±      69,355    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,033 ±       0,072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,273 ±       0,588    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5        10,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         4,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    636809,233 ±    3093,062   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       708,864 ±       3,521  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       673,397 ±       4,764  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1664,344 ±      11,078    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,652 ±       5,436  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1,610 ±      13,423    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    605028,747 ±    3210,510   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        12,301 ±       0,062  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     22835,209 ±    3160,346   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       468,143 ±      64,911  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32264,157 ±       1,201    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       507,156 ±    1125,063  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     34505,312 ±   76891,424    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,079 ±       0,548  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         5,404 ±      37,481    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         4,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     86407,089 ±     657,010   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1511,281 ±      11,478  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27528,005 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1480,576 ±    1155,251  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     26969,040 ±   21051,357    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,134  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,532 ±       2,449    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    156771,043 ±    1199,591   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       666,176 ±       5,220  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6688,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       674,634 ±       2,033  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6772,939 ±      53,774    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,062 ±       0,405  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,628 ±       4,077    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         2,000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    235619,025 ±    2545,576   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       839,518 ±       8,993  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608,002 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,253 ±    1158,347  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      5388,863 ±    7667,201    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±       0,105  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,112 ±       0,701    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     47004,037 ±     423,739   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1947,904 ±      17,668  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65224,009 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2031,221 ±      16,067  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     68013,941 ±     495,385    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±       0,134  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,674 ±       4,497    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        15,000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    141991,266 ±    1155,665   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1315,722 ±      10,896  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     14584,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1210,537 ±    1157,596  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     13418,298 ±   12834,022    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±       0,067  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,277 ±       0,742    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    299666,610 ±    2200,131   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1410,468 ±      10,803  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7408,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1478,772 ±    1160,234  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7765,080 ±    6043,071    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,080  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,219 ±       0,420    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    581913,592 ±    3042,026   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       467,327 ±       2,450  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       507,069 ±    1124,855  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1372,226 ±    3044,722    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,079 ±       0,469  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,214 ±       1,267    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    671706,423 ±   45240,135   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       355,074 ±      23,900  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       306,920 ±    1078,867  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       723,716 ±    2545,008    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,007 ±       0,061  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,017 ±       0,143    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    879835,585 ±    5287,105   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     37374,862 ±     556,808   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1862,157 ±      27,346  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     78416,011 ±       0,002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1883,033 ±    1158,865  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     79318,576 ±   49343,430    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±       0,091  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,403 ±       3,847    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5    152971,748 ±     480,101   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1137,520 ±       3,510  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     11704,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1210,090 ±    1158,098  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12449,515 ±   11900,731    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±       0,072  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,300 ±       0,738    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     68822,602 ±    3371,621   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      3117,358 ±     152,592  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     71288,006 ±       0,001    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3118,656 ±    1422,053  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     71359,048 ±   33938,085    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,121 ±       0,318  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         2,771 ±       7,372    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        23,000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         9,000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    144726,164 ±    4797,778   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1859,669 ±      61,435  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     20224,003 ±       0,001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1763,478 ±    1428,628  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     19169,723 ±   15348,885    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±       0,200  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,407 ±       2,177    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        13,000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    557263,733 ±    9096,668   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1455,927 ±      23,573  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112,001 ±       0,001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1480,670 ±    1166,864  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4182,066 ±    3299,785    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,067  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,106 ±       0,188    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        11,000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     18089,121 ±      59,247   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2304,265 ±       8,088  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    200488,024 ±       0,013    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2307,929 ±    1427,087  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    200812,721 ±  124353,867    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,098  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         5,433 ±       8,535    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        17,000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     47515,644 ±    1811,609   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2527,899 ±      95,499  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     83728,009 ±       0,001    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2569,372 ±    1171,859  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     85034,284 ±   36315,858    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,121 ±       0,262  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3,984 ±       8,609    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        19,000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8,000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    266777,950 ±    3024,233   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1240,761 ±      14,104  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320,002 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1352,718 ±       5,824  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      7980,548 ±      83,414    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,072  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,197 ±       0,425    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        10,000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1222152,409 ±   78071,657   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       615,011 ±      39,210  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792,000 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       539,027 ±    1160,302  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       690,482 ±    1486,902    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,643 ±       5,355  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,836 ±       6,967    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         2,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1281218,674 ±   29345,665   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻³                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     36807,454 ±    1823,496   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1970,810 ±      97,910  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     84280,011 ±       0,002    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2034,328 ±      12,048  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     87006,777 ±    3912,939    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,079 ±       0,104  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3,386 ±       4,496    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    795355,858 ±   13341,626   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2413,470 ±      41,317  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4776,001 ±       0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2432,123 ±    1411,164  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4810,649 ±    2722,218    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,046 ±       0,067  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,091 ±       0,132    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        18,000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         7,000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1729637,554 ±  104602,347   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1230,806 ±      74,299  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1120,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1217,896 ±    1164,989  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1109,420 ±    1074,893    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,025 ±       0,067  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,023 ±       0,060    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         9,000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   8478960,835 ±  219863,198   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       258,608 ±       6,765  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       306,926 ±    1078,887  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        57,065 ±     200,603    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,004 ±       0,031  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,001 ±       0,006    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    261420,038 ±   18839,580   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1845,680 ±     133,126  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     11112,002 ±       0,001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1763,036 ±    1431,116  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     10597,357 ±    8211,329    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,029 ±       0,108  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,174 ±       0,642    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        13,000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5   1063186,315 ±   23027,532   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1561,843 ±      33,829  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2312,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1479,337 ±    1157,256  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2189,146 ±    1690,350    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,046 ±       0,105  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,068 ±       0,155    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        11,000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2708166,343 ±   81662,600   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1115,014 ±      33,418  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1216,625 ±    1164,366  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5       707,347 ±     680,467    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,029 ±       0,072  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,017 ±       0,042    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         9,000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   6573711,133 ±   92992,638   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       735,093 ±      10,312  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       807,809 ±    1154,179  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       193,443 ±     276,950    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,653 ±       5,355  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,156 ±       1,280    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         6,000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   6563780,451 ±  157682,901   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       400,344 ±       9,678  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       441,856 ±     989,269  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       106,177 ±     238,591    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,640 ±       5,450  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,155 ±       1,321    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         4,000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    386282,892 ±    4706,592   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1967,373 ±      23,933  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8016,001 ±       0,001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2034,641 ±      12,333  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      8290,168 ±     138,285    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,042 ±       0,098  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,169 ±       0,400    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        15,000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     67182,163 ±     503,077   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1921,489 ±      14,416  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     45016,006 ±       0,002    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1888,298 ±    1161,498  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     44227,853 ±   26957,873    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,042 ±       0,150  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         0,975 ±       3,511    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        14,000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    125454,486 ±    2720,456   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1926,628 ±      40,927  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24168,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1899,756 ±    1165,204  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     23818,607 ±   14315,057    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,037 ±       0,105  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,469 ±       1,307    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        14,000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    183144,557 ±    1299,760   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2690,386 ±      18,668  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120,002 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2572,690 ±    1157,604  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     22105,096 ±    9825,767    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,057  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,358 ±       0,486    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        19,000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     57954,737 ±     560,754   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3045,853 ±      30,356  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82720,007 ±       0,001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2993,223 ±    1435,082  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     81297,163 ±   39225,874    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,042 ±       0,057  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,131 ±       1,543    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        22,000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5         9,000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     85914,728 ±    5578,471   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1752,045 ±     113,567  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     32096,005 ±       0,001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1752,201 ±    1421,070  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     32056,606 ±   25033,809    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,042 ±       0,001  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,763 ±       0,051    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        13,000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5         5,000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    281506,647 ±    6114,231   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1339,264 ±      29,039  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7488,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1209,313 ±    1158,207  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5      6758,455 ±    6436,854    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,033 ±       0,091  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,186 ±       0,514    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         9,000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         4,000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    633912,923 ±   10032,563   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       547,718 ±       8,561  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       539,803 ±    1161,967  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1341,507 ±    2887,811    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,075 ±       0,560  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,186 ±       1,390    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4,000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         3,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    398665,337 ±    4421,490   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       214,795 ±       2,424  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       204,603 ±    1078,810  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       809,374 ±    4267,619    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,008 ±       0,072  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,033 ±       0,284    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         2,000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    698767,297 ±    9618,674   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         7,104 ±       0,097  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     33384,319 ±    2814,479   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1963,609 ±     165,642  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     92576,012 ±       0,002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2019,375 ±      23,290  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     95240,017 ±    7726,567    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,033 ±       0,166  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,556 ±       7,789    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        15,000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5         7,000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    154238,557 ±    1779,785   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1154,794 ±      13,342  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     11784,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1075,554 ±    1418,045  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     10978,181 ±   14503,872    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,025 ±       0,088  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,255 ±       0,896    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5         8,000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5725818,257 ±  100588,548   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      4219,794 ±      74,293  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1160,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4216,763 ±    1182,035  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1159,005 ±     312,145    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,075 ±       0,091  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,021 ±       0,025    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        31,000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        11,000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   8528195,889 ±  967922,680   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       910,327 ±     103,104  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       806,795 ±    1156,823  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       148,643 ±     207,200    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,174  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,005 ±       0,032    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6,000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         2,000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   5121132,425 ±  211911,549   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2420,967 ±      99,950  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       744,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2442,521 ±    1429,805  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       750,000 ±     419,086    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,054 ±       0,091  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,017 ±       0,028    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        18,000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         8,000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   9057519,502 ±  228955,996   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       966,780 ±      24,386  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       941,152 ±    1418,911  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       163,757 ±     249,490    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,008 ±       0,044  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,001 ±       0,008    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7,000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   6435919,869 ±  153298,563   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3369,551 ±      80,511  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       824,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3390,348 ±      39,259  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       829,110 ±      20,728    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,105  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,009 ±       0,026    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        25,000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        10,000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   5021535,719 ±   71866,834   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2629,015 ±      37,461  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       824,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2708,125 ±      29,707  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       848,801 ±      11,025    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,050 ±       0,072  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,016 ±       0,022    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        20,000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3468664,625 ±   63251,053   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       828,668 ±      15,075  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806,648 ±    1155,628  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       365,903 ±     522,197    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±       0,122  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,013 ±       0,055    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   6485237,581 ± 2001389,392   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       626,323 ±     193,383  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       673,166 ±       3,639  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       164,250 ±      52,959    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,550 ±       4,427  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,127 ±       1,016    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2212276,887 ±    7356,495   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       685,942 ±       2,350  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       672,490 ±       2,619  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       478,430 ±       2,951    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±       0,105  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,018 ±       0,074    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         2,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5  10508859,392 ± 1119739,718   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1014,907 ±     107,916  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941,070 ±    1417,150  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       141,029 ±     212,692    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,021 ±       0,113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,003 ±       0,017    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         2,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9157270,116 ±   97296,315   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3895924,715 ±   70425,031   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1247,546 ±      22,638  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,960 ±    1153,529  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       487,849 ±     469,165    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±       0,088  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,015 ±       0,036    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9,000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    383375,227 ±    4183,032   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       185,122 ±       2,039  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5       760,001 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,610 ±    1078,850  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       841,991 ±    4439,591    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         2,000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5   1675479,986 ±   21226,101   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2963,709 ±      37,792  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2784,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2981,886 ±    1432,281  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2800,911 ±    1338,528    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,054 ±       0,044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,051 ±       0,041    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        22,000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   2434342,599 ±   31213,663   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       680,547 ±       8,695  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       673,156 ±       3,517  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       435,226 ±       6,204    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,543 ±       4,450  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,352 ±       2,891    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1588905,420 ±   16586,104   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1025,716 ±      10,634  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1016,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       946,723 ±    1426,500  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       938,316 ±    1420,820    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,025 ±       0,132  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,025 ±       0,131    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         2,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2870695,527 ±   41972,601   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       802,509 ±      11,688  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       807,273 ±    1155,692  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       443,079 ±     642,624    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±       0,104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,014 ±       0,057    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         2,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1291924,374 ±   28973,123   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       866,835 ±      19,673  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1056,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       939,099 ±    1412,417  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1145,439 ±    1740,237    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±       0,091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,041 ±       0,111    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1213971,719 ±   76689,485   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1647,504 ±     104,438  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      2136,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1616,279 ±    1420,205  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2093,370 ±    1784,791    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,037 ±       0,067  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,048 ±       0,085    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1934061,020 ±   27302,268   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1622,056 ±      22,902  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1614,267 ±    1415,791  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1313,959 ±    1158,811    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±       0,105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,030 ±       0,085    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2977518,343 ±    9835,866   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       771,887 ±       2,536  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5       672,819 ±       3,191  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       355,636 ±       1,418    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,008 ±       0,044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,004 ±       0,023    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2916222,755 ±  162522,460   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1378,465 ±      76,851  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1349,744 ±       9,464  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       728,613 ±      38,498    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,042 ±       0,080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,023 ±       0,044    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   3007398,943 ±   17272,958   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       779,589 ±       4,597  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       672,863 ±       4,205  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       352,146 ±       3,783    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,021 ±       0,139  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,011 ±       0,073    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         2,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2864875,415 ±   19717,778   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2921283,970 ±   38014,000   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1410,639 ±      18,440  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       760,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1476,742 ±    1154,036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       795,696 ±     624,071    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,016 ±       0,049    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        11,000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     13767,033 ±     425,265   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2055,900 ±      62,980  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    235032,826 ±      39,388    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2022,117 ±      19,864  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5    231182,412 ±    7409,487    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,067 ±       0,243  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         7,622 ±      27,755    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        15,000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     16909,715 ±     316,193   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       238,489 ±       3,944  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     22197,961 ±      64,130    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       204,622 ±    1078,912  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     19107,715 ±  100750,732    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         2,000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         2,000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     42458,162 ±     445,879   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       381,983 ±       3,961  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14160,010 ±       0,003    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       306,940 ±    1078,939  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     11383,307 ±   40014,278    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,008 ±       0,067  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,290 ±       2,497    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      4119,765 ±      17,729   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1343,622 ±       5,847  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    513104,101 ±       0,013    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1352,919 ±       6,909  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    516654,360 ±    2067,399    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,017 ±       0,105  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         6,363 ±      39,923    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        10,000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        21,000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     69514,420 ±    8993,345   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       887,754 ±     114,856  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100,009 ±       0,126    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       809,263 ±    1160,726  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     18295,415 ±   25517,304    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,021 ±       0,139  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,464 ±       3,095    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6,000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         3,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     96313,112 ±    1111,189   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       629,572 ±       7,273  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10288,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       538,996 ±    1160,235  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      8808,832 ±   18962,434    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,663 ±       5,532  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        10,891 ±      90,864    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4,000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         3,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5     98371,019 ±   20037,956   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5         6,501 ±       1,324  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       104,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    434097,379 ±    6575,290   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2325,467 ±      35,531  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8432,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2297,937 ±    1426,686  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      8331,090 ±    5136,682    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±       0,057  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,151 ±       0,205    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        17,000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    478375,653 ±    7971,123   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       571,488 ±       9,417  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1880,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       672,068 ±       2,421  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2210,910 ±      39,175    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,058 ±       0,382  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,192 ±       1,259    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         2,000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1345483,437 ±    9215,278   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       704,338 ±       4,787  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       673,367 ±       5,019  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       787,771 ±       9,183    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,647 ±       5,346  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,759 ±       6,274    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    125398,259 ±    2903,114   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      4355,326 ±     101,496  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54664,003 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      4357,661 ±    1441,060  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     54677,703 ±   17110,278    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,071 ±       0,091  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,888 ±       1,141    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        32,000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        13,000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    642712,523 ±   99587,739   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1875,139 ±     290,638  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1888,326 ±    1161,597  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4605,481 ±    2253,050    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,062 ±       0,113  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,154 ±       0,288    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    440700,931 ±   10808,955   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       701,123 ±      17,268  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2504,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,000 ±       6,285  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      2403,620 ±      45,580    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,686 ±       5,687  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,443 ±      20,237    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    818394,922 ±    8731,941   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       623,956 ±       6,719  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       674,851 ±       1,598  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1297,891 ±      16,553    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,071 ±       0,480  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,136 ±       0,921    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   2245244,149 ±  249009,801   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1038,535 ±     115,106  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       941,108 ±    1417,438  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       657,818 ±     962,630    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,113  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,014 ±       0,079    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   2358136,499 ±   13968,758   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    413226,822 ±   39958,258   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       611,165 ±      59,220  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       537,613 ±    1157,262  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2057,070 ±    4433,832    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,775 ±       6,585  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,923 ±      24,837    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    197829,920 ±    1427,865   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       512,807 ±       3,742  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      4080,002 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       506,709 ±    1123,886  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4034,174 ±    8945,655    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,641 ±       5,337  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5,097 ±      42,463    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] Benchmark result is saved to oraclejdk11.json
[success] Total time: 8097 s, completed 12 лип. 2018 6:44:13
