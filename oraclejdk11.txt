[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 6 лип. 2018 8:20:36
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:8:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]     private static final sun.misc.Unsafe UNSAFE;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:13:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]         sun.misc.Unsafe u = null;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:16:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             Field f = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:18:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             u = (sun.misc.Unsafe) f.get(null);
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.28.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d5(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d12(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d15(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e12(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new scala.collection.mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:40:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:47:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 63 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/oraclejdk-11/bin/java -prof gc -rf json -rff oraclejdk11.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437885,453 ops/s
[info] # Warmup Iteration   2: 815172,876 ops/s
[info] # Warmup Iteration   3: 816197,718 ops/s
[info] # Warmup Iteration   4: 827621,219 ops/s
[info] # Warmup Iteration   5: 828450,995 ops/s
[info] Iteration   1: 827423,083 ops/s
[info]                  ·gc.alloc.rate:                   2174,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3836,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 828636,431 ops/s
[info]                  ·gc.alloc.rate:                   2177,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3836,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 827973,650 ops/s
[info]                  ·gc.alloc.rate:                   2175,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3847,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 820134,860 ops/s
[info]                  ·gc.alloc.rate:                   2155,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5187,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 826376,368 ops/s
[info]                  ·gc.alloc.rate:                   2171,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3867,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   826108,879 ±(99.9%) 13248,885 ops/s [Average]
[info]   (min, avg, max) = (820134,860, 826108,879, 828636,431), stdev = 3440,693
[info]   CI (99.9%): [812859,993, 839357,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2170,869 ±(99.9%) 34,427 MB/sec [Average]
[info]   (min, avg, max) = (2155,409, 2170,869, 2177,695), stdev = 8,941
[info]   CI (99.9%): [2136,441, 2205,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4136,000, 4136,001, 4136,001), stdev = 0,001
[info]   CI (99.9%): [4136,000, 4136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2158,803 ±(99.9%) 1172,079 MB/sec [Average]
[info]   (min, avg, max) = (2016,681, 2158,803, 2703,227), stdev = 304,385
[info]   CI (99.9%): [986,724, 3330,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4114,930 ±(99.9%) 2308,666 B/op [Average]
[info]   (min, avg, max) = (3836,266, 4114,930, 5187,205), stdev = 599,553
[info]   CI (99.9%): [1806,264, 6423,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,111 ±(99.9%) 0,128 B/op [Average]
[info]   (min, avg, max) = (0,079, 0,111, 0,158), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0,20% complete, ETA 02:11:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 736758,959 ops/s
[info] # Warmup Iteration   2: 1848492,704 ops/s
[info] # Warmup Iteration   3: 1863446,428 ops/s
[info] # Warmup Iteration   4: 1864432,958 ops/s
[info] # Warmup Iteration   5: 1861936,424 ops/s
[info] Iteration   1: 1865353,077 ops/s
[info]                  ·gc.alloc.rate:                   1242,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1860357,937 ops/s
[info]                  ·gc.alloc.rate:                   1238,819 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1144,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1867518,292 ops/s
[info]                  ·gc.alloc.rate:               1243,467 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 570,338 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1867079,769 ops/s
[info]                  ·gc.alloc.rate:                   1243,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1141,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1866367,534 ops/s
[info]                  ·gc.alloc.rate:               1242,640 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1142,514 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1865335,322 ±(99.9%) 11168,294 ops/s [Average]
[info]   (min, avg, max) = (1860357,937, 1865335,322, 1867518,292), stdev = 2900,370
[info]   CI (99.9%): [1854167,028, 1876503,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1242,077 ±(99.9%) 7,298 MB/sec [Average]
[info]   (min, avg, max) = (1238,819, 1242,077, 1243,467), stdev = 1,895
[info]   CI (99.9%): [1234,779, 1249,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,739 ±(99.9%) 1164,610 MB/sec [Average]
[info]   (min, avg, max) = (676,714, 1217,739, 1354,707), stdev = 302,445
[info]   CI (99.9%): [53,129, 2382,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1027,594 ±(99.9%) 984,296 B/op [Average]
[info]   (min, avg, max) = (570,338, 1027,594, 1144,033), stdev = 255,619
[info]   CI (99.9%): [43,297, 2011,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,053), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0,40% complete, ETA 02:11:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3417868,937 ops/s
[info] # Warmup Iteration   2: 4081423,608 ops/s
[info] # Warmup Iteration   3: 4153805,133 ops/s
[info] # Warmup Iteration   4: 4142363,455 ops/s
[info] # Warmup Iteration   5: 4154318,926 ops/s
[info] Iteration   1: 4133409,594 ops/s
[info]                  ·gc.alloc.rate:               273,115 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194,785 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 4160094,960 ops/s
[info]                  ·gc.alloc.rate:      274,917 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4142175,046 ops/s
[info]                  ·gc.alloc.rate:                   273,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4148199,564 ops/s
[info]                  ·gc.alloc.rate:      274,116 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4131866,124 ops/s
[info]                  ·gc.alloc.rate:                   272,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4143149,058 ±(99.9%) 44565,347 ops/s [Average]
[info]   (min, avg, max) = (4131866,124, 4143149,058, 4160094,960), stdev = 11573,479
[info]   CI (99.9%): [4098583,711, 4187714,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   273,765 ±(99.9%) 3,038 MB/sec [Average]
[info]   (min, avg, max) = (272,981, 273,765, 274,917), stdev = 0,789
[info]   CI (99.9%): [270,727, 276,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,904 ±(99.9%) 1078,811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,904, 511,530), stdev = 280,164
[info]   CI (99.9%): [≈ 0, 1385,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   116,803 ±(99.9%) 410,579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116,803, 194,857), stdev = 106,626
[info]   CI (99.9%): [≈ 0, 527,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0,60% complete, ETA 02:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63552,470 ops/s
[info] # Warmup Iteration   2: 192713,110 ops/s
[info] # Warmup Iteration   3: 193142,050 ops/s
[info] # Warmup Iteration   4: 194014,754 ops/s
[info] # Warmup Iteration   5: 191984,309 ops/s
[info] Iteration   1: 193696,942 ops/s
[info]                  ·gc.alloc.rate:                   1617,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16485,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,338 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 193604,418 ops/s
[info]                  ·gc.alloc.rate:                   1617,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11006,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,677 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 193853,010 ops/s
[info]                  ·gc.alloc.rate:               1618,848 MB/sec
[info]                  ·gc.alloc.rate.norm:          13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10999,957 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 193428,857 ops/s
[info]                  ·gc.alloc.rate:                   1615,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16550,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,339 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 193716,613 ops/s
[info]                  ·gc.alloc.rate:                   1617,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11029,667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   193659,968 ±(99.9%) 603,762 ops/s [Average]
[info]   (min, avg, max) = (193428,857, 193659,968, 193853,010), stdev = 156,795
[info]   CI (99.9%): [193056,205, 194263,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1617,356 ±(99.9%) 4,552 MB/sec [Average]
[info]   (min, avg, max) = (1615,590, 1617,356, 1618,848), stdev = 1,182
[info]   CI (99.9%): [1612,804, 1621,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13144,002, 13144,002, 13144,002), stdev = 0,001
[info]   CI (99.9%): [13144,002, 13144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1625,892 ±(99.9%) 1425,965 MB/sec [Average]
[info]   (min, avg, max) = (1354,106, 1625,892, 2034,277), stdev = 370,319
[info]   CI (99.9%): [199,926, 3051,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13214,430 ±(99.9%) 11612,889 B/op [Average]
[info]   (min, avg, max) = (10999,957, 13214,430, 16550,330), stdev = 3015,830
[info]   CI (99.9%): [1601,541, 24827,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,305 ±(99.9%) 0,967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,305, 0,677), stdev = 0,251
[info]   CI (99.9%): [≈ 0, 1,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0,80% complete, ETA 02:10:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284631,310 ops/s
[info] # Warmup Iteration   2: 628422,453 ops/s
[info] # Warmup Iteration   3: 626091,569 ops/s
[info] # Warmup Iteration   4: 631019,731 ops/s
[info] # Warmup Iteration   5: 633311,818 ops/s
[info] Iteration   1: 632048,262 ops/s
[info]                  ·gc.alloc.rate:                   1969,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              4904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5017,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 634811,257 ops/s
[info]                  ·gc.alloc.rate:                   1978,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              4904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5002,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 634391,499 ops/s
[info]                  ·gc.alloc.rate:                   1976,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              4904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5014,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 632787,570 ops/s
[info]                  ·gc.alloc.rate:                   1971,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              4904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5035,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 634564,322 ops/s
[info]                  ·gc.alloc.rate:                   1976,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              4904,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5029,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   633720,582 ±(99.9%) 4723,426 ops/s [Average]
[info]   (min, avg, max) = (632048,262, 633720,582, 634811,257), stdev = 1226,659
[info]   CI (99.9%): [628997,156, 638444,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1974,501 ±(99.9%) 14,441 MB/sec [Average]
[info]   (min, avg, max) = (1969,344, 1974,501, 1978,209), stdev = 3,750
[info]   CI (99.9%): [1960,060, 1988,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4904,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4904,001, 4904,001, 4904,001), stdev = 0,001
[info]   CI (99.9%): [4904,001, 4904,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2021,171 ±(99.9%) 19,377 MB/sec [Average]
[info]   (min, avg, max) = (2014,824, 2021,171, 2027,352), stdev = 5,032
[info]   CI (99.9%): [2001,794, 2040,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5019,924 ±(99.9%) 50,294 B/op [Average]
[info]   (min, avg, max) = (5002,499, 5019,924, 5035,536), stdev = 13,061
[info]   CI (99.9%): [4969,630, 5070,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,124 ±(99.9%) 0,178 B/op [Average]
[info]   (min, avg, max) = (0,052, 0,124, 0,155), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1,00% complete, ETA 02:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e724a5b0/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1064024,593 ops/s
[info] # Warmup Iteration   2: 2339151,080 ops/s
[info] # Warmup Iteration   3: 2343440,254 ops/s
[info] # Warmup Iteration   4: 2322932,245 ops/s
[info] # Warmup Iteration   5: 2357525,766 ops/s
[info] Iteration   1: 2352338,955 ops/s
[info]                  ·gc.alloc.rate:                   836,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     902,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2361243,226 ops/s
[info]                  ·gc.alloc.rate:               840,244 MB/sec
[info]                  ·gc.alloc.rate.norm:          560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449,783 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2359384,086 ops/s
[info]                  ·gc.alloc.rate:               839,471 MB/sec
[info]                  ·gc.alloc.rate.norm:          560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 450,550 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2364367,899 ops/s
[info]                  ·gc.alloc.rate:               841,287 MB/sec
[info]                  ·gc.alloc.rate.norm:          560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449,613 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2356369,651 ops/s
[info]                  ·gc.alloc.rate:                   838,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     902,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2358740,763 ±(99.9%) 17744,969 ops/s [Average]
[info]   (min, avg, max) = (2352338,955, 2358740,763, 2364367,899), stdev = 4608,312
[info]   CI (99.9%): [2340995,794, 2376485,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   839,236 ±(99.9%) 6,512 MB/sec [Average]
[info]   (min, avg, max) = (836,981, 839,236, 841,287), stdev = 1,691
[info]   CI (99.9%): [832,724, 845,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   560,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (560,000, 560,000, 560,000), stdev = 0,001
[info]   CI (99.9%): [560,000, 560,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   945,143 ±(99.9%) 1423,119 MB/sec [Average]
[info]   (min, avg, max) = (674,870, 945,143, 1351,186), stdev = 369,579
[info]   CI (99.9%): [≈ 0, 2368,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   631,024 ±(99.9%) 954,583 B/op [Average]
[info]   (min, avg, max) = (449,613, 631,024, 902,727), stdev = 247,902
[info]   CI (99.9%): [≈ 0, 1585,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,042), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1,20% complete, ETA 02:10:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12156792,233 ops/s
[info] # Warmup Iteration   2: 15644919,684 ops/s
[info] # Warmup Iteration   3: 16572043,420 ops/s
[info] # Warmup Iteration   4: 16589758,192 ops/s
[info] # Warmup Iteration   5: 16534109,480 ops/s
[info] Iteration   1: 16247706,430 ops/s
[info]                  ·gc.alloc.rate:                   825,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16240954,230 ops/s
[info]                  ·gc.alloc.rate:                   825,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65,200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 16685129,074 ops/s
[info]                  ·gc.alloc.rate:                   848,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 16676421,308 ops/s
[info]                  ·gc.alloc.rate:               847,663 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63,431 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 16675342,099 ops/s
[info]                  ·gc.alloc.rate:               847,845 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63,432 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   16505110,628 ±(99.9%) 916842,014 ops/s [Average]
[info]   (min, avg, max) = (16240954,230, 16505110,628, 16685129,074), stdev = 238100,960
[info]   CI (99.9%): [15588268,614, 17421952,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   839,015 ±(99.9%) 46,729 MB/sec [Average]
[info]   (min, avg, max) = (825,611, 839,015, 848,121), stdev = 12,135
[info]   CI (99.9%): [792,286, 885,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,366 ±(99.9%) 1157,028 MB/sec [Average]
[info]   (min, avg, max) = (672,106, 807,366, 1344,871), stdev = 300,477
[info]   CI (99.9%): [≈ 0, 1964,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   76,856 ±(99.9%) 107,689 B/op [Average]
[info]   (min, avg, max) = (63,431, 76,856, 126,857), stdev = 27,966
[info]   CI (99.9%): [≈ 0, 184,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1,41% complete, ETA 02:09:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4507476,026 ops/s
[info] # Warmup Iteration   2: 17218375,698 ops/s
[info] # Warmup Iteration   3: 18755117,859 ops/s
[info] # Warmup Iteration   4: 18770689,115 ops/s
[info] # Warmup Iteration   5: 18771002,255 ops/s
[info] Iteration   1: 18774652,815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18774307,597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18757468,031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18739116,746 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18754648,957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   18760038,829 ±(99.9%) 57455,930 ops/s [Average]
[info]   (min, avg, max) = (18739116,746, 18760038,829, 18774652,815), stdev = 14921,123
[info]   CI (99.9%): [18702582,899, 18817494,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1,61% complete, ETA 02:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109741,038 ops/s
[info] # Warmup Iteration   2: 352513,511 ops/s
[info] # Warmup Iteration   3: 356589,652 ops/s
[info] # Warmup Iteration   4: 356652,210 ops/s
[info] # Warmup Iteration   5: 354271,784 ops/s
[info] Iteration   1: 354176,238 ops/s
[info]                  ·gc.alloc.rate:               1141,323 MB/sec
[info]                  ·gc.alloc.rate.norm:          5072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6000,371 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 353966,169 ops/s
[info]                  ·gc.alloc.rate:                   1140,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              5072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6009,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 355076,343 ops/s
[info]                  ·gc.alloc.rate:               1144,260 MB/sec
[info]                  ·gc.alloc.rate.norm:          5072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2996,817 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 353414,822 ops/s
[info]                  ·gc.alloc.rate:               1138,991 MB/sec
[info]                  ·gc.alloc.rate.norm:          5072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6027,509 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 352321,811 ops/s
[info]                  ·gc.alloc.rate:                   1135,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              5072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6049,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,279 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   353791,077 ±(99.9%) 3913,297 ops/s [Average]
[info]   (min, avg, max) = (352321,811, 353791,077, 355076,343), stdev = 1016,271
[info]   CI (99.9%): [349877,780, 357704,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1140,128 ±(99.9%) 12,651 MB/sec [Average]
[info]   (min, avg, max) = (1135,330, 1140,128, 1144,260), stdev = 3,285
[info]   CI (99.9%): [1127,477, 1152,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5072,001, 5072,001, 5072,001), stdev = 0,001
[info]   CI (99.9%): [5072,001, 5072,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1217,139 ±(99.9%) 1164,660 MB/sec [Average]
[info]   (min, avg, max) = (676,091, 1217,139, 1354,130), stdev = 302,459
[info]   CI (99.9%): [52,478, 2381,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5416,815 ±(99.9%) 5209,725 B/op [Average]
[info]   (min, avg, max) = (2996,817, 5416,815, 6049,471), stdev = 1352,949
[info]   CI (99.9%): [207,090, 10626,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,074 ±(99.9%) 0,467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,074, 0,279), stdev = 0,121
[info]   CI (99.9%): [≈ 0, 0,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1,81% complete, ETA 02:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1185299,183 ops/s
[info] # Warmup Iteration   2: 1776107,045 ops/s
[info] # Warmup Iteration   3: 1833371,299 ops/s
[info] # Warmup Iteration   4: 1834998,586 ops/s
[info] # Warmup Iteration   5: 1831200,834 ops/s
[info] Iteration   1: 1826799,365 ops/s
[info]                  ·gc.alloc.rate:                   2822,830 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2324,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1839959,597 ops/s
[info]                  ·gc.alloc.rate:                   2843,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2313,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1836885,630 ops/s
[info]                  ·gc.alloc.rate:                   2837,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2321,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1833317,613 ops/s
[info]                  ·gc.alloc.rate:                   2832,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2329,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1828013,247 ops/s
[info]                  ·gc.alloc.rate:                   2823,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2339,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1832995,090 ±(99.9%) 21693,043 ops/s [Average]
[info]   (min, avg, max) = (1826799,365, 1832995,090, 1839959,597), stdev = 5633,614
[info]   CI (99.9%): [1811302,047, 1854688,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2832,021 ±(99.9%) 34,236 MB/sec [Average]
[info]   (min, avg, max) = (2822,830, 2832,021, 2843,034), stdev = 8,891
[info]   CI (99.9%): [2797,785, 2866,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2432,000, 2432,000, 2432,000), stdev = 0,001
[info]   CI (99.9%): [2432,000, 2432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2708,208 ±(99.9%) 27,685 MB/sec [Average]
[info]   (min, avg, max) = (2697,991, 2708,208, 2715,711), stdev = 7,190
[info]   CI (99.9%): [2680,523, 2735,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2325,695 ±(99.9%) 36,956 B/op [Average]
[info]   (min, avg, max) = (2313,415, 2325,695, 2339,252), stdev = 9,597
[info]   CI (99.9%): [2288,739, 2362,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,046 ±(99.9%) 0,079 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,046, 0,072), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2,01% complete, ETA 02:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1327095,513 ops/s
[info] # Warmup Iteration   2: 11178228,056 ops/s
[info] # Warmup Iteration   3: 11191936,028 ops/s
[info] # Warmup Iteration   4: 11558238,031 ops/s
[info] # Warmup Iteration   5: 11648234,652 ops/s
[info] Iteration   1: 11574781,932 ops/s
[info]                  ·gc.alloc.rate:                   1412,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11612202,759 ops/s
[info]                  ·gc.alloc.rate:                   1416,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11636317,375 ops/s
[info]                  ·gc.alloc.rate:                   1419,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11655485,185 ops/s
[info]                  ·gc.alloc.rate:                   1421,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10679426,131 ops/s
[info]                  ·gc.alloc.rate:                   1302,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11431642,676 ±(99.9%) 1623353,253 ops/s [Average]
[info]   (min, avg, max) = (10679426,131, 11431642,676, 11655485,185), stdev = 421579,685
[info]   CI (99.9%): [9808289,424, 13054995,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1394,560 ±(99.9%) 197,795 MB/sec [Average]
[info]   (min, avg, max) = (1302,906, 1394,560, 1421,942), stdev = 51,367
[info]   CI (99.9%): [1196,765, 1592,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,000, 192,000, 192,000), stdev = 0,001
[info]   CI (99.9%): [192,000, 192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1480,270 ±(99.9%) 1154,446 MB/sec [Average]
[info]   (min, avg, max) = (1344,199, 1480,270, 2016,572), stdev = 299,806
[info]   CI (99.9%): [325,823, 2634,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   203,730 ±(99.9%) 152,305 B/op [Average]
[info]   (min, avg, max) = (181,875, 203,730, 273,321), stdev = 39,553
[info]   CI (99.9%): [51,425, 356,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,146), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,011, 0,020), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2,21% complete, ETA 02:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1486061,200 ops/s
[info] # Warmup Iteration   2: 3007161,917 ops/s
[info] # Warmup Iteration   3: 3034070,189 ops/s
[info] # Warmup Iteration   4: 3015761,243 ops/s
[info] # Warmup Iteration   5: 3026006,908 ops/s
[info] Iteration   1: 2998327,968 ops/s
[info]                  ·gc.alloc.rate:                   1966,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1066,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3028185,382 ops/s
[info]                  ·gc.alloc.rate:                   1985,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3021493,888 ops/s
[info]                  ·gc.alloc.rate:                   1980,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3014508,866 ops/s
[info]                  ·gc.alloc.rate:                   1976,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1063,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 3023400,658 ops/s
[info]                  ·gc.alloc.rate:                   1982,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1061,374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3017183,352 ±(99.9%) 44780,134 ops/s [Average]
[info]   (min, avg, max) = (2998327,968, 3017183,352, 3028185,382), stdev = 11629,259
[info]   CI (99.9%): [2972403,218, 3061963,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1978,348 ±(99.9%) 28,954 MB/sec [Average]
[info]   (min, avg, max) = (1966,181, 1978,348, 1985,709), stdev = 7,519
[info]   CI (99.9%): [1949,394, 2007,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1032,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1032,000, 1032,000, 1032,000), stdev = 0,001
[info]   CI (99.9%): [1032,000, 1032,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2035,493 ±(99.9%) 10,480 MB/sec [Average]
[info]   (min, avg, max) = (2031,979, 2035,493, 2038,582), stdev = 2,722
[info]   CI (99.9%): [2025,013, 2045,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1061,820 ±(99.9%) 13,865 B/op [Average]
[info]   (min, avg, max) = (1056,996, 1061,820, 1066,536), stdev = 3,601
[info]   CI (99.9%): [1047,955, 1075,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,048 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,028, 0,044), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2,41% complete, ETA 02:08:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10552700,301 ops/s
[info] # Warmup Iteration   2: 12122004,396 ops/s
[info] # Warmup Iteration   3: 12420130,339 ops/s
[info] # Warmup Iteration   4: 12473773,522 ops/s
[info] # Warmup Iteration   5: 12437088,345 ops/s
[info] Iteration   1: 12451170,356 ops/s
[info]                  ·gc.alloc.rate:                   1582,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12473204,086 ops/s
[info]                  ·gc.alloc.rate:               1584,986 MB/sec
[info]                  ·gc.alloc.rate.norm:          200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169,731 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 12294656,825 ops/s
[info]                  ·gc.alloc.rate:                   1562,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12423534,597 ops/s
[info]                  ·gc.alloc.rate:                   1578,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12448100,962 ops/s
[info]                  ·gc.alloc.rate:                   1581,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   12418133,365 ±(99.9%) 274302,055 ops/s [Average]
[info]   (min, avg, max) = (12294656,825, 12418133,365, 12473204,086), stdev = 71235,373
[info]   CI (99.9%): [12143831,310, 12692435,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1577,965 ±(99.9%) 34,884 MB/sec [Average]
[info]   (min, avg, max) = (1562,247, 1577,965, 1584,986), stdev = 9,059
[info]   CI (99.9%): [1543,081, 1612,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1615,862 ±(99.9%) 1417,262 MB/sec [Average]
[info]   (min, avg, max) = (1345,104, 1615,862, 2021,633), stdev = 368,058
[info]   CI (99.9%): [198,600, 3033,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   204,754 ±(99.9%) 178,427 B/op [Average]
[info]   (min, avg, max) = (169,731, 204,754, 256,103), stdev = 46,337
[info]   CI (99.9%): [26,328, 383,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2,61% complete, ETA 02:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284610,773 ops/s
[info] # Warmup Iteration   2: 729681,340 ops/s
[info] # Warmup Iteration   3: 731055,388 ops/s
[info] # Warmup Iteration   4: 732272,796 ops/s
[info] # Warmup Iteration   5: 728359,530 ops/s
[info] Iteration   1: 729092,115 ops/s
[info]                  ·gc.alloc.rate:                   1908,595 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4383,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,135 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 721314,573 ops/s
[info]                  ·gc.alloc.rate:                   1888,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4435,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 719440,307 ops/s
[info]                  ·gc.alloc.rate:                   1883,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4451,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 711920,089 ops/s
[info]                  ·gc.alloc.rate:                   1863,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3001,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 719996,799 ops/s
[info]                  ·gc.alloc.rate:                   1884,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4454,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   720352,777 ±(99.9%) 23530,760 ops/s [Average]
[info]   (min, avg, max) = (711920,089, 720352,777, 729092,115), stdev = 6110,864
[info]   CI (99.9%): [696822,017, 743883,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1885,728 ±(99.9%) 61,509 MB/sec [Average]
[info]   (min, avg, max) = (1863,750, 1885,728, 1908,595), stdev = 15,974
[info]   CI (99.9%): [1824,219, 1947,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4120,001, 4120,001, 4120,001), stdev = 0,001
[info]   CI (99.9%): [4120,000, 4120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,822 ±(99.9%) 1164,329 MB/sec [Average]
[info]   (min, avg, max) = (1357,943, 1898,822, 2037,788), stdev = 302,372
[info]   CI (99.9%): [734,494, 3063,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4145,401 ±(99.9%) 2464,020 B/op [Average]
[info]   (min, avg, max) = (3001,864, 4145,401, 4454,748), stdev = 639,898
[info]   CI (99.9%): [1681,381, 6609,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,082 ±(99.9%) 0,144 B/op [Average]
[info]   (min, avg, max) = (0,046, 0,082, 0,135), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2,81% complete, ETA 02:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1465572,233 ops/s
[info] # Warmup Iteration   2: 2233786,957 ops/s
[info] # Warmup Iteration   3: 2271585,753 ops/s
[info] # Warmup Iteration   4: 2289509,175 ops/s
[info] # Warmup Iteration   5: 2273315,607 ops/s
[info] Iteration   1: 2283872,235 ops/s
[info]                  ·gc.alloc.rate:                   1927,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1388,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2289893,251 ops/s
[info]                  ·gc.alloc.rate:                   1932,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1386,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2290018,149 ops/s
[info]                  ·gc.alloc.rate:                   1932,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1389,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2279417,964 ops/s
[info]                  ·gc.alloc.rate:                   1923,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1397,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2259999,944 ops/s
[info]                  ·gc.alloc.rate:                   1907,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1412,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2280640,309 ±(99.9%) 47611,346 ops/s [Average]
[info]   (min, avg, max) = (2259999,944, 2280640,309, 2290018,149), stdev = 12364,515
[info]   CI (99.9%): [2233028,963, 2328251,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1924,371 ±(99.9%) 39,846 MB/sec [Average]
[info]   (min, avg, max) = (1907,049, 1924,371, 1932,120), stdev = 10,348
[info]   CI (99.9%): [1884,525, 1964,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1328,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1328,000, 1328,000, 1328,000), stdev = 0,001
[info]   CI (99.9%): [1328,000, 1328,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2021,360 ±(99.9%) 19,938 MB/sec [Average]
[info]   (min, avg, max) = (2015,199, 2021,360, 2028,008), stdev = 5,178
[info]   CI (99.9%): [2001,422, 2041,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1394,976 ±(99.9%) 40,643 B/op [Average]
[info]   (min, avg, max) = (1386,790, 1394,976, 1412,232), stdev = 10,555
[info]   CI (99.9%): [1354,333, 1435,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,029 ±(99.9%) 0,056 B/op [Average]
[info]   (min, avg, max) = (0,014, 0,029, 0,043), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3,01% complete, ETA 02:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1952722,768 ops/s
[info] # Warmup Iteration   2: 19513021,857 ops/s
[info] # Warmup Iteration   3: 20630947,254 ops/s
[info] # Warmup Iteration   4: 21028890,703 ops/s
[info] # Warmup Iteration   5: 21038365,414 ops/s
[info] Iteration   1: 20944969,652 ops/s
[info]                  ·gc.alloc.rate:                   638,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,198 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 21196949,149 ops/s
[info]                  ·gc.alloc.rate:               646,393 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50,055 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 21206895,889 ops/s
[info]                  ·gc.alloc.rate:               646,833 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49,934 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 21185945,249 ops/s
[info]                  ·gc.alloc.rate:               646,130 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49,980 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 21251777,363 ops/s
[info]                  ·gc.alloc.rate:      647,983 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   21157307,460 ±(99.9%) 467113,844 ops/s [Average]
[info]   (min, avg, max) = (20944969,652, 21157307,460, 21251777,363), stdev = 121307,982
[info]   CI (99.9%): [20690193,616, 21624421,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   645,224 ±(99.9%) 14,134 MB/sec [Average]
[info]   (min, avg, max) = (638,782, 645,224, 647,983), stdev = 3,670
[info]   CI (99.9%): [631,090, 659,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,765 ±(99.9%) 1159,735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,765, 674,079), stdev = 301,179
[info]   CI (99.9%): [≈ 0, 1698,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   40,124 ±(99.9%) 86,378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40,124, 50,652), stdev = 22,432
[info]   CI (99.9%): [≈ 0, 126,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,526 ±(99.9%) 4,532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,526, 2,632), stdev = 1,177
[info]   CI (99.9%): [≈ 0, 5,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,040 ±(99.9%) 0,341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,040, 0,198), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3,21% complete, ETA 02:07:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e724a5b0/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3246284,744 ops/s
[info] # Warmup Iteration   2: 6623855,573 ops/s
[info] # Warmup Iteration   3: 6707399,003 ops/s
[info] # Warmup Iteration   4: 6573693,652 ops/s
[info] # Warmup Iteration   5: 6563488,738 ops/s
[info] Iteration   1: 6596890,611 ops/s
[info]                  ·gc.alloc.rate:                   1810,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6626849,603 ops/s
[info]                  ·gc.alloc.rate:                   1818,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6606328,880 ops/s
[info]                  ·gc.alloc.rate:                   1813,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6636672,687 ops/s
[info]                  ·gc.alloc.rate:                   1821,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6644272,763 ops/s
[info]                  ·gc.alloc.rate:                   1823,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6622202,908 ±(99.9%) 77270,967 ops/s [Average]
[info]   (min, avg, max) = (6596890,611, 6622202,908, 6644272,763), stdev = 20067,025
[info]   CI (99.9%): [6544931,941, 6699473,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1817,651 ±(99.9%) 21,130 MB/sec [Average]
[info]   (min, avg, max) = (1810,703, 1817,651, 1823,511), stdev = 5,487
[info]   CI (99.9%): [1796,521, 1838,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1762,155 ±(99.9%) 1428,053 MB/sec [Average]
[info]   (min, avg, max) = (1354,173, 1762,155, 2035,711), stdev = 370,861
[info]   CI (99.9%): [334,102, 3190,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   418,940 ±(99.9%) 342,097 B/op [Average]
[info]   (min, avg, max) = (321,610, 418,940, 484,481), stdev = 88,842
[info]   CI (99.9%): [76,842, 761,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,013, 0,020), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3,41% complete, ETA 02:07:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18630252,961 ops/s
[info] # Warmup Iteration   2: 26899031,400 ops/s
[info] # Warmup Iteration   3: 27075651,830 ops/s
[info] # Warmup Iteration   4: 27430631,662 ops/s
[info] # Warmup Iteration   5: 27099893,594 ops/s
[info] Iteration   1: 26340997,029 ops/s
[info]                  ·gc.alloc.rate:                   803,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 26377055,368 ops/s
[info]                  ·gc.alloc.rate:               804,492 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40,146 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 26379141,072 ops/s
[info]                  ·gc.alloc.rate:                   804,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 26282301,837 ops/s
[info]                  ·gc.alloc.rate:                   801,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26117334,904 ops/s
[info]                  ·gc.alloc.rate:               796,322 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40,503 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   26299366,042 ±(99.9%) 419876,251 ops/s [Average]
[info]   (min, avg, max) = (26117334,904, 26299366,042, 26379141,072), stdev = 109040,529
[info]   CI (99.9%): [25879489,791, 26719242,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   802,031 ±(99.9%) 13,115 MB/sec [Average]
[info]   (min, avg, max) = (796,322, 802,031, 804,492), stdev = 3,406
[info]   CI (99.9%): [788,917, 815,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,286 ±(99.9%) 1155,800 MB/sec [Average]
[info]   (min, avg, max) = (671,948, 807,286, 1344,221), stdev = 300,158
[info]   CI (99.9%): [≈ 0, 1963,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48,320 ±(99.9%) 69,262 B/op [Average]
[info]   (min, avg, max) = (40,139, 48,320, 80,495), stdev = 17,987
[info]   CI (99.9%): [≈ 0, 117,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3,61% complete, ETA 02:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21158303,627 ops/s
[info] # Warmup Iteration   2: 26758468,405 ops/s
[info] # Warmup Iteration   3: 26668173,389 ops/s
[info] # Warmup Iteration   4: 26755181,425 ops/s
[info] # Warmup Iteration   5: 26684708,720 ops/s
[info] Iteration   1: 25177782,388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 26791366,636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26757323,945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26658015,164 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 26512759,861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   26379449,599 ±(99.9%) 2620022,352 ops/s [Average]
[info]   (min, avg, max) = (25177782,388, 26379449,599, 26791366,636), stdev = 680411,485
[info]   CI (99.9%): [23759427,247, 28999471,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3,82% complete, ETA 02:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 636077,066 ops/s
[info] # Warmup Iteration   2: 1447095,791 ops/s
[info] # Warmup Iteration   3: 1440200,798 ops/s
[info] # Warmup Iteration   4: 1432694,686 ops/s
[info] # Warmup Iteration   5: 1430086,951 ops/s
[info] Iteration   1: 1442801,670 ops/s
[info]                  ·gc.alloc.rate:                   2207,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2956,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1442526,885 ops/s
[info]                  ·gc.alloc.rate:                   2207,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2220,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1445976,333 ops/s
[info]                  ·gc.alloc.rate:                   2212,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2217,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1439449,833 ops/s
[info]                  ·gc.alloc.rate:                   2202,468 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2228,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1441007,406 ops/s
[info]                  ·gc.alloc.rate:                   2204,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              2408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2970,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1442352,425 ±(99.9%) 9353,000 ops/s [Average]
[info]   (min, avg, max) = (1439449,833, 1442352,425, 1445976,333), stdev = 2428,944
[info]   CI (99.9%): [1432999,426, 1451705,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2206,689 ±(99.9%) 14,181 MB/sec [Average]
[info]   (min, avg, max) = (2202,468, 2206,689, 2212,174), stdev = 3,683
[info]   CI (99.9%): [2192,508, 2220,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2408,000, 2408,000, 2408,000), stdev = 0,001
[info]   CI (99.9%): [2408,000, 2408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2308,019 ±(99.9%) 1430,268 MB/sec [Average]
[info]   (min, avg, max) = (2034,872, 2308,019, 2719,493), stdev = 371,436
[info]   CI (99.9%): [877,751, 3738,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2518,690 ±(99.9%) 1564,310 B/op [Average]
[info]   (min, avg, max) = (2217,145, 2518,690, 2970,785), stdev = 406,246
[info]   CI (99.9%): [954,380, 4083,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,077 ±(99.9%) 0,133 B/op [Average]
[info]   (min, avg, max) = (0,046, 0,077, 0,136), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4,02% complete, ETA 02:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358623,182 ops/s
[info] # Warmup Iteration   2: 409175,922 ops/s
[info] # Warmup Iteration   3: 409954,089 ops/s
[info] # Warmup Iteration   4: 411426,503 ops/s
[info] # Warmup Iteration   5: 411754,976 ops/s
[info] Iteration   1: 410062,131 ops/s
[info]                  ·gc.alloc.rate:                   2257,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10338,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 411287,909 ops/s
[info]                  ·gc.alloc.rate:                   2264,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7744,250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,319 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 412378,479 ops/s
[info]                  ·gc.alloc.rate:                   2269,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10316,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 412089,738 ops/s
[info]                  ·gc.alloc.rate:               2268,613 MB/sec
[info]                  ·gc.alloc.rate.norm:          8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2030,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7756,489 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 410158,366 ops/s
[info]                  ·gc.alloc.rate:                   2257,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7803,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   411195,325 ±(99.9%) 4114,883 ops/s [Average]
[info]   (min, avg, max) = (410062,131, 411195,325, 412378,479), stdev = 1068,622
[info]   CI (99.9%): [407080,442, 415310,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2263,548 ±(99.9%) 23,035 MB/sec [Average]
[info]   (min, avg, max) = (2257,289, 2263,548, 2269,986), stdev = 5,982
[info]   CI (99.9%): [2240,513, 2286,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8664,001, 8664,001, 8664,001), stdev = 0,001
[info]   CI (99.9%): [8664,001, 8664,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296,920 ±(99.9%) 1410,738 MB/sec [Average]
[info]   (min, avg, max) = (2023,950, 2296,920, 2702,858), stdev = 366,364
[info]   CI (99.9%): [886,183, 3707,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8791,735 ±(99.9%) 5398,746 B/op [Average]
[info]   (min, avg, max) = (7744,250, 8791,735, 10338,581), stdev = 1402,037
[info]   CI (99.9%): [3392,988, 14190,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,159 ±(99.9%) 0,484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,159, 0,319), stdev = 0,126
[info]   CI (99.9%): [≈ 0, 0,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,22% complete, ETA 02:06:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312340,928 ops/s
[info] # Warmup Iteration   2: 521693,212 ops/s
[info] # Warmup Iteration   3: 524526,070 ops/s
[info] # Warmup Iteration   4: 521346,583 ops/s
[info] # Warmup Iteration   5: 522722,410 ops/s
[info] Iteration   1: 522769,786 ops/s
[info]                  ·gc.alloc.rate:                   698,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2030,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 526149,723 ops/s
[info]                  ·gc.alloc.rate:               703,377 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2019,566 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 525031,055 ops/s
[info]                  ·gc.alloc.rate:               701,879 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2023,812 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 524609,417 ops/s
[info]                  ·gc.alloc.rate:                   701,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2026,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 523747,651 ops/s
[info]                  ·gc.alloc.rate:               700,080 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2029,692 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   524461,526 ±(99.9%) 4934,179 ops/s [Average]
[info]   (min, avg, max) = (522769,786, 524461,526, 526149,723), stdev = 1281,391
[info]   CI (99.9%): [519527,347, 529395,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   701,118 ±(99.9%) 6,618 MB/sec [Average]
[info]   (min, avg, max) = (698,884, 701,118, 703,377), stdev = 1,719
[info]   CI (99.9%): [694,500, 707,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2104,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2104,001, 2104,001, 2104,001), stdev = 0,001
[info]   CI (99.9%): [2104,001, 2104,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,120 ±(99.9%) 1,552 MB/sec [Average]
[info]   (min, avg, max) = (674,455, 675,120, 675,510), stdev = 0,403
[info]   CI (99.9%): [673,568, 676,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2025,991 ±(99.9%) 17,206 B/op [Average]
[info]   (min, avg, max) = (2019,566, 2025,991, 2030,457), stdev = 4,468
[info]   CI (99.9%): [2008,785, 2043,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,063), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,42% complete, ETA 02:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270351,277 ops/s
[info] # Warmup Iteration   2: 1322019,025 ops/s
[info] # Warmup Iteration   3: 1331362,740 ops/s
[info] # Warmup Iteration   4: 1339632,873 ops/s
[info] # Warmup Iteration   5: 1336428,092 ops/s
[info] Iteration   1: 1341522,081 ops/s
[info]                  ·gc.alloc.rate:               893,282 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 789,324 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1342540,637 ops/s
[info]                  ·gc.alloc.rate:               894,000 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 788,721 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1338541,971 ops/s
[info]                  ·gc.alloc.rate:                   891,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1580,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1326078,526 ops/s
[info]                  ·gc.alloc.rate:               883,079 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 797,718 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1340550,937 ops/s
[info]                  ·gc.alloc.rate:                   892,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     789,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1337846,830 ±(99.9%) 25961,714 ops/s [Average]
[info]   (min, avg, max) = (1326078,526, 1337846,830, 1342540,637), stdev = 6742,175
[info]   CI (99.9%): [1311885,116, 1363808,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   890,860 ±(99.9%) 17,201 MB/sec [Average]
[info]   (min, avg, max) = (883,079, 890,860, 894,000), stdev = 4,467
[info]   CI (99.9%): [873,659, 908,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,818 ±(99.9%) 1156,653 MB/sec [Average]
[info]   (min, avg, max) = (672,139, 806,818, 1344,152), stdev = 300,379
[info]   CI (99.9%): [≈ 0, 1963,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   949,084 ±(99.9%) 1359,450 B/op [Average]
[info]   (min, avg, max) = (788,721, 949,084, 1580,594), stdev = 353,045
[info]   CI (99.9%): [≈ 0, 2308,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,024 ±(99.9%) 0,163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,098), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4,62% complete, ETA 02:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89049,678 ops/s
[info] # Warmup Iteration   2: 124318,313 ops/s
[info] # Warmup Iteration   3: 124713,289 ops/s
[info] # Warmup Iteration   4: 123903,738 ops/s
[info] # Warmup Iteration   5: 125004,265 ops/s
[info] Iteration   1: 124990,535 ops/s
[info]                  ·gc.alloc.rate:                   4320,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51366,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,786 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 125149,563 ops/s
[info]                  ·gc.alloc.rate:                   4326,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4765,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59924,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,524 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 125512,794 ops/s
[info]                  ·gc.alloc.rate:                   4338,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51233,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,783 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 124531,125 ops/s
[info]                  ·gc.alloc.rate:                   4304,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51673,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,789 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 124459,744 ops/s
[info]                  ·gc.alloc.rate:                   4302,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60318,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,526 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   124928,752 ±(99.9%) 1691,389 ops/s [Average]
[info]   (min, avg, max) = (124459,744, 124928,752, 125512,794), stdev = 439,248
[info]   CI (99.9%): [123237,363, 126620,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4318,790 ±(99.9%) 58,947 MB/sec [Average]
[info]   (min, avg, max) = (4302,300, 4318,790, 4338,932), stdev = 15,308
[info]   CI (99.9%): [4259,844, 4377,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54408,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54408,003, 54408,003, 54408,004), stdev = 0,001
[info]   CI (99.9%): [54408,003, 54408,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,778 ±(99.9%) 1440,463 MB/sec [Average]
[info]   (min, avg, max) = (4079,477, 4357,778, 4769,661), stdev = 374,084
[info]   CI (99.9%): [2917,315, 5798,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54903,161 ±(99.9%) 18360,452 B/op [Average]
[info]   (min, avg, max) = (51233,165, 54903,161, 60318,368), stdev = 4768,151
[info]   CI (99.9%): [36542,708, 73263,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,682 ±(99.9%) 0,551 B/op [Average]
[info]   (min, avg, max) = (0,524, 0,682, 0,789), stdev = 0,143
[info]   CI (99.9%): [0,131, 1,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4,82% complete, ETA 02:05:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 625951,481 ops/s
[info] # Warmup Iteration   2: 685957,362 ops/s
[info] # Warmup Iteration   3: 693343,611 ops/s
[info] # Warmup Iteration   4: 695796,470 ops/s
[info] # Warmup Iteration   5: 691550,423 ops/s
[info] Iteration   1: 694428,608 ops/s
[info]                  ·gc.alloc.rate:                   2124,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4577,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 691805,148 ops/s
[info]                  ·gc.alloc.rate:                   2116,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4602,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 691925,657 ops/s
[info]                  ·gc.alloc.rate:                   2117,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4607,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 692667,574 ops/s
[info]                  ·gc.alloc.rate:                   2119,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4610,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 692320,267 ops/s
[info]                  ·gc.alloc.rate:                   2118,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4618,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   692629,451 ±(99.9%) 4088,224 ops/s [Average]
[info]   (min, avg, max) = (691805,148, 692629,451, 694428,608), stdev = 1061,699
[info]   CI (99.9%): [688541,226, 696717,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2119,346 ±(99.9%) 12,539 MB/sec [Average]
[info]   (min, avg, max) = (2116,798, 2119,346, 2124,846), stdev = 3,256
[info]   CI (99.9%): [2106,808, 2131,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,001, 4816,001, 4816,001), stdev = 0,001
[info]   CI (99.9%): [4816,001, 4816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2025,745 ±(99.9%) 17,688 MB/sec [Average]
[info]   (min, avg, max) = (2019,678, 2025,745, 2031,196), stdev = 4,593
[info]   CI (99.9%): [2008,057, 2043,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4603,316 ±(99.9%) 59,431 B/op [Average]
[info]   (min, avg, max) = (4577,636, 4603,316, 4618,390), stdev = 15,434
[info]   CI (99.9%): [4543,884, 4662,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,104 ±(99.9%) 0,152 B/op [Average]
[info]   (min, avg, max) = (0,047, 0,104, 0,142), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5,02% complete, ETA 02:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346254,763 ops/s
[info] # Warmup Iteration   2: 429006,288 ops/s
[info] # Warmup Iteration   3: 419542,696 ops/s
[info] # Warmup Iteration   4: 420508,683 ops/s
[info] # Warmup Iteration   5: 417407,216 ops/s
[info] Iteration   1: 417539,920 ops/s
[info]                  ·gc.alloc.rate:                   647,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2543,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,600 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 417410,916 ops/s
[info]                  ·gc.alloc.rate:                   647,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2544,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,314 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 417394,289 ops/s
[info]                  ·gc.alloc.rate:               647,056 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2534,254 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 416827,419 ops/s
[info]                  ·gc.alloc.rate:               646,262 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2537,664 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 417203,076 ops/s
[info]                  ·gc.alloc.rate:                   646,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2532,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   417275,124 ±(99.9%) 1069,182 ops/s [Average]
[info]   (min, avg, max) = (416827,419, 417275,124, 417539,920), stdev = 277,663
[info]   CI (99.9%): [416205,942, 418344,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   646,890 ±(99.9%) 1,574 MB/sec [Average]
[info]   (min, avg, max) = (646,262, 646,890, 647,284), stdev = 0,409
[info]   CI (99.9%): [645,316, 648,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2440,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2440,001, 2440,001, 2440,001), stdev = 0,001
[info]   CI (99.9%): [2440,001, 2440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,014 ±(99.9%) 6,313 MB/sec [Average]
[info]   (min, avg, max) = (671,335, 673,014, 674,837), stdev = 1,640
[info]   CI (99.9%): [666,701, 679,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2538,537 ±(99.9%) 20,171 B/op [Average]
[info]   (min, avg, max) = (2532,895, 2538,537, 2544,459), stdev = 5,238
[info]   CI (99.9%): [2518,366, 2558,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,689 ±(99.9%) 5,713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,689, 3,343), stdev = 1,484
[info]   CI (99.9%): [≈ 0, 6,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,599 ±(99.9%) 21,535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,599, 12,600), stdev = 5,593
[info]   CI (99.9%): [≈ 0, 24,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,22% complete, ETA 02:05:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465834,029 ops/s
[info] # Warmup Iteration   2: 692950,633 ops/s
[info] # Warmup Iteration   3: 695147,198 ops/s
[info] # Warmup Iteration   4: 696584,343 ops/s
[info] # Warmup Iteration   5: 697041,043 ops/s
[info] Iteration   1: 695808,018 ops/s
[info]                  ·gc.alloc.rate:               512,800 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1157,179 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 695875,892 ops/s
[info]                  ·gc.alloc.rate:                   512,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1524,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,753 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 686589,009 ops/s
[info]                  ·gc.alloc.rate:                   505,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1545,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 685906,890 ops/s
[info]                  ·gc.alloc.rate:      505,583 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 697703,633 ops/s
[info]                  ·gc.alloc.rate:                   514,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1522,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   692376,688 ±(99.9%) 21761,275 ops/s [Average]
[info]   (min, avg, max) = (685906,890, 692376,688, 697703,633), stdev = 5651,334
[info]   CI (99.9%): [670615,413, 714137,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   510,286 ±(99.9%) 15,951 MB/sec [Average]
[info]   (min, avg, max) = (505,583, 510,286, 514,158), stdev = 4,142
[info]   CI (99.9%): [494,335, 526,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,001, 1160,001, 1160,001), stdev = 0,001
[info]   CI (99.9%): [1160,001, 1160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   506,883 ±(99.9%) 1124,337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,883, 674,689), stdev = 291,987
[info]   CI (99.9%): [≈ 0, 1631,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1149,855 ±(99.9%) 2552,533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1149,855, 1545,183), stdev = 662,885
[info]   CI (99.9%): [≈ 0, 3702,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,333), stdev = 0,141
[info]   CI (99.9%): [≈ 0, 0,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,189 ±(99.9%) 1,229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,189, 0,753), stdev = 0,319
[info]   CI (99.9%): [≈ 0, 1,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,42% complete, ETA 02:04:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3000540,741 ops/s
[info] # Warmup Iteration   2: 3107027,423 ops/s
[info] # Warmup Iteration   3: 3109096,047 ops/s
[info] # Warmup Iteration   4: 3108641,362 ops/s
[info] # Warmup Iteration   5: 3111075,317 ops/s
[info] Iteration   1: 3102681,603 ops/s
[info]                  ·gc.alloc.rate:                   1435,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3100085,584 ops/s
[info]                  ·gc.alloc.rate:                   1434,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     682,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3118358,972 ops/s
[info]                  ·gc.alloc.rate:                   1442,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3111777,773 ops/s
[info]                  ·gc.alloc.rate:                   1439,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3115660,581 ops/s
[info]                  ·gc.alloc.rate:                   1441,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     681,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   3109712,903 ±(99.9%) 30836,272 ops/s [Average]
[info]   (min, avg, max) = (3100085,584, 3109712,903, 3118358,972), stdev = 8008,082
[info]   CI (99.9%): [3078876,630, 3140549,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1438,416 ±(99.9%) 14,044 MB/sec [Average]
[info]   (min, avg, max) = (1434,126, 1438,416, 1442,396), stdev = 3,647
[info]   CI (99.9%): [1424,372, 1452,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,856 ±(99.9%) 6,226 MB/sec [Average]
[info]   (min, avg, max) = (1344,244, 1345,856, 1348,045), stdev = 1,617
[info]   CI (99.9%): [1339,630, 1352,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   681,156 ±(99.9%) 4,922 B/op [Average]
[info]   (min, avg, max) = (679,127, 681,156, 682,504), stdev = 1,278
[info]   CI (99.9%): [676,235, 686,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,034 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,019, 0,032), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5,62% complete, ETA 02:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3189929,174 ops/s
[info] # Warmup Iteration   2: 3295662,493 ops/s
[info] # Warmup Iteration   3: 3345245,640 ops/s
[info] # Warmup Iteration   4: 3344822,731 ops/s
[info] # Warmup Iteration   5: 3344755,205 ops/s
[info] Iteration   1: 3352212,525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3358868,388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3356026,858 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3308422,512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3350878,678 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3345281,792 ±(99.9%) 80265,810 ops/s [Average]
[info]   (min, avg, max) = (3308422,512, 3345281,792, 3358868,388), stdev = 20844,776
[info]   CI (99.9%): [3265015,982, 3425547,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5,82% complete, ETA 02:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 374306,677 ops/s
[info] # Warmup Iteration   2: 446585,274 ops/s
[info] # Warmup Iteration   3: 445436,451 ops/s
[info] # Warmup Iteration   4: 445508,890 ops/s
[info] # Warmup Iteration   5: 442926,345 ops/s
[info] Iteration   1: 444685,950 ops/s
[info]                  ·gc.alloc.rate:                   639,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2383,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,554 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 441547,929 ops/s
[info]                  ·gc.alloc.rate:                   635,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2400,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 443329,221 ops/s
[info]                  ·gc.alloc.rate:               637,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2381,230 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 442885,565 ops/s
[info]                  ·gc.alloc.rate:               637,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2383,628 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 443597,345 ops/s
[info]                  ·gc.alloc.rate:      638,033 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   443209,202 ±(99.9%) 4394,803 ops/s [Average]
[info]   (min, avg, max) = (441547,929, 443209,202, 444685,950), stdev = 1141,316
[info]   CI (99.9%): [438814,399, 447604,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   637,533 ±(99.9%) 6,287 MB/sec [Average]
[info]   (min, avg, max) = (635,148, 637,533, 639,659), stdev = 1,633
[info]   CI (99.9%): [631,245, 643,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,663 ±(99.9%) 1157,371 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,663, 673,406), stdev = 300,566
[info]   CI (99.9%): [≈ 0, 1695,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1909,731 ±(99.9%) 4110,945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1909,731, 2400,373), stdev = 1067,599
[info]   CI (99.9%): [≈ 0, 6020,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,770 ±(99.9%) 6,586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,770, 3,830), stdev = 1,710
[info]   CI (99.9%): [≈ 0, 7,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,726 ±(99.9%) 23,310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,726, 13,554), stdev = 6,053
[info]   CI (99.9%): [≈ 0, 26,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6,02% complete, ETA 02:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206312,790 ops/s
[info] # Warmup Iteration   2: 218574,341 ops/s
[info] # Warmup Iteration   3: 216529,335 ops/s
[info] # Warmup Iteration   4: 216414,575 ops/s
[info] # Warmup Iteration   5: 216858,258 ops/s
[info] Iteration   1: 216032,021 ops/s
[info]                  ·gc.alloc.rate:                   551,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3726,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 218692,896 ops/s
[info]                  ·gc.alloc.rate:                   558,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4856,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,360 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 212875,200 ops/s
[info]                  ·gc.alloc.rate:                   543,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4988,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 218183,205 ops/s
[info]                  ·gc.alloc.rate:      556,737 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 217807,849 ops/s
[info]                  ·gc.alloc.rate:                   555,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4861,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,301 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   216718,234 ±(99.9%) 9127,019 ops/s [Average]
[info]   (min, avg, max) = (212875,200, 216718,234, 218692,896), stdev = 2370,258
[info]   CI (99.9%): [207591,215, 225845,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   552,961 ±(99.9%) 23,412 MB/sec [Average]
[info]   (min, avg, max) = (543,130, 552,961, 558,066), stdev = 6,080
[info]   CI (99.9%): [529,548, 576,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,730 ±(99.9%) 1123,967 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,730, 674,852), stdev = 291,891
[info]   CI (99.9%): [≈ 0, 1630,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3686,597 ±(99.9%) 8176,583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3686,597, 4988,576), stdev = 2123,433
[info]   CI (99.9%): [≈ 0, 11863,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,637 ±(99.9%) 5,319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,637, 3,107), stdev = 1,381
[info]   CI (99.9%): [≈ 0, 5,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,582 ±(99.9%) 38,272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,582, 22,360), stdev = 9,939
[info]   CI (99.9%): [≈ 0, 42,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6,22% complete, ETA 02:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22236,748 ops/s
[info] # Warmup Iteration   2: 26660,479 ops/s
[info] # Warmup Iteration   3: 26745,669 ops/s
[info] # Warmup Iteration   4: 26970,043 ops/s
[info] # Warmup Iteration   5: 26949,526 ops/s
[info] Iteration   1: 26924,445 ops/s
[info]                  ·gc.alloc.rate:                   1684,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117858,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,217 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 27036,503 ops/s
[info]                  ·gc.alloc.rate:               1691,747 MB/sec
[info]                  ·gc.alloc.rate.norm:          98480,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78291,296 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 27012,174 ops/s
[info]                  ·gc.alloc.rate:                   1690,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117696,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,639 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 27033,776 ops/s
[info]                  ·gc.alloc.rate:               1691,736 MB/sec
[info]                  ·gc.alloc.rate.norm:          98480,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78490,988 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 27018,814 ops/s
[info]                  ·gc.alloc.rate:                   1690,530 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117976,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,213 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   27005,142 ±(99.9%) 178,045 ops/s [Average]
[info]   (min, avg, max) = (26924,445, 27005,142, 27036,503), stdev = 46,238
[info]   CI (99.9%): [26827,097, 27183,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1689,787 ±(99.9%) 11,277 MB/sec [Average]
[info]   (min, avg, max) = (1684,696, 1689,787, 1691,747), stdev = 2,929
[info]   CI (99.9%): [1678,510, 1701,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (98480,015, 98480,016, 98480,016), stdev = 0,001
[info]   CI (99.9%): [98480,013, 98480,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1750,948 ±(99.9%) 1421,243 MB/sec [Average]
[info]   (min, avg, max) = (1344,934, 1750,948, 2025,210), stdev = 369,092
[info]   CI (99.9%): [329,704, 3172,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   102062,691 ±(99.9%) 83210,152 B/op [Average]
[info]   (min, avg, max) = (78291,296, 102062,691, 117976,440), stdev = 21609,412
[info]   CI (99.9%): [18852,539, 185272,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,214 ±(99.9%) 5,720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,214, 3,639), stdev = 1,485
[info]   CI (99.9%): [≈ 0, 6,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,43% complete, ETA 02:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28269,806 ops/s
[info] # Warmup Iteration   2: 42569,734 ops/s
[info] # Warmup Iteration   3: 42486,200 ops/s
[info] # Warmup Iteration   4: 42472,152 ops/s
[info] # Warmup Iteration   5: 42466,594 ops/s
[info] Iteration   1: 42475,299 ops/s
[info]                  ·gc.alloc.rate:                   1062,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50053,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,771 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 42605,649 ops/s
[info]                  ·gc.alloc.rate:               1066,219 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24964,338 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 42694,367 ops/s
[info]                  ·gc.alloc.rate:                   1068,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49869,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,535 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 42374,881 ops/s
[info]                  ·gc.alloc.rate:                   1060,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          677,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25146,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,773 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42374,826 ops/s
[info]                  ·gc.alloc.rate:                   1060,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50305,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,546 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   42505,004 ±(99.9%) 547,104 ops/s [Average]
[info]   (min, avg, max) = (42374,826, 42505,004, 42694,367), stdev = 142,081
[info]   CI (99.9%): [41957,900, 43052,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1063,664 ±(99.9%) 13,433 MB/sec [Average]
[info]   (min, avg, max) = (1060,462, 1063,664, 1068,279), stdev = 3,489
[info]   CI (99.9%): [1050,231, 1077,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39384,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (39384,010, 39384,010, 39384,011), stdev = 0,001
[info]   CI (99.9%): [39384,007, 39384,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,200 ±(99.9%) 1426,182 MB/sec [Average]
[info]   (min, avg, max) = (675,844, 1082,200, 1354,589), stdev = 370,375
[info]   CI (99.9%): [≈ 0, 2508,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40067,718 ±(99.9%) 52773,551 B/op [Average]
[info]   (min, avg, max) = (24964,338, 40067,718, 50305,030), stdev = 13705,124
[info]   CI (99.9%): [≈ 0, 92841,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,925 ±(99.9%) 2,480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,925, 1,546), stdev = 0,644
[info]   CI (99.9%): [≈ 0, 3,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,63% complete, ETA 02:03:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42733,125 ops/s
[info] # Warmup Iteration   2: 49901,973 ops/s
[info] # Warmup Iteration   3: 49820,889 ops/s
[info] # Warmup Iteration   4: 49808,255 ops/s
[info] # Warmup Iteration   5: 49895,679 ops/s
[info] Iteration   1: 49786,816 ops/s
[info]                  ·gc.alloc.rate:                   741,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42659,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102,455 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 50249,637 ops/s
[info]                  ·gc.alloc.rate:               748,650 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21072,501 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 50176,654 ops/s
[info]                  ·gc.alloc.rate:               747,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21101,892 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 49976,979 ops/s
[info]                  ·gc.alloc.rate:                   744,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21164,920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,967 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 49997,722 ops/s
[info]                  ·gc.alloc.rate:               744,756 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21156,032 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   50037,562 ±(99.9%) 700,706 ops/s [Average]
[info]   (min, avg, max) = (49786,816, 50037,562, 50249,637), stdev = 181,971
[info]   CI (99.9%): [49336,856, 50738,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   745,434 ±(99.9%) 10,541 MB/sec [Average]
[info]   (min, avg, max) = (741,675, 745,434, 748,650), stdev = 2,738
[info]   CI (99.9%): [734,892, 755,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23448,008, 23448,009, 23448,009), stdev = 0,001
[info]   CI (99.9%): [23448,007, 23448,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,783 ±(99.9%) 1165,777 MB/sec [Average]
[info]   (min, avg, max) = (671,958, 807,783, 1349,356), stdev = 302,749
[info]   CI (99.9%): [≈ 0, 1973,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25431,027 ±(99.9%) 37086,506 B/op [Average]
[info]   (min, avg, max) = (21072,501, 25431,027, 42659,792), stdev = 9631,248
[info]   CI (99.9%): [≈ 0, 62517,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,661 ±(99.9%) 5,555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,661, 3,241), stdev = 1,443
[info]   CI (99.9%): [≈ 0, 6,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20,884 ±(99.9%) 175,617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,884, 102,455), stdev = 45,607
[info]   CI (99.9%): [≈ 0, 196,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6,83% complete, ETA 02:03:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19918,077 ops/s
[info] # Warmup Iteration   2: 31009,579 ops/s
[info] # Warmup Iteration   3: 30885,780 ops/s
[info] # Warmup Iteration   4: 30894,959 ops/s
[info] # Warmup Iteration   5: 30890,897 ops/s
[info] Iteration   1: 31146,747 ops/s
[info]                  ·gc.alloc.rate:               1650,636 MB/sec
[info]                  ·gc.alloc.rate.norm:          83392,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68397,099 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 30773,265 ops/s
[info]                  ·gc.alloc.rate:                   1630,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              83392,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103958,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,194 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31167,850 ops/s
[info]                  ·gc.alloc.rate:               1651,338 MB/sec
[info]                  ·gc.alloc.rate.norm:          83392,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68478,982 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 30952,850 ops/s
[info]                  ·gc.alloc.rate:                   1640,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              83392,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103533,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,117 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 31084,701 ops/s
[info]                  ·gc.alloc.rate:               1646,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          83392,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68762,952 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   31025,082 ±(99.9%) 630,873 ops/s [Average]
[info]   (min, avg, max) = (30773,265, 31025,082, 31167,850), stdev = 163,836
[info]   CI (99.9%): [30394,210, 31655,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1643,940 ±(99.9%) 33,259 MB/sec [Average]
[info]   (min, avg, max) = (1630,693, 1643,940, 1651,338), stdev = 8,637
[info]   CI (99.9%): [1610,681, 1677,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83392,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (83392,013, 83392,013, 83392,014), stdev = 0,001
[info]   CI (99.9%): [83392,011, 83392,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1627,394 ±(99.9%) 1431,252 MB/sec [Average]
[info]   (min, avg, max) = (1353,831, 1627,394, 2036,258), stdev = 371,692
[info]   CI (99.9%): [196,142, 3058,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82626,123 ±(99.9%) 74242,703 B/op [Average]
[info]   (min, avg, max) = (68397,099, 82626,123, 103958,207), stdev = 19280,594
[info]   CI (99.9%): [8383,420, 156868,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,062 ±(99.9%) 5,789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,062, 3,194), stdev = 1,503
[info]   CI (99.9%): [≈ 0, 6,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7,03% complete, ETA 02:03:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21722,152 ops/s
[info] # Warmup Iteration   2: 34106,865 ops/s
[info] # Warmup Iteration   3: 34172,687 ops/s
[info] # Warmup Iteration   4: 34006,172 ops/s
[info] # Warmup Iteration   5: 34230,947 ops/s
[info] Iteration   1: 34275,444 ops/s
[info]                  ·gc.alloc.rate:               1913,616 MB/sec
[info]                  ·gc.alloc.rate.norm:          87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92522,311 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 34287,353 ops/s
[info]                  ·gc.alloc.rate:                   1914,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92612,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,822 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34375,232 ops/s
[info]                  ·gc.alloc.rate:                   1919,278 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92540,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,765 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 34305,056 ops/s
[info]                  ·gc.alloc.rate:                   1915,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92884,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,910 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 34268,823 ops/s
[info]                  ·gc.alloc.rate:               1913,086 MB/sec
[info]                  ·gc.alloc.rate.norm:          87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62067,819 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   34302,382 ±(99.9%) 165,533 ops/s [Average]
[info]   (min, avg, max) = (34268,823, 34302,382, 34375,232), stdev = 42,988
[info]   CI (99.9%): [34136,849, 34467,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1915,145 ±(99.9%) 9,493 MB/sec [Average]
[info]   (min, avg, max) = (1913,086, 1915,145, 1919,278), stdev = 2,465
[info]   CI (99.9%): [1905,652, 1924,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87872,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (87872,012, 87872,012, 87872,014), stdev = 0,001
[info]   CI (99.9%): [87872,009, 87872,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1885,939 ±(99.9%) 1150,948 MB/sec [Average]
[info]   (min, avg, max) = (1351,296, 1885,939, 2024,634), stdev = 298,898
[info]   CI (99.9%): [734,992, 3036,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   86525,428 ±(99.9%) 52649,818 B/op [Average]
[info]   (min, avg, max) = (62067,819, 86525,428, 92884,526), stdev = 13672,991
[info]   CI (99.9%): [33875,610, 139175,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,099 ±(99.9%) 8,375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,099, 4,765), stdev = 2,175
[info]   CI (99.9%): [≈ 0, 10,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,23% complete, ETA 02:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15900,948 ops/s
[info] # Warmup Iteration   2: 33313,278 ops/s
[info] # Warmup Iteration   3: 33488,386 ops/s
[info] # Warmup Iteration   4: 33283,174 ops/s
[info] # Warmup Iteration   5: 33432,490 ops/s
[info] Iteration   1: 33442,543 ops/s
[info]                  ·gc.alloc.rate:                   1799,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63696,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,959 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33591,949 ops/s
[info]                  ·gc.alloc.rate:                   1807,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95232,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,901 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33570,421 ops/s
[info]                  ·gc.alloc.rate:                   1805,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95357,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,976 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33462,253 ops/s
[info]                  ·gc.alloc.rate:               1800,294 MB/sec
[info]                  ·gc.alloc.rate.norm:          84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63846,252 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 33528,859 ops/s
[info]                  ·gc.alloc.rate:                   1803,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95646,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,954 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   33519,205 ±(99.9%) 251,977 ops/s [Average]
[info]   (min, avg, max) = (33442,543, 33519,205, 33591,949), stdev = 65,438
[info]   CI (99.9%): [33267,228, 33771,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1803,166 ±(99.9%) 13,482 MB/sec [Average]
[info]   (min, avg, max) = (1799,141, 1803,166, 1807,247), stdev = 3,501
[info]   CI (99.9%): [1789,684, 1816,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84672,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84672,012, 84672,012, 84672,013), stdev = 0,001
[info]   CI (99.9%): [84672,011, 84672,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1762,874 ±(99.9%) 1432,107 MB/sec [Average]
[info]   (min, avg, max) = (1353,442, 1762,874, 2036,874), stdev = 371,914
[info]   CI (99.9%): [330,767, 3194,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   82755,902 ±(99.9%) 66736,366 B/op [Average]
[info]   (min, avg, max) = (63696,345, 82755,902, 95646,290), stdev = 17331,222
[info]   CI (99.9%): [16019,536, 149492,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,758 ±(99.9%) 5,571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,758, 3,901), stdev = 1,447
[info]   CI (99.9%): [≈ 0, 7,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,43% complete, ETA 02:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28682,778 ops/s
[info] # Warmup Iteration   2: 37211,040 ops/s
[info] # Warmup Iteration   3: 36812,631 ops/s
[info] # Warmup Iteration   4: 37220,758 ops/s
[info] # Warmup Iteration   5: 37212,261 ops/s
[info] Iteration   1: 37119,349 ops/s
[info]                  ·gc.alloc.rate:                   1879,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85517,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,765 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 36950,230 ops/s
[info]                  ·gc.alloc.rate:                   1870,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86021,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,660 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37235,421 ops/s
[info]                  ·gc.alloc.rate:                   1885,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85504,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,519 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37226,767 ops/s
[info]                  ·gc.alloc.rate:                   1884,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85637,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,880 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37276,500 ops/s
[info]                  ·gc.alloc.rate:               1887,117 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57091,763 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   37161,653 ±(99.9%) 507,061 ops/s [Average]
[info]   (min, avg, max) = (36950,230, 37161,653, 37276,500), stdev = 131,682
[info]   CI (99.9%): [36654,592, 37668,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1881,480 ±(99.9%) 25,597 MB/sec [Average]
[info]   (min, avg, max) = (1870,865, 1881,480, 1887,117), stdev = 6,647
[info]   CI (99.9%): [1855,883, 1907,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79688,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (79688,011, 79688,012, 79688,013), stdev = 0,001
[info]   CI (99.9%): [79688,008, 79688,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1887,360 ±(99.9%) 1152,460 MB/sec [Average]
[info]   (min, avg, max) = (1352,008, 1887,360, 2025,715), stdev = 299,290
[info]   CI (99.9%): [734,900, 3039,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   79954,613 ±(99.9%) 49220,622 B/op [Average]
[info]   (min, avg, max) = (57091,763, 79954,613, 86021,874), stdev = 12782,439
[info]   CI (99.9%): [30733,991, 129175,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,765 ±(99.9%) 5,369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,765, 3,519), stdev = 1,394
[info]   CI (99.9%): [≈ 0, 7,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7,63% complete, ETA 02:02:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28170,411 ops/s
[info] # Warmup Iteration   2: 36686,038 ops/s
[info] # Warmup Iteration   3: 36488,455 ops/s
[info] # Warmup Iteration   4: 37112,645 ops/s
[info] # Warmup Iteration   5: 37324,783 ops/s
[info] Iteration   1: 37100,378 ops/s
[info]                  ·gc.alloc.rate:                   1805,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              76608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85561,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,649 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37317,544 ops/s
[info]                  ·gc.alloc.rate:               1816,605 MB/sec
[info]                  ·gc.alloc.rate.norm:          76608,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56765,207 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 37306,741 ops/s
[info]                  ·gc.alloc.rate:                   1815,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              76608,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85269,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,756 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37318,326 ops/s
[info]                  ·gc.alloc.rate:               1816,545 MB/sec
[info]                  ·gc.alloc.rate.norm:          76608,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024,879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85393,958 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 37496,166 ops/s
[info]                  ·gc.alloc.rate:                   1824,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              76608,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56727,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,874 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   37307,831 ±(99.9%) 540,164 ops/s [Average]
[info]   (min, avg, max) = (37100,378, 37307,831, 37496,166), stdev = 140,279
[info]   CI (99.9%): [36767,667, 37847,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1815,936 ±(99.9%) 25,901 MB/sec [Average]
[info]   (min, avg, max) = (1805,899, 1815,936, 1824,847), stdev = 6,727
[info]   CI (99.9%): [1790,034, 1841,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   76608,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76608,011, 76608,011, 76608,012), stdev = 0,001
[info]   CI (99.9%): [76608,009, 76608,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1752,051 ±(99.9%) 1417,979 MB/sec [Average]
[info]   (min, avg, max) = (1346,073, 1752,051, 2024,879), stdev = 368,245
[info]   CI (99.9%): [334,072, 3170,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   73943,369 ±(99.9%) 60451,467 B/op [Average]
[info]   (min, avg, max) = (56727,388, 73943,369, 85561,134), stdev = 15699,054
[info]   CI (99.9%): [13491,902, 134394,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,056 ±(99.9%) 4,429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,056, 2,649), stdev = 1,150
[info]   CI (99.9%): [≈ 0, 5,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7,83% complete, ETA 02:02:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6522,850 ops/s
[info] # Warmup Iteration   2: 9929,220 ops/s
[info] # Warmup Iteration   3: 10032,464 ops/s
[info] # Warmup Iteration   4: 10080,799 ops/s
[info] # Warmup Iteration   5: 10066,011 ops/s
[info] Iteration   1: 10007,875 ops/s
[info]                  ·gc.alloc.rate:                   1289,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210741,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,273 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10070,083 ops/s
[info]                  ·gc.alloc.rate:               1297,907 MB/sec
[info]                  ·gc.alloc.rate.norm:          202832,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209465,341 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 10065,173 ops/s
[info]                  ·gc.alloc.rate:               1297,121 MB/sec
[info]                  ·gc.alloc.rate.norm:          202832,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209548,561 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 10040,845 ops/s
[info]                  ·gc.alloc.rate:                   1294,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210258,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,787 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10042,870 ops/s
[info]                  ·gc.alloc.rate:               1294,154 MB/sec
[info]                  ·gc.alloc.rate.norm:          202832,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210529,344 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   10045,369 ±(99.9%) 95,015 ops/s [Average]
[info]   (min, avg, max) = (10007,875, 10045,369, 10070,083), stdev = 24,675
[info]   CI (99.9%): [9950,354, 10140,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1294,619 ±(99.9%) 12,336 MB/sec [Average]
[info]   (min, avg, max) = (1289,767, 1294,619, 1297,907), stdev = 3,204
[info]   CI (99.9%): [1282,283, 1306,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202832,042 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (202832,041, 202832,042, 202832,044), stdev = 0,002
[info]   CI (99.9%): [202832,035, 202832,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341,057 ±(99.9%) 5,290 MB/sec [Average]
[info]   (min, avg, max) = (1340,063, 1341,057, 1343,266), stdev = 1,374
[info]   CI (99.9%): [1335,766, 1346,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   210108,598 ±(99.9%) 2218,367 B/op [Average]
[info]   (min, avg, max) = (209465,341, 210108,598, 210741,675), stdev = 576,103
[info]   CI (99.9%): [207890,232, 212326,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,612 ±(99.9%) 16,381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,612, 9,787), stdev = 4,254
[info]   CI (99.9%): [≈ 0, 18,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8,03% complete, ETA 02:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18934,041 ops/s
[info] # Warmup Iteration   2: 25200,243 ops/s
[info] # Warmup Iteration   3: 25453,657 ops/s
[info] # Warmup Iteration   4: 25542,795 ops/s
[info] # Warmup Iteration   5: 25334,406 ops/s
[info] Iteration   1: 25509,923 ops/s
[info]                  ·gc.alloc.rate:                   1948,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124471,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,284 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25559,092 ops/s
[info]                  ·gc.alloc.rate:                   1952,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124376,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,563 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25586,242 ops/s
[info]                  ·gc.alloc.rate:               1954,569 MB/sec
[info]                  ·gc.alloc.rate.norm:          120240,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82946,201 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 25628,480 ops/s
[info]                  ·gc.alloc.rate:                   1954,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124403,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,835 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 25635,022 ops/s
[info]                  ·gc.alloc.rate:                   1957,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124564,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,834 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   25583,752 ±(99.9%) 199,102 ops/s [Average]
[info]   (min, avg, max) = (25509,923, 25583,752, 25635,022), stdev = 51,706
[info]   CI (99.9%): [25384,650, 25782,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1953,707 ±(99.9%) 12,733 MB/sec [Average]
[info]   (min, avg, max) = (1948,839, 1953,707, 1957,893), stdev = 3,307
[info]   CI (99.9%): [1940,974, 1966,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120240,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (120240,016, 120240,016, 120240,017), stdev = 0,001
[info]   CI (99.9%): [120240,014, 120240,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887,233 ±(99.9%) 1160,118 MB/sec [Average]
[info]   (min, avg, max) = (1348,337, 1887,233, 2028,312), stdev = 301,279
[info]   CI (99.9%): [727,114, 3047,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   116152,501 ±(99.9%) 71479,612 B/op [Average]
[info]   (min, avg, max) = (82946,201, 116152,501, 124564,662), stdev = 18563,028
[info]   CI (99.9%): [44672,889, 187632,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,303 ±(99.9%) 6,415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,303, 3,835), stdev = 1,666
[info]   CI (99.9%): [≈ 0, 8,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,23% complete, ETA 02:01:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35653,098 ops/s
[info] # Warmup Iteration   2: 51149,598 ops/s
[info] # Warmup Iteration   3: 51220,454 ops/s
[info] # Warmup Iteration   4: 51348,789 ops/s
[info] # Warmup Iteration   5: 51333,829 ops/s
[info] Iteration   1: 51402,123 ops/s
[info]                  ·gc.alloc.rate:               1265,769 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20692,493 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 51206,287 ops/s
[info]                  ·gc.alloc.rate:               1260,746 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41580,262 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 51400,437 ops/s
[info]                  ·gc.alloc.rate:                   1265,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41464,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,637 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 51255,498 ops/s
[info]                  ·gc.alloc.rate:                   1262,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41601,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,639 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 51187,023 ops/s
[info]                  ·gc.alloc.rate:               1260,183 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41698,909 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   51290,273 ±(99.9%) 401,881 ops/s [Average]
[info]   (min, avg, max) = (51187,023, 51290,273, 51402,123), stdev = 104,367
[info]   CI (99.9%): [50888,392, 51692,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1262,865 ±(99.9%) 10,172 MB/sec [Average]
[info]   (min, avg, max) = (1260,183, 1262,865, 1265,769), stdev = 2,642
[info]   CI (99.9%): [1252,692, 1273,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38752,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38752,008, 38752,008, 38752,009), stdev = 0,001
[info]   CI (99.9%): [38752,007, 38752,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,734 ±(99.9%) 1168,532 MB/sec [Average]
[info]   (min, avg, max) = (675,885, 1218,734, 1356,013), stdev = 303,464
[info]   CI (99.9%): [50,202, 2387,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   37407,539 ±(99.9%) 35981,834 B/op [Average]
[info]   (min, avg, max) = (20692,493, 37407,539, 41698,909), stdev = 9344,368
[info]   CI (99.9%): [1425,705, 73389,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,255 ±(99.9%) 1,346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,255, 0,639), stdev = 0,350
[info]   CI (99.9%): [≈ 0, 1,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,43% complete, ETA 02:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67134,448 ops/s
[info] # Warmup Iteration   2: 72835,001 ops/s
[info] # Warmup Iteration   3: 73159,065 ops/s
[info] # Warmup Iteration   4: 73121,526 ops/s
[info] # Warmup Iteration   5: 72834,778 ops/s
[info] Iteration   1: 72149,138 ops/s
[info]                  ·gc.alloc.rate:               932,190 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14675,153 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 72763,938 ops/s
[info]                  ·gc.alloc.rate:               940,213 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29088,292 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 73168,306 ops/s
[info]                  ·gc.alloc.rate:               945,353 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14456,497 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 73030,434 ops/s
[info]                  ·gc.alloc.rate:                   943,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28967,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,449 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 73022,270 ops/s
[info]                  ·gc.alloc.rate:                   943,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14484,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,897 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   72826,817 ±(99.9%) 1563,523 ops/s [Average]
[info]   (min, avg, max) = (72149,138, 72826,817, 73168,306), stdev = 406,042
[info]   CI (99.9%): [71263,295, 74390,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   941,009 ±(99.9%) 20,299 MB/sec [Average]
[info]   (min, avg, max) = (932,190, 941,009, 945,353), stdev = 5,272
[info]   CI (99.9%): [920,710, 961,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20336,006, 20336,006, 20336,006), stdev = 0,001
[info]   CI (99.9%): [20336,005, 20336,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,186 ±(99.9%) 1417,893 MB/sec [Average]
[info]   (min, avg, max) = (672,034, 941,186, 1344,865), stdev = 368,222
[info]   CI (99.9%): [≈ 0, 2359,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20334,392 ±(99.9%) 30560,557 B/op [Average]
[info]   (min, avg, max) = (14456,497, 20334,392, 29088,292), stdev = 7936,480
[info]   CI (99.9%): [≈ 0, 50894,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,269 ±(99.9%) 1,545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,269, 0,897), stdev = 0,401
[info]   CI (99.9%): [≈ 0, 1,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8,63% complete, ETA 02:01:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21586,068 ops/s
[info] # Warmup Iteration   2: 38333,086 ops/s
[info] # Warmup Iteration   3: 38545,159 ops/s
[info] # Warmup Iteration   4: 38565,315 ops/s
[info] # Warmup Iteration   5: 38722,265 ops/s
[info] Iteration   1: 38570,682 ops/s
[info]                  ·gc.alloc.rate:                   2575,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110693,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,699 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38557,940 ops/s
[info]                  ·gc.alloc.rate:                   2575,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110880,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,248 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38474,938 ops/s
[info]                  ·gc.alloc.rate:                   2569,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111195,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,554 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38589,368 ops/s
[info]                  ·gc.alloc.rate:                   2577,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83209,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,849 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38634,185 ops/s
[info]                  ·gc.alloc.rate:                   2579,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110873,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,848 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   38565,423 ±(99.9%) 224,305 ops/s [Average]
[info]   (min, avg, max) = (38474,938, 38565,423, 38634,185), stdev = 58,251
[info]   CI (99.9%): [38341,118, 38789,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2575,365 ±(99.9%) 15,076 MB/sec [Average]
[info]   (min, avg, max) = (2569,141, 2575,365, 2579,727), stdev = 3,915
[info]   CI (99.9%): [2560,289, 2590,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105104,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (105104,011, 105104,011, 105104,011), stdev = 0,001
[info]   CI (99.9%): [105104,009, 105104,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2581,789 ±(99.9%) 1165,643 MB/sec [Average]
[info]   (min, avg, max) = (2040,307, 2581,789, 2721,334), stdev = 302,714
[info]   CI (99.9%): [1416,147, 3747,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105370,246 ±(99.9%) 47708,598 B/op [Average]
[info]   (min, avg, max) = (83209,106, 105370,246, 111195,267), stdev = 12389,771
[info]   CI (99.9%): [57661,649, 153078,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,040 ±(99.9%) 5,479 B/op [Average]
[info]   (min, avg, max) = (0,848, 2,040, 4,248), stdev = 1,423
[info]   CI (99.9%): [≈ 0, 7,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,84% complete, ETA 02:00:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22422,369 ops/s
[info] # Warmup Iteration   2: 38183,400 ops/s
[info] # Warmup Iteration   3: 38530,704 ops/s
[info] # Warmup Iteration   4: 38398,632 ops/s
[info] # Warmup Iteration   5: 38447,666 ops/s
[info] Iteration   1: 38583,097 ops/s
[info]                  ·gc.alloc.rate:                   2110,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82929,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,547 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38419,416 ops/s
[info]                  ·gc.alloc.rate:                   2101,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83361,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,558 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 38565,647 ops/s
[info]                  ·gc.alloc.rate:                   2109,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83109,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,548 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38543,403 ops/s
[info]                  ·gc.alloc.rate:                   2107,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110971,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,850 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 38522,344 ops/s
[info]                  ·gc.alloc.rate:                   2106,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83342,348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,701 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   38526,781 ±(99.9%) 247,352 ops/s [Average]
[info]   (min, avg, max) = (38419,416, 38526,781, 38583,097), stdev = 64,236
[info]   CI (99.9%): [38279,430, 38774,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2106,883 ±(99.9%) 13,617 MB/sec [Average]
[info]   (min, avg, max) = (2101,059, 2106,883, 2110,049), stdev = 3,536
[info]   CI (99.9%): [2093,266, 2120,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (86072,011, 86072,011, 86072,012), stdev = 0,001
[info]   CI (99.9%): [86072,008, 86072,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2172,321 ±(99.9%) 1174,025 MB/sec [Average]
[info]   (min, avg, max) = (2033,014, 2172,321, 2717,709), stdev = 304,891
[info]   CI (99.9%): [998,296, 3346,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   88742,840 ±(99.9%) 47854,714 B/op [Average]
[info]   (min, avg, max) = (82929,618, 88742,840, 110971,936), stdev = 12427,717
[info]   CI (99.9%): [40888,126, 136597,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,041 ±(99.9%) 2,930 B/op [Average]
[info]   (min, avg, max) = (0,850, 2,041, 2,558), stdev = 0,761
[info]   CI (99.9%): [≈ 0, 4,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,04% complete, ETA 02:00:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47667,488 ops/s
[info] # Warmup Iteration   2: 51802,389 ops/s
[info] # Warmup Iteration   3: 52444,246 ops/s
[info] # Warmup Iteration   4: 52218,167 ops/s
[info] # Warmup Iteration   5: 52147,590 ops/s
[info] Iteration   1: 52407,884 ops/s
[info]                  ·gc.alloc.rate:                   2013,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60630,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,500 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 52455,150 ops/s
[info]                  ·gc.alloc.rate:                   2015,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60660,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,249 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 52089,040 ops/s
[info]                  ·gc.alloc.rate:                   2001,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61182,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 52282,383 ops/s
[info]                  ·gc.alloc.rate:                   2009,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61035,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,253 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 52357,800 ops/s
[info]                  ·gc.alloc.rate:                   2011,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61048,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,251 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   52318,452 ±(99.9%) 551,878 ops/s [Average]
[info]   (min, avg, max) = (52089,040, 52318,452, 52455,150), stdev = 143,321
[info]   CI (99.9%): [51766,573, 52870,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2010,414 ±(99.9%) 21,349 MB/sec [Average]
[info]   (min, avg, max) = (2001,587, 2010,414, 2015,929), stdev = 5,544
[info]   CI (99.9%): [1989,065, 2031,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (60480,008, 60480,008, 60480,008), stdev = 0,001
[info]   CI (99.9%): [60480,007, 60480,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2024,740 ±(99.9%) 17,455 MB/sec [Average]
[info]   (min, avg, max) = (2018,892, 2024,740, 2030,357), stdev = 4,533
[info]   CI (99.9%): [2007,286, 2042,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   60911,474 ±(99.9%) 962,350 B/op [Average]
[info]   (min, avg, max) = (60630,177, 60911,474, 61182,531), stdev = 249,919
[info]   CI (99.9%): [59949,124, 61873,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,502 ±(99.9%) 2,148 B/op [Average]
[info]   (min, avg, max) = (1,249, 1,502, 2,500), stdev = 0,558
[info]   CI (99.9%): [≈ 0, 3,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9,24% complete, ETA 02:00:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48714,042 ops/s
[info] # Warmup Iteration   2: 54161,031 ops/s
[info] # Warmup Iteration   3: 54011,509 ops/s
[info] # Warmup Iteration   4: 53817,245 ops/s
[info] # Warmup Iteration   5: 53340,732 ops/s
[info] Iteration   1: 54028,163 ops/s
[info]                  ·gc.alloc.rate:                   1981,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39194,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 54101,410 ops/s
[info]                  ·gc.alloc.rate:                   1984,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58792,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,817 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 53952,701 ops/s
[info]                  ·gc.alloc.rate:                   1979,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59029,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,822 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 54097,058 ops/s
[info]                  ·gc.alloc.rate:                   1984,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58971,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,817 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 53826,388 ops/s
[info]                  ·gc.alloc.rate:                   1974,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59348,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   54001,144 ±(99.9%) 442,696 ops/s [Average]
[info]   (min, avg, max) = (53826,388, 54001,144, 54101,410), stdev = 114,967
[info]   CI (99.9%): [53558,448, 54443,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1980,965 ±(99.9%) 16,430 MB/sec [Average]
[info]   (min, avg, max) = (1974,514, 1980,965, 1984,635), stdev = 4,267
[info]   CI (99.9%): [1964,535, 1997,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57736,008, 57736,008, 57736,008), stdev = 0,001
[info]   CI (99.9%): [57736,007, 57736,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1889,316 ±(99.9%) 1170,711 MB/sec [Average]
[info]   (min, avg, max) = (1345,484, 1889,316, 2029,650), stdev = 304,030
[info]   CI (99.9%): [718,605, 3060,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   55067,199 ±(99.9%) 34175,374 B/op [Average]
[info]   (min, avg, max) = (39194,751, 55067,199, 59348,213), stdev = 8875,236
[info]   CI (99.9%): [20891,825, 89242,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,067, 0,083), stdev = 0,009
[info]   CI (99.9%): [0,031, 0,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,941 ±(99.9%) 1,042 B/op [Average]
[info]   (min, avg, max) = (1,817, 1,941, 2,425), stdev = 0,271
[info]   CI (99.9%): [0,899, 2,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9,44% complete, ETA 01:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371460,014 ops/s
[info] # Warmup Iteration   2: 420219,751 ops/s
[info] # Warmup Iteration   3: 424785,137 ops/s
[info] # Warmup Iteration   4: 425691,300 ops/s
[info] # Warmup Iteration   5: 424747,903 ops/s
[info] Iteration   1: 424233,082 ops/s
[info]                  ·gc.alloc.rate:                   2145,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7490,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 424710,643 ops/s
[info]                  ·gc.alloc.rate:                   2147,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7497,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 425978,372 ops/s
[info]                  ·gc.alloc.rate:                   2154,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7484,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 426068,284 ops/s
[info]                  ·gc.alloc.rate:                   2154,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7494,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 423399,502 ops/s
[info]                  ·gc.alloc.rate:                   2140,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10072,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   424877,977 ±(99.9%) 4414,608 ops/s [Average]
[info]   (min, avg, max) = (423399,502, 424877,977, 426068,284), stdev = 1146,460
[info]   CI (99.9%): [420463,369, 429292,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2148,607 ±(99.9%) 23,320 MB/sec [Average]
[info]   (min, avg, max) = (2140,660, 2148,607, 2154,838), stdev = 6,056
[info]   CI (99.9%): [2125,287, 2171,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7960,001, 7960,001, 7960,001), stdev = 0,001
[info]   CI (99.9%): [7960,001, 7960,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2161,018 ±(99.9%) 1179,377 MB/sec [Average]
[info]   (min, avg, max) = (2018,637, 2161,018, 2708,867), stdev = 306,280
[info]   CI (99.9%): [981,641, 3340,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8007,892 ±(99.9%) 4445,050 B/op [Average]
[info]   (min, avg, max) = (7484,660, 8007,892, 10072,867), stdev = 1154,365
[info]   CI (99.9%): [3562,842, 12452,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,139 ±(99.9%) 0,249 B/op [Average]
[info]   (min, avg, max) = (0,077, 0,139, 0,231), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9,64% complete, ETA 01:59:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446430,352 ops/s
[info] # Warmup Iteration   2: 1718206,064 ops/s
[info] # Warmup Iteration   3: 1713344,660 ops/s
[info] # Warmup Iteration   4: 1703363,916 ops/s
[info] # Warmup Iteration   5: 1713178,622 ops/s
[info] Iteration   1: 1710974,995 ops/s
[info]                  ·gc.alloc.rate:                   539,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470,601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1718157,509 ops/s
[info]                  ·gc.alloc.rate:                   541,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     617,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,418 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1713268,935 ops/s
[info]                  ·gc.alloc.rate:               539,950 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619,265 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1716889,705 ops/s
[info]                  ·gc.alloc.rate:      541,134 MB/sec
[info]                  ·gc.alloc.rate.norm: 496,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1712835,787 ops/s
[info]                  ·gc.alloc.rate:                   539,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     618,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1714425,386 ±(99.9%) 11515,134 ops/s [Average]
[info]   (min, avg, max) = (1710974,995, 1714425,386, 1718157,509), stdev = 2990,444
[info]   CI (99.9%): [1702910,252, 1725940,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   540,298 ±(99.9%) 3,761 MB/sec [Average]
[info]   (min, avg, max) = (539,178, 540,298, 541,492), stdev = 0,977
[info]   CI (99.9%): [536,537, 544,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (496,000, 496,000, 496,000), stdev = 0,001
[info]   CI (99.9%): [496,000, 496,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,516 ±(99.9%) 1123,318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,516, 674,156), stdev = 291,722
[info]   CI (99.9%): [≈ 0, 1629,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   465,118 ±(99.9%) 1031,059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 465,118, 619,265), stdev = 267,763
[info]   CI (99.9%): [≈ 0, 1496,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,541 ±(99.9%) 4,518 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,541, 2,640), stdev = 1,173
[info]   CI (99.9%): [≈ 0, 5,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,496 ±(99.9%) 4,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,496, 2,418), stdev = 1,075
[info]   CI (99.9%): [≈ 0, 4,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,84% complete, ETA 01:59:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 521667,952 ops/s
[info] # Warmup Iteration   2: 717525,188 ops/s
[info] # Warmup Iteration   3: 717776,779 ops/s
[info] # Warmup Iteration   4: 714922,151 ops/s
[info] # Warmup Iteration   5: 715177,286 ops/s
[info] Iteration   1: 718455,852 ops/s
[info]                  ·gc.alloc.rate:                   577,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1477,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,137 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 716579,089 ops/s
[info]                  ·gc.alloc.rate:                   575,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1481,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 719896,061 ops/s
[info]                  ·gc.alloc.rate:      578,123 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 718311,428 ops/s
[info]                  ·gc.alloc.rate:                   576,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1479,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 718375,356 ops/s
[info]                  ·gc.alloc.rate:               576,958 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1479,739 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   718323,557 ±(99.9%) 4530,144 ops/s [Average]
[info]   (min, avg, max) = (716579,089, 718323,557, 719896,061), stdev = 1176,464
[info]   CI (99.9%): [713793,413, 722853,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   576,900 ±(99.9%) 3,601 MB/sec [Average]
[info]   (min, avg, max) = (575,492, 576,900, 578,123), stdev = 0,935
[info]   CI (99.9%): [573,299, 580,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,000, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,940 ±(99.9%) 1162,264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,940, 675,432), stdev = 301,836
[info]   CI (99.9%): [≈ 0, 1702,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1183,649 ±(99.9%) 2547,899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1183,649, 1481,252), stdev = 661,681
[info]   CI (99.9%): [≈ 0, 3731,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,055 ±(99.9%) 0,229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,055, 0,137), stdev = 0,059
[info]   CI (99.9%): [≈ 0, 0,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10,04% complete, ETA 01:59:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1792407,674 ops/s
[info] # Warmup Iteration   2: 1895768,525 ops/s
[info] # Warmup Iteration   3: 1915015,618 ops/s
[info] # Warmup Iteration   4: 1891274,959 ops/s
[info] # Warmup Iteration   5: 1909661,814 ops/s
[info] Iteration   1: 1900908,515 ops/s
[info]                  ·gc.alloc.rate:                   367,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     423,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1914271,828 ops/s
[info]                  ·gc.alloc.rate:               369,756 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 420,636 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1915942,518 ops/s
[info]                  ·gc.alloc.rate:      370,081 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1908119,315 ops/s
[info]                  ·gc.alloc.rate:               368,566 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 421,943 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1917172,376 ops/s
[info]                  ·gc.alloc.rate:                   370,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,561 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1911282,910 ±(99.9%) 26042,981 ops/s [Average]
[info]   (min, avg, max) = (1900908,515, 1911282,910, 1917172,376), stdev = 6763,279
[info]   CI (99.9%): [1885239,929, 1937325,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   369,162 ±(99.9%) 5,006 MB/sec [Average]
[info]   (min, avg, max) = (367,157, 369,162, 370,252), stdev = 1,300
[info]   CI (99.9%): [364,156, 374,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,878 ±(99.9%) 989,286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,878, 674,670), stdev = 256,915
[info]   CI (99.9%): [≈ 0, 1431,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   364,014 ±(99.9%) 813,859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 364,014, 553,946), stdev = 211,357
[info]   CI (99.9%): [≈ 0, 1177,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,634 ±(99.9%) 5,351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,634, 3,119), stdev = 1,390
[info]   CI (99.9%): [≈ 0, 5,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,520 ±(99.9%) 4,394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,520, 2,561), stdev = 1,141
[info]   CI (99.9%): [≈ 0, 4,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10,24% complete, ETA 01:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78319,676 ops/s
[info] # Warmup Iteration   2: 115572,333 ops/s
[info] # Warmup Iteration   3: 115635,413 ops/s
[info] # Warmup Iteration   4: 115409,082 ops/s
[info] # Warmup Iteration   5: 115047,545 ops/s
[info] Iteration   1: 115536,100 ops/s
[info]                  ·gc.alloc.rate:                   4194,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55559,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,134 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 115027,445 ops/s
[info]                  ·gc.alloc.rate:                   4175,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55867,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,570 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 115566,286 ops/s
[info]                  ·gc.alloc.rate:                   4195,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55629,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,567 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 115582,617 ops/s
[info]                  ·gc.alloc.rate:                   4196,319 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64945,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,567 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 115650,331 ops/s
[info]                  ·gc.alloc.rate:                   4198,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55639,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,283 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   115472,556 ±(99.9%) 971,599 ops/s [Average]
[info]   (min, avg, max) = (115027,445, 115472,556, 115650,331), stdev = 252,321
[info]   CI (99.9%): [114500,956, 116444,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4191,898 ±(99.9%) 35,197 MB/sec [Average]
[info]   (min, avg, max) = (4175,773, 4191,898, 4198,198), stdev = 9,141
[info]   CI (99.9%): [4156,701, 4227,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57136,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57136,004, 57136,004, 57136,004), stdev = 0,001
[info]   CI (99.9%): [57136,003, 57136,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4220,805 ±(99.9%) 1181,978 MB/sec [Average]
[info]   (min, avg, max) = (4078,440, 4220,805, 4769,869), stdev = 306,956
[info]   CI (99.9%): [3038,827, 5402,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   57528,235 ±(99.9%) 15972,097 B/op [Average]
[info]   (min, avg, max) = (55559,284, 57528,235, 64945,320), stdev = 4147,903
[info]   CI (99.9%): [41556,138, 73500,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,624 ±(99.9%) 1,196 B/op [Average]
[info]   (min, avg, max) = (0,283, 0,624, 1,134), stdev = 0,311
[info]   CI (99.9%): [≈ 0, 1,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10,44% complete, ETA 01:58:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 633769,191 ops/s
[info] # Warmup Iteration   2: 704700,435 ops/s
[info] # Warmup Iteration   3: 707547,501 ops/s
[info] # Warmup Iteration   4: 711168,129 ops/s
[info] # Warmup Iteration   5: 712446,672 ops/s
[info] Iteration   1: 713462,308 ops/s
[info]                  ·gc.alloc.rate:                   1863,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2966,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 712808,531 ops/s
[info]                  ·gc.alloc.rate:                   1862,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4459,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 706581,559 ops/s
[info]                  ·gc.alloc.rate:                   1846,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4505,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 711844,512 ops/s
[info]                  ·gc.alloc.rate:                   1859,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4478,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 713317,435 ops/s
[info]                  ·gc.alloc.rate:               1863,385 MB/sec
[info]                  ·gc.alloc.rate.norm:          4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2983,406 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   711602,869 ±(99.9%) 11080,695 ops/s [Average]
[info]   (min, avg, max) = (706581,559, 711602,869, 713462,308), stdev = 2877,621
[info]   CI (99.9%): [700522,174, 722683,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1859,148 ±(99.9%) 28,917 MB/sec [Average]
[info]   (min, avg, max) = (1846,005, 1859,148, 1863,937), stdev = 7,510
[info]   CI (99.9%): [1830,232, 1888,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,000, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1753,048 ±(99.9%) 1422,556 MB/sec [Average]
[info]   (min, avg, max) = (1344,785, 1753,048, 2025,647), stdev = 369,433
[info]   CI (99.9%): [330,492, 3175,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3878,837 ±(99.9%) 3177,627 B/op [Average]
[info]   (min, avg, max) = (2966,707, 3878,837, 4505,917), stdev = 825,220
[info]   CI (99.9%): [701,210, 7056,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,065 ±(99.9%) 0,202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,065, 0,138), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10,64% complete, ETA 01:58:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297955,439 ops/s
[info] # Warmup Iteration   2: 363114,785 ops/s
[info] # Warmup Iteration   3: 364252,363 ops/s
[info] # Warmup Iteration   4: 360109,557 ops/s
[info] # Warmup Iteration   5: 358338,117 ops/s
[info] Iteration   1: 364040,334 ops/s
[info]                  ·gc.alloc.rate:               560,567 MB/sec
[info]                  ·gc.alloc.rate.norm:          2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2211,730 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 365544,452 ops/s
[info]                  ·gc.alloc.rate:                   563,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2905,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,509 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 366635,081 ops/s
[info]                  ·gc.alloc.rate:                   564,680 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2896,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 365468,810 ops/s
[info]                  ·gc.alloc.rate:      562,922 MB/sec
[info]                  ·gc.alloc.rate.norm: 2424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 365201,007 ops/s
[info]                  ·gc.alloc.rate:                   562,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2896,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   365377,937 ±(99.9%) 3569,322 ops/s [Average]
[info]   (min, avg, max) = (364040,334, 365377,937, 366635,081), stdev = 926,941
[info]   CI (99.9%): [361808,615, 368947,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   562,724 ±(99.9%) 5,683 MB/sec [Average]
[info]   (min, avg, max) = (560,567, 562,724, 564,680), stdev = 1,476
[info]   CI (99.9%): [557,041, 568,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2424,001, 2424,001, 2424,001), stdev = 0,001
[info]   CI (99.9%): [2424,001, 2424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,628 ±(99.9%) 1123,682 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,628, 674,876), stdev = 291,817
[info]   CI (99.9%): [≈ 0, 1630,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2182,038 ±(99.9%) 4834,983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2182,038, 2905,485), stdev = 1255,630
[info]   CI (99.9%): [≈ 0, 7017,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,687 ±(99.9%) 5,777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,687, 3,370), stdev = 1,500
[info]   CI (99.9%): [≈ 0, 6,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,955 ±(99.9%) 24,871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,955, 14,509), stdev = 6,459
[info]   CI (99.9%): [≈ 0, 27,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10,84% complete, ETA 01:58:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300027,198 ops/s
[info] # Warmup Iteration   2: 1270128,859 ops/s
[info] # Warmup Iteration   3: 1173423,572 ops/s
[info] # Warmup Iteration   4: 1267537,193 ops/s
[info] # Warmup Iteration   5: 1272432,333 ops/s
[info] Iteration   1: 1274060,474 ops/s
[info]                  ·gc.alloc.rate:               589,211 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 631,965 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1272269,041 ops/s
[info]                  ·gc.alloc.rate:                   588,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,260 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1275104,570 ops/s
[info]                  ·gc.alloc.rate:                   589,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1273095,852 ops/s
[info]                  ·gc.alloc.rate:               588,877 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 831,712 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1273987,529 ops/s
[info]                  ·gc.alloc.rate:                   589,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1273703,493 ±(99.9%) 4128,461 ops/s [Average]
[info]   (min, avg, max) = (1272269,041, 1273703,493, 1275104,570), stdev = 1072,148
[info]   CI (99.9%): [1269575,032, 1277831,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   589,122 ±(99.9%) 1,899 MB/sec [Average]
[info]   (min, avg, max) = (588,483, 589,122, 589,820), stdev = 0,493
[info]   CI (99.9%): [587,223, 591,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   641,056 ±(99.9%) 278,925 MB/sec [Average]
[info]   (min, avg, max) = (511,485, 641,056, 674,178), stdev = 72,436
[info]   CI (99.9%): [362,131, 919,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   792,184 ±(99.9%) 344,907 B/op [Average]
[info]   (min, avg, max) = (631,965, 792,184, 833,968), stdev = 89,571
[info]   CI (99.9%): [447,277, 1137,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,540 ±(99.9%) 4,512 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,540, 2,635), stdev = 1,172
[info]   CI (99.9%): [≈ 0, 5,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,667 ±(99.9%) 5,581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,260), stdev = 1,449
[info]   CI (99.9%): [≈ 0, 6,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,04% complete, ETA 01:57:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 827992,804 ops/s
[info] # Warmup Iteration   2: 1130835,332 ops/s
[info] # Warmup Iteration   3: 1129556,079 ops/s
[info] # Warmup Iteration   4: 1130075,690 ops/s
[info] # Warmup Iteration   5: 1129556,036 ops/s
[info] Iteration   1: 1127171,121 ops/s
[info]                  ·gc.alloc.rate:                   796,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1876,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1135214,353 ops/s
[info]                  ·gc.alloc.rate:               802,068 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932,237 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1134822,847 ops/s
[info]                  ·gc.alloc.rate:               801,811 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 933,485 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1132218,063 ops/s
[info]                  ·gc.alloc.rate:                   800,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     935,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1134354,165 ops/s
[info]                  ·gc.alloc.rate:                   801,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1132756,110 ±(99.9%) 12821,797 ops/s [Average]
[info]   (min, avg, max) = (1127171,121, 1132756,110, 1135214,353), stdev = 3329,780
[info]   CI (99.9%): [1119934,313, 1145577,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   800,321 ±(99.9%) 9,067 MB/sec [Average]
[info]   (min, avg, max) = (796,358, 800,321, 802,068), stdev = 2,355
[info]   CI (99.9%): [791,254, 809,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1112,000, 1112,000, 1112,000), stdev = 0,001
[info]   CI (99.9%): [1112,000, 1112,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   807,206 ±(99.9%) 1155,003 MB/sec [Average]
[info]   (min, avg, max) = (672,408, 807,206, 1343,773), stdev = 299,951
[info]   CI (99.9%): [≈ 0, 1962,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1122,501 ±(99.9%) 1622,808 B/op [Average]
[info]   (min, avg, max) = (932,237, 1122,501, 1876,388), stdev = 421,438
[info]   CI (99.9%): [≈ 0, 2745,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,167), stdev = 0,070
[info]   CI (99.9%): [≈ 0, 0,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,064 ±(99.9%) 0,375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,064, 0,233), stdev = 0,097
[info]   CI (99.9%): [≈ 0, 0,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,24% complete, ETA 01:57:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1674104,284 ops/s
[info] # Warmup Iteration   2: 1714318,841 ops/s
[info] # Warmup Iteration   3: 1730948,487 ops/s
[info] # Warmup Iteration   4: 1732120,484 ops/s
[info] # Warmup Iteration   5: 1716897,589 ops/s
[info] Iteration   1: 1740562,281 ops/s
[info]                  ·gc.alloc.rate:                   805,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     610,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1748526,960 ops/s
[info]                  ·gc.alloc.rate:                   808,870 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     605,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1747859,767 ops/s
[info]                  ·gc.alloc.rate:                   808,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1210,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1742626,060 ops/s
[info]                  ·gc.alloc.rate:               806,112 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 607,004 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1739394,677 ops/s
[info]                  ·gc.alloc.rate:                   804,584 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     608,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   1743793,949 ±(99.9%) 16119,155 ops/s [Average]
[info]   (min, avg, max) = (1739394,677, 1743793,949, 1748526,960), stdev = 4186,093
[info]   CI (99.9%): [1727674,794, 1759913,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   806,610 ±(99.9%) 7,431 MB/sec [Average]
[info]   (min, avg, max) = (804,584, 806,610, 808,870), stdev = 1,930
[info]   CI (99.9%): [799,178, 814,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,316 ±(99.9%) 1156,769 MB/sec [Average]
[info]   (min, avg, max) = (672,113, 807,316, 1344,701), stdev = 300,409
[info]   CI (99.9%): [≈ 0, 1964,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   728,374 ±(99.9%) 1038,875 B/op [Average]
[info]   (min, avg, max) = (605,608, 728,374, 1210,985), stdev = 269,793
[info]   CI (99.9%): [≈ 0, 1767,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,056), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11,45% complete, ETA 01:57:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2764756,728 ops/s
[info] # Warmup Iteration   2: 2884744,454 ops/s
[info] # Warmup Iteration   3: 2890341,400 ops/s
[info] # Warmup Iteration   4: 2884904,306 ops/s
[info] # Warmup Iteration   5: 2885033,709 ops/s
[info] Iteration   1: 2890264,176 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2883677,636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2890911,934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2885036,467 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2885534,924 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2887085,027 ±(99.9%) 12619,592 ops/s [Average]
[info]   (min, avg, max) = (2883677,636, 2887085,027, 2890911,934), stdev = 3277,268
[info]   CI (99.9%): [2874465,436, 2899704,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11,65% complete, ETA 01:57:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346436,314 ops/s
[info] # Warmup Iteration   2: 433434,206 ops/s
[info] # Warmup Iteration   3: 437313,249 ops/s
[info] # Warmup Iteration   4: 434771,990 ops/s
[info] # Warmup Iteration   5: 441197,154 ops/s
[info] Iteration   1: 436234,657 ops/s
[info]                  ·gc.alloc.rate:               503,294 MB/sec
[info]                  ·gc.alloc.rate.norm:          1816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1845,619 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 442188,266 ops/s
[info]                  ·gc.alloc.rate:               510,232 MB/sec
[info]                  ·gc.alloc.rate.norm:          1816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1820,947 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 442610,475 ops/s
[info]                  ·gc.alloc.rate:                   510,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2394,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,513 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 442753,507 ops/s
[info]                  ·gc.alloc.rate:                   510,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              1816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2393,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 443625,903 ops/s
[info]                  ·gc.alloc.rate:      511,788 MB/sec
[info]                  ·gc.alloc.rate.norm: 1816,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   441482,561 ±(99.9%) 11474,647 ops/s [Average]
[info]   (min, avg, max) = (436234,657, 441482,561, 443625,903), stdev = 2979,930
[info]   CI (99.9%): [430007,914, 452957,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   509,370 ±(99.9%) 13,263 MB/sec [Average]
[info]   (min, avg, max) = (503,294, 509,370, 511,788), stdev = 3,444
[info]   CI (99.9%): [496,108, 522,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1816,001, 1816,001, 1816,001), stdev = 0,001
[info]   CI (99.9%): [1816,001, 1816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   473,979 ±(99.9%) 1066,785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473,979, 673,428), stdev = 277,041
[info]   CI (99.9%): [≈ 0, 1540,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1690,981 ±(99.9%) 3796,922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1690,981, 2394,561), stdev = 986,049
[info]   CI (99.9%): [≈ 0, 5487,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,772 ±(99.9%) 6,517 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,772, 3,800), stdev = 1,693
[info]   CI (99.9%): [≈ 0, 7,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,747 ±(99.9%) 23,177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,747, 13,513), stdev = 6,019
[info]   CI (99.9%): [≈ 0, 25,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11,85% complete, ETA 01:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190934,518 ops/s
[info] # Warmup Iteration   2: 198974,918 ops/s
[info] # Warmup Iteration   3: 198912,685 ops/s
[info] # Warmup Iteration   4: 200614,182 ops/s
[info] # Warmup Iteration   5: 199284,326 ops/s
[info] Iteration   1: 199124,364 ops/s
[info]                  ·gc.alloc.rate:               508,085 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4043,291 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 199588,555 ops/s
[info]                  ·gc.alloc.rate:      509,238 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 202571,461 ops/s
[info]                  ·gc.alloc.rate:                   516,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5242,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,623 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 204051,308 ops/s
[info]                  ·gc.alloc.rate:               520,688 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5204,578 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 203083,295 ops/s
[info]                  ·gc.alloc.rate:                   518,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5213,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,323 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   201683,796 ±(99.9%) 8456,611 ops/s [Average]
[info]   (min, avg, max) = (199124,364, 201683,796, 204051,308), stdev = 2196,155
[info]   CI (99.9%): [193227,185, 210140,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   514,596 ±(99.9%) 21,588 MB/sec [Average]
[info]   (min, avg, max) = (508,085, 514,596, 520,688), stdev = 5,606
[info]   CI (99.9%): [493,009, 536,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,730 ±(99.9%) 1123,928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,730, 674,791), stdev = 291,880
[info]   CI (99.9%): [≈ 0, 1630,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3940,789 ±(99.9%) 8707,038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3940,789, 5242,440), stdev = 2261,190
[info]   CI (99.9%): [≈ 0, 12647,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,169), stdev = 1,413
[info]   CI (99.9%): [≈ 0, 6,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,989 ±(99.9%) 42,267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,989, 24,623), stdev = 10,977
[info]   CI (99.9%): [≈ 0, 47,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12,05% complete, ETA 01:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137838,576 ops/s
[info] # Warmup Iteration   2: 157853,250 ops/s
[info] # Warmup Iteration   3: 159261,982 ops/s
[info] # Warmup Iteration   4: 159343,759 ops/s
[info] # Warmup Iteration   5: 159093,262 ops/s
[info] Iteration   1: 159983,855 ops/s
[info]                  ·gc.alloc.rate:                   1920,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19849,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,410 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 159801,276 ops/s
[info]                  ·gc.alloc.rate:                   1918,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19904,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,820 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 159687,984 ops/s
[info]                  ·gc.alloc.rate:                   1917,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13294,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,410 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 159354,833 ops/s
[info]                  ·gc.alloc.rate:                   1913,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20005,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,411 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 158848,575 ops/s
[info]                  ·gc.alloc.rate:                   1906,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20102,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   159535,304 ±(99.9%) 1721,433 ops/s [Average]
[info]   (min, avg, max) = (158848,575, 159535,304, 159983,855), stdev = 447,051
[info]   CI (99.9%): [157813,871, 161256,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1915,344 ±(99.9%) 21,336 MB/sec [Average]
[info]   (min, avg, max) = (1906,747, 1915,344, 1920,805), stdev = 5,541
[info]   CI (99.9%): [1894,009, 1936,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18896,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18896,003, 18896,003, 18896,003), stdev = 0,001
[info]   CI (99.9%): [18896,003, 18896,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,364 ±(99.9%) 1161,401 MB/sec [Average]
[info]   (min, avg, max) = (1348,874, 1888,364, 2028,477), stdev = 301,612
[info]   CI (99.9%): [726,963, 3049,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18631,338 ±(99.9%) 11493,870 B/op [Average]
[info]   (min, avg, max) = (13294,555, 18631,338, 20102,354), stdev = 2984,922
[info]   CI (99.9%): [7137,468, 30125,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,493 ±(99.9%) 0,705 B/op [Average]
[info]   (min, avg, max) = (0,410, 0,493, 0,820), stdev = 0,183
[info]   CI (99.9%): [≈ 0, 1,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,25% complete, ETA 01:56:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353542,340 ops/s
[info] # Warmup Iteration   2: 486977,820 ops/s
[info] # Warmup Iteration   3: 487133,746 ops/s
[info] # Warmup Iteration   4: 483819,772 ops/s
[info] # Warmup Iteration   5: 485292,621 ops/s
[info] Iteration   1: 486715,945 ops/s
[info]                  ·gc.alloc.rate:               390,883 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1654,194 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 486541,832 ops/s
[info]                  ·gc.alloc.rate:               390,749 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1654,867 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 486617,846 ops/s
[info]                  ·gc.alloc.rate:      390,787 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 485269,096 ops/s
[info]                  ·gc.alloc.rate:                   389,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2187,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,473 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 486101,584 ops/s
[info]                  ·gc.alloc.rate:      390,415 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   486249,261 ±(99.9%) 2295,721 ops/s [Average]
[info]   (min, avg, max) = (485269,096, 486249,261, 486715,945), stdev = 596,192
[info]   CI (99.9%): [483953,539, 488544,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   390,514 ±(99.9%) 1,806 MB/sec [Average]
[info]   (min, avg, max) = (389,737, 390,514, 390,883), stdev = 0,469
[info]   CI (99.9%): [388,708, 392,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   339,513 ±(99.9%) 1220,592 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,513, 674,436), stdev = 316,984
[info]   CI (99.9%): [≈ 0, 1560,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1099,281 ±(99.9%) 3953,862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1099,281, 2187,342), stdev = 1026,806
[info]   CI (99.9%): [≈ 0, 5053,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,146), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,095 ±(99.9%) 0,814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,095, 0,473), stdev = 0,211
[info]   CI (99.9%): [≈ 0, 0,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,45% complete, ETA 01:56:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 899912,766 ops/s
[info] # Warmup Iteration   2: 917856,010 ops/s
[info] # Warmup Iteration   3: 909750,248 ops/s
[info] # Warmup Iteration   4: 931378,512 ops/s
[info] # Warmup Iteration   5: 927584,278 ops/s
[info] Iteration   1: 926702,724 ops/s
[info]                  ·gc.alloc.rate:               178,989 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 868,802 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 931623,636 ops/s
[info]                  ·gc.alloc.rate:      179,963 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 930487,625 ops/s
[info]                  ·gc.alloc.rate:      179,729 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 925488,247 ops/s
[info]                  ·gc.alloc.rate:               178,762 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 869,938 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 930321,282 ops/s
[info]                  ·gc.alloc.rate:      179,671 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   928924,703 ±(99.9%) 10264,660 ops/s [Average]
[info]   (min, avg, max) = (925488,247, 928924,703, 931623,636), stdev = 2665,700
[info]   CI (99.9%): [918660,043, 939189,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   179,423 ±(99.9%) 1,993 MB/sec [Average]
[info]   (min, avg, max) = (178,762, 179,423, 179,963), stdev = 0,518
[info]   CI (99.9%): [177,430, 181,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,617 ±(99.9%) 1078,886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,617, 511,552), stdev = 280,183
[info]   CI (99.9%): [≈ 0, 1283,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   347,748 ±(99.9%) 1833,576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 347,748, 869,938), stdev = 476,174
[info]   CI (99.9%): [≈ 0, 2181,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12,65% complete, ETA 01:55:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64199,071 ops/s
[info] # Warmup Iteration   2: 96961,158 ops/s
[info] # Warmup Iteration   3: 96921,866 ops/s
[info] # Warmup Iteration   4: 96205,362 ops/s
[info] # Warmup Iteration   5: 97317,870 ops/s
[info] Iteration   1: 96853,005 ops/s
[info]                  ·gc.alloc.rate:                   4123,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4077,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66265,959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,691 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 97420,562 ops/s
[info]                  ·gc.alloc.rate:                   4147,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65948,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,345 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 97236,982 ops/s
[info]                  ·gc.alloc.rate:                   4140,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4765,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77136,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,011 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 96663,039 ops/s
[info]                  ·gc.alloc.rate:                   4116,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66556,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,033 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 96744,020 ops/s
[info]                  ·gc.alloc.rate:                   4119,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66511,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,693 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   96983,522 ±(99.9%) 1265,966 ops/s [Average]
[info]   (min, avg, max) = (96663,039, 96983,522, 97420,562), stdev = 328,767
[info]   CI (99.9%): [95717,556, 98249,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4129,459 ±(99.9%) 53,892 MB/sec [Average]
[info]   (min, avg, max) = (4116,312, 4129,459, 4147,969), stdev = 13,996
[info]   CI (99.9%): [4075,567, 4183,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67016,004, 67016,004, 67016,005), stdev = 0,001
[info]   CI (99.9%): [67016,004, 67016,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4220,233 ±(99.9%) 1174,667 MB/sec [Average]
[info]   (min, avg, max) = (4077,111, 4220,233, 4765,873), stdev = 305,057
[info]   CI (99.9%): [3045,565, 5394,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68483,873 ±(99.9%) 18648,362 B/op [Average]
[info]   (min, avg, max) = (65948,988, 68483,873, 77136,377), stdev = 4842,920
[info]   CI (99.9%): [49835,511, 87132,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,096 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,125), stdev = 0,024
[info]   CI (99.9%): [0,004, 0,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,555 ±(99.9%) 1,500 B/op [Average]
[info]   (min, avg, max) = (1,011, 1,555, 2,033), stdev = 0,389
[info]   CI (99.9%): [0,055, 3,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12,85% complete, ETA 01:55:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253069,019 ops/s
[info] # Warmup Iteration   2: 272630,678 ops/s
[info] # Warmup Iteration   3: 273012,624 ops/s
[info] # Warmup Iteration   4: 272904,975 ops/s
[info] # Warmup Iteration   5: 272933,083 ops/s
[info] Iteration   1: 272058,692 ops/s
[info]                  ·gc.alloc.rate:                   1241,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7776,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 271796,404 ops/s
[info]                  ·gc.alloc.rate:                   1240,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7784,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 271517,172 ops/s
[info]                  ·gc.alloc.rate:                   1239,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7791,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,362 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 271239,932 ops/s
[info]                  ·gc.alloc.rate:                   1238,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7807,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,242 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 271386,981 ops/s
[info]                  ·gc.alloc.rate:               1238,561 MB/sec
[info]                  ·gc.alloc.rate.norm:          7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3905,520 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   271599,836 ±(99.9%) 1263,778 ops/s [Average]
[info]   (min, avg, max) = (271239,932, 271599,836, 272058,692), stdev = 328,199
[info]   CI (99.9%): [270336,058, 272863,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1239,678 ±(99.9%) 5,755 MB/sec [Average]
[info]   (min, avg, max) = (1238,128, 1239,678, 1241,721), stdev = 1,495
[info]   CI (99.9%): [1233,923, 1245,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7184,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7184,001, 7184,002, 7184,002), stdev = 0,001
[info]   CI (99.9%): [7184,001, 7184,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,270 ±(99.9%) 1155,801 MB/sec [Average]
[info]   (min, avg, max) = (673,333, 1210,270, 1345,538), stdev = 300,158
[info]   CI (99.9%): [54,469, 2366,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7012,890 ±(99.9%) 6688,995 B/op [Average]
[info]   (min, avg, max) = (3905,520, 7012,890, 7807,225), stdev = 1737,111
[info]   CI (99.9%): [323,895, 13701,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,217 ±(99.9%) 0,509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,217, 0,362), stdev = 0,132
[info]   CI (99.9%): [≈ 0, 0,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13,05% complete, ETA 01:55:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294591,353 ops/s
[info] # Warmup Iteration   2: 364069,648 ops/s
[info] # Warmup Iteration   3: 364289,889 ops/s
[info] # Warmup Iteration   4: 365756,973 ops/s
[info] # Warmup Iteration   5: 365202,879 ops/s
[info] Iteration   1: 366063,108 ops/s
[info]                  ·gc.alloc.rate:                   1620,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5773,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 362908,289 ops/s
[info]                  ·gc.alloc.rate:                   1606,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5826,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 363196,793 ops/s
[info]                  ·gc.alloc.rate:                   1608,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8743,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 366436,522 ops/s
[info]                  ·gc.alloc.rate:               1622,438 MB/sec
[info]                  ·gc.alloc.rate.norm:          6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5785,034 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 365292,670 ops/s
[info]                  ·gc.alloc.rate:                   1617,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8720,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   364779,476 ±(99.9%) 6287,026 ops/s [Average]
[info]   (min, avg, max) = (362908,289, 364779,476, 366436,522), stdev = 1632,721
[info]   CI (99.9%): [358492,450, 371066,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1614,973 ±(99.9%) 27,850 MB/sec [Average]
[info]   (min, avg, max) = (1606,678, 1614,973, 1622,438), stdev = 7,233
[info]   CI (99.9%): [1587,123, 1642,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6968,001, 6968,001, 6968,001), stdev = 0,001
[info]   CI (99.9%): [6968,001, 6968,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,937 ±(99.9%) 1426,386 MB/sec [Average]
[info]   (min, avg, max) = (1342,782, 1614,937, 2023,722), stdev = 370,428
[info]   CI (99.9%): [188,551, 3041,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6969,665 ±(99.9%) 6194,148 B/op [Average]
[info]   (min, avg, max) = (5773,428, 6969,665, 8743,233), stdev = 1608,601
[info]   CI (99.9%): [775,517, 13163,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,126 ±(99.9%) 0,527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,126, 0,361), stdev = 0,137
[info]   CI (99.9%): [≈ 0, 0,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,25% complete, ETA 01:55:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1394983,980 ops/s
[info] # Warmup Iteration   2: 2189488,228 ops/s
[info] # Warmup Iteration   3: 2216571,135 ops/s
[info] # Warmup Iteration   4: 2215458,833 ops/s
[info] # Warmup Iteration   5: 2218101,960 ops/s
[info] Iteration   1: 2220852,362 ops/s
[info]                  ·gc.alloc.rate:               1140,128 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,125 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2220685,473 ops/s
[info]                  ·gc.alloc.rate:                   1140,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958,865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2218609,105 ops/s
[info]                  ·gc.alloc.rate:                   1138,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     960,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2220169,003 ops/s
[info]                  ·gc.alloc.rate:               1139,806 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,996 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2217460,984 ops/s
[info]                  ·gc.alloc.rate:                   1138,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2219555,385 ±(99.9%) 5651,972 ops/s [Average]
[info]   (min, avg, max) = (2217460,984, 2219555,385, 2220852,362), stdev = 1467,799
[info]   CI (99.9%): [2213903,413, 2225207,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1139,440 ±(99.9%) 3,316 MB/sec [Average]
[info]   (min, avg, max) = (1138,264, 1139,440, 1140,197), stdev = 0,861
[info]   CI (99.9%): [1136,124, 1142,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (808,000, 808,000, 808,000), stdev = 0,001
[info]   CI (99.9%): [808,000, 808,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1083,043 ±(99.9%) 1428,753 MB/sec [Average]
[info]   (min, avg, max) = (676,069, 1083,043, 1355,367), stdev = 371,043
[info]   CI (99.9%): [≈ 0, 2511,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   768,098 ±(99.9%) 1014,259 B/op [Average]
[info]   (min, avg, max) = (479,125, 768,098, 962,111), stdev = 263,400
[info]   CI (99.9%): [≈ 0, 1782,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,030), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,45% complete, ETA 01:54:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2193719,006 ops/s
[info] # Warmup Iteration   2: 2300514,404 ops/s
[info] # Warmup Iteration   3: 2316910,583 ops/s
[info] # Warmup Iteration   4: 2285704,879 ops/s
[info] # Warmup Iteration   5: 2305189,114 ops/s
[info] Iteration   1: 2312984,564 ops/s
[info]                  ·gc.alloc.rate:                   623,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2311306,962 ops/s
[info]                  ·gc.alloc.rate:      622,674 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2314976,584 ops/s
[info]                  ·gc.alloc.rate:                   623,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     458,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2317766,940 ops/s
[info]                  ·gc.alloc.rate:               624,452 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456,828 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2314132,254 ops/s
[info]                  ·gc.alloc.rate:               623,422 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 457,547 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2314233,461 ±(99.9%) 9267,999 ops/s [Average]
[info]   (min, avg, max) = (2311306,962, 2314233,461, 2317766,940), stdev = 2406,870
[info]   CI (99.9%): [2304965,462, 2323501,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   623,443 ±(99.9%) 2,568 MB/sec [Average]
[info]   (min, avg, max) = (622,674, 623,443, 624,452), stdev = 0,667
[info]   CI (99.9%): [620,875, 626,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,000, 424,000, 424,000), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,119 ±(99.9%) 1160,502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,119, 675,029), stdev = 301,379
[info]   CI (99.9%): [≈ 0, 1699,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   366,539 ±(99.9%) 789,014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 366,539, 459,356), stdev = 204,904
[info]   CI (99.9%): [≈ 0, 1155,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,633 ±(99.9%) 5,274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,633, 3,082), stdev = 1,370
[info]   CI (99.9%): [≈ 0, 5,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,431 ±(99.9%) 3,589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,431, 2,098), stdev = 0,932
[info]   CI (99.9%): [≈ 0, 4,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13,65% complete, ETA 01:54:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2079221,589 ops/s
[info] # Warmup Iteration   2: 2171702,593 ops/s
[info] # Warmup Iteration   3: 2179033,313 ops/s
[info] # Warmup Iteration   4: 2175065,352 ops/s
[info] # Warmup Iteration   5: 2170877,722 ops/s
[info] Iteration   1: 2180896,625 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2176247,153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2181187,439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2175574,447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2178664,115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2178513,956 ±(99.9%) 9934,788 ops/s [Average]
[info]   (min, avg, max) = (2175574,447, 2178513,956, 2181187,439), stdev = 2580,033
[info]   CI (99.9%): [2168579,168, 2188448,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13,86% complete, ETA 01:54:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37109,288 ops/s
[info] # Warmup Iteration   2: 51632,588 ops/s
[info] # Warmup Iteration   3: 52262,236 ops/s
[info] # Warmup Iteration   4: 52217,860 ops/s
[info] # Warmup Iteration   5: 51943,293 ops/s
[info] Iteration   1: 51980,058 ops/s
[info]                  ·gc.alloc.rate:                   2190,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60988,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,630 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 51743,836 ops/s
[info]                  ·gc.alloc.rate:                   2180,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61387,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,899 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 52205,824 ops/s
[info]                  ·gc.alloc.rate:                   2200,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60963,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,628 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 52000,849 ops/s
[info]                  ·gc.alloc.rate:                   2191,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81768,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,520 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 52014,037 ops/s
[info]                  ·gc.alloc.rate:               2192,103 MB/sec
[info]                  ·gc.alloc.rate.norm:          66336,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2030,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61440,866 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   51988,921 ±(99.9%) 632,624 ops/s [Average]
[info]   (min, avg, max) = (51743,836, 51988,921, 52205,824), stdev = 164,290
[info]   CI (99.9%): [51356,297, 52621,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2191,243 ±(99.9%) 26,670 MB/sec [Average]
[info]   (min, avg, max) = (2180,940, 2191,243, 2200,430), stdev = 6,926
[info]   CI (99.9%): [2164,573, 2217,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66336,008, 66336,008, 66336,009), stdev = 0,001
[info]   CI (99.9%): [66336,006, 66336,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2157,375 ±(99.9%) 1172,207 MB/sec [Average]
[info]   (min, avg, max) = (2014,215, 2157,375, 2701,831), stdev = 304,418
[info]   CI (99.9%): [985,169, 3329,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65309,837 ±(99.9%) 35438,620 B/op [Average]
[info]   (min, avg, max) = (60963,954, 65309,837, 81768,486), stdev = 9203,297
[info]   CI (99.9%): [29871,217, 100748,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,135 ±(99.9%) 3,994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,135, 2,520), stdev = 1,037
[info]   CI (99.9%): [≈ 0, 5,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14,06% complete, ETA 01:53:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158590,010 ops/s
[info] # Warmup Iteration   2: 167976,431 ops/s
[info] # Warmup Iteration   3: 168196,789 ops/s
[info] # Warmup Iteration   4: 167840,654 ops/s
[info] # Warmup Iteration   5: 168058,695 ops/s
[info] Iteration   1: 168176,323 ops/s
[info]                  ·gc.alloc.rate:               895,746 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6295,844 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 168747,880 ops/s
[info]                  ·gc.alloc.rate:               898,878 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6275,178 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 168689,364 ops/s
[info]                  ·gc.alloc.rate:                   898,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12542,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,583 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 168349,613 ops/s
[info]                  ·gc.alloc.rate:               896,840 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6283,037 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 168703,767 ops/s
[info]                  ·gc.alloc.rate:               898,618 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6270,154 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   168533,389 ±(99.9%) 982,919 ops/s [Average]
[info]   (min, avg, max) = (168176,323, 168533,389, 168747,880), stdev = 255,261
[info]   CI (99.9%): [167550,470, 169516,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   897,740 ±(99.9%) 5,316 MB/sec [Average]
[info]   (min, avg, max) = (895,746, 897,740, 898,878), stdev = 1,381
[info]   CI (99.9%): [892,424, 903,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8384,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8384,002, 8384,002, 8384,002), stdev = 0,001
[info]   CI (99.9%): [8384,002, 8384,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806,781 ±(99.9%) 1157,106 MB/sec [Average]
[info]   (min, avg, max) = (672,050, 806,781, 1344,326), stdev = 300,497
[info]   CI (99.9%): [≈ 0, 1963,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7533,320 ±(99.9%) 10782,462 B/op [Average]
[info]   (min, avg, max) = (6270,154, 7533,320, 12542,389), stdev = 2800,171
[info]   CI (99.9%): [≈ 0, 18315,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,117 ±(99.9%) 1,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,583), stdev = 0,261
[info]   CI (99.9%): [≈ 0, 1,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14,26% complete, ETA 01:53:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223696,886 ops/s
[info] # Warmup Iteration   2: 252700,241 ops/s
[info] # Warmup Iteration   3: 254828,399 ops/s
[info] # Warmup Iteration   4: 253993,881 ops/s
[info] # Warmup Iteration   5: 252637,385 ops/s
[info] Iteration   1: 253752,054 ops/s
[info]                  ·gc.alloc.rate:                   2611,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16731,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 253697,513 ops/s
[info]                  ·gc.alloc.rate:                   2611,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16768,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 254462,772 ops/s
[info]                  ·gc.alloc.rate:                   2619,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16750,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,644 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 252787,510 ops/s
[info]                  ·gc.alloc.rate:                   2602,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12666,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,518 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 254753,641 ops/s
[info]                  ·gc.alloc.rate:                   2621,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16775,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,643 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   253890,698 ±(99.9%) 2948,640 ops/s [Average]
[info]   (min, avg, max) = (252787,510, 253890,698, 254753,641), stdev = 765,752
[info]   CI (99.9%): [250942,058, 256839,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2613,232 ±(99.9%) 29,323 MB/sec [Average]
[info]   (min, avg, max) = (2602,223, 2613,232, 2621,552), stdev = 7,615
[info]   CI (99.9%): [2583,908, 2642,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16200,002, 16200,002, 16200,002), stdev = 0,001
[info]   CI (99.9%): [16200,001, 16200,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2571,646 ±(99.9%) 1156,048 MB/sec [Average]
[info]   (min, avg, max) = (2034,713, 2571,646, 2714,696), stdev = 300,222
[info]   CI (99.9%): [1415,598, 3727,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15938,745 ±(99.9%) 7042,987 B/op [Average]
[info]   (min, avg, max) = (12666,996, 15938,745, 16775,586), stdev = 1829,041
[info]   CI (99.9%): [8895,758, 22981,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,021
[info]   CI (99.9%): [0,003, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,516 ±(99.9%) 0,493 B/op [Average]
[info]   (min, avg, max) = (0,387, 0,516, 0,644), stdev = 0,128
[info]   CI (99.9%): [0,023, 1,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,46% complete, ETA 01:53:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261041,255 ops/s
[info] # Warmup Iteration   2: 355182,690 ops/s
[info] # Warmup Iteration   3: 356683,414 ops/s
[info] # Warmup Iteration   4: 355743,272 ops/s
[info] # Warmup Iteration   5: 354991,004 ops/s
[info] Iteration   1: 355320,873 ops/s
[info]                  ·gc.alloc.rate:               1712,077 MB/sec
[info]                  ·gc.alloc.rate.norm:          7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5998,084 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 355602,983 ops/s
[info]                  ·gc.alloc.rate:                   1713,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8998,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,369 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 356459,273 ops/s
[info]                  ·gc.alloc.rate:                   1717,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5989,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 355500,739 ops/s
[info]                  ·gc.alloc.rate:                   1713,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9013,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 355495,821 ops/s
[info]                  ·gc.alloc.rate:                   1713,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9019,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   355675,938 ±(99.9%) 1730,804 ops/s [Average]
[info]   (min, avg, max) = (355320,873, 355675,938, 356459,273), stdev = 449,484
[info]   CI (99.9%): [353945,134, 357406,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1713,961 ±(99.9%) 8,265 MB/sec [Average]
[info]   (min, avg, max) = (1712,077, 1713,961, 1717,654), stdev = 2,146
[info]   CI (99.9%): [1705,697, 1722,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7584,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7584,001, 7584,001, 7584,001), stdev = 0,001
[info]   CI (99.9%): [7584,001, 7584,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1763,463 ±(99.9%) 1434,880 MB/sec [Average]
[info]   (min, avg, max) = (1354,058, 1763,463, 2037,500), stdev = 372,634
[info]   CI (99.9%): [328,583, 3198,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7803,676 ±(99.9%) 6362,462 B/op [Average]
[info]   (min, avg, max) = (5989,283, 7803,676, 9019,501), stdev = 1652,311
[info]   CI (99.9%): [1441,215, 14166,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,166 ±(99.9%) 0,526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,166, 0,369), stdev = 0,137
[info]   CI (99.9%): [≈ 0, 0,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,66% complete, ETA 01:53:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1361452,865 ops/s
[info] # Warmup Iteration   2: 1384694,573 ops/s
[info] # Warmup Iteration   3: 1409071,122 ops/s
[info] # Warmup Iteration   4: 1401826,104 ops/s
[info] # Warmup Iteration   5: 1405318,681 ops/s
[info] Iteration   1: 1403271,341 ops/s
[info]                  ·gc.alloc.rate:               484,997 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 573,744 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1402752,337 ops/s
[info]                  ·gc.alloc.rate:                   484,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1406283,602 ops/s
[info]                  ·gc.alloc.rate:                   486,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,476 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1407244,734 ops/s
[info]                  ·gc.alloc.rate:                   486,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     754,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1357482,076 ops/s
[info]                  ·gc.alloc.rate:      469,187 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1395406,818 ±(99.9%) 81968,401 ops/s [Average]
[info]   (min, avg, max) = (1357482,076, 1395406,818, 1407244,734), stdev = 21286,933
[info]   CI (99.9%): [1313438,417, 1477375,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   482,300 ±(99.9%) 28,353 MB/sec [Average]
[info]   (min, avg, max) = (469,187, 482,300, 486,484), stdev = 7,363
[info]   CI (99.9%): [453,947, 510,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,515 ±(99.9%) 1068,699 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,515, 674,865), stdev = 277,538
[info]   CI (99.9%): [≈ 0, 1543,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   531,506 ±(99.9%) 1196,037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 531,506, 755,175), stdev = 310,607
[info]   CI (99.9%): [≈ 0, 1727,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,634 ±(99.9%) 5,320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,634, 3,105), stdev = 1,381
[info]   CI (99.9%): [≈ 0, 5,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,710 ±(99.9%) 5,954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,710, 3,476), stdev = 1,546
[info]   CI (99.9%): [≈ 0, 6,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14,86% complete, ETA 01:52:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52410,231 ops/s
[info] # Warmup Iteration   2: 94399,078 ops/s
[info] # Warmup Iteration   3: 94633,830 ops/s
[info] # Warmup Iteration   4: 94055,769 ops/s
[info] # Warmup Iteration   5: 94702,322 ops/s
[info] Iteration   1: 95106,456 ops/s
[info]                  ·gc.alloc.rate:                   3993,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56267,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 94482,912 ops/s
[info]                  ·gc.alloc.rate:                   3968,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68032,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,734 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 95197,035 ops/s
[info]                  ·gc.alloc.rate:                   3998,475 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67544,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,032 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 94719,849 ops/s
[info]                  ·gc.alloc.rate:                   3978,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67935,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,038 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 94568,532 ops/s
[info]                  ·gc.alloc.rate:                   3971,669 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68044,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,771 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   94814,957 ±(99.9%) 1234,280 ops/s [Average]
[info]   (min, avg, max) = (94482,912, 94814,957, 95197,035), stdev = 320,539
[info]   CI (99.9%): [93580,677, 96049,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3982,149 ±(99.9%) 51,661 MB/sec [Average]
[info]   (min, avg, max) = (3968,302, 3982,149, 3998,475), stdev = 13,416
[info]   CI (99.9%): [3930,488, 4033,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66104,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66104,004, 66104,004, 66104,005), stdev = 0,001
[info]   CI (99.9%): [66104,003, 66104,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3949,243 ±(99.9%) 1183,185 MB/sec [Average]
[info]   (min, avg, max) = (3399,593, 3949,243, 4088,645), stdev = 307,269
[info]   CI (99.9%): [2766,058, 5132,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65565,086 ±(99.9%) 20028,868 B/op [Average]
[info]   (min, avg, max) = (56267,608, 65565,086, 68044,863), stdev = 5201,433
[info]   CI (99.9%): [45536,218, 85593,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,167), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,453 ±(99.9%) 3,193 B/op [Average]
[info]   (min, avg, max) = (0,689, 1,453, 2,771), stdev = 0,829
[info]   CI (99.9%): [≈ 0, 4,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15,06% complete, ETA 01:52:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236950,868 ops/s
[info] # Warmup Iteration   2: 258575,714 ops/s
[info] # Warmup Iteration   3: 258184,965 ops/s
[info] # Warmup Iteration   4: 258789,079 ops/s
[info] # Warmup Iteration   5: 258818,977 ops/s
[info] Iteration   1: 259300,737 ops/s
[info]                  ·gc.alloc.rate:                   2746,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16383,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 259702,838 ops/s
[info]                  ·gc.alloc.rate:                   2750,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16389,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,378 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 258401,754 ops/s
[info]                  ·gc.alloc.rate:                   2736,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16503,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,254 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 258644,219 ops/s
[info]                  ·gc.alloc.rate:                   2739,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16512,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 259038,275 ops/s
[info]                  ·gc.alloc.rate:                   2743,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16507,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   259017,565 ±(99.9%) 1990,475 ops/s [Average]
[info]   (min, avg, max) = (258401,754, 259017,565, 259702,838), stdev = 516,920
[info]   CI (99.9%): [257027,090, 261008,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2743,619 ±(99.9%) 21,244 MB/sec [Average]
[info]   (min, avg, max) = (2736,970, 2743,619, 2750,955), stdev = 5,517
[info]   CI (99.9%): [2722,375, 2764,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   16672,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16672,002, 16672,002, 16672,002), stdev = 0,001
[info]   CI (99.9%): [16672,001, 16672,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2708,615 ±(99.9%) 26,847 MB/sec [Average]
[info]   (min, avg, max) = (2699,187, 2708,615, 2716,435), stdev = 6,972
[info]   CI (99.9%): [2681,768, 2735,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16459,382 ±(99.9%) 256,777 B/op [Average]
[info]   (min, avg, max) = (16383,116, 16459,382, 16512,561), stdev = 66,684
[info]   CI (99.9%): [16202,605, 16716,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,228 ±(99.9%) 0,406 B/op [Average]
[info]   (min, avg, max) = (0,126, 0,228, 0,378), stdev = 0,106
[info]   CI (99.9%): [≈ 0, 0,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15,26% complete, ETA 01:52:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202524,608 ops/s
[info] # Warmup Iteration   2: 252222,735 ops/s
[info] # Warmup Iteration   3: 253564,207 ops/s
[info] # Warmup Iteration   4: 252882,503 ops/s
[info] # Warmup Iteration   5: 253214,416 ops/s
[info] Iteration   1: 252870,856 ops/s
[info]                  ·gc.alloc.rate:                   2142,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16740,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,518 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 253501,616 ops/s
[info]                  ·gc.alloc.rate:                   2147,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12549,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,388 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 253512,485 ops/s
[info]                  ·gc.alloc.rate:                   2147,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12568,952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,388 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 253211,213 ops/s
[info]                  ·gc.alloc.rate:                   2145,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12604,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 253384,772 ops/s
[info]                  ·gc.alloc.rate:                   2146,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12613,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   253296,188 ±(99.9%) 1027,770 ops/s [Average]
[info]   (min, avg, max) = (252870,856, 253296,188, 253512,485), stdev = 266,908
[info]   CI (99.9%): [252268,419, 254323,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2146,148 ±(99.9%) 8,595 MB/sec [Average]
[info]   (min, avg, max) = (2142,556, 2146,148, 2147,979), stdev = 2,232
[info]   CI (99.9%): [2137,553, 2154,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,002, 13336,002, 13336,002), stdev = 0,001
[info]   CI (99.9%): [13336,001, 13336,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2158,699 ±(99.9%) 1142,652 MB/sec [Average]
[info]   (min, avg, max) = (2021,348, 2158,699, 2689,495), stdev = 296,743
[info]   CI (99.9%): [1016,047, 3301,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13415,394 ±(99.9%) 7157,878 B/op [Average]
[info]   (min, avg, max) = (12549,909, 13415,394, 16740,336), stdev = 1858,878
[info]   CI (99.9%): [6257,515, 20573,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,336 ±(99.9%) 0,569 B/op [Average]
[info]   (min, avg, max) = (0,129, 0,336, 0,518), stdev = 0,148
[info]   CI (99.9%): [≈ 0, 0,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,46% complete, ETA 01:52:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1034295,675 ops/s
[info] # Warmup Iteration   2: 1391659,900 ops/s
[info] # Warmup Iteration   3: 1412964,220 ops/s
[info] # Warmup Iteration   4: 1410313,330 ops/s
[info] # Warmup Iteration   5: 1393366,993 ops/s
[info] Iteration   1: 1405590,034 ops/s
[info]                  ·gc.alloc.rate:                   821,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1409778,095 ops/s
[info]                  ·gc.alloc.rate:               824,125 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 753,715 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1409561,696 ops/s
[info]                  ·gc.alloc.rate:                   823,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     754,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1409576,899 ops/s
[info]                  ·gc.alloc.rate:               824,213 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 754,870 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1401286,183 ops/s
[info]                  ·gc.alloc.rate:                   819,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1519,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1407158,582 ±(99.9%) 14334,339 ops/s [Average]
[info]   (min, avg, max) = (1401286,183, 1407158,582, 1409778,095), stdev = 3722,582
[info]   CI (99.9%): [1392824,242, 1421492,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   822,587 ±(99.9%) 8,606 MB/sec [Average]
[info]   (min, avg, max) = (819,075, 822,587, 824,213), stdev = 2,235
[info]   CI (99.9%): [813,980, 831,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   811,080 ±(99.9%) 1166,225 MB/sec [Average]
[info]   (min, avg, max) = (675,071, 811,080, 1352,860), stdev = 302,865
[info]   CI (99.9%): [≈ 0, 1977,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   907,784 ±(99.9%) 1316,893 B/op [Average]
[info]   (min, avg, max) = (753,715, 907,784, 1519,558), stdev = 341,993
[info]   CI (99.9%): [≈ 0, 2224,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,033 ±(99.9%) 0,150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,093), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,66% complete, ETA 01:51:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2814881,673 ops/s
[info] # Warmup Iteration   2: 2950974,594 ops/s
[info] # Warmup Iteration   3: 2961068,958 ops/s
[info] # Warmup Iteration   4: 2956937,037 ops/s
[info] # Warmup Iteration   5: 2971117,946 ops/s
[info] Iteration   1: 2959859,128 ops/s
[info]                  ·gc.alloc.rate:                   1007,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2959658,832 ops/s
[info]                  ·gc.alloc.rate:                   1007,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2971112,077 ops/s
[info]                  ·gc.alloc.rate:               1011,752 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356,026 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2965619,746 ops/s
[info]                  ·gc.alloc.rate:                   1010,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     713,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2957140,801 ops/s
[info]                  ·gc.alloc.rate:               1007,101 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 357,699 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2962678,117 ±(99.9%) 21740,758 ops/s [Average]
[info]   (min, avg, max) = (2957140,801, 2962678,117, 2971112,077), stdev = 5646,006
[info]   CI (99.9%): [2940937,359, 2984418,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1008,958 ±(99.9%) 7,339 MB/sec [Average]
[info]   (min, avg, max) = (1007,101, 1008,958, 1011,752), stdev = 1,906
[info]   CI (99.9%): [1001,619, 1016,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,074 ±(99.9%) 1417,158 MB/sec [Average]
[info]   (min, avg, max) = (672,033, 941,074, 1344,320), stdev = 368,031
[info]   CI (99.9%): [≈ 0, 2358,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   499,934 ±(99.9%) 752,791 B/op [Average]
[info]   (min, avg, max) = (356,026, 499,934, 714,794), stdev = 195,497
[info]   CI (99.9%): [≈ 0, 1252,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,033), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15,86% complete, ETA 01:51:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2698026,107 ops/s
[info] # Warmup Iteration   2: 2895345,956 ops/s
[info] # Warmup Iteration   3: 2888496,333 ops/s
[info] # Warmup Iteration   4: 2883025,262 ops/s
[info] # Warmup Iteration   5: 2879644,048 ops/s
[info] Iteration   1: 2884908,335 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2887182,921 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2883150,828 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2878486,190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2880000,744 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2882745,804 ±(99.9%) 13642,405 ops/s [Average]
[info]   (min, avg, max) = (2878486,190, 2882745,804, 2887182,921), stdev = 3542,889
[info]   CI (99.9%): [2869103,398, 2896388,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16,06% complete, ETA 01:51:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224664,818 ops/s
[info] # Warmup Iteration   2: 337980,925 ops/s
[info] # Warmup Iteration   3: 339227,985 ops/s
[info] # Warmup Iteration   4: 338855,586 ops/s
[info] # Warmup Iteration   5: 336796,786 ops/s
[info] Iteration   1: 337621,679 ops/s
[info]                  ·gc.alloc.rate:                   2762,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12654,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,291 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 338020,743 ops/s
[info]                  ·gc.alloc.rate:                   2766,203 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12653,549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,291 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 338924,044 ops/s
[info]                  ·gc.alloc.rate:                   2773,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12630,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,193 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 338618,173 ops/s
[info]                  ·gc.alloc.rate:                   2771,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12649,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,290 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 337419,168 ops/s
[info]                  ·gc.alloc.rate:                   2760,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12701,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,291 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   338120,761 ±(99.9%) 2468,621 ops/s [Average]
[info]   (min, avg, max) = (337419,168, 338120,761, 338924,044), stdev = 641,093
[info]   CI (99.9%): [335652,140, 340589,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2766,938 ±(99.9%) 20,959 MB/sec [Average]
[info]   (min, avg, max) = (2760,750, 2766,938, 2773,581), stdev = 5,443
[info]   CI (99.9%): [2745,979, 2787,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12880,001, 12880,001, 12880,001), stdev = 0,001
[info]   CI (99.9%): [12880,001, 12880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2719,245 ±(99.9%) 12,483 MB/sec [Average]
[info]   (min, avg, max) = (2714,530, 2719,245, 2722,441), stdev = 3,242
[info]   CI (99.9%): [2706,762, 2731,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12658,028 ±(99.9%) 100,189 B/op [Average]
[info]   (min, avg, max) = (12630,856, 12658,028, 12701,275), stdev = 26,019
[info]   CI (99.9%): [12557,839, 12758,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,022, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,271 ±(99.9%) 0,168 B/op [Average]
[info]   (min, avg, max) = (0,193, 0,271, 0,291), stdev = 0,044
[info]   CI (99.9%): [0,103, 0,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16,27% complete, ETA 01:51:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83380,680 ops/s
[info] # Warmup Iteration   2: 88472,996 ops/s
[info] # Warmup Iteration   3: 88404,953 ops/s
[info] # Warmup Iteration   4: 88188,595 ops/s
[info] # Warmup Iteration   5: 88905,064 ops/s
[info] Iteration   1: 88996,575 ops/s
[info]                  ·gc.alloc.rate:                   660,383 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11933,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55,171 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 88516,419 ops/s
[info]                  ·gc.alloc.rate:                   656,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11998,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,481 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 89099,691 ops/s
[info]                  ·gc.alloc.rate:               661,226 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11883,414 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 87880,911 ops/s
[info]                  ·gc.alloc.rate:               652,234 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12048,484 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 85829,536 ops/s
[info]                  ·gc.alloc.rate:                   636,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12324,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,763 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   88064,626 ±(99.9%) 5156,623 ops/s [Average]
[info]   (min, avg, max) = (85829,536, 88064,626, 89099,691), stdev = 1339,159
[info]   CI (99.9%): [82908,003, 93221,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   653,529 ±(99.9%) 38,375 MB/sec [Average]
[info]   (min, avg, max) = (636,864, 653,529, 661,226), stdev = 9,966
[info]   CI (99.9%): [615,155, 691,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11680,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11680,005, 11680,005, 11680,005), stdev = 0,001
[info]   CI (99.9%): [11680,004, 11680,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   673,428 ±(99.9%) 4,891 MB/sec [Average]
[info]   (min, avg, max) = (672,032, 673,428, 674,842), stdev = 1,270
[info]   CI (99.9%): [668,537, 678,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12037,719 ±(99.9%) 663,814 B/op [Average]
[info]   (min, avg, max) = (11883,414, 12037,719, 12324,979), stdev = 172,390
[info]   CI (99.9%): [11373,905, 12701,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,649 ±(99.9%) 5,320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,649, 3,119), stdev = 1,381
[info]   CI (99.9%): [≈ 0, 5,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11,483 ±(99.9%) 94,071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,483, 55,171), stdev = 24,430
[info]   CI (99.9%): [≈ 0, 105,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16,47% complete, ETA 01:50:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24867,083 ops/s
[info] # Warmup Iteration   2: 30689,568 ops/s
[info] # Warmup Iteration   3: 30735,301 ops/s
[info] # Warmup Iteration   4: 30828,890 ops/s
[info] # Warmup Iteration   5: 30831,366 ops/s
[info] Iteration   1: 30971,050 ops/s
[info]                  ·gc.alloc.rate:                   1814,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102478,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,116 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30975,976 ops/s
[info]                  ·gc.alloc.rate:               1814,453 MB/sec
[info]                  ·gc.alloc.rate.norm:          92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68366,262 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 30975,606 ops/s
[info]                  ·gc.alloc.rate:                   1814,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102661,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,230 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30967,815 ops/s
[info]                  ·gc.alloc.rate:                   1814,203 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102907,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,058 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 30919,995 ops/s
[info]                  ·gc.alloc.rate:                   1811,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68790,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   30962,089 ±(99.9%) 91,539 ops/s [Average]
[info]   (min, avg, max) = (30919,995, 30962,089, 30975,976), stdev = 23,772
[info]   CI (99.9%): [30870,549, 31053,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1813,657 ±(99.9%) 5,546 MB/sec [Average]
[info]   (min, avg, max) = (1811,091, 1813,657, 1814,453), stdev = 1,440
[info]   CI (99.9%): [1808,111, 1819,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (92192,013, 92192,013, 92192,014), stdev = 0,001
[info]   CI (99.9%): [92192,012, 92192,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,794 ±(99.9%) 1417,861 MB/sec [Average]
[info]   (min, avg, max) = (1345,533, 1751,794, 2025,074), stdev = 368,214
[info]   CI (99.9%): [333,933, 3169,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89040,805 ±(99.9%) 71932,562 B/op [Average]
[info]   (min, avg, max) = (68366,262, 89040,805, 102907,769), stdev = 18680,658
[info]   CI (99.9%): [17108,243, 160973,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,693 ±(99.9%) 6,175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,693, 4,230), stdev = 1,604
[info]   CI (99.9%): [≈ 0, 7,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16,67% complete, ETA 01:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22500,965 ops/s
[info] # Warmup Iteration   2: 105520,261 ops/s
[info] # Warmup Iteration   3: 104200,667 ops/s
[info] # Warmup Iteration   4: 105501,033 ops/s
[info] # Warmup Iteration   5: 104585,701 ops/s
[info] Iteration   1: 105069,677 ops/s
[info]                  ·gc.alloc.rate:                   946,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10067,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,312 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 105393,583 ops/s
[info]                  ·gc.alloc.rate:                   949,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20072,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,243 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 104559,987 ops/s
[info]                  ·gc.alloc.rate:               941,786 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10116,300 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 105454,687 ops/s
[info]                  ·gc.alloc.rate:                   949,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10030,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,932 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 105315,343 ops/s
[info]                  ·gc.alloc.rate:                   948,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20093,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,933 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   105158,655 ±(99.9%) 1406,537 ops/s [Average]
[info]   (min, avg, max) = (104559,987, 105158,655, 105454,687), stdev = 365,273
[info]   CI (99.9%): [103752,119, 106565,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   947,168 ±(99.9%) 12,671 MB/sec [Average]
[info]   (min, avg, max) = (941,786, 947,168, 949,924), stdev = 3,291
[info]   CI (99.9%): [934,497, 959,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14176,004, 14176,004, 14176,004), stdev = 0,001
[info]   CI (99.9%): [14176,003, 14176,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   940,978 ±(99.9%) 1417,698 MB/sec [Average]
[info]   (min, avg, max) = (672,078, 940,978, 1344,491), stdev = 368,172
[info]   CI (99.9%): [≈ 0, 2358,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14076,195 ±(99.9%) 21116,204 B/op [Average]
[info]   (min, avg, max) = (10030,748, 14076,195, 20093,899), stdev = 5483,811
[info]   CI (99.9%): [≈ 0, 35192,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,684 ±(99.9%) 1,966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,684, 1,243), stdev = 0,511
[info]   CI (99.9%): [≈ 0, 2,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16,87% complete, ETA 01:50:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47325,104 ops/s
[info] # Warmup Iteration   2: 67232,713 ops/s
[info] # Warmup Iteration   3: 67807,739 ops/s
[info] # Warmup Iteration   4: 67672,385 ops/s
[info] # Warmup Iteration   5: 67760,139 ops/s
[info] Iteration   1: 68009,707 ops/s
[info]                  ·gc.alloc.rate:               1120,771 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15638,079 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 67542,439 ops/s
[info]                  ·gc.alloc.rate:                   1113,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31507,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,940 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 67595,278 ops/s
[info]                  ·gc.alloc.rate:                   1113,665 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31514,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,969 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 67776,647 ops/s
[info]                  ·gc.alloc.rate:               1116,939 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15723,226 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 67599,425 ops/s
[info]                  ·gc.alloc.rate:                   1113,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31544,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,969 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   67704,699 ±(99.9%) 739,660 ops/s [Average]
[info]   (min, avg, max) = (67542,439, 67704,699, 68009,707), stdev = 192,087
[info]   CI (99.9%): [66965,039, 68444,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1115,653 ±(99.9%) 12,459 MB/sec [Average]
[info]   (min, avg, max) = (1113,044, 1115,653, 1120,771), stdev = 3,236
[info]   CI (99.9%): [1103,194, 1128,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25936,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25936,006, 25936,006, 25936,006), stdev = 0,001
[info]   CI (99.9%): [25936,005, 25936,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,584 ±(99.9%) 1427,637 MB/sec [Average]
[info]   (min, avg, max) = (675,768, 1082,584, 1354,698), stdev = 370,753
[info]   CI (99.9%): [≈ 0, 2510,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25185,440 ±(99.9%) 33410,909 B/op [Average]
[info]   (min, avg, max) = (15638,079, 25185,440, 31544,283), stdev = 8676,707
[info]   CI (99.9%): [≈ 0, 58596,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,776 ±(99.9%) 3,125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,776, 1,940), stdev = 0,812
[info]   CI (99.9%): [≈ 0, 3,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,07% complete, ETA 01:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135619,243 ops/s
[info] # Warmup Iteration   2: 146195,845 ops/s
[info] # Warmup Iteration   3: 146184,206 ops/s
[info] # Warmup Iteration   4: 146337,217 ops/s
[info] # Warmup Iteration   5: 146567,485 ops/s
[info] Iteration   1: 146623,980 ops/s
[info]                  ·gc.alloc.rate:               944,990 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7221,204 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 146778,382 ops/s
[info]                  ·gc.alloc.rate:                   946,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14421,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,670 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 145651,544 ops/s
[info]                  ·gc.alloc.rate:               938,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7262,285 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 143366,012 ops/s
[info]                  ·gc.alloc.rate:                   924,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14755,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 146417,664 ops/s
[info]                  ·gc.alloc.rate:               943,581 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7224,251 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   145767,517 ±(99.9%) 5431,573 ops/s [Average]
[info]   (min, avg, max) = (143366,012, 145767,517, 146778,382), stdev = 1410,562
[info]   CI (99.9%): [140335,943, 151199,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   939,490 ±(99.9%) 34,912 MB/sec [Average]
[info]   (min, avg, max) = (924,085, 939,490, 946,113), stdev = 9,067
[info]   CI (99.9%): [904,578, 974,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10144,003, 10144,003, 10144,003), stdev = 0,001
[info]   CI (99.9%): [10144,003, 10144,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,196 ±(99.9%) 1418,130 MB/sec [Average]
[info]   (min, avg, max) = (671,990, 941,196, 1345,057), stdev = 368,284
[info]   CI (99.9%): [≈ 0, 2359,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10176,987 ±(99.9%) 15514,241 B/op [Average]
[info]   (min, avg, max) = (7221,204, 10176,987, 14755,803), stdev = 4028,999
[info]   CI (99.9%): [≈ 0, 25691,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,180 ±(99.9%) 1,121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,180, 0,670), stdev = 0,291
[info]   CI (99.9%): [≈ 0, 1,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 4,000), stdev = 1,732
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17,27% complete, ETA 01:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23489,889 ops/s
[info] # Warmup Iteration   2: 40176,129 ops/s
[info] # Warmup Iteration   3: 40152,480 ops/s
[info] # Warmup Iteration   4: 40180,423 ops/s
[info] # Warmup Iteration   5: 40190,556 ops/s
[info] Iteration   1: 40369,470 ops/s
[info]                  ·gc.alloc.rate:                   2107,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79285,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,435 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 40038,857 ops/s
[info]                  ·gc.alloc.rate:                   2090,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80015,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,818 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 40369,127 ops/s
[info]                  ·gc.alloc.rate:                   2107,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79437,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,812 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 40255,531 ops/s
[info]                  ·gc.alloc.rate:                   2102,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79688,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,814 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 40293,910 ops/s
[info]                  ·gc.alloc.rate:                   2103,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              82176,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79691,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   40265,379 ±(99.9%) 523,113 ops/s [Average]
[info]   (min, avg, max) = (40038,857, 40265,379, 40369,470), stdev = 135,851
[info]   CI (99.9%): [39742,266, 40788,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2102,320 ±(99.9%) 27,163 MB/sec [Average]
[info]   (min, avg, max) = (2090,558, 2102,320, 2107,834), stdev = 7,054
[info]   CI (99.9%): [2075,157, 2129,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82176,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82176,011, 82176,011, 82176,011), stdev = 0,001
[info]   CI (99.9%): [82176,011, 82176,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,997 ±(99.9%) 9,554 MB/sec [Average]
[info]   (min, avg, max) = (2033,541, 2036,997, 2039,908), stdev = 2,481
[info]   CI (99.9%): [2027,443, 2046,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79623,369 ±(99.9%) 1074,139 B/op [Average]
[info]   (min, avg, max) = (79285,299, 79623,369, 80015,188), stdev = 278,950
[info]   CI (99.9%): [78549,231, 80697,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,626 ±(99.9%) 4,421 B/op [Average]
[info]   (min, avg, max) = (0,812, 1,626, 3,252), stdev = 1,148
[info]   CI (99.9%): [≈ 0, 6,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17,47% complete, ETA 01:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67673,693 ops/s
[info] # Warmup Iteration   2: 75546,655 ops/s
[info] # Warmup Iteration   3: 75809,462 ops/s
[info] # Warmup Iteration   4: 75878,461 ops/s
[info] # Warmup Iteration   5: 75594,134 ops/s
[info] Iteration   1: 75859,397 ops/s
[info]                  ·gc.alloc.rate:                   1364,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27887,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,864 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 75993,481 ops/s
[info]                  ·gc.alloc.rate:                   1367,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27840,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,293 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 75938,977 ops/s
[info]                  ·gc.alloc.rate:               1365,996 MB/sec
[info]                  ·gc.alloc.rate.norm:          28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27871,652 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 75718,736 ops/s
[info]                  ·gc.alloc.rate:                   1362,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27973,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,433 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 75750,535 ops/s
[info]                  ·gc.alloc.rate:                   1362,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27988,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,432 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   75852,225 ±(99.9%) 454,355 ops/s [Average]
[info]   (min, avg, max) = (75718,736, 75852,225, 75993,481), stdev = 117,995
[info]   CI (99.9%): [75397,870, 76306,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1364,492 ±(99.9%) 8,218 MB/sec [Average]
[info]   (min, avg, max) = (1362,210, 1364,492, 1367,104), stdev = 2,134
[info]   CI (99.9%): [1356,274, 1372,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28312,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28312,005, 28312,006, 28312,006), stdev = 0,001
[info]   CI (99.9%): [28312,005, 28312,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1345,223 ±(99.9%) 4,566 MB/sec [Average]
[info]   (min, avg, max) = (1344,159, 1345,223, 1346,965), stdev = 1,186
[info]   CI (99.9%): [1340,657, 1349,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27912,275 ±(99.9%) 250,799 B/op [Average]
[info]   (min, avg, max) = (27840,621, 27912,275, 27988,874), stdev = 65,132
[info]   CI (99.9%): [27661,476, 28163,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,604 ±(99.9%) 1,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,604, 1,293), stdev = 0,492
[info]   CI (99.9%): [≈ 0, 2,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17,67% complete, ETA 01:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28641,914 ops/s
[info] # Warmup Iteration   2: 42543,747 ops/s
[info] # Warmup Iteration   3: 43896,619 ops/s
[info] # Warmup Iteration   4: 41978,833 ops/s
[info] # Warmup Iteration   5: 42040,832 ops/s
[info] Iteration   1: 42083,716 ops/s
[info]                  ·gc.alloc.rate:               552,964 MB/sec
[info]                  ·gc.alloc.rate.norm:          20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19131,144 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 42058,718 ops/s
[info]                  ·gc.alloc.rate:      552,638 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41542,585 ops/s
[info]                  ·gc.alloc.rate:                   545,806 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25563,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127,293 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 42234,074 ops/s
[info]                  ·gc.alloc.rate:                   555,000 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25146,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,103 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 42192,035 ops/s
[info]                  ·gc.alloc.rate:               554,335 MB/sec
[info]                  ·gc.alloc.rate.norm:          20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25071,997 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   42022,225 ±(99.9%) 1070,041 ops/s [Average]
[info]   (min, avg, max) = (41542,585, 42022,225, 42234,074), stdev = 277,886
[info]   CI (99.9%): [40952,184, 43092,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   552,149 ±(99.9%) 14,153 MB/sec [Average]
[info]   (min, avg, max) = (545,806, 552,149, 555,000), stdev = 3,676
[info]   CI (99.9%): [537,995, 566,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20680,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20680,010, 20680,010, 20680,010), stdev = 0,001
[info]   CI (99.9%): [20680,009, 20680,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,634 ±(99.9%) 1123,660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,634, 674,866), stdev = 291,811
[info]   CI (99.9%): [≈ 0, 1630,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18982,567 ±(99.9%) 42126,286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18982,567, 25563,330), stdev = 10940,063
[info]   CI (99.9%): [≈ 0, 61108,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,689 ±(99.9%) 5,751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,689, 3,360), stdev = 1,494
[info]   CI (99.9%): [≈ 0, 6,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26,079 ±(99.9%) 217,931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,079, 127,293), stdev = 56,596
[info]   CI (99.9%): [≈ 0, 244,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,87% complete, ETA 01:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28136,776 ops/s
[info] # Warmup Iteration   2: 45210,748 ops/s
[info] # Warmup Iteration   3: 45316,688 ops/s
[info] # Warmup Iteration   4: 45381,471 ops/s
[info] # Warmup Iteration   5: 45315,795 ops/s
[info] Iteration   1: 45221,374 ops/s
[info]                  ·gc.alloc.rate:               408,441 MB/sec
[info]                  ·gc.alloc.rate.norm:          14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17803,514 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 45056,270 ops/s
[info]                  ·gc.alloc.rate:               407,039 MB/sec
[info]                  ·gc.alloc.rate.norm:          14216,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17869,885 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 44924,690 ops/s
[info]                  ·gc.alloc.rate:      405,803 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45057,843 ops/s
[info]                  ·gc.alloc.rate:                   407,000 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23556,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,362 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 45265,600 ops/s
[info]                  ·gc.alloc.rate:                   408,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23450,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,724 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   45105,156 ±(99.9%) 532,327 ops/s [Average]
[info]   (min, avg, max) = (44924,690, 45105,156, 45265,600), stdev = 138,244
[info]   CI (99.9%): [44572,828, 45637,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   407,415 ±(99.9%) 4,662 MB/sec [Average]
[info]   (min, avg, max) = (405,803, 407,415, 408,793), stdev = 1,211
[info]   CI (99.9%): [402,753, 412,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14216,009, 14216,010, 14216,010), stdev = 0,001
[info]   CI (99.9%): [14216,008, 14216,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,385 ±(99.9%) 1068,169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,385, 674,426), stdev = 277,400
[info]   CI (99.9%): [≈ 0, 1542,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16536,083 ±(99.9%) 37230,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16536,083, 23556,840), stdev = 9668,546
[info]   CI (99.9%): [≈ 0, 53766,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,017 ±(99.9%) 7,301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,017, 4,362), stdev = 1,896
[info]   CI (99.9%): [≈ 0, 8,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,07% complete, ETA 01:48:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42628,150 ops/s
[info] # Warmup Iteration   2: 51147,742 ops/s
[info] # Warmup Iteration   3: 52170,715 ops/s
[info] # Warmup Iteration   4: 52186,115 ops/s
[info] # Warmup Iteration   5: 52097,861 ops/s
[info] Iteration   1: 52124,973 ops/s
[info]                  ·gc.alloc.rate:                   470,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15445,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 52054,869 ops/s
[info]                  ·gc.alloc.rate:                   470,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15466,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,130 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 52215,887 ops/s
[info]                  ·gc.alloc.rate:                   471,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20337,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95,287 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 52188,413 ops/s
[info]                  ·gc.alloc.rate:      471,412 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52162,081 ops/s
[info]                  ·gc.alloc.rate:                   471,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20358,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,256 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   52149,245 ±(99.9%) 240,750 ops/s [Average]
[info]   (min, avg, max) = (52054,869, 52149,245, 52215,887), stdev = 62,522
[info]   CI (99.9%): [51908,495, 52389,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   471,023 ±(99.9%) 2,171 MB/sec [Average]
[info]   (min, avg, max) = (470,187, 471,023, 471,624), stdev = 0,564
[info]   CI (99.9%): [468,852, 473,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   14216,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14216,008, 14216,008, 14216,008), stdev = 0,001
[info]   CI (99.9%): [14216,007, 14216,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,493 ±(99.9%) 1068,597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,493, 674,720), stdev = 277,511
[info]   CI (99.9%): [≈ 0, 1543,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14321,907 ±(99.9%) 32235,723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14321,907, 20358,943), stdev = 8371,515
[info]   CI (99.9%): [≈ 0, 46557,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,161), stdev = 1,408
[info]   CI (99.9%): [≈ 0, 6,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19,371 ±(99.9%) 163,424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19,371, 95,287), stdev = 42,441
[info]   CI (99.9%): [≈ 0, 182,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18,27% complete, ETA 01:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39887,850 ops/s
[info] # Warmup Iteration   2: 48719,743 ops/s
[info] # Warmup Iteration   3: 49185,238 ops/s
[info] # Warmup Iteration   4: 49482,550 ops/s
[info] # Warmup Iteration   5: 48998,593 ops/s
[info] Iteration   1: 49203,534 ops/s
[info]                  ·gc.alloc.rate:               376,151 MB/sec
[info]                  ·gc.alloc.rate.norm:          12032,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16363,027 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 49421,138 ops/s
[info]                  ·gc.alloc.rate:               377,820 MB/sec
[info]                  ·gc.alloc.rate.norm:          12032,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16291,195 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 49436,005 ops/s
[info]                  ·gc.alloc.rate:      377,914 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49217,143 ops/s
[info]                  ·gc.alloc.rate:                   376,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16358,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,341 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 49311,061 ops/s
[info]                  ·gc.alloc.rate:                   376,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21535,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100,890 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49317,776 ±(99.9%) 421,312 ops/s [Average]
[info]   (min, avg, max) = (49203,534, 49317,776, 49436,005), stdev = 109,413
[info]   CI (99.9%): [48896,465, 49739,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   377,018 ±(99.9%) 3,200 MB/sec [Average]
[info]   (min, avg, max) = (376,151, 377,018, 377,914), stdev = 0,831
[info]   CI (99.9%): [373,817, 380,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12032,008, 12032,009, 12032,009), stdev = 0,001
[info]   CI (99.9%): [12032,007, 12032,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   441,866 ±(99.9%) 989,265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,866, 674,660), stdev = 256,909
[info]   CI (99.9%): [≈ 0, 1431,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   14109,601 ±(99.9%) 31584,741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14109,601, 21535,744), stdev = 8202,457
[info]   CI (99.9%): [≈ 0, 45694,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,634 ±(99.9%) 5,438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,634, 3,161), stdev = 1,412
[info]   CI (99.9%): [≈ 0, 6,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   20,246 ±(99.9%) 173,592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,246, 100,890), stdev = 45,081
[info]   CI (99.9%): [≈ 0, 193,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18,47% complete, ETA 01:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29966,423 ops/s
[info] # Warmup Iteration   2: 37633,783 ops/s
[info] # Warmup Iteration   3: 37938,276 ops/s
[info] # Warmup Iteration   4: 38041,334 ops/s
[info] # Warmup Iteration   5: 38098,514 ops/s
[info] Iteration   1: 38069,863 ops/s
[info]                  ·gc.alloc.rate:               578,114 MB/sec
[info]                  ·gc.alloc.rate.norm:          23904,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21148,307 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 38098,365 ops/s
[info]                  ·gc.alloc.rate:                   578,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              23904,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27875,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130,781 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38168,155 ops/s
[info]                  ·gc.alloc.rate:                   579,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              23904,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27825,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,717 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38102,219 ops/s
[info]                  ·gc.alloc.rate:                   578,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              23904,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27789,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,860 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 38091,141 ops/s
[info]                  ·gc.alloc.rate:      578,425 MB/sec
[info]                  ·gc.alloc.rate.norm: 23904,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   38105,949 ±(99.9%) 142,298 ops/s [Average]
[info]   (min, avg, max) = (38069,863, 38105,949, 38168,155), stdev = 36,954
[info]   CI (99.9%): [37963,651, 38248,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   578,701 ±(99.9%) 2,185 MB/sec [Average]
[info]   (min, avg, max) = (578,114, 578,701, 579,630), stdev = 0,568
[info]   CI (99.9%): [576,516, 580,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   23904,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (23904,011, 23904,012, 23904,012), stdev = 0,001
[info]   CI (99.9%): [23904,009, 23904,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,746 ±(99.9%) 1124,010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,746, 674,791), stdev = 291,902
[info]   CI (99.9%): [≈ 0, 1630,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   20927,826 ±(99.9%) 46406,157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20927,826, 27875,803), stdev = 12051,532
[info]   CI (99.9%): [≈ 0, 67333,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,646 ±(99.9%) 5,425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 3,166), stdev = 1,409
[info]   CI (99.9%): [≈ 0, 6,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26,672 ±(99.9%) 224,120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,672, 130,781), stdev = 58,203
[info]   CI (99.9%): [≈ 0, 250,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18,67% complete, ETA 01:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20545,955 ops/s
[info] # Warmup Iteration   2: 23297,217 ops/s
[info] # Warmup Iteration   3: 23423,820 ops/s
[info] # Warmup Iteration   4: 23645,298 ops/s
[info] # Warmup Iteration   5: 23448,988 ops/s
[info] Iteration   1: 23624,701 ops/s
[info]                  ·gc.alloc.rate:                   886,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89766,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,387 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 23214,510 ops/s
[info]                  ·gc.alloc.rate:                   870,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45615,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,823 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23455,905 ops/s
[info]                  ·gc.alloc.rate:               879,828 MB/sec
[info]                  ·gc.alloc.rate.norm:          59040,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45096,679 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 23475,631 ops/s
[info]                  ·gc.alloc.rate:                   880,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90112,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,186 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23538,462 ops/s
[info]                  ·gc.alloc.rate:               882,875 MB/sec
[info]                  ·gc.alloc.rate.norm:          59040,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44937,699 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   23461,842 ±(99.9%) 589,639 ops/s [Average]
[info]   (min, avg, max) = (23214,510, 23461,842, 23624,701), stdev = 153,127
[info]   CI (99.9%): [22872,203, 24051,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   880,150 ±(99.9%) 22,246 MB/sec [Average]
[info]   (min, avg, max) = (870,892, 880,150, 886,473), stdev = 5,777
[info]   CI (99.9%): [857,904, 902,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040,018 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (59040,017, 59040,018, 59040,020), stdev = 0,001
[info]   CI (99.9%): [59040,014, 59040,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   941,782 ±(99.9%) 1420,903 MB/sec [Average]
[info]   (min, avg, max) = (671,991, 941,782, 1347,822), stdev = 369,004
[info]   CI (99.9%): [≈ 0, 2362,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63105,848 ±(99.9%) 94330,318 B/op [Average]
[info]   (min, avg, max) = (44937,699, 63105,848, 90112,698), stdev = 24497,284
[info]   CI (99.9%): [≈ 0, 157436,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,679 ±(99.9%) 7,026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,679, 4,186), stdev = 1,825
[info]   CI (99.9%): [≈ 0, 8,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,88% complete, ETA 01:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16079,137 ops/s
[info] # Warmup Iteration   2: 23293,802 ops/s
[info] # Warmup Iteration   3: 23384,823 ops/s
[info] # Warmup Iteration   4: 23382,377 ops/s
[info] # Warmup Iteration   5: 23450,241 ops/s
[info] Iteration   1: 23462,112 ops/s
[info]                  ·gc.alloc.rate:                   665,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              44609,182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45241,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,982 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23502,926 ops/s
[info]                  ·gc.alloc.rate:                   666,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45166,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,394 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 23460,548 ops/s
[info]                  ·gc.alloc.rate:               664,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          44608,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45312,425 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 23420,037 ops/s
[info]                  ·gc.alloc.rate:                   663,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45391,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,798 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 23452,324 ops/s
[info]                  ·gc.alloc.rate:                   664,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45372,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,794 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   23459,589 ±(99.9%) 113,944 ops/s [Average]
[info]   (min, avg, max) = (23420,037, 23459,589, 23502,926), stdev = 29,591
[info]   CI (99.9%): [23345,645, 23573,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   664,940 ±(99.9%) 3,308 MB/sec [Average]
[info]   (min, avg, max) = (663,841, 664,940, 666,228), stdev = 0,859
[info]   CI (99.9%): [661,632, 668,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44608,250 ±(99.9%) 2,005 B/op [Average]
[info]   (min, avg, max) = (44608,017, 44608,250, 44609,182), stdev = 0,521
[info]   CI (99.9%): [44606,245, 44610,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,205 ±(99.9%) 2,595 MB/sec [Average]
[info]   (min, avg, max) = (674,466, 675,205, 676,056), stdev = 0,674
[info]   CI (99.9%): [672,610, 677,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45296,952 ±(99.9%) 360,390 B/op [Average]
[info]   (min, avg, max) = (45166,477, 45296,952, 45391,738), stdev = 93,592
[info]   CI (99.9%): [44936,562, 45657,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,793 ±(99.9%) 10,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,793, 6,982), stdev = 2,613
[info]   CI (99.9%): [≈ 0, 12,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,08% complete, ETA 01:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93114,664 ops/s
[info] # Warmup Iteration   2: 97430,686 ops/s
[info] # Warmup Iteration   3: 97974,253 ops/s
[info] # Warmup Iteration   4: 96988,071 ops/s
[info] # Warmup Iteration   5: 97771,187 ops/s
[info] Iteration   1: 97373,199 ops/s
[info]                  ·gc.alloc.rate:               253,393 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8268,372 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 97916,370 ops/s
[info]                  ·gc.alloc.rate:      254,851 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 97571,271 ops/s
[info]                  ·gc.alloc.rate:               253,908 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8251,597 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 97483,954 ops/s
[info]                  ·gc.alloc.rate:      253,724 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 97435,878 ops/s
[info]                  ·gc.alloc.rate:                   253,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8262,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   97556,134 ±(99.9%) 823,929 ops/s [Average]
[info]   (min, avg, max) = (97373,199, 97556,134, 97916,370), stdev = 213,972
[info]   CI (99.9%): [96732,205, 98380,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253,896 ±(99.9%) 2,180 MB/sec [Average]
[info]   (min, avg, max) = (253,393, 253,896, 254,851), stdev = 0,566
[info]   CI (99.9%): [251,716, 256,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,004, 4096,004, 4096,005), stdev = 0,001
[info]   CI (99.9%): [4096,004, 4096,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,921 ±(99.9%) 1078,871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,921, 511,585), stdev = 280,179
[info]   CI (99.9%): [≈ 0, 1385,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4956,548 ±(99.9%) 17422,982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4956,548, 8268,372), stdev = 4524,693
[info]   CI (99.9%): [≈ 0, 22379,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19,28% complete, ETA 01:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12763,477 ops/s
[info] # Warmup Iteration   2: 19432,804 ops/s
[info] # Warmup Iteration   3: 19460,157 ops/s
[info] # Warmup Iteration   4: 19574,852 ops/s
[info] # Warmup Iteration   5: 19513,954 ops/s
[info] Iteration   1: 19561,345 ops/s
[info]                  ·gc.alloc.rate:               1268,044 MB/sec
[info]                  ·gc.alloc.rate.norm:          102008,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108312,678 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 19642,202 ops/s
[info]                  ·gc.alloc.rate:                   1273,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53984,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,336 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19584,295 ops/s
[info]                  ·gc.alloc.rate:               1269,206 MB/sec
[info]                  ·gc.alloc.rate.norm:          102008,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108390,322 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 19595,574 ops/s
[info]                  ·gc.alloc.rate:               1270,095 MB/sec
[info]                  ·gc.alloc.rate.norm:          102008,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108489,982 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 19525,183 ops/s
[info]                  ·gc.alloc.rate:               1265,380 MB/sec
[info]                  ·gc.alloc.rate.norm:          102008,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108986,190 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   19581,720 ±(99.9%) 166,383 ops/s [Average]
[info]   (min, avg, max) = (19525,183, 19581,720, 19642,202), stdev = 43,209
[info]   CI (99.9%): [19415,337, 19748,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1269,151 ±(99.9%) 10,787 MB/sec [Average]
[info]   (min, avg, max) = (1265,380, 1269,151, 1273,031), stdev = 2,801
[info]   CI (99.9%): [1258,364, 1279,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102008,022 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (102008,021, 102008,022, 102008,026), stdev = 0,002
[info]   CI (99.9%): [102008,013, 102008,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1214,297 ±(99.9%) 1163,680 MB/sec [Average]
[info]   (min, avg, max) = (673,712, 1214,297, 1351,942), stdev = 302,204
[info]   CI (99.9%): [50,618, 2377,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   97632,746 ±(99.9%) 93961,450 B/op [Average]
[info]   (min, avg, max) = (53984,559, 97632,746, 108986,190), stdev = 24401,490
[info]   CI (99.9%): [3671,296, 191594,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,667 ±(99.9%) 5,744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,336), stdev = 1,492
[info]   CI (99.9%): [≈ 0, 6,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19,48% complete, ETA 01:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15064,960 ops/s
[info] # Warmup Iteration   2: 18143,738 ops/s
[info] # Warmup Iteration   3: 18195,223 ops/s
[info] # Warmup Iteration   4: 18175,547 ops/s
[info] # Warmup Iteration   5: 18280,991 ops/s
[info] Iteration   1: 18185,256 ops/s
[info]                  ·gc.alloc.rate:                   627,164 MB/sec
[info]                  ·gc.alloc.rate.norm:              54280,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58455,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244,283 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18390,841 ops/s
[info]                  ·gc.alloc.rate:      634,098 MB/sec
[info]                  ·gc.alloc.rate.norm: 54260,595 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18401,385 ops/s
[info]                  ·gc.alloc.rate:                   634,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57769,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18421,747 ops/s
[info]                  ·gc.alloc.rate:               635,096 MB/sec
[info]                  ·gc.alloc.rate.norm:          54256,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57536,518 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18392,758 ops/s
[info]                  ·gc.alloc.rate:                   633,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57627,220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,563 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   18358,397 ±(99.9%) 375,672 ops/s [Average]
[info]   (min, avg, max) = (18185,256, 18358,397, 18421,747), stdev = 97,561
[info]   CI (99.9%): [17982,725, 18734,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   632,933 ±(99.9%) 12,530 MB/sec [Average]
[info]   (min, avg, max) = (627,164, 632,933, 635,096), stdev = 3,254
[info]   CI (99.9%): [620,403, 645,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   54261,738 ±(99.9%) 40,103 B/op [Average]
[info]   (min, avg, max) = (54256,022, 54261,738, 54280,028), stdev = 10,415
[info]   CI (99.9%): [54221,635, 54301,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   539,539 ±(99.9%) 1161,404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,539, 675,414), stdev = 301,613
[info]   CI (99.9%): [≈ 0, 1700,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   46277,938 ±(99.9%) 99626,452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46277,938, 58455,993), stdev = 25872,673
[info]   CI (99.9%): [≈ 0, 145904,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,589 ±(99.9%) 4,809 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,589, 2,823), stdev = 1,249
[info]   CI (99.9%): [≈ 0, 5,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   50,993 ±(99.9%) 416,226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50,993, 244,283), stdev = 108,093
[info]   CI (99.9%): [≈ 0, 467,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19,68% complete, ETA 01:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57461,966 ops/s
[info] # Warmup Iteration   2: 73364,787 ops/s
[info] # Warmup Iteration   3: 72978,495 ops/s
[info] # Warmup Iteration   4: 73310,735 ops/s
[info] # Warmup Iteration   5: 73984,629 ops/s
[info] Iteration   1: 73951,655 ops/s
[info]                  ·gc.alloc.rate:               976,197 MB/sec
[info]                  ·gc.alloc.rate.norm:          20776,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14305,015 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 73915,768 ops/s
[info]                  ·gc.alloc.rate:                   975,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28609,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,330 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 73986,783 ops/s
[info]                  ·gc.alloc.rate:               976,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          20776,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14284,078 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 73902,616 ops/s
[info]                  ·gc.alloc.rate:                   975,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              20776,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28598,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,887 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 73876,687 ops/s
[info]                  ·gc.alloc.rate:               975,010 MB/sec
[info]                  ·gc.alloc.rate.norm:          20776,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14304,375 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   73926,702 ±(99.9%) 165,998 ops/s [Average]
[info]   (min, avg, max) = (73876,687, 73926,702, 73986,783), stdev = 43,109
[info]   CI (99.9%): [73760,704, 74092,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   975,813 ±(99.9%) 2,356 MB/sec [Average]
[info]   (min, avg, max) = (975,010, 975,813, 976,607), stdev = 0,612
[info]   CI (99.9%): [973,457, 978,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20776,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20776,006, 20776,006, 20776,006), stdev = 0,001
[info]   CI (99.9%): [20776,005, 20776,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,263 ±(99.9%) 1416,426 MB/sec [Average]
[info]   (min, avg, max) = (671,299, 940,263, 1343,505), stdev = 367,841
[info]   CI (99.9%): [≈ 0, 2356,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20020,232 ±(99.9%) 30172,633 B/op [Average]
[info]   (min, avg, max) = (14284,078, 20020,232, 28609,003), stdev = 7835,737
[info]   CI (99.9%): [≈ 0, 50192,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,443 ±(99.9%) 2,414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,443, 1,330), stdev = 0,627
[info]   CI (99.9%): [≈ 0, 2,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,88% complete, ETA 01:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71985,806 ops/s
[info] # Warmup Iteration   2: 99960,933 ops/s
[info] # Warmup Iteration   3: 100097,394 ops/s
[info] # Warmup Iteration   4: 99993,945 ops/s
[info] # Warmup Iteration   5: 100138,799 ops/s
[info] Iteration   1: 100091,711 ops/s
[info]                  ·gc.alloc.rate:                   1186,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21261,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,655 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 99713,954 ops/s
[info]                  ·gc.alloc.rate:                   1182,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21352,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,986 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 100216,786 ops/s
[info]                  ·gc.alloc.rate:               1188,309 MB/sec
[info]                  ·gc.alloc.rate.norm:          18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10632,937 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 100242,422 ops/s
[info]                  ·gc.alloc.rate:                   1188,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21263,892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,980 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 99965,565 ops/s
[info]                  ·gc.alloc.rate:                   1185,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21340,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,328 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   100046,088 ±(99.9%) 831,604 ops/s [Average]
[info]   (min, avg, max) = (99713,954, 100046,088, 100242,422), stdev = 215,965
[info]   CI (99.9%): [99214,483, 100877,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1186,332 ±(99.9%) 9,954 MB/sec [Average]
[info]   (min, avg, max) = (1182,415, 1186,332, 1188,803), stdev = 2,585
[info]   CI (99.9%): [1176,378, 1196,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18664,004, 18664,004, 18664,004), stdev = 0,001
[info]   CI (99.9%): [18664,004, 18664,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,283 ±(99.9%) 1165,200 MB/sec [Average]
[info]   (min, avg, max) = (676,983, 1218,283, 1355,267), stdev = 302,599
[info]   CI (99.9%): [53,083, 2383,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19170,287 ±(99.9%) 18378,008 B/op [Average]
[info]   (min, avg, max) = (10632,937, 19170,287, 21352,522), stdev = 4772,710
[info]   CI (99.9%): [792,279, 37548,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,590 ±(99.9%) 1,645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,590, 0,986), stdev = 0,427
[info]   CI (99.9%): [≈ 0, 2,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20,08% complete, ETA 01:46:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225497,573 ops/s
[info] # Warmup Iteration   2: 231789,176 ops/s
[info] # Warmup Iteration   3: 229534,910 ops/s
[info] # Warmup Iteration   4: 228874,881 ops/s
[info] # Warmup Iteration   5: 228550,138 ops/s
[info] Iteration   1: 228558,463 ops/s
[info]                  ·gc.alloc.rate:                   362,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3522,590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,287 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 229305,306 ops/s
[info]                  ·gc.alloc.rate:               363,688 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3511,454 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 229109,940 ops/s
[info]                  ·gc.alloc.rate:      363,321 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 227796,056 ops/s
[info]                  ·gc.alloc.rate:               361,268 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3534,278 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 229035,674 ops/s
[info]                  ·gc.alloc.rate:      363,202 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   228761,088 ±(99.9%) 2330,842 ops/s [Average]
[info]   (min, avg, max) = (227796,056, 228761,088, 229305,306), stdev = 605,312
[info]   CI (99.9%): [226430,246, 231091,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   362,788 ±(99.9%) 3,695 MB/sec [Average]
[info]   (min, avg, max) = (361,268, 362,788, 363,688), stdev = 0,960
[info]   CI (99.9%): [359,093, 366,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2496,002, 2496,002, 2496,002), stdev = 0,001
[info]   CI (99.9%): [2496,002, 2496,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,947 ±(99.9%) 1078,962 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,947, 511,648), stdev = 280,203
[info]   CI (99.9%): [≈ 0, 1385,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2113,664 ±(99.9%) 7429,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2113,664, 3534,278), stdev = 1929,520
[info]   CI (99.9%): [≈ 0, 9543,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,057 ±(99.9%) 0,493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,057, 0,287), stdev = 0,128
[info]   CI (99.9%): [≈ 0, 0,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20,28% complete, ETA 01:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260273,257 ops/s
[info] # Warmup Iteration   2: 274110,412 ops/s
[info] # Warmup Iteration   3: 276380,185 ops/s
[info] # Warmup Iteration   4: 275976,292 ops/s
[info] # Warmup Iteration   5: 275211,483 ops/s
[info] Iteration   1: 272997,510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 276050,043 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 276561,658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 276629,261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 277144,423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   275876,579 ±(99.9%) 6374,654 ops/s [Average]
[info]   (min, avg, max) = (272997,510, 275876,579, 277144,423), stdev = 1655,477
[info]   CI (99.9%): [269501,925, 282251,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20,48% complete, ETA 01:45:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62151,440 ops/s
[info] # Warmup Iteration   2: 78934,876 ops/s
[info] # Warmup Iteration   3: 79130,926 ops/s
[info] # Warmup Iteration   4: 79406,075 ops/s
[info] # Warmup Iteration   5: 79644,863 ops/s
[info] Iteration   1: 79366,420 ops/s
[info]                  ·gc.alloc.rate:                   1237,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26576,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,826 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 79507,936 ops/s
[info]                  ·gc.alloc.rate:                   1239,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26530,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 79454,052 ops/s
[info]                  ·gc.alloc.rate:               1238,997 MB/sec
[info]                  ·gc.alloc.rate.norm:          24544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13280,045 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 78454,130 ops/s
[info]                  ·gc.alloc.rate:               1223,501 MB/sec
[info]                  ·gc.alloc.rate.norm:          24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26905,237 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 79012,720 ops/s
[info]                  ·gc.alloc.rate:                   1232,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26741,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,415 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   79159,052 ±(99.9%) 1689,545 ops/s [Average]
[info]   (min, avg, max) = (78454,130, 79159,052, 79507,936), stdev = 438,769
[info]   CI (99.9%): [77469,507, 80848,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1234,387 ±(99.9%) 26,202 MB/sec [Average]
[info]   (min, avg, max) = (1223,501, 1234,387, 1239,798), stdev = 6,805
[info]   CI (99.9%): [1208,185, 1260,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24544,005, 24544,005, 24544,006), stdev = 0,001
[info]   CI (99.9%): [24544,004, 24544,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,831 ±(99.9%) 1154,746 MB/sec [Average]
[info]   (min, avg, max) = (670,385, 1206,831, 1342,295), stdev = 299,884
[info]   CI (99.9%): [52,086, 2361,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24006,721 ±(99.9%) 23096,976 B/op [Average]
[info]   (min, avg, max) = (13280,045, 24006,721, 26905,237), stdev = 5998,211
[info]   CI (99.9%): [909,745, 47103,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,330 ±(99.9%) 1,330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,330, 0,826), stdev = 0,345
[info]   CI (99.9%): [≈ 0, 1,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20,68% complete, ETA 01:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18426,125 ops/s
[info] # Warmup Iteration   2: 19835,108 ops/s
[info] # Warmup Iteration   3: 19921,704 ops/s
[info] # Warmup Iteration   4: 19850,200 ops/s
[info] # Warmup Iteration   5: 19960,635 ops/s
[info] Iteration   1: 19892,839 ops/s
[info]                  ·gc.alloc.rate:               382,825 MB/sec
[info]                  ·gc.alloc.rate.norm:          30296,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40473,758 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 19894,169 ops/s
[info]                  ·gc.alloc.rate:                   382,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40473,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,468 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 19895,742 ops/s
[info]                  ·gc.alloc.rate:               383,018 MB/sec
[info]                  ·gc.alloc.rate.norm:          30296,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40469,690 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 19932,937 ops/s
[info]                  ·gc.alloc.rate:      383,681 MB/sec
[info]                  ·gc.alloc.rate.norm: 30296,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19898,259 ops/s
[info]                  ·gc.alloc.rate:                   382,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53421,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222,979 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   19902,789 ±(99.9%) 65,358 ops/s [Average]
[info]   (min, avg, max) = (19892,839, 19902,789, 19932,937), stdev = 16,973
[info]   CI (99.9%): [19837,431, 19968,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   383,076 ±(99.9%) 1,330 MB/sec [Average]
[info]   (min, avg, max) = (382,825, 383,076, 383,681), stdev = 0,345
[info]   CI (99.9%): [381,746, 384,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   30296,023 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (30296,020, 30296,023, 30296,026), stdev = 0,002
[info]   CI (99.9%): [30296,015, 30296,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,977 ±(99.9%) 989,790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,977, 675,281), stdev = 257,045
[info]   CI (99.9%): [≈ 0, 1431,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   34967,821 ±(99.9%) 78306,486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34967,821, 53421,899), stdev = 20335,946
[info]   CI (99.9%): [≈ 0, 113274,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,570 ±(99.9%) 4,841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,570, 2,819), stdev = 1,257
[info]   CI (99.9%): [≈ 0, 5,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   45,089 ±(99.9%) 382,944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45,089, 222,979), stdev = 99,449
[info]   CI (99.9%): [≈ 0, 428,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20,88% complete, ETA 01:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21468,700 ops/s
[info] # Warmup Iteration   2: 29223,030 ops/s
[info] # Warmup Iteration   3: 29178,820 ops/s
[info] # Warmup Iteration   4: 29121,315 ops/s
[info] # Warmup Iteration   5: 28978,433 ops/s
[info] Iteration   1: 29019,138 ops/s
[info]                  ·gc.alloc.rate:                   698,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              37856,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36595,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183,467 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29411,741 ops/s
[info]                  ·gc.alloc.rate:                   707,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              37856,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36108,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,228 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 29396,975 ops/s
[info]                  ·gc.alloc.rate:               707,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          37856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35981,947 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 29367,692 ops/s
[info]                  ·gc.alloc.rate:                   706,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              37856,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36017,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,462 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 29320,183 ops/s
[info]                  ·gc.alloc.rate:               705,258 MB/sec
[info]                  ·gc.alloc.rate.norm:          37856,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36040,666 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   29303,146 ±(99.9%) 625,993 ops/s [Average]
[info]   (min, avg, max) = (29019,138, 29303,146, 29411,741), stdev = 162,568
[info]   CI (99.9%): [28677,153, 29929,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   704,858 ±(99.9%) 15,084 MB/sec [Average]
[info]   (min, avg, max) = (698,017, 704,858, 707,549), stdev = 3,917
[info]   CI (99.9%): [689,775, 719,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   37856,015 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (37856,014, 37856,015, 37856,016), stdev = 0,001
[info]   CI (99.9%): [37856,011, 37856,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   673,050 ±(99.9%) 6,336 MB/sec [Average]
[info]   (min, avg, max) = (671,438, 673,050, 674,889), stdev = 1,645
[info]   CI (99.9%): [666,714, 679,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   36148,749 ±(99.9%) 977,032 B/op [Average]
[info]   (min, avg, max) = (35981,947, 36148,749, 36595,035), stdev = 253,732
[info]   CI (99.9%): [35171,717, 37125,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,702 ±(99.9%) 5,773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,702, 3,383), stdev = 1,499
[info]   CI (99.9%): [≈ 0, 6,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   38,031 ±(99.9%) 313,142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38,031, 183,467), stdev = 81,322
[info]   CI (99.9%): [≈ 0, 351,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,08% complete, ETA 01:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50786,659 ops/s
[info] # Warmup Iteration   2: 78100,958 ops/s
[info] # Warmup Iteration   3: 78430,949 ops/s
[info] # Warmup Iteration   4: 78489,125 ops/s
[info] # Warmup Iteration   5: 78000,253 ops/s
[info] Iteration   1: 78406,544 ops/s
[info]                  ·gc.alloc.rate:                   924,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              18568,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27102,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,671 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 78766,313 ops/s
[info]                  ·gc.alloc.rate:               929,253 MB/sec
[info]                  ·gc.alloc.rate.norm:          18568,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13503,521 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 78745,716 ops/s
[info]                  ·gc.alloc.rate:               928,937 MB/sec
[info]                  ·gc.alloc.rate.norm:          18568,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13507,293 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 78314,928 ops/s
[info]                  ·gc.alloc.rate:                   923,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              18568,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27187,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,837 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 78520,444 ops/s
[info]                  ·gc.alloc.rate:               926,297 MB/sec
[info]                  ·gc.alloc.rate.norm:          18568,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13571,142 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   78550,789 ±(99.9%) 774,461 ops/s [Average]
[info]   (min, avg, max) = (78314,928, 78550,789, 78766,313), stdev = 201,125
[info]   CI (99.9%): [77776,329, 79325,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   926,681 ±(99.9%) 9,078 MB/sec [Average]
[info]   (min, avg, max) = (923,958, 926,681, 929,253), stdev = 2,358
[info]   CI (99.9%): [917,603, 935,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18568,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18568,005, 18568,006, 18568,006), stdev = 0,001
[info]   CI (99.9%): [18568,004, 18568,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,314 ±(99.9%) 1424,289 MB/sec [Average]
[info]   (min, avg, max) = (675,755, 946,314, 1352,875), stdev = 369,883
[info]   CI (99.9%): [≈ 0, 2370,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18974,488 ±(99.9%) 28721,769 B/op [Average]
[info]   (min, avg, max) = (13503,521, 18974,488, 27187,584), stdev = 7458,952
[info]   CI (99.9%): [≈ 0, 47696,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,502 ±(99.9%) 2,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,502, 1,671), stdev = 0,748
[info]   CI (99.9%): [≈ 0, 3,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,29% complete, ETA 01:44:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121972,486 ops/s
[info] # Warmup Iteration   2: 134783,919 ops/s
[info] # Warmup Iteration   3: 137264,329 ops/s
[info] # Warmup Iteration   4: 137263,300 ops/s
[info] # Warmup Iteration   5: 136565,283 ops/s
[info] Iteration   1: 136487,503 ops/s
[info]                  ·gc.alloc.rate:                   532,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5898,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,545 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 136635,410 ops/s
[info]                  ·gc.alloc.rate:                   533,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7772,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,177 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 137710,483 ops/s
[info]                  ·gc.alloc.rate:      537,441 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 137409,960 ops/s
[info]                  ·gc.alloc.rate:                   536,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7728,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,715 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 137291,160 ops/s
[info]                  ·gc.alloc.rate:               535,984 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7712,757 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   137106,903 ±(99.9%) 2015,680 ops/s [Average]
[info]   (min, avg, max) = (136487,503, 137106,903, 137710,483), stdev = 523,466
[info]   CI (99.9%): [135091,223, 139122,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   535,204 ±(99.9%) 7,788 MB/sec [Average]
[info]   (min, avg, max) = (532,808, 535,204, 537,441), stdev = 2,023
[info]   CI (99.9%): [527,415, 542,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6144,003, 6144,003, 6144,003), stdev = 0,001
[info]   CI (99.9%): [6144,003, 6144,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,786 ±(99.9%) 1124,075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,786, 674,811), stdev = 291,919
[info]   CI (99.9%): [≈ 0, 1630,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5822,632 ±(99.9%) 12903,656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5822,632, 7772,800), stdev = 3351,039
[info]   CI (99.9%): [≈ 0, 18726,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,140), stdev = 1,392
[info]   CI (99.9%): [≈ 0, 6,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7,487 ±(99.9%) 61,769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,487, 36,177), stdev = 16,041
[info]   CI (99.9%): [≈ 0, 69,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21,49% complete, ETA 01:44:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14162,562 ops/s
[info] # Warmup Iteration   2: 24302,616 ops/s
[info] # Warmup Iteration   3: 24331,924 ops/s
[info] # Warmup Iteration   4: 24213,543 ops/s
[info] # Warmup Iteration   5: 23774,939 ops/s
[info] Iteration   1: 24505,087 ops/s
[info]                  ·gc.alloc.rate:                   1352,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86803,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,337 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24505,746 ops/s
[info]                  ·gc.alloc.rate:               1352,954 MB/sec
[info]                  ·gc.alloc.rate.norm:          86880,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86889,345 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 24539,219 ops/s
[info]                  ·gc.alloc.rate:               1354,597 MB/sec
[info]                  ·gc.alloc.rate.norm:          86880,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86829,526 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 24509,003 ops/s
[info]                  ·gc.alloc.rate:                   1353,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86996,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,337 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 24527,756 ops/s
[info]                  ·gc.alloc.rate:                   1353,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86996,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,336 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   24517,362 ±(99.9%) 59,069 ops/s [Average]
[info]   (min, avg, max) = (24505,087, 24517,362, 24539,219), stdev = 15,340
[info]   CI (99.9%): [24458,294, 24576,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1353,446 ±(99.9%) 2,989 MB/sec [Average]
[info]   (min, avg, max) = (1352,743, 1353,446, 1354,597), stdev = 0,776
[info]   CI (99.9%): [1350,458, 1356,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86880,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (86880,017, 86880,017, 86880,018), stdev = 0,001
[info]   CI (99.9%): [86880,014, 86880,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,806 ±(99.9%) 6,172 MB/sec [Average]
[info]   (min, avg, max) = (1351,556, 1353,806, 1355,703), stdev = 1,603
[info]   CI (99.9%): [1347,634, 1359,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86903,145 ±(99.9%) 349,362 B/op [Average]
[info]   (min, avg, max) = (86803,782, 86903,145, 86996,676), stdev = 90,728
[info]   CI (99.9%): [86553,783, 87252,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,802 ±(99.9%) 2,819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,802, 1,337), stdev = 0,732
[info]   CI (99.9%): [≈ 0, 3,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21,69% complete, ETA 01:43:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25001,244 ops/s
[info] # Warmup Iteration   2: 29337,308 ops/s
[info] # Warmup Iteration   3: 29568,697 ops/s
[info] # Warmup Iteration   4: 29576,881 ops/s
[info] # Warmup Iteration   5: 29508,367 ops/s
[info] Iteration   1: 29515,971 ops/s
[info]                  ·gc.alloc.rate:                   563,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27278,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,860 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29505,116 ops/s
[info]                  ·gc.alloc.rate:                   563,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35992,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171,211 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 29594,035 ops/s
[info]                  ·gc.alloc.rate:                   564,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35882,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 29596,922 ops/s
[info]                  ·gc.alloc.rate:      564,954 MB/sec
[info]                  ·gc.alloc.rate.norm: 30040,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 29529,141 ops/s
[info]                  ·gc.alloc.rate:                   563,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35856,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,109 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   29548,237 ±(99.9%) 169,307 ops/s [Average]
[info]   (min, avg, max) = (29505,116, 29548,237, 29596,922), stdev = 43,969
[info]   CI (99.9%): [29378,930, 29717,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   563,971 ±(99.9%) 3,275 MB/sec [Average]
[info]   (min, avg, max) = (563,171, 563,971, 564,954), stdev = 0,851
[info]   CI (99.9%): [560,695, 567,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30040,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (30040,014, 30040,014, 30040,016), stdev = 0,001
[info]   CI (99.9%): [30040,011, 30040,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   506,736 ±(99.9%) 1123,940 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,736, 674,763), stdev = 291,884
[info]   CI (99.9%): [≈ 0, 1630,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27002,035 ±(99.9%) 59879,916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27002,035, 35992,393), stdev = 15550,624
[info]   CI (99.9%): [≈ 0, 86881,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,657 ±(99.9%) 5,495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,657, 3,210), stdev = 1,427
[info]   CI (99.9%): [≈ 0, 6,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   35,058 ±(99.9%) 293,092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35,058, 171,211), stdev = 76,115
[info]   CI (99.9%): [≈ 0, 328,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21,89% complete, ETA 01:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169397,560 ops/s
[info] # Warmup Iteration   2: 207275,931 ops/s
[info] # Warmup Iteration   3: 205487,541 ops/s
[info] # Warmup Iteration   4: 205327,383 ops/s
[info] # Warmup Iteration   5: 206200,392 ops/s
[info] Iteration   1: 207279,093 ops/s
[info]                  ·gc.alloc.rate:                   720,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5123,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,371 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 206814,530 ops/s
[info]                  ·gc.alloc.rate:                   719,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5134,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,475 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 207521,769 ops/s
[info]                  ·gc.alloc.rate:               721,420 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5097,066 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 207006,730 ops/s
[info]                  ·gc.alloc.rate:                   719,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10214,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,633 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 206863,885 ops/s
[info]                  ·gc.alloc.rate:               719,194 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5108,133 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   207097,201 ±(99.9%) 1148,543 ops/s [Average]
[info]   (min, avg, max) = (206814,530, 207097,201, 207521,769), stdev = 298,273
[info]   CI (99.9%): [205948,659, 208245,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   720,023 ±(99.9%) 3,844 MB/sec [Average]
[info]   (min, avg, max) = (719,073, 720,023, 721,420), stdev = 0,998
[info]   CI (99.9%): [716,179, 723,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   807,290 ±(99.9%) 1154,484 MB/sec [Average]
[info]   (min, avg, max) = (671,370, 807,290, 1343,610), stdev = 299,816
[info]   CI (99.9%): [≈ 0, 1961,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6135,560 ±(99.9%) 8780,445 B/op [Average]
[info]   (min, avg, max) = (5097,066, 6135,560, 10214,521), stdev = 2280,254
[info]   CI (99.9%): [≈ 0, 14916,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,697 ±(99.9%) 5,693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,697, 3,341), stdev = 1,478
[info]   CI (99.9%): [≈ 0, 6,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,296 ±(99.9%) 43,227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,296, 25,371), stdev = 11,226
[info]   CI (99.9%): [≈ 0, 48,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,09% complete, ETA 01:43:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239190,829 ops/s
[info] # Warmup Iteration   2: 313755,951 ops/s
[info] # Warmup Iteration   3: 304047,726 ops/s
[info] # Warmup Iteration   4: 302562,795 ops/s
[info] # Warmup Iteration   5: 303178,836 ops/s
[info] Iteration   1: 304101,752 ops/s
[info]                  ·gc.alloc.rate:      307,579 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 302322,276 ops/s
[info]                  ·gc.alloc.rate:               305,802 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2663,138 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 303824,033 ops/s
[info]                  ·gc.alloc.rate:      307,297 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 302620,106 ops/s
[info]                  ·gc.alloc.rate:               306,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2660,428 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 303755,721 ops/s
[info]                  ·gc.alloc.rate:      307,226 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   303324,778 ±(99.9%) 3068,596 ops/s [Average]
[info]   (min, avg, max) = (302322,276, 303324,778, 304101,752), stdev = 796,905
[info]   CI (99.9%): [300256,182, 306393,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   306,804 ±(99.9%) 3,046 MB/sec [Average]
[info]   (min, avg, max) = (305,802, 306,804, 307,579), stdev = 0,791
[info]   CI (99.9%): [303,758, 309,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,621 ±(99.9%) 1078,908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,621, 511,554), stdev = 280,189
[info]   CI (99.9%): [≈ 0, 1283,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1064,713 ±(99.9%) 5613,927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1064,713, 2663,138), stdev = 1457,919
[info]   CI (99.9%): [≈ 0, 6678,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,29% complete, ETA 01:43:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548251,197 ops/s
[info] # Warmup Iteration   2: 563247,205 ops/s
[info] # Warmup Iteration   3: 572644,207 ops/s
[info] # Warmup Iteration   4: 573462,967 ops/s
[info] # Warmup Iteration   5: 575264,004 ops/s
[info] Iteration   1: 572175,594 ops/s
[info]                  ·gc.alloc.rate:               439,134 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1407,121 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 570746,152 ops/s
[info]                  ·gc.alloc.rate:               437,999 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1410,650 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 572254,445 ops/s
[info]                  ·gc.alloc.rate:      439,238 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 572251,219 ops/s
[info]                  ·gc.alloc.rate:                   439,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1857,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,609 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 575595,401 ops/s
[info]                  ·gc.alloc.rate:                   441,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1846,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,228 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   572604,562 ±(99.9%) 6896,376 ops/s [Average]
[info]   (min, avg, max) = (570746,152, 572604,562, 575595,401), stdev = 1790,967
[info]   CI (99.9%): [565708,186, 579500,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   439,468 ±(99.9%) 5,260 MB/sec [Average]
[info]   (min, avg, max) = (437,999, 439,468, 441,725), stdev = 1,366
[info]   CI (99.9%): [434,208, 444,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,763 ±(99.9%) 1069,582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,763, 675,473), stdev = 277,767
[info]   CI (99.9%): [≈ 0, 1544,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1304,470 ±(99.9%) 2934,915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1304,470, 1857,677), stdev = 762,188
[info]   CI (99.9%): [≈ 0, 4239,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,130), stdev = 1,391
[info]   CI (99.9%): [≈ 0, 5,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,767 ±(99.9%) 14,732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,767, 8,609), stdev = 3,826
[info]   CI (99.9%): [≈ 0, 16,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22,49% complete, ETA 01:42:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 574949,467 ops/s
[info] # Warmup Iteration   2: 603792,033 ops/s
[info] # Warmup Iteration   3: 605579,030 ops/s
[info] # Warmup Iteration   4: 605829,464 ops/s
[info] # Warmup Iteration   5: 606078,870 ops/s
[info] Iteration   1: 601566,625 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 606983,298 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 605295,951 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 600081,955 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 605372,035 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   603859,973 ±(99.9%) 11166,268 ops/s [Average]
[info]   (min, avg, max) = (600081,955, 603859,973, 606983,298), stdev = 2899,844
[info]   CI (99.9%): [592693,705, 615026,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22,69% complete, ETA 01:42:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208604,735 ops/s
[info] # Warmup Iteration   2: 333045,925 ops/s
[info] # Warmup Iteration   3: 331674,069 ops/s
[info] # Warmup Iteration   4: 329975,509 ops/s
[info] # Warmup Iteration   5: 334141,649 ops/s
[info] Iteration   1: 333867,274 ops/s
[info]                  ·gc.alloc.rate:                   923,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6364,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,491 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 334178,601 ops/s
[info]                  ·gc.alloc.rate:               924,162 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3182,827 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 334012,381 ops/s
[info]                  ·gc.alloc.rate:               923,440 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3184,266 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 333288,453 ops/s
[info]                  ·gc.alloc.rate:                   921,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6385,374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 331752,468 ops/s
[info]                  ·gc.alloc.rate:               917,195 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3210,684 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   333419,836 ±(99.9%) 3814,088 ops/s [Average]
[info]   (min, avg, max) = (331752,468, 333419,836, 334178,601), stdev = 990,506
[info]   CI (99.9%): [329605,748, 337233,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   921,925 ±(99.9%) 10,794 MB/sec [Average]
[info]   (min, avg, max) = (917,195, 921,925, 924,162), stdev = 2,803
[info]   CI (99.9%): [911,131, 932,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4352,001, 4352,001, 4352,001), stdev = 0,001
[info]   CI (99.9%): [4352,001, 4352,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   946,118 ±(99.9%) 1423,901 MB/sec [Average]
[info]   (min, avg, max) = (675,661, 946,118, 1352,216), stdev = 369,782
[info]   CI (99.9%): [≈ 0, 2370,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4465,565 ±(99.9%) 6712,212 B/op [Average]
[info]   (min, avg, max) = (3182,827, 4465,565, 6385,374), stdev = 1743,140
[info]   CI (99.9%): [≈ 0, 11177,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,157 ±(99.9%) 0,870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,157, 0,491), stdev = 0,226
[info]   CI (99.9%): [≈ 0, 1,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22,89% complete, ETA 01:42:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38747,858 ops/s
[info] # Warmup Iteration   2: 41272,715 ops/s
[info] # Warmup Iteration   3: 40723,541 ops/s
[info] # Warmup Iteration   4: 41213,063 ops/s
[info] # Warmup Iteration   5: 41184,690 ops/s
[info] Iteration   1: 41075,263 ops/s
[info]                  ·gc.alloc.rate:               190,391 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19601,460 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 41348,002 ops/s
[info]                  ·gc.alloc.rate:      191,686 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41213,762 ops/s
[info]                  ·gc.alloc.rate:               191,048 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19535,365 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 41211,282 ops/s
[info]                  ·gc.alloc.rate:      191,055 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41107,480 ops/s
[info]                  ·gc.alloc.rate:      190,542 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   41191,158 ±(99.9%) 412,708 ops/s [Average]
[info]   (min, avg, max) = (41075,263, 41191,158, 41348,002), stdev = 107,179
[info]   CI (99.9%): [40778,450, 41603,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   190,944 ±(99.9%) 1,964 MB/sec [Average]
[info]   (min, avg, max) = (190,391, 190,944, 191,686), stdev = 0,510
[info]   CI (99.9%): [188,980, 192,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7296,010, 7296,010, 7296,011), stdev = 0,001
[info]   CI (99.9%): [7296,009, 7296,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,608 ±(99.9%) 1078,841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,608, 511,538), stdev = 280,172
[info]   CI (99.9%): [≈ 0, 1283,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7827,365 ±(99.9%) 41271,534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7827,365, 19601,460), stdev = 10718,086
[info]   CI (99.9%): [≈ 0, 49098,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23,09% complete, ETA 01:42:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37530,874 ops/s
[info] # Warmup Iteration   2: 44620,062 ops/s
[info] # Warmup Iteration   3: 44836,628 ops/s
[info] # Warmup Iteration   4: 45049,390 ops/s
[info] # Warmup Iteration   5: 45193,936 ops/s
[info] Iteration   1: 44919,328 ops/s
[info]                  ·gc.alloc.rate:               2003,493 MB/sec
[info]                  ·gc.alloc.rate.norm:          70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47123,602 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 45200,875 ops/s
[info]                  ·gc.alloc.rate:                   2016,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70338,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,074 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45003,749 ops/s
[info]                  ·gc.alloc.rate:                   2007,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70763,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,456 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44836,030 ops/s
[info]                  ·gc.alloc.rate:               1999,965 MB/sec
[info]                  ·gc.alloc.rate.norm:          70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2027,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71152,119 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 44902,805 ops/s
[info]                  ·gc.alloc.rate:                   2002,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71140,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,730 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   44972,557 ±(99.9%) 542,655 ops/s [Average]
[info]   (min, avg, max) = (44836,030, 44972,557, 45200,875), stdev = 140,926
[info]   CI (99.9%): [44429,902, 45515,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   2005,973 ±(99.9%) 24,272 MB/sec [Average]
[info]   (min, avg, max) = (1999,965, 2005,973, 2016,172), stdev = 6,303
[info]   CI (99.9%): [1981,701, 2030,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70200,009, 70200,009, 70200,010), stdev = 0,001
[info]   CI (99.9%): [70200,008, 70200,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1889,066 ±(99.9%) 1171,445 MB/sec [Average]
[info]   (min, avg, max) = (1344,897, 1889,066, 2029,597), stdev = 304,221
[info]   CI (99.9%): [717,621, 3060,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   66103,727 ±(99.9%) 40876,322 B/op [Average]
[info]   (min, avg, max) = (47123,602, 66103,727, 71152,119), stdev = 10615,451
[info]   CI (99.9%): [25227,405, 106980,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,146), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,452 ±(99.9%) 8,136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,452, 5,074), stdev = 2,113
[info]   CI (99.9%): [≈ 0, 9,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23,29% complete, ETA 01:41:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91532,589 ops/s
[info] # Warmup Iteration   2: 330507,166 ops/s
[info] # Warmup Iteration   3: 328925,319 ops/s
[info] # Warmup Iteration   4: 329817,447 ops/s
[info] # Warmup Iteration   5: 329541,594 ops/s
[info] Iteration   1: 330800,536 ops/s
[info]                  ·gc.alloc.rate:      343,014 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 328795,216 ops/s
[info]                  ·gc.alloc.rate:               340,955 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2448,752 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 329788,291 ops/s
[info]                  ·gc.alloc.rate:                   341,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2441,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 329990,651 ops/s
[info]                  ·gc.alloc.rate:      342,228 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 329490,473 ops/s
[info]                  ·gc.alloc.rate:                   341,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3220,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,568 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   329773,034 ±(99.9%) 2816,055 ops/s [Average]
[info]   (min, avg, max) = (328795,216, 329773,034, 330800,536), stdev = 731,320
[info]   CI (99.9%): [326956,979, 332589,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   341,961 ±(99.9%) 2,915 MB/sec [Average]
[info]   (min, avg, max) = (340,955, 341,961, 343,014), stdev = 0,757
[info]   CI (99.9%): [339,046, 344,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,457 ±(99.9%) 1220,280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,457, 674,101), stdev = 316,903
[info]   CI (99.9%): [≈ 0, 1559,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1622,084 ±(99.9%) 5830,563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1622,084, 3220,131), stdev = 1514,179
[info]   CI (99.9%): [≈ 0, 7452,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,527 ±(99.9%) 4,528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,527, 2,631), stdev = 1,176
[info]   CI (99.9%): [≈ 0, 5,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2,520 ±(99.9%) 21,630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,520, 12,568), stdev = 5,617
[info]   CI (99.9%): [≈ 0, 24,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,49% complete, ETA 01:41:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80531,582 ops/s
[info] # Warmup Iteration   2: 112946,281 ops/s
[info] # Warmup Iteration   3: 113078,581 ops/s
[info] # Warmup Iteration   4: 113788,608 ops/s
[info] # Warmup Iteration   5: 113611,546 ops/s
[info] Iteration   1: 113581,889 ops/s
[info]                  ·gc.alloc.rate:               1249,961 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9363,604 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 113990,005 ops/s
[info]                  ·gc.alloc.rate:                   1254,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18678,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,287 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 114018,415 ops/s
[info]                  ·gc.alloc.rate:                   1254,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18692,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,287 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 113882,919 ops/s
[info]                  ·gc.alloc.rate:                   1253,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18723,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 113475,097 ops/s
[info]                  ·gc.alloc.rate:                   1248,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18809,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,289 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   113789,665 ±(99.9%) 949,641 ops/s [Average]
[info]   (min, avg, max) = (113475,097, 113789,665, 114018,415), stdev = 246,619
[info]   CI (99.9%): [112840,024, 114739,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1252,223 ±(99.9%) 10,509 MB/sec [Average]
[info]   (min, avg, max) = (1248,691, 1252,223, 1254,749), stdev = 2,729
[info]   CI (99.9%): [1241,713, 1262,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17320,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17320,004, 17320,004, 17320,004), stdev = 0,001
[info]   CI (99.9%): [17320,003, 17320,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,734 ±(99.9%) 1168,805 MB/sec [Average]
[info]   (min, avg, max) = (675,759, 1218,734, 1356,067), stdev = 303,535
[info]   CI (99.9%): [49,929, 2387,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16853,507 ±(99.9%) 16123,769 B/op [Average]
[info]   (min, avg, max) = (9363,604, 16853,507, 18809,367), stdev = 4187,292
[info]   CI (99.9%): [729,738, 32977,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,230 ±(99.9%) 0,496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,230, 0,289), stdev = 0,129
[info]   CI (99.9%): [≈ 0, 0,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,69% complete, ETA 01:41:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452858,878 ops/s
[info] # Warmup Iteration   2: 462916,874 ops/s
[info] # Warmup Iteration   3: 468906,585 ops/s
[info] # Warmup Iteration   4: 466403,526 ops/s
[info] # Warmup Iteration   5: 468168,025 ops/s
[info] Iteration   1: 467357,312 ops/s
[info]                  ·gc.alloc.rate:      304,062 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 465283,278 ops/s
[info]                  ·gc.alloc.rate:                   302,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1730,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 467397,425 ops/s
[info]                  ·gc.alloc.rate:      304,116 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 465876,745 ops/s
[info]                  ·gc.alloc.rate:                   303,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1728,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 465859,216 ops/s
[info]                  ·gc.alloc.rate:                   303,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1728,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   466354,795 ±(99.9%) 3710,629 ops/s [Average]
[info]   (min, avg, max) = (465283,278, 466354,795, 467397,425), stdev = 963,638
[info]   CI (99.9%): [462644,166, 470065,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   303,428 ±(99.9%) 2,397 MB/sec [Average]
[info]   (min, avg, max) = (302,743, 303,428, 304,116), stdev = 0,622
[info]   CI (99.9%): [301,031, 305,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,961 ±(99.9%) 1079,013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,961, 511,648), stdev = 280,216
[info]   CI (99.9%): [≈ 0, 1385,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1037,433 ±(99.9%) 3646,724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1037,433, 1730,465), stdev = 947,043
[info]   CI (99.9%): [≈ 0, 4684,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,013), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23,90% complete, ETA 01:41:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29256,157 ops/s
[info] # Warmup Iteration   2: 45753,701 ops/s
[info] # Warmup Iteration   3: 46100,296 ops/s
[info] # Warmup Iteration   4: 45978,327 ops/s
[info] # Warmup Iteration   5: 45906,564 ops/s
[info] Iteration   1: 46297,959 ops/s
[info]                  ·gc.alloc.rate:                   2470,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68993,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,123 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 45931,725 ops/s
[info]                  ·gc.alloc.rate:                   2450,650 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92876,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,853 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 46325,013 ops/s
[info]                  ·gc.alloc.rate:                   2471,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92216,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,829 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 46232,468 ops/s
[info]                  ·gc.alloc.rate:                   2466,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69385,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,417 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 46036,090 ops/s
[info]                  ·gc.alloc.rate:                   2456,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92975,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,423 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   46164,651 ±(99.9%) 663,799 ops/s [Average]
[info]   (min, avg, max) = (45931,725, 46164,651, 46325,013), stdev = 172,387
[info]   CI (99.9%): [45500,852, 46828,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2463,092 ±(99.9%) 35,511 MB/sec [Average]
[info]   (min, avg, max) = (2450,650, 2463,092, 2471,600), stdev = 9,222
[info]   CI (99.9%): [2427,581, 2498,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83976,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (83976,009, 83976,009, 83976,010), stdev = 0,001
[info]   CI (99.9%): [83976,007, 83976,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2442,321 ±(99.9%) 1435,871 MB/sec [Average]
[info]   (min, avg, max) = (2029,411, 2442,321, 2719,339), stdev = 372,891
[info]   CI (99.9%): [1006,450, 3878,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83289,397 ±(99.9%) 49579,841 B/op [Average]
[info]   (min, avg, max) = (68993,307, 83289,397, 92975,500), stdev = 12875,727
[info]   CI (99.9%): [33709,556, 132869,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,129 ±(99.9%) 2,736 B/op [Average]
[info]   (min, avg, max) = (1,417, 2,129, 2,853), stdev = 0,710
[info]   CI (99.9%): [≈ 0, 4,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24,10% complete, ETA 01:40:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79404,747 ops/s
[info] # Warmup Iteration   2: 86995,825 ops/s
[info] # Warmup Iteration   3: 88503,369 ops/s
[info] # Warmup Iteration   4: 88870,004 ops/s
[info] # Warmup Iteration   5: 88248,953 ops/s
[info] Iteration   1: 88448,393 ops/s
[info]                  ·gc.alloc.rate:                   1617,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23918,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,741 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 88766,364 ops/s
[info]                  ·gc.alloc.rate:                   1623,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35772,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,738 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 88735,454 ops/s
[info]                  ·gc.alloc.rate:                   1622,900 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23887,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,369 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 88537,029 ops/s
[info]                  ·gc.alloc.rate:               1619,346 MB/sec
[info]                  ·gc.alloc.rate.norm:          28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23964,745 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 88410,707 ops/s
[info]                  ·gc.alloc.rate:                   1616,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36046,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,371 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   88579,589 ±(99.9%) 628,976 ops/s [Average]
[info]   (min, avg, max) = (88410,707, 88579,589, 88766,364), stdev = 163,343
[info]   CI (99.9%): [87950,613, 89208,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1620,003 ±(99.9%) 11,665 MB/sec [Average]
[info]   (min, avg, max) = (1616,766, 1620,003, 1623,409), stdev = 3,029
[info]   CI (99.9%): [1608,338, 1631,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28784,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28784,005, 28784,005, 28784,005), stdev = 0,001
[info]   CI (99.9%): [28784,004, 28784,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,292 ±(99.9%) 1423,144 MB/sec [Average]
[info]   (min, avg, max) = (1344,137, 1616,292, 2024,720), stdev = 369,586
[info]   CI (99.9%): [193,147, 3039,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28717,934 ±(99.9%) 25283,279 B/op [Average]
[info]   (min, avg, max) = (23887,388, 28717,934, 36046,986), stdev = 6565,987
[info]   CI (99.9%): [3434,656, 54001,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,444 ±(99.9%) 1,191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,444, 0,741), stdev = 0,309
[info]   CI (99.9%): [≈ 0, 1,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24,30% complete, ETA 01:40:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81398,177 ops/s
[info] # Warmup Iteration   2: 98271,485 ops/s
[info] # Warmup Iteration   3: 99584,807 ops/s
[info] # Warmup Iteration   4: 100018,954 ops/s
[info] # Warmup Iteration   5: 99909,515 ops/s
[info] Iteration   1: 99933,570 ops/s
[info]                  ·gc.alloc.rate:               482,545 MB/sec
[info]                  ·gc.alloc.rate.norm:          7600,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8056,447 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 99803,914 ops/s
[info]                  ·gc.alloc.rate:               481,954 MB/sec
[info]                  ·gc.alloc.rate.norm:          7600,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8066,939 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 100196,931 ops/s
[info]                  ·gc.alloc.rate:                   483,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10598,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53,374 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 100336,224 ops/s
[info]                  ·gc.alloc.rate:      484,545 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 100190,226 ops/s
[info]                  ·gc.alloc.rate:                   483,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10599,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,308 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   100092,173 ±(99.9%) 835,682 ops/s [Average]
[info]   (min, avg, max) = (99803,914, 100092,173, 100336,224), stdev = 217,024
[info]   CI (99.9%): [99256,491, 100927,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   483,320 ±(99.9%) 4,034 MB/sec [Average]
[info]   (min, avg, max) = (481,954, 483,320, 484,545), stdev = 1,048
[info]   CI (99.9%): [479,286, 487,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7600,004, 7600,004, 7600,005), stdev = 0,001
[info]   CI (99.9%): [7600,004, 7600,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   474,490 ±(99.9%) 1068,577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,490, 674,723), stdev = 277,506
[info]   CI (99.9%): [≈ 0, 1543,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7464,286 ±(99.9%) 16793,681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7464,286, 10599,392), stdev = 4361,266
[info]   CI (99.9%): [≈ 0, 24257,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,696 ±(99.9%) 5,817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,696, 3,398), stdev = 1,511
[info]   CI (99.9%): [≈ 0, 6,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10,936 ±(99.9%) 91,376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,936, 53,374), stdev = 23,730
[info]   CI (99.9%): [≈ 0, 102,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24,50% complete, ETA 01:40:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33287,324 ops/s
[info] # Warmup Iteration   2: 124211,282 ops/s
[info] # Warmup Iteration   3: 124680,382 ops/s
[info] # Warmup Iteration   4: 124726,273 ops/s
[info] # Warmup Iteration   5: 124301,823 ops/s
[info] Iteration   1: 124655,786 ops/s
[info]                  ·gc.alloc.rate:                   381,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6458,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,302 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 124917,859 ops/s
[info]                  ·gc.alloc.rate:      382,190 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 124790,747 ops/s
[info]                  ·gc.alloc.rate:               381,837 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6452,052 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 124211,143 ops/s
[info]                  ·gc.alloc.rate:                   380,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8541,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33,411 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 124600,992 ops/s
[info]                  ·gc.alloc.rate:      381,269 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   124635,305 ±(99.9%) 1028,759 ops/s [Average]
[info]   (min, avg, max) = (124211,143, 124635,305, 124917,859), stdev = 267,166
[info]   CI (99.9%): [123606,546, 125664,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   381,368 ±(99.9%) 3,035 MB/sec [Average]
[info]   (min, avg, max) = (380,113, 381,368, 382,190), stdev = 0,788
[info]   CI (99.9%): [378,333, 384,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,446 ±(99.9%) 1220,270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,446, 674,137), stdev = 316,900
[info]   CI (99.9%): [≈ 0, 1559,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   4290,420 ±(99.9%) 15433,779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4290,420, 8541,271), stdev = 4008,103
[info]   CI (99.9%): [≈ 0, 19724,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,532 ±(99.9%) 4,531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,532, 2,637), stdev = 1,177
[info]   CI (99.9%): [≈ 0, 5,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   6,743 ±(99.9%) 57,409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,743, 33,411), stdev = 14,909
[info]   CI (99.9%): [≈ 0, 64,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,70% complete, ETA 01:39:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79891,340 ops/s
[info] # Warmup Iteration   2: 108906,866 ops/s
[info] # Warmup Iteration   3: 109095,172 ops/s
[info] # Warmup Iteration   4: 108925,756 ops/s
[info] # Warmup Iteration   5: 108976,867 ops/s
[info] Iteration   1: 108935,579 ops/s
[info]                  ·gc.alloc.rate:               359,912 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7390,708 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 108688,165 ops/s
[info]                  ·gc.alloc.rate:      359,115 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 109033,528 ops/s
[info]                  ·gc.alloc.rate:               360,202 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7384,203 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 108943,191 ops/s
[info]                  ·gc.alloc.rate:      359,973 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 108772,624 ops/s
[info]                  ·gc.alloc.rate:                   359,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9758,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,506 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   108874,617 ±(99.9%) 540,595 ops/s [Average]
[info]   (min, avg, max) = (108688,165, 108874,617, 109033,528), stdev = 140,391
[info]   CI (99.9%): [108334,022, 109415,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   359,720 ±(99.9%) 1,724 MB/sec [Average]
[info]   (min, avg, max) = (359,115, 359,720, 360,202), stdev = 0,448
[info]   CI (99.9%): [357,996, 361,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5200,004, 5200,004, 5200,004), stdev = 0,001
[info]   CI (99.9%): [5200,003, 5200,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   339,497 ±(99.9%) 1220,556 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,497, 674,446), stdev = 316,974
[info]   CI (99.9%): [≈ 0, 1560,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4906,642 ±(99.9%) 17645,628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4906,642, 9758,297), stdev = 4582,514
[info]   CI (99.9%): [≈ 0, 22552,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,301 ±(99.9%) 2,593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,301, 1,506), stdev = 0,673
[info]   CI (99.9%): [≈ 0, 2,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,90% complete, ETA 01:39:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119642,243 ops/s
[info] # Warmup Iteration   2: 125374,071 ops/s
[info] # Warmup Iteration   3: 125713,466 ops/s
[info] # Warmup Iteration   4: 125184,204 ops/s
[info] # Warmup Iteration   5: 125686,322 ops/s
[info] Iteration   1: 125420,996 ops/s
[info]                  ·gc.alloc.rate:               383,773 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6419,290 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 125693,985 ops/s
[info]                  ·gc.alloc.rate:                   384,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6405,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,144 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 125629,639 ops/s
[info]                  ·gc.alloc.rate:                   384,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6408,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 124982,846 ops/s
[info]                  ·gc.alloc.rate:      382,477 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 125171,923 ops/s
[info]                  ·gc.alloc.rate:                   382,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8483,543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39,411 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   125379,878 ±(99.9%) 1160,978 ops/s [Average]
[info]   (min, avg, max) = (124982,846, 125379,878, 125693,985), stdev = 301,502
[info]   CI (99.9%): [124218,900, 126540,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   383,651 ±(99.9%) 3,511 MB/sec [Average]
[info]   (min, avg, max) = (382,477, 383,651, 384,620), stdev = 0,912
[info]   CI (99.9%): [380,140, 387,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,858 ±(99.9%) 989,247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,858, 674,647), stdev = 256,904
[info]   CI (99.9%): [≈ 0, 1431,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5543,472 ±(99.9%) 12422,942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5543,472, 8483,543), stdev = 3226,199
[info]   CI (99.9%): [≈ 0, 17966,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,632 ±(99.9%) 5,385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,632, 3,134), stdev = 1,399
[info]   CI (99.9%): [≈ 0, 6,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7,952 ±(99.9%) 67,719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,952, 39,411), stdev = 17,586
[info]   CI (99.9%): [≈ 0, 75,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,140
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25,10% complete, ETA 01:39:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115279,150 ops/s
[info] # Warmup Iteration   2: 120549,832 ops/s
[info] # Warmup Iteration   3: 121207,484 ops/s
[info] # Warmup Iteration   4: 123236,312 ops/s
[info] # Warmup Iteration   5: 124458,634 ops/s
[info] Iteration   1: 123779,004 ops/s
[info]                  ·gc.alloc.rate:               281,215 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6504,478 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 123817,660 ops/s
[info]                  ·gc.alloc.rate:      281,319 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 123978,937 ops/s
[info]                  ·gc.alloc.rate:                   281,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6493,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,307 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 123644,347 ops/s
[info]                  ·gc.alloc.rate:                   280,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6511,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,513 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 122169,517 ops/s
[info]                  ·gc.alloc.rate:      277,567 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   123477,893 ±(99.9%) 2853,577 ops/s [Average]
[info]   (min, avg, max) = (122169,517, 123477,893, 123978,937), stdev = 741,065
[info]   CI (99.9%): [120624,315, 126331,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   280,551 ±(99.9%) 6,503 MB/sec [Average]
[info]   (min, avg, max) = (277,567, 280,551, 281,693), stdev = 1,689
[info]   CI (99.9%): [274,048, 287,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3576,003, 3576,003, 3576,003), stdev = 0,001
[info]   CI (99.9%): [3576,003, 3576,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306,931 ±(99.9%) 1078,906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,931, 511,594), stdev = 280,188
[info]   CI (99.9%): [≈ 0, 1385,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   3901,987 ±(99.9%) 13716,057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3901,987, 6511,473), stdev = 3562,016
[info]   CI (99.9%): [≈ 0, 17618,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,013 ±(99.9%) 0,071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,040), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,164 ±(99.9%) 0,909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,164, 0,513), stdev = 0,236
[info]   CI (99.9%): [≈ 0, 1,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25,30% complete, ETA 01:39:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8040,492 ops/s
[info] # Warmup Iteration   2: 11293,177 ops/s
[info] # Warmup Iteration   3: 11433,544 ops/s
[info] # Warmup Iteration   4: 11470,247 ops/s
[info] # Warmup Iteration   5: 11449,748 ops/s
[info] Iteration   1: 11450,995 ops/s
[info]                  ·gc.alloc.rate:               1883,320 MB/sec
[info]                  ·gc.alloc.rate.norm:          258856,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 277157,660 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 11306,324 ops/s
[info]                  ·gc.alloc.rate:                   1859,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280964,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,897 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 11375,623 ops/s
[info]                  ·gc.alloc.rate:                   1870,951 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279746,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,880 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11458,486 ops/s
[info]                  ·gc.alloc.rate:               1884,547 MB/sec
[info]                  ·gc.alloc.rate.norm:          258856,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 185406,096 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 11462,811 ops/s
[info]                  ·gc.alloc.rate:                   1885,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278376,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,858 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   11410,848 ±(99.9%) 263,617 ops/s [Average]
[info]   (min, avg, max) = (11306,324, 11410,848, 11462,811), stdev = 68,460
[info]   CI (99.9%): [11147,231, 11674,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1876,710 ±(99.9%) 42,988 MB/sec [Average]
[info]   (min, avg, max) = (1859,667, 1876,710, 1885,065), stdev = 11,164
[info]   CI (99.9%): [1833,722, 1919,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856,048 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (258856,036, 258856,048, 258856,087), stdev = 0,022
[info]   CI (99.9%): [258855,962, 258856,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886,789 ±(99.9%) 1155,993 MB/sec [Average]
[info]   (min, avg, max) = (1349,810, 1886,789, 2027,219), stdev = 300,208
[info]   CI (99.9%): [730,796, 3042,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   260330,220 ±(99.9%) 161373,855 B/op [Average]
[info]   (min, avg, max) = (185406,096, 260330,220, 280964,595), stdev = 41908,278
[info]   CI (99.9%): [98956,366, 421704,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,727 ±(99.9%) 6,071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,727, 2,897), stdev = 1,577
[info]   CI (99.9%): [≈ 0, 7,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,50% complete, ETA 01:38:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6903,263 ops/s
[info] # Warmup Iteration   2: 11608,312 ops/s
[info] # Warmup Iteration   3: 11659,794 ops/s
[info] # Warmup Iteration   4: 11626,922 ops/s
[info] # Warmup Iteration   5: 11640,725 ops/s
[info] Iteration   1: 11605,039 ops/s
[info]                  ·gc.alloc.rate:                   1795,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              243450,320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275489,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,468 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11600,007 ops/s
[info]                  ·gc.alloc.rate:                   1794,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     183905,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,648 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11635,746 ops/s
[info]                  ·gc.alloc.rate:               1799,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          243472,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2034,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 275229,803 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 11596,034 ops/s
[info]                  ·gc.alloc.rate:                   1794,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276426,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,650 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11452,684 ops/s
[info]                  ·gc.alloc.rate:                   1771,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              243468,274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186722,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,860 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   11577,902 ±(99.9%) 276,198 ops/s [Average]
[info]   (min, avg, max) = (11452,684, 11577,902, 11635,746), stdev = 71,728
[info]   CI (99.9%): [11301,704, 11854,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1791,010 ±(99.9%) 42,988 MB/sec [Average]
[info]   (min, avg, max) = (1771,483, 1791,010, 1799,881), stdev = 11,164
[info]   CI (99.9%): [1748,022, 1833,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243466,941 ±(99.9%) 36,323 B/op [Average]
[info]   (min, avg, max) = (243450,320, 243466,941, 243472,038), stdev = 9,433
[info]   CI (99.9%): [243430,618, 243503,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1763,396 ±(99.9%) 1428,448 MB/sec [Average]
[info]   (min, avg, max) = (1355,465, 1763,396, 2036,837), stdev = 370,963
[info]   CI (99.9%): [334,948, 3191,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   239554,691 ±(99.9%) 190710,140 B/op [Average]
[info]   (min, avg, max) = (183905,211, 239554,691, 276426,328), stdev = 49526,818
[info]   CI (99.9%): [48844,551, 430264,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,525 ±(99.9%) 12,376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,525, 8,468), stdev = 3,214
[info]   CI (99.9%): [≈ 0, 16,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,70% complete, ETA 01:38:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198958,667 ops/s
[info] # Warmup Iteration   2: 208973,772 ops/s
[info] # Warmup Iteration   3: 207732,463 ops/s
[info] # Warmup Iteration   4: 208699,993 ops/s
[info] # Warmup Iteration   5: 208095,155 ops/s
[info] Iteration   1: 208022,984 ops/s
[info]                  ·gc.alloc.rate:                   541,340 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3870,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 208278,278 ops/s
[info]                  ·gc.alloc.rate:                   542,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5104,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,102 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 208330,282 ops/s
[info]                  ·gc.alloc.rate:      542,140 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207924,284 ops/s
[info]                  ·gc.alloc.rate:                   541,156 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5112,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,315 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 208361,964 ops/s
[info]                  ·gc.alloc.rate:               542,213 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5091,762 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   208183,558 ±(99.9%) 758,819 ops/s [Average]
[info]   (min, avg, max) = (207924,284, 208183,558, 208361,964), stdev = 197,063
[info]   CI (99.9%): [207424,739, 208942,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   541,781 ±(99.9%) 1,901 MB/sec [Average]
[info]   (min, avg, max) = (541,156, 541,781, 542,213), stdev = 0,494
[info]   CI (99.9%): [539,879, 543,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,002, 4096,002, 4096,002), stdev = 0,001
[info]   CI (99.9%): [4096,002, 4096,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   507,301 ±(99.9%) 1125,497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,301, 675,466), stdev = 292,288
[info]   CI (99.9%): [≈ 0, 1632,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3835,810 ±(99.9%) 8508,719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3835,810, 5112,595), stdev = 2209,687
[info]   CI (99.9%): [≈ 0, 12344,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,568 ±(99.9%) 4,789 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,568, 2,793), stdev = 1,244
[info]   CI (99.9%): [≈ 0, 5,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,292 ±(99.9%) 36,188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,292, 21,102), stdev = 9,398
[info]   CI (99.9%): [≈ 0, 40,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25,90% complete, ETA 01:38:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3429,099 ops/s
[info] # Warmup Iteration   2: 6402,516 ops/s
[info] # Warmup Iteration   3: 6715,355 ops/s
[info] # Warmup Iteration   4: 6688,364 ops/s
[info] # Warmup Iteration   5: 6735,086 ops/s
[info] Iteration   1: 6717,094 ops/s
[info]                  ·gc.alloc.rate:               1783,766 MB/sec
[info]                  ·gc.alloc.rate.norm:          417984,065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 317272,661 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 6720,061 ops/s
[info]                  ·gc.alloc.rate:                   1784,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              417984,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476313,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,751 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6678,536 ops/s
[info]                  ·gc.alloc.rate:                   1773,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              417984,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479707,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,905 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6712,065 ops/s
[info]                  ·gc.alloc.rate:               1782,702 MB/sec
[info]                  ·gc.alloc.rate.norm:          417984,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318289,825 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 6678,366 ops/s
[info]                  ·gc.alloc.rate:                   1773,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              417989,972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     480335,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,905 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6701,225 ±(99.9%) 80,806 ops/s [Average]
[info]   (min, avg, max) = (6678,366, 6701,225, 6720,061), stdev = 20,985
[info]   CI (99.9%): [6620,419, 6782,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1779,705 ±(99.9%) 21,769 MB/sec [Average]
[info]   (min, avg, max) = (1773,485, 1779,705, 1784,914), stdev = 5,653
[info]   CI (99.9%): [1757,936, 1801,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   417985,244 ±(99.9%) 10,178 B/op [Average]
[info]   (min, avg, max) = (417984,061, 417985,244, 417989,972), stdev = 2,643
[info]   CI (99.9%): [417975,066, 417995,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,813 ±(99.9%) 1434,450 MB/sec [Average]
[info]   (min, avg, max) = (1353,976, 1763,813, 2038,011), stdev = 372,522
[info]   CI (99.9%): [329,363, 3198,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   414383,889 ±(99.9%) 339625,847 B/op [Average]
[info]   (min, avg, max) = (317272,661, 414383,889, 480335,713), stdev = 88199,754
[info]   CI (99.9%): [74758,042, 754009,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,912 ±(99.9%) 15,721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,912, 9,751), stdev = 4,083
[info]   CI (99.9%): [≈ 0, 19,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26,10% complete, ETA 01:38:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8393,415 ops/s
[info] # Warmup Iteration   2: 11259,657 ops/s
[info] # Warmup Iteration   3: 11297,641 ops/s
[info] # Warmup Iteration   4: 11324,686 ops/s
[info] # Warmup Iteration   5: 11353,840 ops/s
[info] Iteration   1: 11359,761 ops/s
[info]                  ·gc.alloc.rate:                   1827,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              253159,556 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279817,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,884 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11354,561 ops/s
[info]                  ·gc.alloc.rate:               1826,505 MB/sec
[info]                  ·gc.alloc.rate.norm:          253176,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 186780,774 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 11339,552 ops/s
[info]                  ·gc.alloc.rate:                   1824,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280890,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,889 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11335,392 ops/s
[info]                  ·gc.alloc.rate:                   1823,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281426,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,670 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11299,466 ops/s
[info]                  ·gc.alloc.rate:                   1817,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              253174,417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188415,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,798 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   11337,746 ±(99.9%) 91,154 ops/s [Average]
[info]   (min, avg, max) = (11299,466, 11337,746, 11359,761), stdev = 23,672
[info]   CI (99.9%): [11246,592, 11428,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1823,743 ±(99.9%) 14,369 MB/sec [Average]
[info]   (min, avg, max) = (1817,655, 1823,743, 1827,035), stdev = 3,732
[info]   CI (99.9%): [1809,374, 1838,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   253172,417 ±(99.9%) 27,816 B/op [Average]
[info]   (min, avg, max) = (253159,556, 253172,417, 253176,039), stdev = 7,224
[info]   CI (99.9%): [253144,601, 253200,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1754,061 ±(99.9%) 1419,993 MB/sec [Average]
[info]   (min, avg, max) = (1347,505, 1754,061, 2026,947), stdev = 368,768
[info]   CI (99.9%): [334,068, 3174,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   243466,001 ±(99.9%) 196409,094 B/op [Average]
[info]   (min, avg, max) = (186780,774, 243466,001, 281426,774), stdev = 51006,818
[info]   CI (99.9%): [47056,907, 439875,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,048 ±(99.9%) 12,700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,048, 8,670), stdev = 3,298
[info]   CI (99.9%): [≈ 0, 16,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26,31% complete, ETA 01:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21523,147 ops/s
[info] # Warmup Iteration   2: 29068,805 ops/s
[info] # Warmup Iteration   3: 29133,105 ops/s
[info] # Warmup Iteration   4: 29137,496 ops/s
[info] # Warmup Iteration   5: 29283,866 ops/s
[info] Iteration   1: 29364,687 ops/s
[info]                  ·gc.alloc.rate:                   1521,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71970,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,116 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29309,553 ops/s
[info]                  ·gc.alloc.rate:                   1518,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72113,298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,353 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 29244,725 ops/s
[info]                  ·gc.alloc.rate:                   1515,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108557,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,241 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29345,596 ops/s
[info]                  ·gc.alloc.rate:                   1521,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72198,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,116 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29328,515 ops/s
[info]                  ·gc.alloc.rate:               1519,869 MB/sec
[info]                  ·gc.alloc.rate.norm:          81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72327,295 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   29318,615 ±(99.9%) 177,407 ops/s [Average]
[info]   (min, avg, max) = (29244,725, 29318,615, 29364,687), stdev = 46,072
[info]   CI (99.9%): [29141,208, 29496,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1519,477 ±(99.9%) 9,201 MB/sec [Average]
[info]   (min, avg, max) = (1515,712, 1519,477, 1521,838), stdev = 2,389
[info]   CI (99.9%): [1510,277, 1528,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81568,014, 81568,015, 81568,015), stdev = 0,001
[info]   CI (99.9%): [81568,012, 81568,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,378 ±(99.9%) 1157,805 MB/sec [Average]
[info]   (min, avg, max) = (1342,782, 1479,378, 2017,234), stdev = 300,678
[info]   CI (99.9%): [321,573, 2637,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79433,499 ±(99.9%) 62693,475 B/op [Average]
[info]   (min, avg, max) = (71970,898, 79433,499, 108557,444), stdev = 16281,296
[info]   CI (99.9%): [16740,024, 142126,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,565 ±(99.9%) 4,912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,565, 3,353), stdev = 1,276
[info]   CI (99.9%): [≈ 0, 6,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,51% complete, ETA 01:37:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22761,112 ops/s
[info] # Warmup Iteration   2: 34378,977 ops/s
[info] # Warmup Iteration   3: 34787,572 ops/s
[info] # Warmup Iteration   4: 34831,386 ops/s
[info] # Warmup Iteration   5: 34837,232 ops/s
[info] Iteration   1: 35025,211 ops/s
[info]                  ·gc.alloc.rate:               1712,404 MB/sec
[info]                  ·gc.alloc.rate.norm:          76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60855,124 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 34744,352 ops/s
[info]                  ·gc.alloc.rate:                   1698,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92085,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,772 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34790,114 ops/s
[info]                  ·gc.alloc.rate:                   1700,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61364,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,883 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 34702,244 ops/s
[info]                  ·gc.alloc.rate:                   1696,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92327,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,944 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 34663,946 ops/s
[info]                  ·gc.alloc.rate:                   1694,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61693,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,945 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   34785,173 ±(99.9%) 547,558 ops/s [Average]
[info]   (min, avg, max) = (34663,946, 34785,173, 35025,211), stdev = 142,199
[info]   CI (99.9%): [34237,616, 35332,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1700,523 ±(99.9%) 27,045 MB/sec [Average]
[info]   (min, avg, max) = (1694,524, 1700,523, 1712,404), stdev = 7,023
[info]   CI (99.9%): [1673,478, 1727,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76944,012, 76944,012, 76944,013), stdev = 0,001
[info]   CI (99.9%): [76944,011, 76944,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1627,555 ±(99.9%) 1429,496 MB/sec [Average]
[info]   (min, avg, max) = (1354,343, 1627,555, 2035,728), stdev = 371,236
[info]   CI (99.9%): [198,059, 3057,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   73665,298 ±(99.9%) 65186,655 B/op [Average]
[info]   (min, avg, max) = (60855,124, 73665,298, 92327,732), stdev = 16928,767
[info]   CI (99.9%): [8478,643, 138851,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,509 ±(99.9%) 5,504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,509, 3,772), stdev = 1,429
[info]   CI (99.9%): [≈ 0, 7,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,71% complete, ETA 01:37:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373049,186 ops/s
[info] # Warmup Iteration   2: 384567,737 ops/s
[info] # Warmup Iteration   3: 385676,717 ops/s
[info] # Warmup Iteration   4: 382593,690 ops/s
[info] # Warmup Iteration   5: 384434,660 ops/s
[info] Iteration   1: 388739,179 ops/s
[info]                  ·gc.alloc.rate:                   859,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5463,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 389528,485 ops/s
[info]                  ·gc.alloc.rate:               861,324 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2723,791 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 389871,202 ops/s
[info]                  ·gc.alloc.rate:                   862,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2718,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 389348,006 ops/s
[info]                  ·gc.alloc.rate:                   860,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2722,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 389211,443 ops/s
[info]                  ·gc.alloc.rate:                   860,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5446,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   389339,663 ±(99.9%) 1605,399 ops/s [Average]
[info]   (min, avg, max) = (388739,179, 389339,663, 389871,202), stdev = 416,917
[info]   CI (99.9%): [387734,264, 390945,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   860,858 ±(99.9%) 3,651 MB/sec [Average]
[info]   (min, avg, max) = (859,514, 860,858, 862,059), stdev = 0,948
[info]   CI (99.9%): [857,207, 864,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3480,001, 3480,001, 3480,001), stdev = 0,001
[info]   CI (99.9%): [3480,001, 3480,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,416 ±(99.9%) 1422,357 MB/sec [Average]
[info]   (min, avg, max) = (673,405, 943,416, 1349,425), stdev = 369,382
[info]   CI (99.9%): [≈ 0, 2365,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3814,824 ±(99.9%) 5765,061 B/op [Average]
[info]   (min, avg, max) = (2718,469, 3814,824, 5463,553), stdev = 1497,168
[info]   CI (99.9%): [≈ 0, 9579,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,135 ±(99.9%) 0,370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,135, 0,253), stdev = 0,096
[info]   CI (99.9%): [≈ 0, 0,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26,91% complete, ETA 01:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 430440,138 ops/s
[info] # Warmup Iteration   2: 450610,140 ops/s
[info] # Warmup Iteration   3: 452143,351 ops/s
[info] # Warmup Iteration   4: 451528,575 ops/s
[info] # Warmup Iteration   5: 452091,046 ops/s
[info] Iteration   1: 452952,487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 453588,045 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 453022,950 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 451792,358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 452580,789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   452787,326 ±(99.9%) 2551,736 ops/s [Average]
[info]   (min, avg, max) = (451792,358, 452787,326, 453588,045), stdev = 662,678
[info]   CI (99.9%): [450235,590, 455339,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27,11% complete, ETA 01:36:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22491,285 ops/s
[info] # Warmup Iteration   2: 30595,747 ops/s
[info] # Warmup Iteration   3: 30677,809 ops/s
[info] # Warmup Iteration   4: 30770,951 ops/s
[info] # Warmup Iteration   5: 30781,216 ops/s
[info] Iteration   1: 30780,928 ops/s
[info]                  ·gc.alloc.rate:                   1619,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68522,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,064 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30941,187 ops/s
[info]                  ·gc.alloc.rate:               1628,157 MB/sec
[info]                  ·gc.alloc.rate.norm:          82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68201,993 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 30750,558 ops/s
[info]                  ·gc.alloc.rate:                   1618,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103091,678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,196 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30844,333 ops/s
[info]                  ·gc.alloc.rate:               1623,201 MB/sec
[info]                  ·gc.alloc.rate.norm:          82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68620,347 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 30804,395 ops/s
[info]                  ·gc.alloc.rate:                   1620,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103268,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,127 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   30824,280 ±(99.9%) 284,135 ops/s [Average]
[info]   (min, avg, max) = (30750,558, 30824,280, 30941,187), stdev = 73,789
[info]   CI (99.9%): [30540,145, 31108,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1622,021 ±(99.9%) 15,022 MB/sec [Average]
[info]   (min, avg, max) = (1618,095, 1622,021, 1628,157), stdev = 3,901
[info]   CI (99.9%): [1606,999, 1637,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82824,013, 82824,014, 82824,014), stdev = 0,001
[info]   CI (99.9%): [82824,011, 82824,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1612,134 ±(99.9%) 1425,078 MB/sec [Average]
[info]   (min, avg, max) = (1340,057, 1612,134, 2021,008), stdev = 370,088
[info]   CI (99.9%): [187,056, 3037,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82340,942 ±(99.9%) 73255,061 B/op [Average]
[info]   (min, avg, max) = (68201,993, 82340,942, 103268,333), stdev = 19024,107
[info]   CI (99.9%): [9085,881, 155596,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,277 ±(99.9%) 5,347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,277, 3,196), stdev = 1,389
[info]   CI (99.9%): [≈ 0, 6,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27,31% complete, ETA 01:36:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10360,633 ops/s
[info] # Warmup Iteration   2: 11726,344 ops/s
[info] # Warmup Iteration   3: 11700,277 ops/s
[info] # Warmup Iteration   4: 11522,134 ops/s
[info] # Warmup Iteration   5: 11640,277 ops/s
[info] Iteration   1: 11650,690 ops/s
[info]                  ·gc.alloc.rate:                   651,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91235,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 384,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11714,238 ops/s
[info]                  ·gc.alloc.rate:                   655,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90736,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,186 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 11749,513 ops/s
[info]                  ·gc.alloc.rate:               657,034 MB/sec
[info]                  ·gc.alloc.rate.norm:          88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90199,127 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 11672,863 ops/s
[info]                  ·gc.alloc.rate:                   652,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90786,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,806 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11651,428 ops/s
[info]                  ·gc.alloc.rate:               651,603 MB/sec
[info]                  ·gc.alloc.rate.norm:          88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90883,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   11687,746 ±(99.9%) 165,965 ops/s [Average]
[info]   (min, avg, max) = (11650,690, 11687,746, 11749,513), stdev = 43,100
[info]   CI (99.9%): [11521,782, 11853,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   653,628 ±(99.9%) 9,231 MB/sec [Average]
[info]   (min, avg, max) = (651,461, 653,628, 657,034), stdev = 2,397
[info]   CI (99.9%): [644,397, 662,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88016,037 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (88016,035, 88016,037, 88016,044), stdev = 0,004
[info]   CI (99.9%): [88016,022, 88016,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   674,059 ±(99.9%) 4,518 MB/sec [Average]
[info]   (min, avg, max) = (672,830, 674,059, 675,341), stdev = 1,173
[info]   CI (99.9%): [669,541, 678,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   90768,157 ±(99.9%) 1436,316 B/op [Average]
[info]   (min, avg, max) = (90199,127, 90768,157, 91235,290), stdev = 373,007
[info]   CI (99.9%): [89331,840, 92204,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,589 ±(99.9%) 4,852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,589, 2,843), stdev = 1,260
[info]   CI (99.9%): [≈ 0, 5,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   79,613 ±(99.9%) 655,613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79,613, 384,074), stdev = 170,261
[info]   CI (99.9%): [≈ 0, 735,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27,51% complete, ETA 01:36:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98079,825 ops/s
[info] # Warmup Iteration   2: 111966,851 ops/s
[info] # Warmup Iteration   3: 110935,412 ops/s
[info] # Warmup Iteration   4: 113277,798 ops/s
[info] # Warmup Iteration   5: 113265,082 ops/s
[info] Iteration   1: 112378,674 ops/s
[info]                  ·gc.alloc.rate:                   1830,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28246,858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 113193,969 ops/s
[info]                  ·gc.alloc.rate:                   1844,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28083,549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,158 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 112759,205 ops/s
[info]                  ·gc.alloc.rate:                   1837,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28238,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,872 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 112716,234 ops/s
[info]                  ·gc.alloc.rate:                   1836,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18853,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,581 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 112742,936 ops/s
[info]                  ·gc.alloc.rate:                   1836,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28305,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,872 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   112758,204 ±(99.9%) 1115,907 ops/s [Average]
[info]   (min, avg, max) = (112378,674, 112758,204, 113193,969), stdev = 289,798
[info]   CI (99.9%): [111642,296, 113874,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1836,982 ±(99.9%) 18,569 MB/sec [Average]
[info]   (min, avg, max) = (1830,527, 1836,982, 1844,116), stdev = 4,822
[info]   CI (99.9%): [1818,413, 1855,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25640,004, 25640,004, 25640,004), stdev = 0,001
[info]   CI (99.9%): [25640,003, 25640,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887,562 ±(99.9%) 1156,422 MB/sec [Average]
[info]   (min, avg, max) = (1350,384, 1887,562, 2027,497), stdev = 300,319
[info]   CI (99.9%): [731,141, 3043,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26345,606 ±(99.9%) 16130,872 B/op [Average]
[info]   (min, avg, max) = (18853,292, 26345,606, 28305,461), stdev = 4189,136
[info]   CI (99.9%): [10214,733, 42476,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,755 ±(99.9%) 1,269 B/op [Average]
[info]   (min, avg, max) = (0,292, 0,755, 1,158), stdev = 0,330
[info]   CI (99.9%): [≈ 0, 2,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27,71% complete, ETA 01:35:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141848,957 ops/s
[info] # Warmup Iteration   2: 554138,341 ops/s
[info] # Warmup Iteration   3: 555139,714 ops/s
[info] # Warmup Iteration   4: 555375,570 ops/s
[info] # Warmup Iteration   5: 554646,568 ops/s
[info] Iteration   1: 554192,198 ops/s
[info]                  ·gc.alloc.rate:                   574,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1452,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 555169,698 ops/s
[info]                  ·gc.alloc.rate:                   575,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1911,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,462 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 555619,503 ops/s
[info]                  ·gc.alloc.rate:               576,121 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1909,500 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 555156,080 ops/s
[info]                  ·gc.alloc.rate:                   575,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1907,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 555409,159 ops/s
[info]                  ·gc.alloc.rate:                   575,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1906,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   555109,328 ±(99.9%) 2106,565 ops/s [Average]
[info]   (min, avg, max) = (554192,198, 555109,328, 555619,503), stdev = 547,068
[info]   CI (99.9%): [553002,763, 557215,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   575,622 ±(99.9%) 2,158 MB/sec [Average]
[info]   (min, avg, max) = (574,663, 575,622, 576,121), stdev = 0,560
[info]   CI (99.9%): [573,464, 577,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   641,094 ±(99.9%) 278,842 MB/sec [Average]
[info]   (min, avg, max) = (511,560, 641,094, 674,179), stdev = 72,414
[info]   CI (99.9%): [362,252, 919,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1817,474 ±(99.9%) 785,034 B/op [Average]
[info]   (min, avg, max) = (1452,793, 1817,474, 1911,130), stdev = 203,871
[info]   CI (99.9%): [1032,440, 2602,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,536 ±(99.9%) 4,513 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,536, 2,632), stdev = 1,172
[info]   CI (99.9%): [≈ 0, 5,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,518 ±(99.9%) 12,794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,518, 7,462), stdev = 3,323
[info]   CI (99.9%): [≈ 0, 14,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27,91% complete, ETA 01:35:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242243,994 ops/s
[info] # Warmup Iteration   2: 332254,617 ops/s
[info] # Warmup Iteration   3: 331930,039 ops/s
[info] # Warmup Iteration   4: 331663,912 ops/s
[info] # Warmup Iteration   5: 332327,283 ops/s
[info] Iteration   1: 331681,433 ops/s
[info]                  ·gc.alloc.rate:               460,252 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2427,398 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 333470,142 ops/s
[info]                  ·gc.alloc.rate:      462,745 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 332700,597 ops/s
[info]                  ·gc.alloc.rate:                   461,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3190,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,492 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 332196,382 ops/s
[info]                  ·gc.alloc.rate:                   461,000 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3195,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 332283,902 ops/s
[info]                  ·gc.alloc.rate:               461,044 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3197,561 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   332466,491 ±(99.9%) 2572,114 ops/s [Average]
[info]   (min, avg, max) = (331681,433, 332466,491, 333470,142), stdev = 667,970
[info]   CI (99.9%): [329894,377, 335038,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   461,337 ±(99.9%) 3,579 MB/sec [Average]
[info]   (min, avg, max) = (460,252, 461,337, 462,745), stdev = 0,929
[info]   CI (99.9%): [457,758, 464,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,001, 2184,001, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,001, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507,074 ±(99.9%) 1124,870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,074, 675,007), stdev = 292,125
[info]   CI (99.9%): [≈ 0, 1631,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2402,113 ±(99.9%) 5326,541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2402,113, 3197,561), stdev = 1383,286
[info]   CI (99.9%): [≈ 0, 7728,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,118 ±(99.9%) 0,822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,118, 0,492), stdev = 0,213
[info]   CI (99.9%): [≈ 0, 0,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28,11% complete, ETA 01:35:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727616,577 ops/s
[info] # Warmup Iteration   2: 774968,840 ops/s
[info] # Warmup Iteration   3: 775236,572 ops/s
[info] # Warmup Iteration   4: 777582,625 ops/s
[info] # Warmup Iteration   5: 774872,569 ops/s
[info] Iteration   1: 775104,237 ops/s
[info]                  ·gc.alloc.rate:               504,253 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1038,775 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 771058,877 ops/s
[info]                  ·gc.alloc.rate:      501,604 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 775427,341 ops/s
[info]                  ·gc.alloc.rate:                   504,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1369,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,345 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 769908,686 ops/s
[info]                  ·gc.alloc.rate:                   500,951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1379,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 776757,016 ops/s
[info]                  ·gc.alloc.rate:               505,309 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1363,237 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   773651,232 ±(99.9%) 11493,807 ops/s [Average]
[info]   (min, avg, max) = (769908,686, 773651,232, 776757,016), stdev = 2984,905
[info]   CI (99.9%): [762157,425, 785145,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   503,317 ±(99.9%) 7,384 MB/sec [Average]
[info]   (min, avg, max) = (500,951, 503,317, 505,309), stdev = 1,918
[info]   CI (99.9%): [495,933, 510,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,000, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,755 ±(99.9%) 1124,001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,755, 674,835), stdev = 291,899
[info]   CI (99.9%): [≈ 0, 1630,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1030,199 ±(99.9%) 2285,723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1030,199, 1379,440), stdev = 593,595
[info]   CI (99.9%): [≈ 0, 3315,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,126), stdev = 1,389
[info]   CI (99.9%): [≈ 0, 5,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,303 ±(99.9%) 10,858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,303, 6,345), stdev = 2,820
[info]   CI (99.9%): [≈ 0, 12,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28,31% complete, ETA 01:35:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58290,577 ops/s
[info] # Warmup Iteration   2: 85630,391 ops/s
[info] # Warmup Iteration   3: 85587,084 ops/s
[info] # Warmup Iteration   4: 85380,674 ops/s
[info] # Warmup Iteration   5: 85684,818 ops/s
[info] Iteration   1: 85499,383 ops/s
[info]                  ·gc.alloc.rate:                   3741,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62508,220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,149 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 85504,904 ops/s
[info]                  ·gc.alloc.rate:                   3742,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75103,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,533 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 85715,196 ops/s
[info]                  ·gc.alloc.rate:                   3751,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62486,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,529 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 85309,997 ops/s
[info]                  ·gc.alloc.rate:                   3733,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75354,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,920 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 85287,034 ops/s
[info]                  ·gc.alloc.rate:                   3732,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62871,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,768 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   85463,303 ±(99.9%) 669,880 ops/s [Average]
[info]   (min, avg, max) = (85287,034, 85463,303, 85715,196), stdev = 173,966
[info]   CI (99.9%): [84793,423, 86133,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3740,285 ±(99.9%) 29,431 MB/sec [Average]
[info]   (min, avg, max) = (3732,199, 3740,285, 3751,110), stdev = 7,643
[info]   CI (99.9%): [3710,854, 3769,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68880,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68880,005, 68880,005, 68880,006), stdev = 0,001
[info]   CI (99.9%): [68880,004, 68880,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3674,119 ±(99.9%) 1436,310 MB/sec [Average]
[info]   (min, avg, max) = (3395,684, 3674,119, 4084,664), stdev = 373,005
[info]   CI (99.9%): [2237,809, 5110,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67664,645 ±(99.9%) 26598,417 B/op [Average]
[info]   (min, avg, max) = (62486,001, 67664,645, 75354,726), stdev = 6907,524
[info]   CI (99.9%): [41066,229, 94263,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,380 ±(99.9%) 1,684 B/op [Average]
[info]   (min, avg, max) = (0,768, 1,380, 1,920), stdev = 0,437
[info]   CI (99.9%): [≈ 0, 3,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28,51% complete, ETA 01:34:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198150,346 ops/s
[info] # Warmup Iteration   2: 220121,804 ops/s
[info] # Warmup Iteration   3: 220413,870 ops/s
[info] # Warmup Iteration   4: 221143,825 ops/s
[info] # Warmup Iteration   5: 218906,207 ops/s
[info] Iteration   1: 219497,410 ops/s
[info]                  ·gc.alloc.rate:                   1666,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14458,670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,299 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 222208,718 ops/s
[info]                  ·gc.alloc.rate:                   1687,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9530,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,442 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 222052,722 ops/s
[info]                  ·gc.alloc.rate:                   1686,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14324,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 220182,233 ops/s
[info]                  ·gc.alloc.rate:               1672,214 MB/sec
[info]                  ·gc.alloc.rate.norm:          11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9641,936 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 220939,628 ops/s
[info]                  ·gc.alloc.rate:                   1677,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14428,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   220976,142 ±(99.9%) 4513,859 ops/s [Average]
[info]   (min, avg, max) = (219497,410, 220976,142, 222208,718), stdev = 1172,235
[info]   CI (99.9%): [216462,283, 225490,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1678,025 ±(99.9%) 34,812 MB/sec [Average]
[info]   (min, avg, max) = (1666,421, 1678,025, 1687,544), stdev = 9,040
[info]   CI (99.9%): [1643,214, 1712,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   11952,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11952,002, 11952,002, 11952,002), stdev = 0,001
[info]   CI (99.9%): [11952,002, 11952,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1751,370 ±(99.9%) 1420,217 MB/sec [Average]
[info]   (min, avg, max) = (1345,710, 1751,370, 2025,300), stdev = 368,826
[info]   CI (99.9%): [331,154, 3171,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12476,798 ±(99.9%) 10162,924 B/op [Average]
[info]   (min, avg, max) = (9530,965, 12476,798, 14458,670), stdev = 2639,279
[info]   CI (99.9%): [2313,874, 22639,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,237 ±(99.9%) 0,648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,237, 0,442), stdev = 0,168
[info]   CI (99.9%): [≈ 0, 0,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28,71% complete, ETA 01:34:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219681,291 ops/s
[info] # Warmup Iteration   2: 271024,851 ops/s
[info] # Warmup Iteration   3: 272135,901 ops/s
[info] # Warmup Iteration   4: 272980,258 ops/s
[info] # Warmup Iteration   5: 272274,600 ops/s
[info] Iteration   1: 273836,381 ops/s
[info]                  ·gc.alloc.rate:                   1631,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7718,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 274339,268 ops/s
[info]                  ·gc.alloc.rate:                   1634,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11564,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,358 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 274240,754 ops/s
[info]                  ·gc.alloc.rate:                   1633,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7722,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,358 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 273635,882 ops/s
[info]                  ·gc.alloc.rate:                   1630,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7746,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 273337,692 ops/s
[info]                  ·gc.alloc.rate:               1628,183 MB/sec
[info]                  ·gc.alloc.rate.norm:          9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11653,700 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   273877,995 ±(99.9%) 1606,975 ops/s [Average]
[info]   (min, avg, max) = (273337,692, 273877,995, 274339,268), stdev = 417,326
[info]   CI (99.9%): [272271,020, 275484,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1631,574 ±(99.9%) 9,916 MB/sec [Average]
[info]   (min, avg, max) = (1628,183, 1631,574, 1634,521), stdev = 2,575
[info]   CI (99.9%): [1621,658, 1641,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9376,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9376,001, 9376,002, 9376,002), stdev = 0,001
[info]   CI (99.9%): [9376,001, 9376,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1615,046 ±(99.9%) 1423,127 MB/sec [Average]
[info]   (min, avg, max) = (1342,907, 1615,046, 2023,715), stdev = 369,582
[info]   CI (99.9%): [191,918, 3038,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9281,269 ±(99.9%) 8183,836 B/op [Average]
[info]   (min, avg, max) = (7718,760, 9281,269, 11653,700), stdev = 2125,316
[info]   CI (99.9%): [1097,432, 17465,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,215 ±(99.9%) 0,600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,215, 0,358), stdev = 0,156
[info]   CI (99.9%): [≈ 0, 0,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28,92% complete, ETA 01:34:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301883,695 ops/s
[info] # Warmup Iteration   2: 1103417,111 ops/s
[info] # Warmup Iteration   3: 1082055,751 ops/s
[info] # Warmup Iteration   4: 1083586,042 ops/s
[info] # Warmup Iteration   5: 1077419,918 ops/s
[info] Iteration   1: 1080617,048 ops/s
[info]                  ·gc.alloc.rate:      587,747 MB/sec
[info]                  ·gc.alloc.rate.norm: 856,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1055497,271 ops/s
[info]                  ·gc.alloc.rate:                   574,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1005,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,907 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1045646,832 ops/s
[info]                  ·gc.alloc.rate:               568,683 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1014,600 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1052633,923 ops/s
[info]                  ·gc.alloc.rate:                   572,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1005,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1054894,611 ops/s
[info]                  ·gc.alloc.rate:                   573,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1057857,937 ±(99.9%) 51255,983 ops/s [Average]
[info]   (min, avg, max) = (1045646,832, 1057857,937, 1080617,048), stdev = 13311,016
[info]   CI (99.9%): [1006601,954, 1109113,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   575,332 ±(99.9%) 27,941 MB/sec [Average]
[info]   (min, avg, max) = (568,683, 575,332, 587,747), stdev = 7,256
[info]   CI (99.9%): [547,391, 603,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,710 ±(99.9%) 1159,616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,710, 674,049), stdev = 301,149
[info]   CI (99.9%): [≈ 0, 1698,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   805,872 ±(99.9%) 1734,777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 805,872, 1014,600), stdev = 450,516
[info]   CI (99.9%): [≈ 0, 2540,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,532 ±(99.9%) 4,494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,532, 2,620), stdev = 1,167
[info]   CI (99.9%): [≈ 0, 5,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,794 ±(99.9%) 6,702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,794, 3,907), stdev = 1,740
[info]   CI (99.9%): [≈ 0, 7,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,12% complete, ETA 01:34:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679428,366 ops/s
[info] # Warmup Iteration   2: 920183,079 ops/s
[info] # Warmup Iteration   3: 919681,636 ops/s
[info] # Warmup Iteration   4: 922601,585 ops/s
[info] # Warmup Iteration   5: 921126,670 ops/s
[info] Iteration   1: 919532,428 ops/s
[info]                  ·gc.alloc.rate:               724,472 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1154,394 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 920971,447 ops/s
[info]                  ·gc.alloc.rate:                   725,612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1153,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 922570,867 ops/s
[info]                  ·gc.alloc.rate:               726,845 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1151,726 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 920788,169 ops/s
[info]                  ·gc.alloc.rate:                   725,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1155,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 921994,177 ops/s
[info]                  ·gc.alloc.rate:                   726,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1154,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   921171,417 ±(99.9%) 4518,787 ops/s [Average]
[info]   (min, avg, max) = (919532,428, 921171,417, 922570,867), stdev = 1173,515
[info]   CI (99.9%): [916652,630, 925690,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   725,756 ±(99.9%) 3,485 MB/sec [Average]
[info]   (min, avg, max) = (724,472, 725,756, 726,845), stdev = 0,905
[info]   CI (99.9%): [722,271, 729,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1240,000, 1240,000, 1240,000), stdev = 0,001
[info]   CI (99.9%): [1240,000, 1240,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,381 ±(99.9%) 2,763 MB/sec [Average]
[info]   (min, avg, max) = (674,456, 675,381, 676,154), stdev = 0,718
[info]   CI (99.9%): [672,617, 678,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1153,932 ±(99.9%) 5,499 B/op [Average]
[info]   (min, avg, max) = (1151,726, 1153,932, 1155,661), stdev = 1,428
[info]   CI (99.9%): [1148,433, 1159,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,107), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,32% complete, ETA 01:33:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1187913,606 ops/s
[info] # Warmup Iteration   2: 1248695,762 ops/s
[info] # Warmup Iteration   3: 1250087,818 ops/s
[info] # Warmup Iteration   4: 1251116,269 ops/s
[info] # Warmup Iteration   5: 1247954,840 ops/s
[info] Iteration   1: 1248062,869 ops/s
[info]                  ·gc.alloc.rate:                   678,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     850,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,932 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1250399,708 ops/s
[info]                  ·gc.alloc.rate:                   680,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,105 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1260161,529 ops/s
[info]                  ·gc.alloc.rate:               685,383 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840,242 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1252948,517 ops/s
[info]                  ·gc.alloc.rate:                   681,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1251969,329 ops/s
[info]                  ·gc.alloc.rate:                   680,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     844,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1252708,390 ±(99.9%) 17547,282 ops/s [Average]
[info]   (min, avg, max) = (1248062,869, 1252708,390, 1260161,529), stdev = 4556,973
[info]   CI (99.9%): [1235161,108, 1270255,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   681,329 ±(99.9%) 9,583 MB/sec [Average]
[info]   (min, avg, max) = (678,740, 681,329, 685,383), stdev = 2,489
[info]   CI (99.9%): [671,746, 690,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,454 ±(99.9%) 4,785 MB/sec [Average]
[info]   (min, avg, max) = (672,110, 673,454, 674,871), stdev = 1,243
[info]   CI (99.9%): [668,669, 678,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   846,118 ±(99.9%) 16,129 B/op [Average]
[info]   (min, avg, max) = (840,242, 846,118, 850,884), stdev = 4,189
[info]   CI (99.9%): [829,989, 862,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,649 ±(99.9%) 5,317 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,649, 3,118), stdev = 1,381
[info]   CI (99.9%): [≈ 0, 5,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,818 ±(99.9%) 6,706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,818, 3,932), stdev = 1,741
[info]   CI (99.9%): [≈ 0, 7,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29,52% complete, ETA 01:33:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1144478,880 ops/s
[info] # Warmup Iteration   2: 1190822,946 ops/s
[info] # Warmup Iteration   3: 1187778,162 ops/s
[info] # Warmup Iteration   4: 1188552,396 ops/s
[info] # Warmup Iteration   5: 1187548,940 ops/s
[info] Iteration   1: 1188437,728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1189543,413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1188207,252 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1183377,796 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1186891,279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1187291,494 ±(99.9%) 9173,267 ops/s [Average]
[info]   (min, avg, max) = (1183377,796, 1187291,494, 1189543,413), stdev = 2382,268
[info]   CI (99.9%): [1178118,226, 1196464,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29,72% complete, ETA 01:33:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27735,479 ops/s
[info] # Warmup Iteration   2: 37491,072 ops/s
[info] # Warmup Iteration   3: 37569,563 ops/s
[info] # Warmup Iteration   4: 37694,484 ops/s
[info] # Warmup Iteration   5: 37635,476 ops/s
[info] Iteration   1: 37687,333 ops/s
[info]                  ·gc.alloc.rate:                   1968,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84022,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,608 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37677,123 ops/s
[info]                  ·gc.alloc.rate:                   1967,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84216,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,870 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 37490,122 ops/s
[info]                  ·gc.alloc.rate:                   1957,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84769,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,622 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37679,462 ops/s
[info]                  ·gc.alloc.rate:                   1967,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84538,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,608 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37367,833 ops/s
[info]                  ·gc.alloc.rate:                   1951,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              82200,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85358,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,753 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   37580,375 ±(99.9%) 557,806 ops/s [Average]
[info]   (min, avg, max) = (37367,833, 37580,375, 37687,333), stdev = 144,860
[info]   CI (99.9%): [37022,568, 38138,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1962,577 ±(99.9%) 30,338 MB/sec [Average]
[info]   (min, avg, max) = (1951,041, 1962,577, 1968,381), stdev = 7,879
[info]   CI (99.9%): [1932,238, 1992,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82200,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82200,011, 82200,012, 82200,012), stdev = 0,001
[info]   CI (99.9%): [82200,010, 82200,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2019,389 ±(99.9%) 21,979 MB/sec [Average]
[info]   (min, avg, max) = (2012,020, 2019,389, 2026,020), stdev = 5,708
[info]   CI (99.9%): [1997,410, 2041,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84581,084 ±(99.9%) 2007,937 B/op [Average]
[info]   (min, avg, max) = (84022,385, 84581,084, 85358,996), stdev = 521,455
[info]   CI (99.9%): [82573,147, 86589,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,092 ±(99.9%) 2,996 B/op [Average]
[info]   (min, avg, max) = (0,870, 2,092, 2,622), stdev = 0,778
[info]   CI (99.9%): [≈ 0, 5,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29,92% complete, ETA 01:33:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127697,750 ops/s
[info] # Warmup Iteration   2: 136695,728 ops/s
[info] # Warmup Iteration   3: 137422,770 ops/s
[info] # Warmup Iteration   4: 137618,108 ops/s
[info] # Warmup Iteration   5: 137539,142 ops/s
[info] Iteration   1: 137611,340 ops/s
[info]                  ·gc.alloc.rate:                   1466,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15374,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 137801,093 ops/s
[info]                  ·gc.alloc.rate:                   1468,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15352,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,476 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 137738,895 ops/s
[info]                  ·gc.alloc.rate:                   1468,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15374,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,714 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 137516,257 ops/s
[info]                  ·gc.alloc.rate:                   1465,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23128,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,476 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 137462,505 ops/s
[info]                  ·gc.alloc.rate:                   1465,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15443,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   137626,018 ±(99.9%) 552,644 ops/s [Average]
[info]   (min, avg, max) = (137462,505, 137626,018, 137801,093), stdev = 143,520
[info]   CI (99.9%): [137073,374, 138178,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1466,945 ±(99.9%) 6,079 MB/sec [Average]
[info]   (min, avg, max) = (1465,042, 1466,945, 1468,954), stdev = 1,579
[info]   CI (99.9%): [1460,867, 1473,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16776,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16776,003, 16776,003, 16776,003), stdev = 0,001
[info]   CI (99.9%): [16776,002, 16776,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1480,723 ±(99.9%) 1163,023 MB/sec [Average]
[info]   (min, avg, max) = (1344,257, 1480,723, 2021,007), stdev = 302,033
[info]   CI (99.9%): [317,700, 2643,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16934,683 ±(99.9%) 13333,428 B/op [Average]
[info]   (min, avg, max) = (15352,994, 16934,683, 23128,559), stdev = 3462,649
[info]   CI (99.9%): [3601,254, 30268,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,428 ±(99.9%) 0,766 B/op [Average]
[info]   (min, avg, max) = (0,238, 0,428, 0,714), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 1,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30,12% complete, ETA 01:32:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109341,396 ops/s
[info] # Warmup Iteration   2: 139156,319 ops/s
[info] # Warmup Iteration   3: 141285,650 ops/s
[info] # Warmup Iteration   4: 141500,207 ops/s
[info] # Warmup Iteration   5: 141377,412 ops/s
[info] Iteration   1: 141550,486 ops/s
[info]                  ·gc.alloc.rate:                   1931,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22412,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,694 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 141682,711 ops/s
[info]                  ·gc.alloc.rate:                   1933,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22429,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,156 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 141545,608 ops/s
[info]                  ·gc.alloc.rate:                   1931,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14986,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 140329,807 ops/s
[info]                  ·gc.alloc.rate:                   1914,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22706,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,934 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 141269,773 ops/s
[info]                  ·gc.alloc.rate:                   1927,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22592,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,232 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   141275,677 ±(99.9%) 2116,773 ops/s [Average]
[info]   (min, avg, max) = (140329,807, 141275,677, 141682,711), stdev = 549,719
[info]   CI (99.9%): [139158,904, 143392,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1927,405 ±(99.9%) 28,749 MB/sec [Average]
[info]   (min, avg, max) = (1914,657, 1927,405, 1933,151), stdev = 7,466
[info]   CI (99.9%): [1898,656, 1956,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21472,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (21472,003, 21472,003, 21472,003), stdev = 0,001
[info]   CI (99.9%): [21472,003, 21472,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887,053 ±(99.9%) 1160,932 MB/sec [Average]
[info]   (min, avg, max) = (1347,794, 1887,053, 2027,621), stdev = 301,490
[info]   CI (99.9%): [726,121, 3047,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21025,636 ±(99.9%) 13007,350 B/op [Average]
[info]   (min, avg, max) = (14986,852, 21025,636, 22706,621), stdev = 3377,968
[info]   CI (99.9%): [8018,286, 34032,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,696 ±(99.9%) 1,412 B/op [Average]
[info]   (min, avg, max) = (0,232, 0,696, 1,156), stdev = 0,367
[info]   CI (99.9%): [≈ 0, 2,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,32% complete, ETA 01:32:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146418,926 ops/s
[info] # Warmup Iteration   2: 210240,419 ops/s
[info] # Warmup Iteration   3: 210024,691 ops/s
[info] # Warmup Iteration   4: 210269,496 ops/s
[info] # Warmup Iteration   5: 210324,986 ops/s
[info] Iteration   1: 209597,910 ops/s
[info]                  ·gc.alloc.rate:               1108,908 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5074,150 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 210665,678 ops/s
[info]                  ·gc.alloc.rate:                   1114,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10102,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,467 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 210590,336 ops/s
[info]                  ·gc.alloc.rate:                   1114,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10112,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 209886,924 ops/s
[info]                  ·gc.alloc.rate:               1110,639 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5074,681 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 209684,306 ops/s
[info]                  ·gc.alloc.rate:                   1109,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10169,137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,469 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   210085,031 ±(99.9%) 1953,607 ops/s [Average]
[info]   (min, avg, max) = (209597,910, 210085,031, 210665,678), stdev = 507,346
[info]   CI (99.9%): [208131,424, 212038,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1111,610 ±(99.9%) 10,656 MB/sec [Average]
[info]   (min, avg, max) = (1108,908, 1111,610, 1114,808), stdev = 2,767
[info]   CI (99.9%): [1100,954, 1122,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,512 ±(99.9%) 1428,225 MB/sec [Average]
[info]   (min, avg, max) = (675,644, 1082,512, 1354,655), stdev = 370,905
[info]   CI (99.9%): [≈ 0, 2510,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8106,706 ±(99.9%) 10659,371 B/op [Average]
[info]   (min, avg, max) = (5074,150, 8106,706, 10169,137), stdev = 2768,205
[info]   CI (99.9%): [≈ 0, 18766,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,218 ±(99.9%) 0,910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,218, 0,469), stdev = 0,236
[info]   CI (99.9%): [≈ 0, 1,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,52% complete, ETA 01:32:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286937,148 ops/s
[info] # Warmup Iteration   2: 301724,858 ops/s
[info] # Warmup Iteration   3: 303140,638 ops/s
[info] # Warmup Iteration   4: 301908,013 ops/s
[info] # Warmup Iteration   5: 302323,358 ops/s
[info] Iteration   1: 304113,299 ops/s
[info]                  ·gc.alloc.rate:                   791,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3493,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,431 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 299959,766 ops/s
[info]                  ·gc.alloc.rate:               780,616 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3530,241 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 304233,217 ops/s
[info]                  ·gc.alloc.rate:               791,620 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3480,676 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 303629,188 ops/s
[info]                  ·gc.alloc.rate:                   790,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6967,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 303542,699 ops/s
[info]                  ·gc.alloc.rate:               790,017 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3484,823 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   303095,634 ±(99.9%) 6847,208 ops/s [Average]
[info]   (min, avg, max) = (299959,766, 303095,634, 304233,217), stdev = 1778,198
[info]   CI (99.9%): [296248,426, 309942,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   788,761 ±(99.9%) 17,730 MB/sec [Average]
[info]   (min, avg, max) = (780,616, 788,761, 791,620), stdev = 4,605
[info]   CI (99.9%): [771,030, 806,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,378 ±(99.9%) 1155,696 MB/sec [Average]
[info]   (min, avg, max) = (672,136, 807,378, 1344,264), stdev = 300,130
[info]   CI (99.9%): [≈ 0, 1963,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4191,478 ±(99.9%) 5976,689 B/op [Average]
[info]   (min, avg, max) = (3480,676, 4191,478, 6967,787), stdev = 1552,127
[info]   CI (99.9%): [≈ 0, 10168,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,151 ±(99.9%) 0,809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,151, 0,431), stdev = 0,210
[info]   CI (99.9%): [≈ 0, 0,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30,72% complete, ETA 01:31:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46497,847 ops/s
[info] # Warmup Iteration   2: 79040,321 ops/s
[info] # Warmup Iteration   3: 79019,357 ops/s
[info] # Warmup Iteration   4: 78790,702 ops/s
[info] # Warmup Iteration   5: 79361,753 ops/s
[info] Iteration   1: 79152,881 ops/s
[info]                  ·gc.alloc.rate:                   3339,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67528,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,242 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 79111,265 ops/s
[info]                  ·gc.alloc.rate:                   3338,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67639,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,071 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 79742,605 ops/s
[info]                  ·gc.alloc.rate:                   3364,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67164,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,643 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 79017,386 ops/s
[info]                  ·gc.alloc.rate:                   3334,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67794,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,244 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 79127,442 ops/s
[info]                  ·gc.alloc.rate:                   3333,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67745,376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,242 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   79230,316 ±(99.9%) 1120,219 ops/s [Average]
[info]   (min, avg, max) = (79017,386, 79230,316, 79742,605), stdev = 290,917
[info]   CI (99.9%): [78110,097, 80350,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3342,110 ±(99.9%) 49,432 MB/sec [Average]
[info]   (min, avg, max) = (3333,604, 3342,110, 3364,561), stdev = 12,837
[info]   CI (99.9%): [3292,678, 3391,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,005, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,004, 66408,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3400,780 ±(99.9%) 11,190 MB/sec [Average]
[info]   (min, avg, max) = (3396,285, 3400,780, 3403,752), stdev = 2,906
[info]   CI (99.9%): [3389,590, 3411,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67574,542 ±(99.9%) 966,875 B/op [Average]
[info]   (min, avg, max) = (67164,499, 67574,542, 67794,718), stdev = 251,094
[info]   CI (99.9%): [66607,666, 68541,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,104), stdev = 0,019
[info]   CI (99.9%): [0,003, 0,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,488 ±(99.9%) 1,421 B/op [Average]
[info]   (min, avg, max) = (1,242, 1,488, 2,071), stdev = 0,369
[info]   CI (99.9%): [0,068, 2,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30,92% complete, ETA 01:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138282,588 ops/s
[info] # Warmup Iteration   2: 159592,127 ops/s
[info] # Warmup Iteration   3: 159874,719 ops/s
[info] # Warmup Iteration   4: 160104,321 ops/s
[info] # Warmup Iteration   5: 160269,708 ops/s
[info] Iteration   1: 160711,001 ops/s
[info]                  ·gc.alloc.rate:                   1812,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19752,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,408 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 160497,586 ops/s
[info]                  ·gc.alloc.rate:                   1810,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19797,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,408 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 161122,540 ops/s
[info]                  ·gc.alloc.rate:                   1817,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13169,011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,407 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 160422,860 ops/s
[info]                  ·gc.alloc.rate:               1809,529 MB/sec
[info]                  ·gc.alloc.rate.norm:          17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19865,211 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 160319,587 ops/s
[info]                  ·gc.alloc.rate:                   1808,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19904,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   160614,715 ±(99.9%) 1224,943 ops/s [Average]
[info]   (min, avg, max) = (160319,587, 160614,715, 161122,540), stdev = 318,114
[info]   CI (99.9%): [159389,772, 161839,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1811,534 ±(99.9%) 13,744 MB/sec [Average]
[info]   (min, avg, max) = (1808,093, 1811,534, 1817,239), stdev = 3,569
[info]   CI (99.9%): [1797,790, 1825,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17752,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17752,003, 17752,003, 17752,003), stdev = 0,001
[info]   CI (99.9%): [17752,002, 17752,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,217 ±(99.9%) 1160,636 MB/sec [Average]
[info]   (min, avg, max) = (1348,087, 1887,217, 2027,357), stdev = 301,413
[info]   CI (99.9%): [726,581, 3047,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18497,886 ±(99.9%) 11473,041 B/op [Average]
[info]   (min, avg, max) = (13169,011, 18497,886, 19904,746), stdev = 2979,512
[info]   CI (99.9%): [7024,845, 29970,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,285 ±(99.9%) 0,702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,285, 0,408), stdev = 0,182
[info]   CI (99.9%): [≈ 0, 0,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31,12% complete, ETA 01:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160793,530 ops/s
[info] # Warmup Iteration   2: 194003,349 ops/s
[info] # Warmup Iteration   3: 191106,725 ops/s
[info] # Warmup Iteration   4: 190556,443 ops/s
[info] # Warmup Iteration   5: 190116,240 ops/s
[info] Iteration   1: 189981,296 ops/s
[info]                  ·gc.alloc.rate:                   660,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5589,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28,295 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 190936,133 ops/s
[info]                  ·gc.alloc.rate:                   663,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5562,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,172 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 190947,412 ops/s
[info]                  ·gc.alloc.rate:               663,818 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5539,568 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 190454,845 ops/s
[info]                  ·gc.alloc.rate:                   662,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5553,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,172 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 189980,398 ops/s
[info]                  ·gc.alloc.rate:                   660,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5562,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,345 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   190460,017 ±(99.9%) 1850,189 ops/s [Average]
[info]   (min, avg, max) = (189980,398, 190460,017, 190947,412), stdev = 480,488
[info]   CI (99.9%): [188609,828, 192310,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   662,200 ±(99.9%) 6,378 MB/sec [Average]
[info]   (min, avg, max) = (660,514, 662,200, 663,881), stdev = 1,656
[info]   CI (99.9%): [655,823, 668,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,039 ±(99.9%) 6,240 MB/sec [Average]
[info]   (min, avg, max) = (671,454, 673,039, 674,841), stdev = 1,621
[info]   CI (99.9%): [666,798, 679,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5561,589 ±(99.9%) 70,577 B/op [Average]
[info]   (min, avg, max) = (5539,568, 5561,589, 5589,860), stdev = 18,329
[info]   CI (99.9%): [5491,012, 5632,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,700 ±(99.9%) 5,846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,700, 3,415), stdev = 1,518
[info]   CI (99.9%): [≈ 0, 6,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,797 ±(99.9%) 48,431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,797, 28,295), stdev = 12,577
[info]   CI (99.9%): [≈ 0, 54,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,33% complete, ETA 01:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398510,629 ops/s
[info] # Warmup Iteration   2: 559934,977 ops/s
[info] # Warmup Iteration   3: 561693,486 ops/s
[info] # Warmup Iteration   4: 557187,582 ops/s
[info] # Warmup Iteration   5: 557407,701 ops/s
[info] Iteration   1: 506633,402 ops/s
[info]                  ·gc.alloc.rate:                   512,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2095,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,517 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 556604,013 ops/s
[info]                  ·gc.alloc.rate:      562,992 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 556704,880 ops/s
[info]                  ·gc.alloc.rate:                   563,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1906,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 555521,714 ops/s
[info]                  ·gc.alloc.rate:                   561,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1912,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 555515,456 ops/s
[info]                  ·gc.alloc.rate:               561,813 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1912,571 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   546195,893 ±(99.9%) 85189,430 ops/s [Average]
[info]   (min, avg, max) = (506633,402, 546195,893, 556704,880), stdev = 22123,424
[info]   CI (99.9%): [461006,463, 631385,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   552,449 ±(99.9%) 86,131 MB/sec [Average]
[info]   (min, avg, max) = (512,450, 552,449, 563,057), stdev = 22,368
[info]   CI (99.9%): [466,318, 638,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,748 ±(99.9%) 1161,848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,748, 675,081), stdev = 301,728
[info]   CI (99.9%): [≈ 0, 1701,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1565,364 ±(99.9%) 3383,590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1565,364, 2095,075), stdev = 878,708
[info]   CI (99.9%): [≈ 0, 4948,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,167), stdev = 0,070
[info]   CI (99.9%): [≈ 0, 0,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,139 ±(99.9%) 0,836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,139, 0,517), stdev = 0,217
[info]   CI (99.9%): [≈ 0, 0,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,53% complete, ETA 01:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569860,400 ops/s
[info] # Warmup Iteration   2: 584031,963 ops/s
[info] # Warmup Iteration   3: 584893,914 ops/s
[info] # Warmup Iteration   4: 591726,840 ops/s
[info] # Warmup Iteration   5: 592184,815 ops/s
[info] Iteration   1: 590957,672 ops/s
[info]                  ·gc.alloc.rate:                   453,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1362,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 590929,446 ops/s
[info]                  ·gc.alloc.rate:                   453,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1362,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 594014,326 ops/s
[info]                  ·gc.alloc.rate:      455,943 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 581598,028 ops/s
[info]                  ·gc.alloc.rate:                   446,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1826,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,382 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 593399,717 ops/s
[info]                  ·gc.alloc.rate:                   455,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1789,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   590179,838 ±(99.9%) 19242,177 ops/s [Average]
[info]   (min, avg, max) = (581598,028, 590179,838, 594014,326), stdev = 4997,132
[info]   CI (99.9%): [570937,661, 609422,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   452,951 ±(99.9%) 14,692 MB/sec [Average]
[info]   (min, avg, max) = (446,414, 452,951, 455,943), stdev = 3,816
[info]   CI (99.9%): [438,259, 467,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,501 ±(99.9%) 1068,651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,501, 674,795), stdev = 277,525
[info]   CI (99.9%): [≈ 0, 1543,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1268,151 ±(99.9%) 2861,712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1268,151, 1826,002), stdev = 743,178
[info]   CI (99.9%): [≈ 0, 4129,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,098), stdev = 1,373
[info]   CI (99.9%): [≈ 0, 5,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,736 ±(99.9%) 14,309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,736, 8,382), stdev = 3,716
[info]   CI (99.9%): [≈ 0, 16,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31,73% complete, ETA 01:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 594508,796 ops/s
[info] # Warmup Iteration   2: 623041,474 ops/s
[info] # Warmup Iteration   3: 624197,696 ops/s
[info] # Warmup Iteration   4: 623078,106 ops/s
[info] # Warmup Iteration   5: 621643,425 ops/s
[info] Iteration   1: 624378,536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 625820,213 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 625162,660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 623486,641 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 623102,182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   624390,046 ±(99.9%) 4355,304 ops/s [Average]
[info]   (min, avg, max) = (623102,182, 624390,046, 625820,213), stdev = 1131,059
[info]   CI (99.9%): [620034,742, 628745,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31,93% complete, ETA 01:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223215,012 ops/s
[info] # Warmup Iteration   2: 335005,393 ops/s
[info] # Warmup Iteration   3: 334358,703 ops/s
[info] # Warmup Iteration   4: 331818,785 ops/s
[info] # Warmup Iteration   5: 335564,929 ops/s
[info] Iteration   1: 335149,943 ops/s
[info]                  ·gc.alloc.rate:                   923,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6340,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 334909,580 ops/s
[info]                  ·gc.alloc.rate:               922,518 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3175,814 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 333266,067 ops/s
[info]                  ·gc.alloc.rate:               918,206 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3191,564 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 332865,377 ops/s
[info]                  ·gc.alloc.rate:                   917,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6393,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 333608,276 ops/s
[info]                  ·gc.alloc.rate:                   918,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3192,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   333959,849 ±(99.9%) 3908,508 ops/s [Average]
[info]   (min, avg, max) = (332865,377, 333959,849, 335149,943), stdev = 1015,027
[info]   CI (99.9%): [330051,341, 337868,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   920,023 ±(99.9%) 10,536 MB/sec [Average]
[info]   (min, avg, max) = (917,093, 920,023, 923,305), stdev = 2,736
[info]   CI (99.9%): [909,488, 930,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,001), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   946,104 ±(99.9%) 1423,838 MB/sec [Average]
[info]   (min, avg, max) = (675,679, 946,104, 1352,224), stdev = 369,766
[info]   CI (99.9%): [≈ 0, 2369,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4458,719 ±(99.9%) 6707,595 B/op [Average]
[info]   (min, avg, max) = (3175,814, 4458,719, 6393,295), stdev = 1741,941
[info]   CI (99.9%): [≈ 0, 11166,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,137 ±(99.9%) 0,630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,137, 0,391), stdev = 0,164
[info]   CI (99.9%): [≈ 0, 0,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32,13% complete, ETA 01:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39271,261 ops/s
[info] # Warmup Iteration   2: 41785,136 ops/s
[info] # Warmup Iteration   3: 41248,264 ops/s
[info] # Warmup Iteration   4: 41830,300 ops/s
[info] # Warmup Iteration   5: 41566,027 ops/s
[info] Iteration   1: 41276,098 ops/s
[info]                  ·gc.alloc.rate:               191,337 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19505,556 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 41705,923 ops/s
[info]                  ·gc.alloc.rate:      193,335 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41640,923 ops/s
[info]                  ·gc.alloc.rate:               193,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19334,623 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 41880,553 ops/s
[info]                  ·gc.alloc.rate:      194,146 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41810,185 ops/s
[info]                  ·gc.alloc.rate:      193,779 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   41662,736 ±(99.9%) 905,137 ops/s [Average]
[info]   (min, avg, max) = (41276,098, 41662,736, 41880,553), stdev = 235,061
[info]   CI (99.9%): [40757,599, 42567,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   193,123 ±(99.9%) 4,184 MB/sec [Average]
[info]   (min, avg, max) = (191,337, 193,123, 194,146), stdev = 1,087
[info]   CI (99.9%): [188,939, 197,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (7296,010, 7296,010, 7296,011), stdev = 0,001
[info]   CI (99.9%): [7296,009, 7296,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,608 ±(99.9%) 1078,836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,608, 511,530), stdev = 280,170
[info]   CI (99.9%): [≈ 0, 1283,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7768,036 ±(99.9%) 40959,271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7768,036, 19505,556), stdev = 10636,993
[info]   CI (99.9%): [≈ 0, 48727,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32,33% complete, ETA 01:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9530,105 ops/s
[info] # Warmup Iteration   2: 12429,922 ops/s
[info] # Warmup Iteration   3: 12444,342 ops/s
[info] # Warmup Iteration   4: 12451,822 ops/s
[info] # Warmup Iteration   5: 12463,295 ops/s
[info] Iteration   1: 12419,244 ops/s
[info]                  ·gc.alloc.rate:                   1588,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255328,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,638 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12432,597 ops/s
[info]                  ·gc.alloc.rate:               1589,896 MB/sec
[info]                  ·gc.alloc.rate.norm:          201280,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170195,453 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 12482,227 ops/s
[info]                  ·gc.alloc.rate:                   1596,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169639,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,498 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12487,063 ops/s
[info]                  ·gc.alloc.rate:                   1597,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254651,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,623 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12483,483 ops/s
[info]                  ·gc.alloc.rate:               1596,362 MB/sec
[info]                  ·gc.alloc.rate.norm:          201280,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170046,160 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12460,923 ±(99.9%) 124,561 ops/s [Average]
[info]   (min, avg, max) = (12419,244, 12460,923, 12487,063), stdev = 32,348
[info]   CI (99.9%): [12336,362, 12585,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1593,560 ±(99.9%) 15,890 MB/sec [Average]
[info]   (min, avg, max) = (1588,292, 1593,560, 1597,002), stdev = 4,127
[info]   CI (99.9%): [1577,670, 1609,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280,041 ±(99.9%) 0,046 B/op [Average]
[info]   (min, avg, max) = (201280,033, 201280,041, 201280,061), stdev = 0,012
[info]   CI (99.9%): [201279,994, 201280,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1614,717 ±(99.9%) 1416,313 MB/sec [Average]
[info]   (min, avg, max) = (1344,361, 1614,717, 2020,466), stdev = 367,812
[info]   CI (99.9%): [198,403, 3031,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   203972,296 ±(99.9%) 179338,469 B/op [Average]
[info]   (min, avg, max) = (169639,878, 203972,296, 255328,214), stdev = 46573,631
[info]   CI (99.9%): [24633,826, 383310,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,152 ±(99.9%) 16,604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,152, 10,498), stdev = 4,312
[info]   CI (99.9%): [≈ 0, 19,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,53% complete, ETA 01:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8170,236 ops/s
[info] # Warmup Iteration   2: 12858,776 ops/s
[info] # Warmup Iteration   3: 12925,205 ops/s
[info] # Warmup Iteration   4: 12855,027 ops/s
[info] # Warmup Iteration   5: 12881,677 ops/s
[info] Iteration   1: 12846,956 ops/s
[info]                  ·gc.alloc.rate:                   1522,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              186531,865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248660,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12918,682 ops/s
[info]                  ·gc.alloc.rate:                   1531,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              186536,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165024,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,536 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12914,181 ops/s
[info]                  ·gc.alloc.rate:               1530,526 MB/sec
[info]                  ·gc.alloc.rate.norm:          186536,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165184,406 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 12860,103 ops/s
[info]                  ·gc.alloc.rate:                   1524,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              186534,795 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166000,080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,547 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12906,220 ops/s
[info]                  ·gc.alloc.rate:               1529,233 MB/sec
[info]                  ·gc.alloc.rate.norm:          186504,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2035,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 248255,038 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12889,228 ±(99.9%) 127,915 ops/s [Average]
[info]   (min, avg, max) = (12846,956, 12889,228, 12918,682), stdev = 33,219
[info]   CI (99.9%): [12761,313, 13017,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1527,548 ±(99.9%) 14,915 MB/sec [Average]
[info]   (min, avg, max) = (1522,653, 1527,548, 1531,152), stdev = 3,873
[info]   CI (99.9%): [1512,633, 1542,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186528,552 ±(99.9%) 53,183 B/op [Average]
[info]   (min, avg, max) = (186504,034, 186528,552, 186536,034), stdev = 13,811
[info]   CI (99.9%): [186475,370, 186581,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1626,333 ±(99.9%) 1428,398 MB/sec [Average]
[info]   (min, avg, max) = (1354,576, 1626,333, 2035,558), stdev = 370,950
[info]   CI (99.9%): [197,935, 3054,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   198624,858 ±(99.9%) 175176,268 B/op [Average]
[info]   (min, avg, max) = (165024,324, 198624,858, 248660,444), stdev = 45492,720
[info]   CI (99.9%): [23448,591, 373801,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,037 ±(99.9%) 8,211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,037, 5,100), stdev = 2,132
[info]   CI (99.9%): [≈ 0, 10,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,73% complete, ETA 01:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203302,005 ops/s
[info] # Warmup Iteration   2: 222347,502 ops/s
[info] # Warmup Iteration   3: 224548,668 ops/s
[info] # Warmup Iteration   4: 224239,285 ops/s
[info] # Warmup Iteration   5: 224579,867 ops/s
[info] Iteration   1: 224075,949 ops/s
[info]                  ·gc.alloc.rate:                   1457,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9459,865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 225239,178 ops/s
[info]                  ·gc.alloc.rate:                   1465,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9411,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 225425,838 ops/s
[info]                  ·gc.alloc.rate:                   1466,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9408,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,581 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 224922,300 ops/s
[info]                  ·gc.alloc.rate:                   1463,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9438,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 224606,750 ops/s
[info]                  ·gc.alloc.rate:                   1461,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14196,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   224854,003 ±(99.9%) 2061,553 ops/s [Average]
[info]   (min, avg, max) = (224075,949, 224854,003, 225425,838), stdev = 535,379
[info]   CI (99.9%): [222792,450, 226915,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1462,943 ±(99.9%) 13,449 MB/sec [Average]
[info]   (min, avg, max) = (1457,746, 1462,943, 1466,510), stdev = 3,493
[info]   CI (99.9%): [1449,494, 1476,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10240,002, 10240,002, 10240,002), stdev = 0,001
[info]   CI (99.9%): [10240,002, 10240,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1483,195 ±(99.9%) 1168,705 MB/sec [Average]
[info]   (min, avg, max) = (1346,688, 1483,195, 2026,127), stdev = 303,509
[info]   CI (99.9%): [314,490, 2651,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10382,768 ±(99.9%) 8209,754 B/op [Average]
[info]   (min, avg, max) = (9408,002, 10382,768, 14196,501), stdev = 2132,047
[info]   CI (99.9%): [2173,015, 18592,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,320 ±(99.9%) 0,612 B/op [Average]
[info]   (min, avg, max) = (0,146, 0,320, 0,581), stdev = 0,159
[info]   CI (99.9%): [≈ 0, 0,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32,93% complete, ETA 01:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5904,984 ops/s
[info] # Warmup Iteration   2: 9279,752 ops/s
[info] # Warmup Iteration   3: 9423,336 ops/s
[info] # Warmup Iteration   4: 9356,154 ops/s
[info] # Warmup Iteration   5: 9326,567 ops/s
[info] Iteration   1: 9357,269 ops/s
[info]                  ·gc.alloc.rate:                   1742,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              293056,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227751,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,503 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9351,373 ops/s
[info]                  ·gc.alloc.rate:                   1741,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              293058,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342238,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,516 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9388,893 ops/s
[info]                  ·gc.alloc.rate:               1748,174 MB/sec
[info]                  ·gc.alloc.rate.norm:          293056,653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 227446,418 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 9346,912 ops/s
[info]                  ·gc.alloc.rate:                   1740,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              293056,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     342946,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,018 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9353,949 ops/s
[info]                  ·gc.alloc.rate:                   1741,441 MB/sec
[info]                  ·gc.alloc.rate.norm:              293056,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228609,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9359,679 ±(99.9%) 64,551 ops/s [Average]
[info]   (min, avg, max) = (9346,912, 9359,679, 9388,893), stdev = 16,764
[info]   CI (99.9%): [9295,128, 9424,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1742,742 ±(99.9%) 11,933 MB/sec [Average]
[info]   (min, avg, max) = (1740,517, 1742,742, 1748,174), stdev = 3,099
[info]   CI (99.9%): [1730,809, 1754,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293056,568 ±(99.9%) 3,359 B/op [Average]
[info]   (min, avg, max) = (293056,044, 293056,568, 293058,055), stdev = 0,872
[info]   CI (99.9%): [293053,209, 293059,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1627,929 ±(99.9%) 1431,575 MB/sec [Average]
[info]   (min, avg, max) = (1354,016, 1627,929, 2036,824), stdev = 371,776
[info]   CI (99.9%): [196,354, 3059,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   273798,401 ±(99.9%) 241828,292 B/op [Average]
[info]   (min, avg, max) = (227446,418, 273798,401, 342946,033), stdev = 62802,039
[info]   CI (99.9%): [31970,109, 515626,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9,808 ±(99.9%) 25,951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,808, 17,516), stdev = 6,739
[info]   CI (99.9%): [≈ 0, 35,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33,13% complete, ETA 01:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9736,578 ops/s
[info] # Warmup Iteration   2: 12269,554 ops/s
[info] # Warmup Iteration   3: 12268,542 ops/s
[info] # Warmup Iteration   4: 12244,648 ops/s
[info] # Warmup Iteration   5: 12220,337 ops/s
[info] Iteration   1: 12170,206 ops/s
[info]                  ·gc.alloc.rate:                   1437,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              185962,734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261024,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,076 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12257,937 ops/s
[info]                  ·gc.alloc.rate:                   1448,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172852,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,691 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12245,215 ops/s
[info]                  ·gc.alloc.rate:                   1446,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173093,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,350 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12097,805 ops/s
[info]                  ·gc.alloc.rate:                   1429,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175383,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,708 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12110,681 ops/s
[info]                  ·gc.alloc.rate:               1430,645 MB/sec
[info]                  ·gc.alloc.rate.norm:          185948,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175368,580 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   12176,369 ±(99.9%) 285,040 ops/s [Average]
[info]   (min, avg, max) = (12097,805, 12176,369, 12257,937), stdev = 74,024
[info]   CI (99.9%): [11891,329, 12461,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1438,712 ±(99.9%) 34,061 MB/sec [Average]
[info]   (min, avg, max) = (1429,577, 1438,712, 1448,543), stdev = 8,846
[info]   CI (99.9%): [1404,650, 1472,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   185962,984 ±(99.9%) 33,293 B/op [Average]
[info]   (min, avg, max) = (185948,073, 185962,984, 185968,042), stdev = 8,646
[info]   CI (99.9%): [185929,691, 185996,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1481,770 ±(99.9%) 1154,870 MB/sec [Average]
[info]   (min, avg, max) = (1346,384, 1481,770, 2018,273), stdev = 299,916
[info]   CI (99.9%): [326,901, 2636,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   191544,450 ±(99.9%) 149632,086 B/op [Average]
[info]   (min, avg, max) = (172852,536, 191544,450, 261024,095), stdev = 38858,978
[info]   CI (99.9%): [41912,364, 341176,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,365 ±(99.9%) 16,287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,365, 10,691), stdev = 4,230
[info]   CI (99.9%): [≈ 0, 21,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33,33% complete, ETA 01:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20601,422 ops/s
[info] # Warmup Iteration   2: 26385,697 ops/s
[info] # Warmup Iteration   3: 26312,731 ops/s
[info] # Warmup Iteration   4: 26586,055 ops/s
[info] # Warmup Iteration   5: 26066,308 ops/s
[info] Iteration   1: 26573,646 ops/s
[info]                  ·gc.alloc.rate:                   1115,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79570,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,233 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26579,237 ops/s
[info]                  ·gc.alloc.rate:               1115,940 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39759,427 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 26679,121 ops/s
[info]                  ·gc.alloc.rate:                   1120,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79214,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 26602,908 ops/s
[info]                  ·gc.alloc.rate:                   1117,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79441,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,231 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26675,872 ops/s
[info]                  ·gc.alloc.rate:               1119,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39652,694 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26622,157 ±(99.9%) 199,121 ops/s [Average]
[info]   (min, avg, max) = (26573,646, 26622,157, 26679,121), stdev = 51,711
[info]   CI (99.9%): [26423,036, 26821,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1117,751 ±(99.9%) 8,193 MB/sec [Average]
[info]   (min, avg, max) = (1115,724, 1117,751, 1120,148), stdev = 2,128
[info]   CI (99.9%): [1109,558, 1125,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66080,015, 66080,016, 66080,017), stdev = 0,001
[info]   CI (99.9%): [66080,013, 66080,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,537 ±(99.9%) 1415,944 MB/sec [Average]
[info]   (min, avg, max) = (671,446, 1074,537, 1343,499), stdev = 367,716
[info]   CI (99.9%): [≈ 0, 2490,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63527,693 ±(99.9%) 83737,953 B/op [Average]
[info]   (min, avg, max) = (39652,694, 63527,693, 79570,271), stdev = 21746,480
[info]   CI (99.9%): [≈ 0, 147265,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,984 ±(99.9%) 3,958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,984, 2,456), stdev = 1,028
[info]   CI (99.9%): [≈ 0, 4,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,53% complete, ETA 01:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22186,965 ops/s
[info] # Warmup Iteration   2: 31040,973 ops/s
[info] # Warmup Iteration   3: 30981,388 ops/s
[info] # Warmup Iteration   4: 30956,869 ops/s
[info] # Warmup Iteration   5: 30950,658 ops/s
[info] Iteration   1: 31005,773 ops/s
[info]                  ·gc.alloc.rate:                   1192,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68633,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,170 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30901,359 ops/s
[info]                  ·gc.alloc.rate:                   1188,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68900,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31085,127 ops/s
[info]                  ·gc.alloc.rate:               1195,826 MB/sec
[info]                  ·gc.alloc.rate.norm:          60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34280,304 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 30987,504 ops/s
[info]                  ·gc.alloc.rate:                   1192,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68789,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30946,910 ops/s
[info]                  ·gc.alloc.rate:                   1190,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68936,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   30985,335 ±(99.9%) 264,754 ops/s [Average]
[info]   (min, avg, max) = (30901,359, 30985,335, 31085,127), stdev = 68,756
[info]   CI (99.9%): [30720,581, 31250,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1192,022 ±(99.9%) 10,185 MB/sec [Average]
[info]   (min, avg, max) = (1188,791, 1192,022, 1195,826), stdev = 2,645
[info]   CI (99.9%): [1181,838, 1202,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (60552,013, 60552,013, 60552,014), stdev = 0,001
[info]   CI (99.9%): [60552,012, 60552,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,285 ±(99.9%) 1165,182 MB/sec [Average]
[info]   (min, avg, max) = (676,993, 1218,285, 1355,321), stdev = 302,594
[info]   CI (99.9%): [53,103, 2383,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61908,223 ±(99.9%) 59472,909 B/op [Average]
[info]   (min, avg, max) = (34280,304, 61908,223, 68936,233), stdev = 15444,926
[info]   CI (99.9%): [2435,314, 121381,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,116 ±(99.9%) 4,984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,116, 3,171), stdev = 1,294
[info]   CI (99.9%): [≈ 0, 7,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,73% complete, ETA 01:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 743351,288 ops/s
[info] # Warmup Iteration   2: 791112,129 ops/s
[info] # Warmup Iteration   3: 792207,474 ops/s
[info] # Warmup Iteration   4: 788179,467 ops/s
[info] # Warmup Iteration   5: 796587,481 ops/s
[info] Iteration   1: 795048,225 ops/s
[info]                  ·gc.alloc.rate:                   1434,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2666,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 796874,324 ops/s
[info]                  ·gc.alloc.rate:                   1438,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2660,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 796776,758 ops/s
[info]                  ·gc.alloc.rate:                   1437,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2661,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 797530,979 ops/s
[info]                  ·gc.alloc.rate:                   1439,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2660,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 792841,626 ops/s
[info]                  ·gc.alloc.rate:                   1430,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2678,892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   795814,382 ±(99.9%) 7311,314 ops/s [Average]
[info]   (min, avg, max) = (792841,626, 795814,382, 797530,979), stdev = 1898,725
[info]   CI (99.9%): [788503,069, 803125,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1435,987 ±(99.9%) 13,623 MB/sec [Average]
[info]   (min, avg, max) = (1430,459, 1435,987, 1439,186), stdev = 3,538
[info]   CI (99.9%): [1422,364, 1449,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2840,001, 2840,001, 2840,001), stdev = 0,001
[info]   CI (99.9%): [2840,000, 2840,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,747 ±(99.9%) 3,992 MB/sec [Average]
[info]   (min, avg, max) = (1346,725, 1347,747, 1349,311), stdev = 1,037
[info]   CI (99.9%): [1343,755, 1351,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2665,499 ±(99.9%) 30,242 B/op [Average]
[info]   (min, avg, max) = (2660,255, 2665,499, 2678,892), stdev = 7,854
[info]   CI (99.9%): [2635,257, 2695,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,099 ±(99.9%) 0,142 B/op [Average]
[info]   (min, avg, max) = (0,041, 0,099, 0,124), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33,94% complete, ETA 01:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 864462,328 ops/s
[info] # Warmup Iteration   2: 924358,312 ops/s
[info] # Warmup Iteration   3: 916866,557 ops/s
[info] # Warmup Iteration   4: 915254,922 ops/s
[info] # Warmup Iteration   5: 916033,700 ops/s
[info] Iteration   1: 918526,299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 919867,446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 918375,619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 915950,317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 918238,704 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   918191,677 ±(99.9%) 5438,793 ops/s [Average]
[info]   (min, avg, max) = (915950,317, 918191,677, 919867,446), stdev = 1412,437
[info]   CI (99.9%): [912752,883, 923630,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34,14% complete, ETA 01:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22064,139 ops/s
[info] # Warmup Iteration   2: 27360,589 ops/s
[info] # Warmup Iteration   3: 28059,149 ops/s
[info] # Warmup Iteration   4: 28110,058 ops/s
[info] # Warmup Iteration   5: 28155,805 ops/s
[info] Iteration   1: 28263,870 ops/s
[info]                  ·gc.alloc.rate:                   1192,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37312,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,159 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 28245,182 ops/s
[info]                  ·gc.alloc.rate:               1191,968 MB/sec
[info]                  ·gc.alloc.rate.norm:          66416,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74678,238 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 28222,632 ops/s
[info]                  ·gc.alloc.rate:               1190,958 MB/sec
[info]                  ·gc.alloc.rate.norm:          66416,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74752,363 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 28124,676 ops/s
[info]                  ·gc.alloc.rate:                   1186,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75050,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 28208,332 ops/s
[info]                  ·gc.alloc.rate:                   1190,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37422,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,484 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   28212,938 ±(99.9%) 206,819 ops/s [Average]
[info]   (min, avg, max) = (28124,676, 28212,938, 28263,870), stdev = 53,710
[info]   CI (99.9%): [28006,119, 28419,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1190,540 ±(99.9%) 8,668 MB/sec [Average]
[info]   (min, avg, max) = (1186,867, 1190,540, 1192,657), stdev = 2,251
[info]   CI (99.9%): [1181,871, 1199,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66416,014, 66416,015, 66416,016), stdev = 0,001
[info]   CI (99.9%): [66416,013, 66416,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,509 ±(99.9%) 1413,660 MB/sec [Average]
[info]   (min, avg, max) = (670,038, 1072,509, 1341,159), stdev = 367,123
[info]   CI (99.9%): [≈ 0, 2486,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59843,189 ±(99.9%) 79006,641 B/op [Average]
[info]   (min, avg, max) = (37312,704, 59843,189, 75050,042), stdev = 20517,774
[info]   CI (99.9%): [≈ 0, 138849,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,162 ±(99.9%) 5,477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,162, 3,484), stdev = 1,422
[info]   CI (99.9%): [≈ 0, 6,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34,34% complete, ETA 01:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14591,136 ops/s
[info] # Warmup Iteration   2: 16104,664 ops/s
[info] # Warmup Iteration   3: 16107,457 ops/s
[info] # Warmup Iteration   4: 16099,451 ops/s
[info] # Warmup Iteration   5: 16110,222 ops/s
[info] Iteration   1: 16118,998 ops/s
[info]                  ·gc.alloc.rate:                   585,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              57168,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49947,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,377 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 16147,750 ops/s
[info]                  ·gc.alloc.rate:                   586,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              57168,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65832,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 273,766 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 16184,980 ops/s
[info]                  ·gc.alloc.rate:                   587,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              57168,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65677,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,072 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 16167,926 ops/s
[info]                  ·gc.alloc.rate:               587,283 MB/sec
[info]                  ·gc.alloc.rate.norm:          57168,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65552,210 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 16147,110 ops/s
[info]                  ·gc.alloc.rate:               586,424 MB/sec
[info]                  ·gc.alloc.rate.norm:          57168,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65637,443 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   16153,353 ±(99.9%) 95,556 ops/s [Average]
[info]   (min, avg, max) = (16118,998, 16153,353, 16184,980), stdev = 24,816
[info]   CI (99.9%): [16057,797, 16248,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   586,704 ±(99.9%) 3,560 MB/sec [Average]
[info]   (min, avg, max) = (585,405, 586,704, 587,843), stdev = 0,924
[info]   CI (99.9%): [583,144, 590,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   57168,028 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (57168,025, 57168,028, 57168,032), stdev = 0,002
[info]   CI (99.9%): [57168,019, 57168,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   641,798 ±(99.9%) 280,573 MB/sec [Average]
[info]   (min, avg, max) = (511,468, 641,798, 675,462), stdev = 72,864
[info]   CI (99.9%): [361,224, 922,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   62529,445 ±(99.9%) 27086,029 B/op [Average]
[info]   (min, avg, max) = (49947,675, 62529,445, 65832,212), stdev = 7034,156
[info]   CI (99.9%): [35443,417, 89615,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,579 ±(99.9%) 4,801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,579, 2,809), stdev = 1,247
[info]   CI (99.9%): [≈ 0, 5,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   56,443 ±(99.9%) 467,901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56,443, 273,766), stdev = 121,513
[info]   CI (99.9%): [≈ 0, 524,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34,54% complete, ETA 01:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24095,198 ops/s
[info] # Warmup Iteration   2: 31306,179 ops/s
[info] # Warmup Iteration   3: 31193,064 ops/s
[info] # Warmup Iteration   4: 31654,436 ops/s
[info] # Warmup Iteration   5: 31842,919 ops/s
[info] Iteration   1: 31861,354 ops/s
[info]                  ·gc.alloc.rate:               1729,125 MB/sec
[info]                  ·gc.alloc.rate.norm:          85416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99605,835 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 31853,824 ops/s
[info]                  ·gc.alloc.rate:                   1728,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66451,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,114 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31846,667 ops/s
[info]                  ·gc.alloc.rate:                   1728,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99833,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,144 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 31845,563 ops/s
[info]                  ·gc.alloc.rate:                   1728,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66647,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,029 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 31424,199 ops/s
[info]                  ·gc.alloc.rate:                   1705,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101451,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,128 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   31766,321 ±(99.9%) 736,849 ops/s [Average]
[info]   (min, avg, max) = (31424,199, 31766,321, 31861,354), stdev = 191,357
[info]   CI (99.9%): [31029,472, 32503,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1723,948 ±(99.9%) 40,358 MB/sec [Average]
[info]   (min, avg, max) = (1705,207, 1723,948, 1729,125), stdev = 10,481
[info]   CI (99.9%): [1683,590, 1764,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85416,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (85416,013, 85416,014, 85416,014), stdev = 0,001
[info]   CI (99.9%): [85416,012, 85416,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,060 ±(99.9%) 1421,493 MB/sec [Average]
[info]   (min, avg, max) = (1344,824, 1751,060, 2025,331), stdev = 369,157
[info]   CI (99.9%): [329,567, 3172,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   86797,904 ±(99.9%) 71230,163 B/op [Average]
[info]   (min, avg, max) = (66451,393, 86797,904, 101451,421), stdev = 18498,247
[info]   CI (99.9%): [15567,740, 158028,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,683 ±(99.9%) 8,222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,683, 5,144), stdev = 2,135
[info]   CI (99.9%): [≈ 0, 10,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,74% complete, ETA 01:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23732,905 ops/s
[info] # Warmup Iteration   2: 35554,738 ops/s
[info] # Warmup Iteration   3: 36074,734 ops/s
[info] # Warmup Iteration   4: 35939,673 ops/s
[info] # Warmup Iteration   5: 36068,400 ops/s
[info] Iteration   1: 36104,028 ops/s
[info]                  ·gc.alloc.rate:                   1648,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88528,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,907 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 36085,757 ops/s
[info]                  ·gc.alloc.rate:                   1647,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59095,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,816 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 36228,329 ops/s
[info]                  ·gc.alloc.rate:                   1653,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58919,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,809 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 36149,045 ops/s
[info]                  ·gc.alloc.rate:                   1650,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88628,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,906 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 36021,483 ops/s
[info]                  ·gc.alloc.rate:                   1644,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59340,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,909 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   36117,728 ±(99.9%) 296,314 ops/s [Average]
[info]   (min, avg, max) = (36021,483, 36117,728, 36228,329), stdev = 76,952
[info]   CI (99.9%): [35821,415, 36414,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1648,757 ±(99.9%) 13,879 MB/sec [Average]
[info]   (min, avg, max) = (1644,250, 1648,757, 1653,921), stdev = 3,604
[info]   CI (99.9%): [1634,877, 1662,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71848,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (71848,011, 71848,012, 71848,013), stdev = 0,001
[info]   CI (99.9%): [71848,009, 71848,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1627,123 ±(99.9%) 1427,438 MB/sec [Average]
[info]   (min, avg, max) = (1354,878, 1627,123, 2035,698), stdev = 370,701
[info]   CI (99.9%): [199,684, 3054,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   70902,504 ±(99.9%) 62136,095 B/op [Average]
[info]   (min, avg, max) = (58919,819, 70902,504, 88628,395), stdev = 16136,546
[info]   CI (99.9%): [8766,410, 133038,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,270 ±(99.9%) 1,908 B/op [Average]
[info]   (min, avg, max) = (0,906, 1,270, 1,816), stdev = 0,495
[info]   CI (99.9%): [≈ 0, 3,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,94% complete, ETA 01:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390177,734 ops/s
[info] # Warmup Iteration   2: 406327,872 ops/s
[info] # Warmup Iteration   3: 406539,668 ops/s
[info] # Warmup Iteration   4: 408734,824 ops/s
[info] # Warmup Iteration   5: 410879,012 ops/s
[info] Iteration   1: 410577,980 ops/s
[info]                  ·gc.alloc.rate:                   1068,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2583,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 410053,229 ops/s
[info]                  ·gc.alloc.rate:                   1067,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5169,807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 410146,980 ops/s
[info]                  ·gc.alloc.rate:                   1067,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5168,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 409865,455 ops/s
[info]                  ·gc.alloc.rate:               1066,717 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2585,894 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 409959,707 ops/s
[info]                  ·gc.alloc.rate:                   1066,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5171,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   410120,670 ±(99.9%) 1064,019 ops/s [Average]
[info]   (min, avg, max) = (409865,455, 410120,670, 410577,980), stdev = 276,322
[info]   CI (99.9%): [409056,651, 411184,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1067,321 ±(99.9%) 2,687 MB/sec [Average]
[info]   (min, avg, max) = (1066,717, 1067,321, 1068,476), stdev = 0,698
[info]   CI (99.9%): [1064,634, 1070,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,669 ±(99.9%) 1419,855 MB/sec [Average]
[info]   (min, avg, max) = (673,442, 1077,669, 1347,058), stdev = 368,732
[info]   CI (99.9%): [≈ 0, 2497,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4135,978 ±(99.9%) 5452,182 B/op [Average]
[info]   (min, avg, max) = (2583,951, 4135,978, 5171,918), stdev = 1415,914
[info]   CI (99.9%): [≈ 0, 9588,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,096 ±(99.9%) 0,337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,096, 0,240), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35,14% complete, ETA 01:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12403,068 ops/s
[info] # Warmup Iteration   2: 20240,114 ops/s
[info] # Warmup Iteration   3: 20281,589 ops/s
[info] # Warmup Iteration   4: 20160,217 ops/s
[info] # Warmup Iteration   5: 20240,298 ops/s
[info] Iteration   1: 20293,272 ops/s
[info]                  ·gc.alloc.rate:                   2022,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              156864,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157715,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,843 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20237,434 ops/s
[info]                  ·gc.alloc.rate:                   2017,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              156864,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158299,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,237 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 20282,180 ops/s
[info]                  ·gc.alloc.rate:               2021,268 MB/sec
[info]                  ·gc.alloc.rate.norm:          156864,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105384,782 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 20097,708 ops/s
[info]                  ·gc.alloc.rate:               2003,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          156864,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2038,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159636,216 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 20257,074 ops/s
[info]                  ·gc.alloc.rate:                   2018,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              156864,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158487,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,617 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   20233,534 ±(99.9%) 304,134 ops/s [Average]
[info]   (min, avg, max) = (20097,708, 20233,534, 20293,272), stdev = 78,983
[info]   CI (99.9%): [19929,400, 20537,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2016,561 ±(99.9%) 29,906 MB/sec [Average]
[info]   (min, avg, max) = (2003,196, 2016,561, 2022,523), stdev = 7,767
[info]   CI (99.9%): [1986,655, 2046,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   156864,022 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (156864,020, 156864,022, 156864,027), stdev = 0,003
[info]   CI (99.9%): [156864,011, 156864,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1901,037 ±(99.9%) 1169,109 MB/sec [Average]
[info]   (min, avg, max) = (1357,933, 1901,037, 2039,611), stdev = 303,614
[info]   CI (99.9%): [731,928, 3070,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   147904,454 ±(99.9%) 91566,131 B/op [Average]
[info]   (min, avg, max) = (105384,782, 147904,454, 159636,216), stdev = 23779,433
[info]   CI (99.9%): [56338,323, 239470,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,940 ±(99.9%) 8,110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,940, 4,843), stdev = 2,106
[info]   CI (99.9%): [≈ 0, 10,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35,34% complete, ETA 01:25:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26813,209 ops/s
[info] # Warmup Iteration   2: 33312,401 ops/s
[info] # Warmup Iteration   3: 32642,403 ops/s
[info] # Warmup Iteration   4: 33483,168 ops/s
[info] # Warmup Iteration   5: 33442,088 ops/s
[info] Iteration   1: 33443,747 ops/s
[info]                  ·gc.alloc.rate:               1620,201 MB/sec
[info]                  ·gc.alloc.rate.norm:          76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63333,965 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 33431,581 ops/s
[info]                  ·gc.alloc.rate:               1619,331 MB/sec
[info]                  ·gc.alloc.rate.norm:          76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63388,050 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 33479,657 ops/s
[info]                  ·gc.alloc.rate:                   1621,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95043,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,936 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33542,431 ops/s
[info]                  ·gc.alloc.rate:               1624,875 MB/sec
[info]                  ·gc.alloc.rate.norm:          76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63320,864 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 33532,661 ops/s
[info]                  ·gc.alloc.rate:                   1624,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95134,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,931 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   33486,015 ±(99.9%) 193,958 ops/s [Average]
[info]   (min, avg, max) = (33431,581, 33486,015, 33542,431), stdev = 50,370
[info]   CI (99.9%): [33292,058, 33679,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1622,123 ±(99.9%) 9,409 MB/sec [Average]
[info]   (min, avg, max) = (1619,331, 1622,123, 1624,875), stdev = 2,444
[info]   CI (99.9%): [1612,714, 1631,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   76248,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76248,012, 76248,013, 76248,013), stdev = 0,001
[info]   CI (99.9%): [76248,010, 76248,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1617,950 ±(99.9%) 1427,968 MB/sec [Average]
[info]   (min, avg, max) = (1345,789, 1617,950, 2026,649), stdev = 370,839
[info]   CI (99.9%): [189,982, 3045,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   76044,159 ±(99.9%) 66945,340 B/op [Average]
[info]   (min, avg, max) = (63320,864, 76044,159, 95134,668), stdev = 17385,492
[info]   CI (99.9%): [9098,820, 142989,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,173 ±(99.9%) 6,187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,173, 2,936), stdev = 1,607
[info]   CI (99.9%): [≈ 0, 7,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35,54% complete, ETA 01:25:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48248,733 ops/s
[info] # Warmup Iteration   2: 61198,549 ops/s
[info] # Warmup Iteration   3: 61266,825 ops/s
[info] # Warmup Iteration   4: 61572,939 ops/s
[info] # Warmup Iteration   5: 61667,785 ops/s
[info] Iteration   1: 61580,415 ops/s
[info]                  ·gc.alloc.rate:                   1493,585 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34323,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,532 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 61478,721 ops/s
[info]                  ·gc.alloc.rate:                   1491,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34380,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,066 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 61820,661 ops/s
[info]                  ·gc.alloc.rate:                   1499,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34223,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,530 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 61680,820 ops/s
[info]                  ·gc.alloc.rate:                   1496,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51516,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,531 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 61885,186 ops/s
[info]                  ·gc.alloc.rate:                   1500,680 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34278,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   61689,160 ±(99.9%) 644,043 ops/s [Average]
[info]   (min, avg, max) = (61478,721, 61689,160, 61885,186), stdev = 167,256
[info]   CI (99.9%): [61045,117, 62333,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1496,214 ±(99.9%) 15,359 MB/sec [Average]
[info]   (min, avg, max) = (1491,147, 1496,214, 1500,680), stdev = 3,989
[info]   CI (99.9%): [1480,855, 1511,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38176,007, 38176,007, 38176,007), stdev = 0,001
[info]   CI (99.9%): [38176,006, 38176,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,292 ±(99.9%) 1161,661 MB/sec [Average]
[info]   (min, avg, max) = (1342,847, 1479,292, 2018,942), stdev = 301,680
[info]   CI (99.9%): [317,631, 2640,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37744,582 ±(99.9%) 29646,838 B/op [Average]
[info]   (min, avg, max) = (34223,849, 37744,582, 51516,928), stdev = 7699,190
[info]   CI (99.9%): [8097,744, 67391,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,744 ±(99.9%) 1,121 B/op [Average]
[info]   (min, avg, max) = (0,530, 0,744, 1,066), stdev = 0,291
[info]   CI (99.9%): [≈ 0, 1,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,74% complete, ETA 01:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108109,367 ops/s
[info] # Warmup Iteration   2: 148950,777 ops/s
[info] # Warmup Iteration   3: 149274,288 ops/s
[info] # Warmup Iteration   4: 148698,030 ops/s
[info] # Warmup Iteration   5: 149067,693 ops/s
[info] Iteration   1: 148823,101 ops/s
[info]                  ·gc.alloc.rate:                   1260,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14299,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,881 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 149478,841 ops/s
[info]                  ·gc.alloc.rate:               1266,490 MB/sec
[info]                  ·gc.alloc.rate.norm:          13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7122,459 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 149285,744 ops/s
[info]                  ·gc.alloc.rate:               1264,894 MB/sec
[info]                  ·gc.alloc.rate.norm:          13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14276,037 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 148866,533 ops/s
[info]                  ·gc.alloc.rate:                   1261,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14323,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,440 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 148813,945 ops/s
[info]                  ·gc.alloc.rate:                   1260,772 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14342,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   149053,633 ±(99.9%) 1187,283 ops/s [Average]
[info]   (min, avg, max) = (148813,945, 149053,633, 149478,841), stdev = 308,334
[info]   CI (99.9%): [147866,349, 150240,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1262,910 ±(99.9%) 10,055 MB/sec [Average]
[info]   (min, avg, max) = (1260,772, 1262,910, 1266,490), stdev = 2,611
[info]   CI (99.9%): [1252,854, 1272,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,003, 13336,003, 13336,003), stdev = 0,001
[info]   CI (99.9%): [13336,002, 13336,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,665 ±(99.9%) 1167,271 MB/sec [Average]
[info]   (min, avg, max) = (676,404, 1218,665, 1355,947), stdev = 303,137
[info]   CI (99.9%): [51,394, 2385,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12872,891 ±(99.9%) 12378,616 B/op [Average]
[info]   (min, avg, max) = (7122,459, 12872,891, 14342,728), stdev = 3214,687
[info]   CI (99.9%): [494,275, 25251,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,308 ±(99.9%) 1,418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,308, 0,881), stdev = 0,368
[info]   CI (99.9%): [≈ 0, 1,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,94% complete, ETA 01:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1097268,203 ops/s
[info] # Warmup Iteration   2: 1224754,247 ops/s
[info] # Warmup Iteration   3: 1223268,882 ops/s
[info] # Warmup Iteration   4: 1225381,036 ops/s
[info] # Warmup Iteration   5: 1224751,727 ops/s
[info] Iteration   1: 1227030,669 ops/s
[info]                  ·gc.alloc.rate:                   1315,973 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1727,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1228741,405 ops/s
[info]                  ·gc.alloc.rate:                   1317,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1725,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1231575,992 ops/s
[info]                  ·gc.alloc.rate:               1320,888 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 860,639 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1227721,929 ops/s
[info]                  ·gc.alloc.rate:                   1316,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1727,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1229128,350 ops/s
[info]                  ·gc.alloc.rate:                   1318,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1727,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1228839,669 ±(99.9%) 6697,874 ops/s [Average]
[info]   (min, avg, max) = (1227030,669, 1228839,669, 1231575,992), stdev = 1739,417
[info]   CI (99.9%): [1222141,795, 1235537,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1317,975 ±(99.9%) 7,104 MB/sec [Average]
[info]   (min, avg, max) = (1315,973, 1317,975, 1320,888), stdev = 1,845
[info]   CI (99.9%): [1310,872, 1325,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1688,000, 1688,000, 1688,000), stdev = 0,001
[info]   CI (99.9%): [1688,000, 1688,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,782 ±(99.9%) 1160,926 MB/sec [Average]
[info]   (min, avg, max) = (673,464, 1212,782, 1348,772), stdev = 301,489
[info]   CI (99.9%): [51,856, 2373,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1553,657 ±(99.9%) 1491,777 B/op [Average]
[info]   (min, avg, max) = (860,639, 1553,657, 1727,546), stdev = 387,410
[info]   CI (99.9%): [61,880, 3045,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,053 ±(99.9%) 0,145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,053, 0,080), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36,14% complete, ETA 01:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 965971,558 ops/s
[info] # Warmup Iteration   2: 997555,897 ops/s
[info] # Warmup Iteration   3: 1012398,462 ops/s
[info] # Warmup Iteration   4: 1010580,416 ops/s
[info] # Warmup Iteration   5: 1010904,179 ops/s
[info] Iteration   1: 1012996,078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1010651,094 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1013233,457 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1010433,787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1012287,190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1011920,321 ±(99.9%) 5034,226 ops/s [Average]
[info]   (min, avg, max) = (1010433,787, 1011920,321, 1013233,457), stdev = 1307,373
[info]   CI (99.9%): [1006886,095, 1016954,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36,35% complete, ETA 01:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49452,147 ops/s
[info] # Warmup Iteration   2: 61228,474 ops/s
[info] # Warmup Iteration   3: 61947,724 ops/s
[info] # Warmup Iteration   4: 62039,803 ops/s
[info] # Warmup Iteration   5: 62349,148 ops/s
[info] Iteration   1: 61566,427 ops/s
[info]                  ·gc.alloc.rate:                   1512,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34258,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,596 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 62181,372 ops/s
[info]                  ·gc.alloc.rate:                   1527,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50897,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,527 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 62270,933 ops/s
[info]                  ·gc.alloc.rate:                   1529,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              38672,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33930,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,052 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 62213,646 ops/s
[info]                  ·gc.alloc.rate:               1528,732 MB/sec
[info]                  ·gc.alloc.rate.norm:          38672,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34003,863 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 62322,989 ops/s
[info]                  ·gc.alloc.rate:               1531,194 MB/sec
[info]                  ·gc.alloc.rate.norm:          38672,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33985,913 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   62111,073 ±(99.9%) 1190,849 ops/s [Average]
[info]   (min, avg, max) = (61566,427, 62111,073, 62322,989), stdev = 309,260
[info]   CI (99.9%): [60920,224, 63301,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1526,095 ±(99.9%) 29,171 MB/sec [Average]
[info]   (min, avg, max) = (1512,736, 1526,095, 1531,194), stdev = 7,576
[info]   CI (99.9%): [1496,924, 1555,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38672,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38672,007, 38672,007, 38672,007), stdev = 0,001
[info]   CI (99.9%): [38672,006, 38672,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1476,640 ±(99.9%) 1149,928 MB/sec [Average]
[info]   (min, avg, max) = (1340,110, 1476,640, 2010,838), stdev = 298,633
[info]   CI (99.9%): [326,712, 2626,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37415,474 ±(99.9%) 29026,206 B/op [Average]
[info]   (min, avg, max) = (33930,657, 37415,474, 50897,983), stdev = 7538,014
[info]   CI (99.9%): [8389,268, 66441,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,635 ±(99.9%) 2,665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,635, 1,596), stdev = 0,692
[info]   CI (99.9%): [≈ 0, 3,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36,55% complete, ETA 01:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29206,544 ops/s
[info] # Warmup Iteration   2: 31234,235 ops/s
[info] # Warmup Iteration   3: 31329,130 ops/s
[info] # Warmup Iteration   4: 31348,702 ops/s
[info] # Warmup Iteration   5: 31495,884 ops/s
[info] Iteration   1: 31435,047 ops/s
[info]                  ·gc.alloc.rate:                   389,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25611,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,208 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31529,796 ops/s
[info]                  ·gc.alloc.rate:               391,068 MB/sec
[info]                  ·gc.alloc.rate.norm:          19520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25536,907 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 31463,580 ops/s
[info]                  ·gc.alloc.rate:                   390,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25588,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 31508,073 ops/s
[info]                  ·gc.alloc.rate:      390,781 MB/sec
[info]                  ·gc.alloc.rate.norm: 19520,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 31445,389 ops/s
[info]                  ·gc.alloc.rate:                   389,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33804,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139,192 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   31476,377 ±(99.9%) 157,482 ops/s [Average]
[info]   (min, avg, max) = (31435,047, 31476,377, 31529,796), stdev = 40,898
[info]   CI (99.9%): [31318,895, 31633,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   390,367 ±(99.9%) 2,069 MB/sec [Average]
[info]   (min, avg, max) = (389,834, 390,367, 391,068), stdev = 0,537
[info]   CI (99.9%): [388,298, 392,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   19520,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (19520,013, 19520,013, 19520,014), stdev = 0,001
[info]   CI (99.9%): [19520,011, 19520,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,982 ±(99.9%) 989,802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,982, 675,289), stdev = 257,048
[info]   CI (99.9%): [≈ 0, 1431,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22108,232 ±(99.9%) 49526,732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22108,232, 33804,599), stdev = 12861,935
[info]   CI (99.9%): [≈ 0, 71634,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,569 ±(99.9%) 4,761 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,569, 2,781), stdev = 1,236
[info]   CI (99.9%): [≈ 0, 5,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28,495 ±(99.9%) 238,309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28,495, 139,192), stdev = 61,888
[info]   CI (99.9%): [≈ 0, 266,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36,75% complete, ETA 01:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14777,044 ops/s
[info] # Warmup Iteration   2: 18321,006 ops/s
[info] # Warmup Iteration   3: 18389,755 ops/s
[info] # Warmup Iteration   4: 18393,967 ops/s
[info] # Warmup Iteration   5: 18384,393 ops/s
[info] Iteration   1: 18366,610 ops/s
[info]                  ·gc.alloc.rate:                   1639,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115176,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,567 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18473,963 ops/s
[info]                  ·gc.alloc.rate:                   1648,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171830,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,093 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18376,426 ops/s
[info]                  ·gc.alloc.rate:                   1640,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115291,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,783 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18469,832 ops/s
[info]                  ·gc.alloc.rate:                   1648,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172293,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,774 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18525,287 ops/s
[info]                  ·gc.alloc.rate:                   1652,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114681,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,305 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18442,424 ±(99.9%) 263,395 ops/s [Average]
[info]   (min, avg, max) = (18366,610, 18442,424, 18525,287), stdev = 68,403
[info]   CI (99.9%): [18179,029, 18705,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1646,037 ±(99.9%) 22,872 MB/sec [Average]
[info]   (min, avg, max) = (1639,376, 1646,037, 1652,956), stdev = 5,940
[info]   CI (99.9%): [1623,165, 1668,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480,029 ±(99.9%) 0,042 B/op [Average]
[info]   (min, avg, max) = (140480,022, 140480,029, 140480,048), stdev = 0,011
[info]   CI (99.9%): [140479,987, 140480,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,719 ±(99.9%) 1419,307 MB/sec [Average]
[info]   (min, avg, max) = (1344,091, 1615,719, 2021,961), stdev = 368,589
[info]   CI (99.9%): [196,412, 3035,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   137854,862 ±(99.9%) 120248,413 B/op [Average]
[info]   (min, avg, max) = (114681,810, 137854,862, 172293,626), stdev = 31228,131
[info]   CI (99.9%): [17606,449, 258103,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,904 ±(99.9%) 8,883 B/op [Average]
[info]   (min, avg, max) = (1,774, 3,904, 7,093), stdev = 2,307
[info]   CI (99.9%): [≈ 0, 12,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36,95% complete, ETA 01:23:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11753,463 ops/s
[info] # Warmup Iteration   2: 18911,825 ops/s
[info] # Warmup Iteration   3: 18934,964 ops/s
[info] # Warmup Iteration   4: 19129,180 ops/s
[info] # Warmup Iteration   5: 19010,527 ops/s
[info] Iteration   1: 18753,343 ops/s
[info]                  ·gc.alloc.rate:                   1515,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              127144,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170355,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,241 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19167,391 ops/s
[info]                  ·gc.alloc.rate:                   1548,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              127118,198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111224,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,709 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19139,667 ops/s
[info]                  ·gc.alloc.rate:               1545,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          127112,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111457,412 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 19060,128 ops/s
[info]                  ·gc.alloc.rate:                   1539,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              127112,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112029,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,437 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19049,587 ops/s
[info]                  ·gc.alloc.rate:                   1538,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              127112,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     168232,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,439 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   19034,023 ±(99.9%) 634,634 ops/s [Average]
[info]   (min, avg, max) = (18753,343, 19034,023, 19167,391), stdev = 164,812
[info]   CI (99.9%): [18399,389, 19668,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1537,377 ±(99.9%) 50,586 MB/sec [Average]
[info]   (min, avg, max) = (1515,073, 1537,377, 1548,249), stdev = 13,137
[info]   CI (99.9%): [1486,791, 1587,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127119,658 ±(99.9%) 53,458 B/op [Average]
[info]   (min, avg, max) = (127112,021, 127119,658, 127144,027), stdev = 13,883
[info]   CI (99.9%): [127066,201, 127173,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1626,573 ±(99.9%) 1428,821 MB/sec [Average]
[info]   (min, avg, max) = (1354,666, 1626,573, 2036,089), stdev = 371,060
[info]   CI (99.9%): [197,752, 3055,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   134659,789 ±(99.9%) 121783,842 B/op [Average]
[info]   (min, avg, max) = (111224,208, 134659,789, 170355,867), stdev = 31626,877
[info]   CI (99.9%): [12875,947, 256443,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,765 ±(99.9%) 7,652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,765, 5,241), stdev = 1,987
[info]   CI (99.9%): [≈ 0, 10,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,15% complete, ETA 01:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434625,752 ops/s
[info] # Warmup Iteration   2: 459722,222 ops/s
[info] # Warmup Iteration   3: 460154,247 ops/s
[info] # Warmup Iteration   4: 459818,938 ops/s
[info] # Warmup Iteration   5: 460580,792 ops/s
[info] Iteration   1: 462663,456 ops/s
[info]                  ·gc.alloc.rate:                   1204,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4582,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 462100,755 ops/s
[info]                  ·gc.alloc.rate:               1202,729 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2293,777 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 462663,838 ops/s
[info]                  ·gc.alloc.rate:                   1204,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4581,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 460702,041 ops/s
[info]                  ·gc.alloc.rate:                   1198,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4602,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 461668,479 ops/s
[info]                  ·gc.alloc.rate:                   1201,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4596,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   461959,714 ±(99.9%) 3150,413 ops/s [Average]
[info]   (min, avg, max) = (460702,041, 461959,714, 462663,838), stdev = 818,152
[info]   CI (99.9%): [458809,300, 465110,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1202,222 ±(99.9%) 8,141 MB/sec [Average]
[info]   (min, avg, max) = (1198,992, 1202,222, 1204,026), stdev = 2,114
[info]   CI (99.9%): [1194,081, 1210,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,491 ±(99.9%) 1160,150 MB/sec [Average]
[info]   (min, avg, max) = (673,533, 1212,491, 1348,011), stdev = 301,287
[info]   CI (99.9%): [52,341, 2372,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4131,195 ±(99.9%) 3955,327 B/op [Average]
[info]   (min, avg, max) = (2293,777, 4131,195, 4602,261), stdev = 1027,186
[info]   CI (99.9%): [175,867, 8086,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,099 ±(99.9%) 0,311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,099, 0,213), stdev = 0,081
[info]   CI (99.9%): [≈ 0, 0,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37,35% complete, ETA 01:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8742,120 ops/s
[info] # Warmup Iteration   2: 13604,334 ops/s
[info] # Warmup Iteration   3: 13817,364 ops/s
[info] # Warmup Iteration   4: 13804,595 ops/s
[info] # Warmup Iteration   5: 13747,263 ops/s
[info] Iteration   1: 13797,979 ops/s
[info]                  ·gc.alloc.rate:                   1905,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231847,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,872 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13816,557 ops/s
[info]                  ·gc.alloc.rate:                   1908,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154490,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,371 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 13789,741 ops/s
[info]                  ·gc.alloc.rate:               1903,988 MB/sec
[info]                  ·gc.alloc.rate.norm:          217320,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2036,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232438,274 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 13843,553 ops/s
[info]                  ·gc.alloc.rate:                   1911,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231683,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,199 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 13870,643 ops/s
[info]                  ·gc.alloc.rate:                   1914,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231345,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,085 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13823,695 ±(99.9%) 128,632 ops/s [Average]
[info]   (min, avg, max) = (13789,741, 13823,695, 13870,643), stdev = 33,405
[info]   CI (99.9%): [13695,063, 13952,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1908,701 ±(99.9%) 17,161 MB/sec [Average]
[info]   (min, avg, max) = (1903,988, 1908,701, 1914,661), stdev = 4,457
[info]   CI (99.9%): [1891,540, 1925,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320,032 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (217320,029, 217320,032, 217320,039), stdev = 0,004
[info]   CI (99.9%): [217320,015, 217320,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1900,320 ±(99.9%) 1170,860 MB/sec [Average]
[info]   (min, avg, max) = (1356,401, 1900,320, 2038,232), stdev = 304,069
[info]   CI (99.9%): [729,460, 3071,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   216361,045 ±(99.9%) 133190,272 B/op [Average]
[info]   (min, avg, max) = (154490,248, 216361,045, 232438,274), stdev = 34589,091
[info]   CI (99.9%): [83170,773, 349551,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,125), stdev = 0,053
[info]   CI (99.9%): [≈ 0, 0,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,105 ±(99.9%) 23,258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,105, 14,199), stdev = 6,040
[info]   CI (99.9%): [≈ 0, 30,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37,55% complete, ETA 01:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15576,909 ops/s
[info] # Warmup Iteration   2: 18796,026 ops/s
[info] # Warmup Iteration   3: 18766,876 ops/s
[info] # Warmup Iteration   4: 18848,375 ops/s
[info] # Warmup Iteration   5: 18831,589 ops/s
[info] Iteration   1: 18789,396 ops/s
[info]                  ·gc.alloc.rate:                   1569,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              131503,950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169081,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,487 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18897,111 ops/s
[info]                  ·gc.alloc.rate:               1578,799 MB/sec
[info]                  ·gc.alloc.rate.norm:          131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112147,314 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 18847,613 ops/s
[info]                  ·gc.alloc.rate:                   1574,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112522,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,476 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 18776,057 ops/s
[info]                  ·gc.alloc.rate:                   1568,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169616,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,745 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18811,509 ops/s
[info]                  ·gc.alloc.rate:               1571,382 MB/sec
[info]                  ·gc.alloc.rate.norm:          131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113010,157 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   18824,337 ±(99.9%) 188,192 ops/s [Average]
[info]   (min, avg, max) = (18776,057, 18824,337, 18897,111), stdev = 48,873
[info]   CI (99.9%): [18636,145, 19012,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1572,609 ±(99.9%) 15,671 MB/sec [Average]
[info]   (min, avg, max) = (1568,668, 1572,609, 1578,799), stdev = 4,070
[info]   CI (99.9%): [1556,938, 1588,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   131484,808 ±(99.9%) 41,205 B/op [Average]
[info]   (min, avg, max) = (131480,022, 131484,808, 131503,950), stdev = 10,701
[info]   CI (99.9%): [131443,603, 131526,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1617,346 ±(99.9%) 1419,050 MB/sec [Average]
[info]   (min, avg, max) = (1346,654, 1617,346, 2023,672), stdev = 368,523
[info]   CI (99.9%): [198,296, 3036,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   135275,524 ±(99.9%) 119780,922 B/op [Average]
[info]   (min, avg, max) = (112147,314, 135275,524, 169616,841), stdev = 31106,725
[info]   CI (99.9%): [15494,601, 255056,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,742 ±(99.9%) 6,703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,742, 3,487), stdev = 1,741
[info]   CI (99.9%): [≈ 0, 8,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37,75% complete, ETA 01:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34436,870 ops/s
[info] # Warmup Iteration   2: 44646,526 ops/s
[info] # Warmup Iteration   3: 44491,387 ops/s
[info] # Warmup Iteration   4: 44748,581 ops/s
[info] # Warmup Iteration   5: 44625,707 ops/s
[info] Iteration   1: 44776,190 ops/s
[info]                  ·gc.alloc.rate:                   1392,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47202,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 44840,257 ops/s
[info]                  ·gc.alloc.rate:               1393,990 MB/sec
[info]                  ·gc.alloc.rate.norm:          48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47134,367 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 44583,449 ops/s
[info]                  ·gc.alloc.rate:                   1385,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47426,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,735 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44671,467 ops/s
[info]                  ·gc.alloc.rate:                   1388,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47380,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,467 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44667,609 ops/s
[info]                  ·gc.alloc.rate:                   1388,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47428,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,467 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44707,794 ±(99.9%) 388,040 ops/s [Average]
[info]   (min, avg, max) = (44583,449, 44707,794, 44840,257), stdev = 100,773
[info]   CI (99.9%): [44319,755, 45095,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1389,873 ±(99.9%) 12,171 MB/sec [Average]
[info]   (min, avg, max) = (1385,988, 1389,873, 1393,990), stdev = 3,161
[info]   CI (99.9%): [1377,702, 1402,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48928,009, 48928,009, 48928,010), stdev = 0,001
[info]   CI (99.9%): [48928,008, 48928,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,037 ±(99.9%) 5,142 MB/sec [Average]
[info]   (min, avg, max) = (1342,888, 1344,037, 1345,940), stdev = 1,335
[info]   CI (99.9%): [1338,895, 1349,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   47314,671 ±(99.9%) 527,084 B/op [Average]
[info]   (min, avg, max) = (47134,367, 47314,671, 47428,932), stdev = 136,882
[info]   CI (99.9%): [46787,587, 47841,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,026 ±(99.9%) 2,523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,026, 1,467), stdev = 0,655
[info]   CI (99.9%): [≈ 0, 3,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,95% complete, ETA 01:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37632,269 ops/s
[info] # Warmup Iteration   2: 52843,987 ops/s
[info] # Warmup Iteration   3: 52830,146 ops/s
[info] # Warmup Iteration   4: 53009,429 ops/s
[info] # Warmup Iteration   5: 52546,367 ops/s
[info] Iteration   1: 52966,143 ops/s
[info]                  ·gc.alloc.rate:                   1405,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40198,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,856 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 52972,744 ops/s
[info]                  ·gc.alloc.rate:               1405,224 MB/sec
[info]                  ·gc.alloc.rate.norm:          41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40233,179 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 53130,748 ops/s
[info]                  ·gc.alloc.rate:                   1409,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40133,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,850 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 53179,631 ops/s
[info]                  ·gc.alloc.rate:               1410,785 MB/sec
[info]                  ·gc.alloc.rate.norm:          41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40137,258 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 53125,129 ops/s
[info]                  ·gc.alloc.rate:               1409,144 MB/sec
[info]                  ·gc.alloc.rate.norm:          41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40197,781 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   53074,879 ±(99.9%) 379,608 ops/s [Average]
[info]   (min, avg, max) = (52966,143, 53074,879, 53179,631), stdev = 98,583
[info]   CI (99.9%): [52695,270, 53454,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1407,924 ±(99.9%) 10,085 MB/sec [Average]
[info]   (min, avg, max) = (1405,052, 1407,924, 1410,785), stdev = 2,619
[info]   CI (99.9%): [1397,839, 1418,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (41752,008, 41752,008, 41752,008), stdev = 0,001
[info]   CI (99.9%): [41752,007, 41752,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,910 ±(99.9%) 6,140 MB/sec [Average]
[info]   (min, avg, max) = (1352,761, 1354,910, 1356,688), stdev = 1,595
[info]   CI (99.9%): [1348,770, 1361,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40179,933 ±(99.9%) 166,539 B/op [Average]
[info]   (min, avg, max) = (40133,293, 40179,933, 40233,179), stdev = 43,250
[info]   CI (99.9%): [40013,394, 40346,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,741 ±(99.9%) 3,907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,741, 1,856), stdev = 1,015
[info]   CI (99.9%): [≈ 0, 4,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,15% complete, ETA 01:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1304443,543 ops/s
[info] # Warmup Iteration   2: 1372034,233 ops/s
[info] # Warmup Iteration   3: 1361651,752 ops/s
[info] # Warmup Iteration   4: 1377398,375 ops/s
[info] # Warmup Iteration   5: 1378263,554 ops/s
[info] Iteration   1: 1369152,192 ops/s
[info]                  ·gc.alloc.rate:                   1245,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1548,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1378313,537 ops/s
[info]                  ·gc.alloc.rate:                   1253,972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1537,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1383054,363 ops/s
[info]                  ·gc.alloc.rate:                   1258,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1377066,392 ops/s
[info]                  ·gc.alloc.rate:                   1253,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1540,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1377147,096 ops/s
[info]                  ·gc.alloc.rate:                   1252,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1541,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1376946,716 ±(99.9%) 19251,355 ops/s [Average]
[info]   (min, avg, max) = (1369152,192, 1376946,716, 1383054,363), stdev = 4999,516
[info]   CI (99.9%): [1357695,361, 1396198,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1252,797 ±(99.9%) 17,420 MB/sec [Average]
[info]   (min, avg, max) = (1245,738, 1252,797, 1258,327), stdev = 4,524
[info]   CI (99.9%): [1235,378, 1270,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1432,000, 1432,000, 1432,000), stdev = 0,001
[info]   CI (99.9%): [1432,000, 1432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,331 ±(99.9%) 3,381 MB/sec [Average]
[info]   (min, avg, max) = (1346,719, 1347,331, 1348,773), stdev = 0,878
[info]   CI (99.9%): [1343,951, 1350,712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1540,073 ±(99.9%) 21,771 B/op [Average]
[info]   (min, avg, max) = (1532,653, 1540,073, 1548,197), stdev = 5,654
[info]   CI (99.9%): [1518,302, 1561,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,052 ±(99.9%) 0,077 B/op [Average]
[info]   (min, avg, max) = (0,024, 0,052, 0,071), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38,35% complete, ETA 01:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1404283,861 ops/s
[info] # Warmup Iteration   2: 1468794,167 ops/s
[info] # Warmup Iteration   3: 1465201,682 ops/s
[info] # Warmup Iteration   4: 1462752,692 ops/s
[info] # Warmup Iteration   5: 1463020,018 ops/s
[info] Iteration   1: 1467903,263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1463302,660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1466749,777 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1463996,971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1462016,852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1464793,904 ±(99.9%) 9444,775 ops/s [Average]
[info]   (min, avg, max) = (1462016,852, 1464793,904, 1467903,263), stdev = 2452,778
[info]   CI (99.9%): [1455349,130, 1474238,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38,55% complete, ETA 01:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32226,542 ops/s
[info] # Warmup Iteration   2: 40688,383 ops/s
[info] # Warmup Iteration   3: 40677,792 ops/s
[info] # Warmup Iteration   4: 40963,523 ops/s
[info] # Warmup Iteration   5: 41046,778 ops/s
[info] Iteration   1: 40891,514 ops/s
[info]                  ·gc.alloc.rate:                   1237,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51580,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,602 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 41032,708 ops/s
[info]                  ·gc.alloc.rate:                   1241,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51408,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,798 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 41040,568 ops/s
[info]                  ·gc.alloc.rate:               1241,642 MB/sec
[info]                  ·gc.alloc.rate.norm:          47616,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25708,656 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 40713,008 ops/s
[info]                  ·gc.alloc.rate:                   1231,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51858,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,805 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 40983,270 ops/s
[info]                  ·gc.alloc.rate:               1239,757 MB/sec
[info]                  ·gc.alloc.rate.norm:          47616,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51568,053 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   40932,214 ±(99.9%) 524,289 ops/s [Average]
[info]   (min, avg, max) = (40713,008, 40932,214, 41040,568), stdev = 136,156
[info]   CI (99.9%): [40407,925, 41456,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1238,357 ±(99.9%) 15,857 MB/sec [Average]
[info]   (min, avg, max) = (1231,791, 1238,357, 1241,642), stdev = 4,118
[info]   CI (99.9%): [1222,500, 1254,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47616,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (47616,010, 47616,010, 47616,011), stdev = 0,001
[info]   CI (99.9%): [47616,009, 47616,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207,007 ±(99.9%) 1155,131 MB/sec [Average]
[info]   (min, avg, max) = (670,383, 1207,007, 1342,655), stdev = 299,984
[info]   CI (99.9%): [51,876, 2362,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   46424,691 ±(99.9%) 44597,192 B/op [Average]
[info]   (min, avg, max) = (25708,656, 46424,691, 51858,460), stdev = 11581,749
[info]   CI (99.9%): [1827,499, 91021,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,641 ±(99.9%) 2,581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 1,602), stdev = 0,670
[info]   CI (99.9%): [≈ 0, 3,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38,76% complete, ETA 01:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30946,662 ops/s
[info] # Warmup Iteration   2: 33257,435 ops/s
[info] # Warmup Iteration   3: 33537,423 ops/s
[info] # Warmup Iteration   4: 33526,185 ops/s
[info] # Warmup Iteration   5: 33612,394 ops/s
[info] Iteration   1: 33520,836 ops/s
[info]                  ·gc.alloc.rate:                   470,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24018,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,466 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33576,567 ops/s
[info]                  ·gc.alloc.rate:               470,990 MB/sec
[info]                  ·gc.alloc.rate.norm:          22080,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23980,298 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 33501,487 ops/s
[info]                  ·gc.alloc.rate:                   469,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31733,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132,439 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33609,950 ops/s
[info]                  ·gc.alloc.rate:      471,512 MB/sec
[info]                  ·gc.alloc.rate.norm: 22080,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 33513,037 ops/s
[info]                  ·gc.alloc.rate:                   470,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31719,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,933 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   33544,375 ±(99.9%) 179,706 ops/s [Average]
[info]   (min, avg, max) = (33501,487, 33544,375, 33609,950), stdev = 46,669
[info]   CI (99.9%): [33364,669, 33724,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   470,545 ±(99.9%) 2,591 MB/sec [Average]
[info]   (min, avg, max) = (469,991, 470,545, 471,512), stdev = 0,673
[info]   CI (99.9%): [467,954, 473,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   22080,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (22080,012, 22080,013, 22080,013), stdev = 0,001
[info]   CI (99.9%): [22080,011, 22080,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,745 ±(99.9%) 1069,537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,745, 675,469), stdev = 277,755
[info]   CI (99.9%): [≈ 0, 1544,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22290,325 ±(99.9%) 50234,832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22290,325, 31733,303), stdev = 13045,826
[info]   CI (99.9%): [≈ 0, 72525,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,583 ±(99.9%) 4,815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,583, 2,819), stdev = 1,251
[info]   CI (99.9%): [≈ 0, 5,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   27,368 ±(99.9%) 226,222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,368, 132,439), stdev = 58,749
[info]   CI (99.9%): [≈ 0, 253,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38,96% complete, ETA 01:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79254,080 ops/s
[info] # Warmup Iteration   2: 89402,902 ops/s
[info] # Warmup Iteration   3: 89080,051 ops/s
[info] # Warmup Iteration   4: 89858,849 ops/s
[info] # Warmup Iteration   5: 89156,312 ops/s
[info] Iteration   1: 89990,924 ops/s
[info]                  ·gc.alloc.rate:                   1543,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35262,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,728 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 90247,925 ops/s
[info]                  ·gc.alloc.rate:               1548,126 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23454,516 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 89700,916 ops/s
[info]                  ·gc.alloc.rate:               1538,726 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23615,313 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 88355,861 ops/s
[info]                  ·gc.alloc.rate:                   1515,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23997,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,742 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 90071,682 ops/s
[info]                  ·gc.alloc.rate:                   1545,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35359,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,364 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   89673,461 ±(99.9%) 2936,476 ops/s [Average]
[info]   (min, avg, max) = (88355,861, 89673,461, 90247,925), stdev = 762,593
[info]   CI (99.9%): [86736,985, 92609,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1538,260 ±(99.9%) 49,892 MB/sec [Average]
[info]   (min, avg, max) = (1515,890, 1538,260, 1548,126), stdev = 12,957
[info]   CI (99.9%): [1488,368, 1588,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27000,005, 27000,005, 27000,005), stdev = 0,001
[info]   CI (99.9%): [27000,004, 27000,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,448 ±(99.9%) 1420,798 MB/sec [Average]
[info]   (min, avg, max) = (1344,835, 1615,448, 2023,392), stdev = 368,977
[info]   CI (99.9%): [194,649, 3036,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28337,827 ±(99.9%) 24523,662 B/op [Average]
[info]   (min, avg, max) = (23454,516, 28337,827, 35359,906), stdev = 6368,717
[info]   CI (99.9%): [3814,164, 52861,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,367 ±(99.9%) 1,415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,367, 0,742), stdev = 0,367
[info]   CI (99.9%): [≈ 0, 1,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39,16% complete, ETA 01:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104394,328 ops/s
[info] # Warmup Iteration   2: 388773,050 ops/s
[info] # Warmup Iteration   3: 391032,106 ops/s
[info] # Warmup Iteration   4: 390507,306 ops/s
[info] # Warmup Iteration   5: 392121,266 ops/s
[info] Iteration   1: 388923,715 ops/s
[info]                  ·gc.alloc.rate:               778,776 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2728,167 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 391832,020 ops/s
[info]                  ·gc.alloc.rate:               784,740 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2702,509 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 391534,680 ops/s
[info]                  ·gc.alloc.rate:               784,086 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2704,268 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 389508,987 ops/s
[info]                  ·gc.alloc.rate:                   780,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2715,654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,336 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 387347,676 ops/s
[info]                  ·gc.alloc.rate:                   775,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5462,179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   389829,416 ±(99.9%) 7203,985 ops/s [Average]
[info]   (min, avg, max) = (387347,676, 389829,416, 391832,020), stdev = 1870,852
[info]   CI (99.9%): [382625,431, 397033,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   780,724 ±(99.9%) 14,488 MB/sec [Average]
[info]   (min, avg, max) = (775,700, 780,724, 784,740), stdev = 3,763
[info]   CI (99.9%): [766,236, 795,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3152,001, 3152,001, 3152,001), stdev = 0,001
[info]   CI (99.9%): [3152,001, 3152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   807,225 ±(99.9%) 1155,944 MB/sec [Average]
[info]   (min, avg, max) = (672,296, 807,225, 1344,229), stdev = 300,195
[info]   CI (99.9%): [≈ 0, 1963,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3262,555 ±(99.9%) 4735,022 B/op [Average]
[info]   (min, avg, max) = (2702,509, 3262,555, 5462,179), stdev = 1229,670
[info]   CI (99.9%): [≈ 0, 7997,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,101 ±(99.9%) 0,580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,101, 0,336), stdev = 0,151
[info]   CI (99.9%): [≈ 0, 0,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,36% complete, ETA 01:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209117,730 ops/s
[info] # Warmup Iteration   2: 291589,001 ops/s
[info] # Warmup Iteration   3: 296737,959 ops/s
[info] # Warmup Iteration   4: 295770,866 ops/s
[info] # Warmup Iteration   5: 295722,179 ops/s
[info] Iteration   1: 295959,093 ops/s
[info]                  ·gc.alloc.rate:                   642,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3586,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,775 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 296670,087 ops/s
[info]                  ·gc.alloc.rate:                   643,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3578,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 296421,958 ops/s
[info]                  ·gc.alloc.rate:                   643,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3584,304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,111 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 295894,175 ops/s
[info]                  ·gc.alloc.rate:               642,232 MB/sec
[info]                  ·gc.alloc.rate.norm:          3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3590,698 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 296081,668 ops/s
[info]                  ·gc.alloc.rate:                   642,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3591,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,111 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   296205,396 ±(99.9%) 1270,813 ops/s [Average]
[info]   (min, avg, max) = (295894,175, 296205,396, 296670,087), stdev = 330,026
[info]   CI (99.9%): [294934,583, 297476,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   642,850 ±(99.9%) 2,724 MB/sec [Average]
[info]   (min, avg, max) = (642,232, 642,850, 643,854), stdev = 0,707
[info]   CI (99.9%): [640,126, 645,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3416,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3416,001, 3416,001, 3416,001), stdev = 0,001
[info]   CI (99.9%): [3416,001, 3416,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,896 ±(99.9%) 2,023 MB/sec [Average]
[info]   (min, avg, max) = (674,360, 674,896, 675,623), stdev = 0,525
[info]   CI (99.9%): [672,873, 676,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3586,296 ±(99.9%) 21,371 B/op [Average]
[info]   (min, avg, max) = (3578,088, 3586,296, 3591,996), stdev = 5,550
[info]   CI (99.9%): [3564,924, 3607,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,146), stdev = 0,059
[info]   CI (99.9%): [≈ 0, 0,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,221 ±(99.9%) 1,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,221, 0,775), stdev = 0,313
[info]   CI (99.9%): [≈ 0, 1,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,56% complete, ETA 01:20:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 487209,964 ops/s
[info] # Warmup Iteration   2: 522708,959 ops/s
[info] # Warmup Iteration   3: 521004,733 ops/s
[info] # Warmup Iteration   4: 517132,221 ops/s
[info] # Warmup Iteration   5: 520903,752 ops/s
[info] Iteration   1: 522594,941 ops/s
[info]                  ·gc.alloc.rate:                   658,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2032,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,458 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 522449,202 ops/s
[info]                  ·gc.alloc.rate:                   658,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2032,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,188 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 522043,458 ops/s
[info]                  ·gc.alloc.rate:               658,066 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2028,496 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 520718,736 ops/s
[info]                  ·gc.alloc.rate:                   656,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2033,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 519918,043 ops/s
[info]                  ·gc.alloc.rate:                   655,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2034,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   521544,876 ±(99.9%) 4514,508 ops/s [Average]
[info]   (min, avg, max) = (519918,043, 521544,876, 522594,941), stdev = 1172,403
[info]   CI (99.9%): [517030,369, 526059,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   657,411 ±(99.9%) 5,721 MB/sec [Average]
[info]   (min, avg, max) = (655,309, 657,411, 658,685), stdev = 1,486
[info]   CI (99.9%): [651,690, 663,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1984,001, 1984,001, 1984,001), stdev = 0,001
[info]   CI (99.9%): [1984,001, 1984,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,412 ±(99.9%) 4,867 MB/sec [Average]
[info]   (min, avg, max) = (671,986, 673,412, 674,780), stdev = 1,264
[info]   CI (99.9%): [668,545, 678,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2032,291 ±(99.9%) 8,754 B/op [Average]
[info]   (min, avg, max) = (2028,496, 2032,291, 2034,492), stdev = 2,273
[info]   CI (99.9%): [2023,537, 2041,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,653 ±(99.9%) 5,355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,653, 3,140), stdev = 1,391
[info]   CI (99.9%): [≈ 0, 6,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,967 ±(99.9%) 16,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,967, 9,458), stdev = 4,188
[info]   CI (99.9%): [≈ 0, 18,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39,76% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53516,355 ops/s
[info] # Warmup Iteration   2: 78468,518 ops/s
[info] # Warmup Iteration   3: 78925,086 ops/s
[info] # Warmup Iteration   4: 78993,750 ops/s
[info] # Warmup Iteration   5: 78966,630 ops/s
[info] Iteration   1: 79369,951 ops/s
[info]                  ·gc.alloc.rate:                   3539,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67303,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,064 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 79379,077 ops/s
[info]                  ·gc.alloc.rate:                   3540,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80867,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,064 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 79324,117 ops/s
[info]                  ·gc.alloc.rate:                   3537,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67491,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,652 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 78777,010 ops/s
[info]                  ·gc.alloc.rate:                   3513,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68004,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,832 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 78873,378 ops/s
[info]                  ·gc.alloc.rate:                   3517,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67943,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,246 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   79144,707 ±(99.9%) 1133,608 ops/s [Average]
[info]   (min, avg, max) = (78777,010, 79144,707, 79379,077), stdev = 294,394
[info]   CI (99.9%): [78011,098, 80278,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3529,578 ±(99.9%) 50,802 MB/sec [Average]
[info]   (min, avg, max) = (3513,240, 3529,578, 3540,213), stdev = 13,193
[info]   CI (99.9%): [3478,776, 3580,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70192,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (70192,005, 70192,006, 70192,006), stdev = 0,001
[info]   CI (99.9%): [70192,004, 70192,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3536,490 ±(99.9%) 1167,189 MB/sec [Average]
[info]   (min, avg, max) = (3393,922, 3536,490, 4078,667), stdev = 303,115
[info]   CI (99.9%): [2369,301, 4703,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70322,296 ±(99.9%) 22729,031 B/op [Average]
[info]   (min, avg, max) = (67303,628, 70322,296, 80867,960), stdev = 5902,657
[info]   CI (99.9%): [47593,264, 93051,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,571 ±(99.9%) 2,060 B/op [Average]
[info]   (min, avg, max) = (0,832, 1,571, 2,064), stdev = 0,535
[info]   CI (99.9%): [≈ 0, 3,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39,96% complete, ETA 01:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178906,940 ops/s
[info] # Warmup Iteration   2: 211528,118 ops/s
[info] # Warmup Iteration   3: 212420,509 ops/s
[info] # Warmup Iteration   4: 213229,133 ops/s
[info] # Warmup Iteration   5: 213219,846 ops/s
[info] Iteration   1: 213043,864 ops/s
[info]                  ·gc.alloc.rate:                   1498,622 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9921,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,308 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 213043,124 ops/s
[info]                  ·gc.alloc.rate:                   1498,622 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9921,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,308 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 211964,827 ops/s
[info]                  ·gc.alloc.rate:                   1491,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14977,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,464 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 205975,789 ops/s
[info]                  ·gc.alloc.rate:                   1449,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10286,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,318 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 204033,662 ops/s
[info]                  ·gc.alloc.rate:               1435,172 MB/sec
[info]                  ·gc.alloc.rate.norm:          11072,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10396,872 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   209612,253 ±(99.9%) 16497,885 ops/s [Average]
[info]   (min, avg, max) = (204033,662, 209612,253, 213043,864), stdev = 4284,448
[info]   CI (99.9%): [193114,368, 226110,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1474,565 ±(99.9%) 116,014 MB/sec [Average]
[info]   (min, avg, max) = (1435,172, 1474,565, 1498,622), stdev = 30,129
[info]   CI (99.9%): [1358,551, 1590,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11072,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11072,002, 11072,002, 11072,002), stdev = 0,001
[info]   CI (99.9%): [11072,002, 11072,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,394 ±(99.9%) 1157,782 MB/sec [Average]
[info]   (min, avg, max) = (1342,864, 1479,394, 2017,239), stdev = 300,672
[info]   CI (99.9%): [321,612, 2637,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11100,627 ±(99.9%) 8385,830 B/op [Average]
[info]   (min, avg, max) = (9921,243, 11100,627, 14977,537), stdev = 2177,773
[info]   CI (99.9%): [2714,797, 19486,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,279 ±(99.9%) 0,653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,279, 0,464), stdev = 0,170
[info]   CI (99.9%): [≈ 0, 0,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40,16% complete, ETA 01:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205826,658 ops/s
[info] # Warmup Iteration   2: 803958,204 ops/s
[info] # Warmup Iteration   3: 754181,294 ops/s
[info] # Warmup Iteration   4: 753452,049 ops/s
[info] # Warmup Iteration   5: 752761,470 ops/s
[info] Iteration   1: 753527,504 ops/s
[info]                  ·gc.alloc.rate:                   589,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1407,959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,416 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 757831,323 ops/s
[info]                  ·gc.alloc.rate:      593,203 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 754167,439 ops/s
[info]                  ·gc.alloc.rate:                   590,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1406,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 754708,055 ops/s
[info]                  ·gc.alloc.rate:                   590,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 753921,837 ops/s
[info]                  ·gc.alloc.rate:                   590,179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1404,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   754831,231 ±(99.9%) 6664,797 ops/s [Average]
[info]   (min, avg, max) = (753527,504, 754831,231, 757831,323), stdev = 1730,827
[info]   CI (99.9%): [748166,434, 761496,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   590,874 ±(99.9%) 5,184 MB/sec [Average]
[info]   (min, avg, max) = (589,866, 590,874, 593,203), stdev = 1,346
[info]   CI (99.9%): [585,690, 596,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,000, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,746 ±(99.9%) 1159,693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,746, 674,112), stdev = 301,169
[info]   CI (99.9%): [≈ 0, 1698,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1124,420 ±(99.9%) 2420,410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1124,420, 1407,959), stdev = 628,573
[info]   CI (99.9%): [≈ 0, 3544,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,531 ±(99.9%) 4,439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,593), stdev = 1,153
[info]   CI (99.9%): [≈ 0, 4,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,109 ±(99.9%) 9,271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,109, 5,416), stdev = 2,408
[info]   CI (99.9%): [≈ 0, 10,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,36% complete, ETA 01:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398700,144 ops/s
[info] # Warmup Iteration   2: 497377,349 ops/s
[info] # Warmup Iteration   3: 510089,121 ops/s
[info] # Warmup Iteration   4: 511373,872 ops/s
[info] # Warmup Iteration   5: 509778,059 ops/s
[info] Iteration   1: 508654,975 ops/s
[info]                  ·gc.alloc.rate:      522,261 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 511263,382 ops/s
[info]                  ·gc.alloc.rate:               524,920 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2066,899 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 512553,277 ops/s
[info]                  ·gc.alloc.rate:                   526,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2061,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 509992,684 ops/s
[info]                  ·gc.alloc.rate:                   523,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2075,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 507657,303 ops/s
[info]                  ·gc.alloc.rate:      521,155 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   510024,324 ±(99.9%) 7557,906 ops/s [Average]
[info]   (min, avg, max) = (507657,303, 510024,324, 512553,277), stdev = 1962,764
[info]   CI (99.9%): [502466,418, 517582,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   523,639 ±(99.9%) 7,786 MB/sec [Average]
[info]   (min, avg, max) = (521,155, 523,639, 526,217), stdev = 2,022
[info]   CI (99.9%): [515,853, 531,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1616,001, 1616,001, 1616,001), stdev = 0,001
[info]   CI (99.9%): [1616,001, 1616,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   403,022 ±(99.9%) 1416,679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 403,022, 672,397), stdev = 367,907
[info]   CI (99.9%): [≈ 0, 1819,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1240,721 ±(99.9%) 4361,348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1240,721, 2075,071), stdev = 1132,628
[info]   CI (99.9%): [≈ 0, 5602,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,051 ±(99.9%) 0,270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,051, 0,128), stdev = 0,070
[info]   CI (99.9%): [≈ 0, 0,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,56% complete, ETA 01:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 654531,098 ops/s
[info] # Warmup Iteration   2: 704325,141 ops/s
[info] # Warmup Iteration   3: 660038,980 ops/s
[info] # Warmup Iteration   4: 660595,439 ops/s
[info] # Warmup Iteration   5: 656408,258 ops/s
[info] Iteration   1: 661445,779 ops/s
[info]                  ·gc.alloc.rate:                   517,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1217,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 665900,419 ops/s
[info]                  ·gc.alloc.rate:      521,321 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 660712,210 ops/s
[info]                  ·gc.alloc.rate:                   517,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1607,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,436 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 661869,474 ops/s
[info]                  ·gc.alloc.rate:                   518,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1604,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 662252,544 ops/s
[info]                  ·gc.alloc.rate:                   518,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   662436,085 ±(99.9%) 7775,250 ops/s [Average]
[info]   (min, avg, max) = (660712,210, 662436,085, 665900,419), stdev = 2019,208
[info]   CI (99.9%): [654660,836, 670211,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   518,534 ±(99.9%) 6,247 MB/sec [Average]
[info]   (min, avg, max) = (517,144, 518,534, 521,321), stdev = 1,622
[info]   CI (99.9%): [512,288, 524,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,001, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,739 ±(99.9%) 1123,938 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,739, 674,764), stdev = 291,883
[info]   CI (99.9%): [≈ 0, 1630,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1205,584 ±(99.9%) 2673,861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1205,584, 1607,326), stdev = 694,393
[info]   CI (99.9%): [≈ 0, 3879,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,645 ±(99.9%) 5,331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,121), stdev = 1,384
[info]   CI (99.9%): [≈ 0, 5,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,536 ±(99.9%) 12,701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,536, 7,436), stdev = 3,298
[info]   CI (99.9%): [≈ 0, 14,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40,76% complete, ETA 01:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 744306,414 ops/s
[info] # Warmup Iteration   2: 794114,536 ops/s
[info] # Warmup Iteration   3: 808417,740 ops/s
[info] # Warmup Iteration   4: 807201,189 ops/s
[info] # Warmup Iteration   5: 808090,437 ops/s
[info] Iteration   1: 809896,057 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 807944,597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 803231,846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 804570,790 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 810077,617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   807144,181 ±(99.9%) 11984,606 ops/s [Average]
[info]   (min, avg, max) = (803231,846, 807144,181, 810077,617), stdev = 3112,364
[info]   CI (99.9%): [795159,575, 819128,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40,96% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25133,337 ops/s
[info] # Warmup Iteration   2: 33714,997 ops/s
[info] # Warmup Iteration   3: 33964,132 ops/s
[info] # Warmup Iteration   4: 33963,711 ops/s
[info] # Warmup Iteration   5: 34031,902 ops/s
[info] Iteration   1: 34070,423 ops/s
[info]                  ·gc.alloc.rate:                   1747,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92891,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,923 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33787,259 ops/s
[info]                  ·gc.alloc.rate:                   1732,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93777,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,848 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34105,730 ops/s
[info]                  ·gc.alloc.rate:               1748,586 MB/sec
[info]                  ·gc.alloc.rate.norm:          80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62026,275 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 33887,494 ops/s
[info]                  ·gc.alloc.rate:                   1737,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              80704,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93782,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,867 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 34176,226 ops/s
[info]                  ·gc.alloc.rate:               1752,266 MB/sec
[info]                  ·gc.alloc.rate.norm:          80704,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62117,614 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   34005,426 ±(99.9%) 623,765 ops/s [Average]
[info]   (min, avg, max) = (33787,259, 34005,426, 34176,226), stdev = 161,990
[info]   CI (99.9%): [33381,661, 34629,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1743,636 ±(99.9%) 31,478 MB/sec [Average]
[info]   (min, avg, max) = (1732,613, 1743,636, 1752,266), stdev = 8,175
[info]   CI (99.9%): [1712,158, 1775,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80704,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (80704,012, 80704,012, 80704,013), stdev = 0,001
[info]   CI (99.9%): [80704,010, 80704,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1747,211 ±(99.9%) 1409,297 MB/sec [Average]
[info]   (min, avg, max) = (1343,902, 1747,211, 2019,293), stdev = 365,990
[info]   CI (99.9%): [337,914, 3156,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80919,187 ±(99.9%) 66265,557 B/op [Average]
[info]   (min, avg, max) = (62026,275, 80919,187, 93782,509), stdev = 17208,955
[info]   CI (99.9%): [14653,629, 147184,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,128 ±(99.9%) 8,507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,128, 4,848), stdev = 2,209
[info]   CI (99.9%): [≈ 0, 10,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41,16% complete, ETA 01:18:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6570,254 ops/s
[info] # Warmup Iteration   2: 8790,969 ops/s
[info] # Warmup Iteration   3: 8904,240 ops/s
[info] # Warmup Iteration   4: 8950,074 ops/s
[info] # Warmup Iteration   5: 8959,238 ops/s
[info] Iteration   1: 8955,156 ops/s
[info]                  ·gc.alloc.rate:               1378,278 MB/sec
[info]                  ·gc.alloc.rate.norm:          242280,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 236184,222 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 8960,348 ops/s
[info]                  ·gc.alloc.rate:                   1379,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236052,453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,313 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 8958,658 ops/s
[info]                  ·gc.alloc.rate:               1379,181 MB/sec
[info]                  ·gc.alloc.rate.norm:          242293,653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 236222,171 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8946,695 ops/s
[info]                  ·gc.alloc.rate:                   1377,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236688,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,662 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8948,456 ops/s
[info]                  ·gc.alloc.rate:                   1377,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236869,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,661 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8953,863 ±(99.9%) 23,370 ops/s [Average]
[info]   (min, avg, max) = (8946,695, 8953,863, 8960,348), stdev = 6,069
[info]   CI (99.9%): [8930,493, 8977,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1378,376 ±(99.9%) 3,431 MB/sec [Average]
[info]   (min, avg, max) = (1377,392, 1378,376, 1379,384), stdev = 0,891
[info]   CI (99.9%): [1374,945, 1381,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242289,168 ±(99.9%) 32,279 B/op [Average]
[info]   (min, avg, max) = (242280,046, 242289,168, 242296,046), stdev = 8,383
[info]   CI (99.9%): [242256,888, 242321,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1344,891 ±(99.9%) 4,972 MB/sec [Average]
[info]   (min, avg, max) = (1343,600, 1344,891, 1346,793), stdev = 1,291
[info]   CI (99.9%): [1339,919, 1349,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   236403,367 ±(99.9%) 1365,003 B/op [Average]
[info]   (min, avg, max) = (236052,453, 236403,367, 236869,699), stdev = 354,487
[info]   CI (99.9%): [235038,364, 237768,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,927 ±(99.9%) 11,782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,927, 7,313), stdev = 3,060
[info]   CI (99.9%): [≈ 0, 14,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,37% complete, ETA 01:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5352,653 ops/s
[info] # Warmup Iteration   2: 8926,585 ops/s
[info] # Warmup Iteration   3: 9184,692 ops/s
[info] # Warmup Iteration   4: 9184,009 ops/s
[info] # Warmup Iteration   5: 9175,912 ops/s
[info] Iteration   1: 9179,046 ops/s
[info]                  ·gc.alloc.rate:                   1322,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231849,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,707 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9172,188 ops/s
[info]                  ·gc.alloc.rate:                   1321,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232229,584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,143 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9200,266 ops/s
[info]                  ·gc.alloc.rate:                   1325,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231693,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,561 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 9166,745 ops/s
[info]                  ·gc.alloc.rate:               1321,161 MB/sec
[info]                  ·gc.alloc.rate.norm:          226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232724,633 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 9190,669 ops/s
[info]                  ·gc.alloc.rate:                   1324,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232288,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,564 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9181,783 ±(99.9%) 52,595 ops/s [Average]
[info]   (min, avg, max) = (9166,745, 9181,783, 9200,266), stdev = 13,659
[info]   CI (99.9%): [9129,188, 9234,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1323,249 ±(99.9%) 7,269 MB/sec [Average]
[info]   (min, avg, max) = (1321,161, 1323,249, 1325,832), stdev = 1,888
[info]   CI (99.9%): [1315,979, 1330,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226824,045 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (226824,044, 226824,045, 226824,048), stdev = 0,002
[info]   CI (99.9%): [226824,039, 226824,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,359 ±(99.9%) 6,261 MB/sec [Average]
[info]   (min, avg, max) = (1352,238, 1354,359, 1356,312), stdev = 1,626
[info]   CI (99.9%): [1348,098, 1360,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   232157,141 ±(99.9%) 1556,689 B/op [Average]
[info]   (min, avg, max) = (231693,936, 232157,141, 232724,633), stdev = 404,267
[info]   CI (99.9%): [230600,452, 233713,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,995 ±(99.9%) 15,677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,995, 10,707), stdev = 4,071
[info]   CI (99.9%): [≈ 0, 20,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,57% complete, ETA 01:17:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162610,223 ops/s
[info] # Warmup Iteration   2: 173280,985 ops/s
[info] # Warmup Iteration   3: 172792,893 ops/s
[info] # Warmup Iteration   4: 172772,334 ops/s
[info] # Warmup Iteration   5: 174741,330 ops/s
[info] Iteration   1: 174111,510 ops/s
[info]                  ·gc.alloc.rate:                   1686,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18262,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,188 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 175026,977 ops/s
[info]                  ·gc.alloc.rate:                   1696,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12117,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,562 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 171947,086 ops/s
[info]                  ·gc.alloc.rate:               1666,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18517,912 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 174795,357 ops/s
[info]                  ·gc.alloc.rate:               1693,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12156,760 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 174634,898 ops/s
[info]                  ·gc.alloc.rate:                   1691,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18272,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   174103,166 ±(99.9%) 4818,710 ops/s [Average]
[info]   (min, avg, max) = (171947,086, 174103,166, 175026,977), stdev = 1251,404
[info]   CI (99.9%): [169284,456, 178921,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1686,843 ±(99.9%) 46,693 MB/sec [Average]
[info]   (min, avg, max) = (1666,021, 1686,843, 1696,161), stdev = 12,126
[info]   CI (99.9%): [1640,150, 1733,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15248,002, 15248,002, 15248,003), stdev = 0,001
[info]   CI (99.9%): [15248,002, 15248,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1753,820 ±(99.9%) 1422,851 MB/sec [Average]
[info]   (min, avg, max) = (1347,962, 1753,820, 2027,335), stdev = 369,510
[info]   CI (99.9%): [330,969, 3176,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15865,637 ±(99.9%) 13111,709 B/op [Average]
[info]   (min, avg, max) = (12117,799, 15865,637, 18517,912), stdev = 3405,069
[info]   CI (99.9%): [2753,928, 28977,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,225 ±(99.9%) 0,940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,225, 0,562), stdev = 0,244
[info]   CI (99.9%): [≈ 0, 1,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,77% complete, ETA 01:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5017,908 ops/s
[info] # Warmup Iteration   2: 8092,936 ops/s
[info] # Warmup Iteration   3: 8317,917 ops/s
[info] # Warmup Iteration   4: 8359,780 ops/s
[info] # Warmup Iteration   5: 8266,223 ops/s
[info] Iteration   1: 8283,147 ops/s
[info]                  ·gc.alloc.rate:                   1506,436 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257145,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,909 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8303,897 ops/s
[info]                  ·gc.alloc.rate:                   1510,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385104,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,945 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8328,184 ops/s
[info]                  ·gc.alloc.rate:               1514,698 MB/sec
[info]                  ·gc.alloc.rate.norm:          286246,156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 256196,909 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8312,475 ops/s
[info]                  ·gc.alloc.rate:                   1511,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              286241,180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256879,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,941 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8361,040 ops/s
[info]                  ·gc.alloc.rate:                   1520,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255499,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,918 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8317,749 ±(99.9%) 112,264 ops/s [Average]
[info]   (min, avg, max) = (8283,147, 8317,749, 8361,040), stdev = 29,155
[info]   CI (99.9%): [8205,485, 8430,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1512,736 ±(99.9%) 20,243 MB/sec [Average]
[info]   (min, avg, max) = (1506,436, 1512,736, 1520,472), stdev = 5,257
[info]   CI (99.9%): [1492,493, 1532,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286241,497 ±(99.9%) 10,204 B/op [Average]
[info]   (min, avg, max) = (286240,049, 286241,497, 286246,156), stdev = 2,650
[info]   CI (99.9%): [286231,293, 286251,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,958 ±(99.9%) 1164,262 MB/sec [Average]
[info]   (min, avg, max) = (1353,315, 1490,958, 2031,820), stdev = 302,355
[info]   CI (99.9%): [326,696, 2655,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   282165,140 ±(99.9%) 221599,203 B/op [Average]
[info]   (min, avg, max) = (255499,508, 282165,140, 385104,875), stdev = 57548,609
[info]   CI (99.9%): [60565,938, 503764,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,943 ±(99.9%) 10,768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,943, 7,909), stdev = 2,796
[info]   CI (99.9%): [≈ 0, 14,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41,97% complete, ETA 01:17:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6863,884 ops/s
[info] # Warmup Iteration   2: 9498,472 ops/s
[info] # Warmup Iteration   3: 9439,984 ops/s
[info] # Warmup Iteration   4: 9509,634 ops/s
[info] # Warmup Iteration   5: 9541,936 ops/s
[info] Iteration   1: 9558,223 ops/s
[info]                  ·gc.alloc.rate:               1324,302 MB/sec
[info]                  ·gc.alloc.rate.norm:          218072,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 221537,864 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 9572,571 ops/s
[info]                  ·gc.alloc.rate:               1326,465 MB/sec
[info]                  ·gc.alloc.rate.norm:          218078,455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 221213,945 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 9603,931 ops/s
[info]                  ·gc.alloc.rate:                   1330,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220609,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,411 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9607,357 ops/s
[info]                  ·gc.alloc.rate:                   1331,304 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220626,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,820 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9607,205 ops/s
[info]                  ·gc.alloc.rate:                   1331,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              218096,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220844,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,229 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   9589,857 ±(99.9%) 88,330 ops/s [Average]
[info]   (min, avg, max) = (9558,223, 9589,857, 9607,357), stdev = 22,939
[info]   CI (99.9%): [9501,527, 9678,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1328,750 ±(99.9%) 12,244 MB/sec [Average]
[info]   (min, avg, max) = (1324,302, 1328,750, 1331,304), stdev = 3,180
[info]   CI (99.9%): [1316,506, 1340,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   218087,725 ±(99.9%) 44,716 B/op [Average]
[info]   (min, avg, max) = (218072,043, 218087,725, 218096,042), stdev = 11,613
[info]   CI (99.9%): [218043,009, 218132,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1346,285 ±(99.9%) 4,086 MB/sec [Average]
[info]   (min, avg, max) = (1345,349, 1346,285, 1347,921), stdev = 1,061
[info]   CI (99.9%): [1342,199, 1350,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   220966,450 ±(99.9%) 1547,183 B/op [Average]
[info]   (min, avg, max) = (220609,213, 220966,450, 221537,864), stdev = 401,799
[info]   CI (99.9%): [219419,266, 222513,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,092 ±(99.9%) 17,119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,092, 10,229), stdev = 4,446
[info]   CI (99.9%): [≈ 0, 21,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42,17% complete, ETA 01:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15220,204 ops/s
[info] # Warmup Iteration   2: 20431,412 ops/s
[info] # Warmup Iteration   3: 20334,573 ops/s
[info] # Warmup Iteration   4: 20539,652 ops/s
[info] # Warmup Iteration   5: 20201,681 ops/s
[info] Iteration   1: 20401,170 ops/s
[info]                  ·gc.alloc.rate:               925,796 MB/sec
[info]                  ·gc.alloc.rate.norm:          71421,100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51848,142 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20454,217 ops/s
[info]                  ·gc.alloc.rate:               928,073 MB/sec
[info]                  ·gc.alloc.rate.norm:          71408,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51711,299 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 20394,905 ops/s
[info]                  ·gc.alloc.rate:                   925,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103623,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20324,331 ops/s
[info]                  ·gc.alloc.rate:               922,195 MB/sec
[info]                  ·gc.alloc.rate.norm:          71408,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51990,389 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 20306,634 ops/s
[info]                  ·gc.alloc.rate:                   921,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104072,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,226 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20376,251 ±(99.9%) 232,557 ops/s [Average]
[info]   (min, avg, max) = (20306,634, 20376,251, 20454,217), stdev = 60,394
[info]   CI (99.9%): [20143,694, 20608,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   924,520 ±(99.9%) 10,767 MB/sec [Average]
[info]   (min, avg, max) = (921,209, 924,520, 928,073), stdev = 2,796
[info]   CI (99.9%): [913,753, 935,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71410,637 ±(99.9%) 22,524 B/op [Average]
[info]   (min, avg, max) = (71408,020, 71410,637, 71421,100), stdev = 5,849
[info]   CI (99.9%): [71388,113, 71433,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,197 ±(99.9%) 1414,852 MB/sec [Average]
[info]   (min, avg, max) = (671,427, 940,197, 1342,793), stdev = 367,433
[info]   CI (99.9%): [≈ 0, 2355,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   72649,347 ±(99.9%) 109671,612 B/op [Average]
[info]   (min, avg, max) = (51711,299, 72649,347, 104072,923), stdev = 28481,369
[info]   CI (99.9%): [≈ 0, 182320,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,930 ±(99.9%) 11,070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,930, 6,425), stdev = 2,875
[info]   CI (99.9%): [≈ 0, 13,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,37% complete, ETA 01:16:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16750,406 ops/s
[info] # Warmup Iteration   2: 23926,464 ops/s
[info] # Warmup Iteration   3: 24037,527 ops/s
[info] # Warmup Iteration   4: 24133,926 ops/s
[info] # Warmup Iteration   5: 23976,022 ops/s
[info] Iteration   1: 23971,447 ops/s
[info]                  ·gc.alloc.rate:               1015,796 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44322,967 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 23891,137 ops/s
[info]                  ·gc.alloc.rate:                   1012,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89037,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,485 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 24146,244 ops/s
[info]                  ·gc.alloc.rate:               1023,163 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44088,644 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 24050,153 ops/s
[info]                  ·gc.alloc.rate:                   1019,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88569,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,724 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 24136,945 ops/s
[info]                  ·gc.alloc.rate:               1022,723 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44148,511 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24039,185 ±(99.9%) 420,257 ops/s [Average]
[info]   (min, avg, max) = (23891,137, 24039,185, 24146,244), stdev = 109,139
[info]   CI (99.9%): [23618,928, 24459,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1018,674 ±(99.9%) 17,593 MB/sec [Average]
[info]   (min, avg, max) = (1012,479, 1018,674, 1023,163), stdev = 4,569
[info]   CI (99.9%): [1001,081, 1036,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696,018 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66696,017, 66696,018, 66696,018), stdev = 0,001
[info]   CI (99.9%): [66696,015, 66696,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,695 ±(99.9%) 1426,639 MB/sec [Average]
[info]   (min, avg, max) = (675,049, 946,695, 1353,458), stdev = 370,494
[info]   CI (99.9%): [≈ 0, 2373,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62033,422 ±(99.9%) 94103,322 B/op [Average]
[info]   (min, avg, max) = (44088,644, 62033,422, 89037,903), stdev = 24438,334
[info]   CI (99.9%): [≈ 0, 156136,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,642 ±(99.9%) 9,438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,642, 5,485), stdev = 2,451
[info]   CI (99.9%): [≈ 0, 11,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,57% complete, ETA 01:16:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 479134,617 ops/s
[info] # Warmup Iteration   2: 507729,809 ops/s
[info] # Warmup Iteration   3: 507950,334 ops/s
[info] # Warmup Iteration   4: 509618,020 ops/s
[info] # Warmup Iteration   5: 509156,573 ops/s
[info] Iteration   1: 509130,420 ops/s
[info]                  ·gc.alloc.rate:               1154,155 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2081,717 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 507358,128 ops/s
[info]                  ·gc.alloc.rate:                   1150,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4177,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 509295,006 ops/s
[info]                  ·gc.alloc.rate:                   1154,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4162,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,193 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 508614,217 ops/s
[info]                  ·gc.alloc.rate:               1153,060 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2083,837 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 508849,091 ops/s
[info]                  ·gc.alloc.rate:                   1153,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4167,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,193 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   508649,372 ±(99.9%) 2955,658 ops/s [Average]
[info]   (min, avg, max) = (507358,128, 508649,372, 509295,006), stdev = 767,575
[info]   CI (99.9%): [505693,715, 511605,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1153,098 ±(99.9%) 6,646 MB/sec [Average]
[info]   (min, avg, max) = (1150,210, 1153,098, 1154,626), stdev = 1,726
[info]   CI (99.9%): [1146,453, 1159,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3568,001, 3568,001, 3568,001), stdev = 0,001
[info]   CI (99.9%): [3568,001, 3568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,571 ±(99.9%) 1420,705 MB/sec [Average]
[info]   (min, avg, max) = (673,381, 1077,571, 1347,326), stdev = 368,953
[info]   CI (99.9%): [≈ 0, 2498,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3334,675 ±(99.9%) 4400,652 B/op [Average]
[info]   (min, avg, max) = (2081,717, 3334,675, 4177,981), stdev = 1142,835
[info]   CI (99.9%): [≈ 0, 7735,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,129 ±(99.9%) 0,464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,129, 0,258), stdev = 0,121
[info]   CI (99.9%): [≈ 0, 0,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42,77% complete, ETA 01:16:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542845,280 ops/s
[info] # Warmup Iteration   2: 575356,522 ops/s
[info] # Warmup Iteration   3: 576204,521 ops/s
[info] # Warmup Iteration   4: 574342,466 ops/s
[info] # Warmup Iteration   5: 573087,542 ops/s
[info] Iteration   1: 576489,437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 574944,073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 574677,077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 575358,708 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 575483,730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   575390,605 ±(99.9%) 2671,715 ops/s [Average]
[info]   (min, avg, max) = (574677,077, 575390,605, 576489,437), stdev = 693,836
[info]   CI (99.9%): [572718,890, 578062,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42,97% complete, ETA 01:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17021,765 ops/s
[info] # Warmup Iteration   2: 21746,089 ops/s
[info] # Warmup Iteration   3: 21930,350 ops/s
[info] # Warmup Iteration   4: 21979,327 ops/s
[info] # Warmup Iteration   5: 21924,610 ops/s
[info] Iteration   1: 22080,469 ops/s
[info]                  ·gc.alloc.rate:                   1017,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              72563,568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95618,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,935 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 22145,141 ops/s
[info]                  ·gc.alloc.rate:               1020,970 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47625,963 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 22109,951 ops/s
[info]                  ·gc.alloc.rate:                   1019,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95394,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,963 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22071,951 ops/s
[info]                  ·gc.alloc.rate:               1017,609 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47779,122 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 21965,577 ops/s
[info]                  ·gc.alloc.rate:                   1012,559 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96019,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,491 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   22074,618 ±(99.9%) 259,406 ops/s [Average]
[info]   (min, avg, max) = (21965,577, 22074,618, 22145,141), stdev = 67,367
[info]   CI (99.9%): [21815,212, 22334,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1017,671 ±(99.9%) 12,116 MB/sec [Average]
[info]   (min, avg, max) = (1012,559, 1017,671, 1020,970), stdev = 3,146
[info]   CI (99.9%): [1005,555, 1029,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72560,729 ±(99.9%) 6,111 B/op [Average]
[info]   (min, avg, max) = (72560,018, 72560,729, 72563,568), stdev = 1,587
[info]   CI (99.9%): [72554,618, 72566,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,305 ±(99.9%) 1413,804 MB/sec [Average]
[info]   (min, avg, max) = (670,072, 1072,305, 1341,394), stdev = 367,160
[info]   CI (99.9%): [≈ 0, 2486,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76487,394 ±(99.9%) 101186,700 B/op [Average]
[info]   (min, avg, max) = (47625,963, 76487,394, 96019,248), stdev = 26277,865
[info]   CI (99.9%): [≈ 0, 177674,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,078 ±(99.9%) 9,557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,078, 5,935), stdev = 2,482
[info]   CI (99.9%): [≈ 0, 11,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43,17% complete, ETA 01:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10561,770 ops/s
[info] # Warmup Iteration   2: 11281,790 ops/s
[info] # Warmup Iteration   3: 11343,343 ops/s
[info] # Warmup Iteration   4: 11330,898 ops/s
[info] # Warmup Iteration   5: 11306,729 ops/s
[info] Iteration   1: 11230,777 ops/s
[info]                  ·gc.alloc.rate:                   629,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              88267,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94654,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 397,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11216,409 ops/s
[info]                  ·gc.alloc.rate:                   629,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94772,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,921 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11379,416 ops/s
[info]                  ·gc.alloc.rate:               638,158 MB/sec
[info]                  ·gc.alloc.rate.norm:          88264,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93131,014 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 11360,109 ops/s
[info]                  ·gc.alloc.rate:      637,105 MB/sec
[info]                  ·gc.alloc.rate.norm: 88264,039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 11334,719 ops/s
[info]                  ·gc.alloc.rate:                   635,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93500,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,780 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   11304,286 ±(99.9%) 290,799 ops/s [Average]
[info]   (min, avg, max) = (11216,409, 11304,286, 11379,416), stdev = 75,520
[info]   CI (99.9%): [11013,487, 11595,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   633,961 ±(99.9%) 16,168 MB/sec [Average]
[info]   (min, avg, max) = (629,086, 633,961, 638,158), stdev = 4,199
[info]   CI (99.9%): [617,793, 650,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88264,633 ±(99.9%) 5,108 B/op [Average]
[info]   (min, avg, max) = (88264,036, 88264,633, 88267,006), stdev = 1,327
[info]   CI (99.9%): [88259,525, 88269,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   539,514 ±(99.9%) 1161,352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,514, 675,476), stdev = 301,599
[info]   CI (99.9%): [≈ 0, 1700,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   75211,829 ±(99.9%) 161922,365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75211,829, 94772,802), stdev = 42050,724
[info]   CI (99.9%): [≈ 0, 237134,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,579 ±(99.9%) 4,852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,579, 2,833), stdev = 1,260
[info]   CI (99.9%): [≈ 0, 5,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   81,143 ±(99.9%) 679,995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81,143, 397,012), stdev = 176,593
[info]   CI (99.9%): [≈ 0, 761,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43,37% complete, ETA 01:15:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11874,799 ops/s
[info] # Warmup Iteration   2: 15212,617 ops/s
[info] # Warmup Iteration   3: 15244,331 ops/s
[info] # Warmup Iteration   4: 15151,755 ops/s
[info] # Warmup Iteration   5: 15209,681 ops/s
[info] Iteration   1: 15255,656 ops/s
[info]                  ·gc.alloc.rate:                   1512,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              156064,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138527,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,147 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15273,510 ops/s
[info]                  ·gc.alloc.rate:               1514,310 MB/sec
[info]                  ·gc.alloc.rate.norm:          156064,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138519,663 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 15260,925 ops/s
[info]                  ·gc.alloc.rate:                   1513,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              156064,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208100,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,586 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15269,555 ops/s
[info]                  ·gc.alloc.rate:                   1514,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              156064,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138812,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,145 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15306,140 ops/s
[info]                  ·gc.alloc.rate:               1517,590 MB/sec
[info]                  ·gc.alloc.rate.norm:          156064,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138622,980 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   15273,157 ±(99.9%) 75,968 ops/s [Average]
[info]   (min, avg, max) = (15255,656, 15273,157, 15306,140), stdev = 19,729
[info]   CI (99.9%): [15197,189, 15349,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1514,427 ±(99.9%) 7,262 MB/sec [Average]
[info]   (min, avg, max) = (1512,711, 1514,427, 1517,590), stdev = 1,886
[info]   CI (99.9%): [1507,165, 1521,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   156064,029 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (156064,027, 156064,029, 156064,034), stdev = 0,003
[info]   CI (99.9%): [156064,018, 156064,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1479,907 ±(99.9%) 1158,147 MB/sec [Average]
[info]   (min, avg, max) = (1342,731, 1479,907, 2017,922), stdev = 300,767
[info]   CI (99.9%): [321,760, 2638,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   152516,694 ±(99.9%) 119650,163 B/op [Average]
[info]   (min, avg, max) = (138519,663, 152516,694, 208100,949), stdev = 31072,767
[info]   CI (99.9%): [32866,530, 272166,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,576 ±(99.9%) 13,582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,576, 8,586), stdev = 3,527
[info]   CI (99.9%): [≈ 0, 16,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,57% complete, ETA 01:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9463,464 ops/s
[info] # Warmup Iteration   2: 15269,157 ops/s
[info] # Warmup Iteration   3: 15187,838 ops/s
[info] # Warmup Iteration   4: 15198,446 ops/s
[info] # Warmup Iteration   5: 15259,408 ops/s
[info] Iteration   1: 15251,553 ops/s
[info]                  ·gc.alloc.rate:                   1395,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              144048,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139526,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,592 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 15234,775 ops/s
[info]                  ·gc.alloc.rate:                   1394,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              144048,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209694,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,301 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 15311,463 ops/s
[info]                  ·gc.alloc.rate:               1401,344 MB/sec
[info]                  ·gc.alloc.rate.norm:          144035,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139271,489 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 15311,872 ops/s
[info]                  ·gc.alloc.rate:                   1401,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              144016,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139390,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,418 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15333,222 ops/s
[info]                  ·gc.alloc.rate:                   1402,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              144016,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139267,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,273 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   15288,577 ±(99.9%) 164,781 ops/s [Average]
[info]   (min, avg, max) = (15234,775, 15288,577, 15333,222), stdev = 42,793
[info]   CI (99.9%): [15123,796, 15453,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1399,077 ±(99.9%) 14,501 MB/sec [Average]
[info]   (min, avg, max) = (1394,299, 1399,077, 1402,867), stdev = 3,766
[info]   CI (99.9%): [1384,576, 1413,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144032,640 ±(99.9%) 61,840 B/op [Average]
[info]   (min, avg, max) = (144016,027, 144032,640, 144048,031), stdev = 16,060
[info]   CI (99.9%): [143970,800, 144094,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1489,877 ±(99.9%) 1162,067 MB/sec [Average]
[info]   (min, avg, max) = (1352,015, 1489,877, 2029,718), stdev = 301,785
[info]   CI (99.9%): [327,810, 2651,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   153430,011 ±(99.9%) 121114,363 B/op [Average]
[info]   (min, avg, max) = (139267,739, 153430,011, 209694,557), stdev = 31453,016
[info]   CI (99.9%): [32315,647, 274544,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,717 ±(99.9%) 12,257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,717, 8,592), stdev = 3,183
[info]   CI (99.9%): [≈ 0, 16,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,78% complete, ETA 01:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259584,743 ops/s
[info] # Warmup Iteration   2: 273989,449 ops/s
[info] # Warmup Iteration   3: 276021,166 ops/s
[info] # Warmup Iteration   4: 278102,285 ops/s
[info] # Warmup Iteration   5: 274959,167 ops/s
[info] Iteration   1: 278050,710 ops/s
[info]                  ·gc.alloc.rate:                   1608,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7609,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 277831,791 ops/s
[info]                  ·gc.alloc.rate:                   1607,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11430,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 278255,268 ops/s
[info]                  ·gc.alloc.rate:                   1609,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7618,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 277879,748 ops/s
[info]                  ·gc.alloc.rate:                   1607,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7636,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 277249,995 ops/s
[info]                  ·gc.alloc.rate:                   1603,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11495,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   277853,502 ±(99.9%) 1448,077 ops/s [Average]
[info]   (min, avg, max) = (277249,995, 277853,502, 278255,268), stdev = 376,061
[info]   CI (99.9%): [276405,425, 279301,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1607,124 ±(99.9%) 8,553 MB/sec [Average]
[info]   (min, avg, max) = (1603,534, 1607,124, 1609,463), stdev = 2,221
[info]   CI (99.9%): [1598,571, 1615,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9104,001, 9104,002, 9104,002), stdev = 0,001
[info]   CI (99.9%): [9104,001, 9104,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1616,339 ±(99.9%) 1423,268 MB/sec [Average]
[info]   (min, avg, max) = (1344,223, 1616,339, 2024,734), stdev = 369,618
[info]   CI (99.9%): [193,071, 3039,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9157,976 ±(99.9%) 8102,711 B/op [Average]
[info]   (min, avg, max) = (7609,252, 9157,976, 11495,346), stdev = 2104,248
[info]   CI (99.9%): [1055,265, 17260,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,330 ±(99.9%) 0,497 B/op [Average]
[info]   (min, avg, max) = (0,236, 0,330, 0,472), stdev = 0,129
[info]   CI (99.9%): [≈ 0, 0,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43,98% complete, ETA 01:14:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6913,942 ops/s
[info] # Warmup Iteration   2: 13515,161 ops/s
[info] # Warmup Iteration   3: 13657,553 ops/s
[info] # Warmup Iteration   4: 13652,041 ops/s
[info] # Warmup Iteration   5: 13605,816 ops/s
[info] Iteration   1: 13539,238 ops/s
[info]                  ·gc.alloc.rate:                   1694,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235933,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13669,164 ops/s
[info]                  ·gc.alloc.rate:                   1710,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155921,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,587 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13636,098 ops/s
[info]                  ·gc.alloc.rate:                   1706,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234699,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,805 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13621,234 ops/s
[info]                  ·gc.alloc.rate:               1704,858 MB/sec
[info]                  ·gc.alloc.rate.norm:          196976,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156766,922 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 13584,999 ops/s
[info]                  ·gc.alloc.rate:                   1700,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              196976,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235906,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,058 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13610,147 ±(99.9%) 191,953 ops/s [Average]
[info]   (min, avg, max) = (13539,238, 13610,147, 13669,164), stdev = 49,850
[info]   CI (99.9%): [13418,194, 13802,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1703,329 ±(99.9%) 24,198 MB/sec [Average]
[info]   (min, avg, max) = (1694,464, 1703,329, 1710,807), stdev = 6,284
[info]   CI (99.9%): [1679,131, 1727,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   196976,032 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (196976,030, 196976,032, 196976,038), stdev = 0,004
[info]   CI (99.9%): [196976,019, 196976,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1761,998 ±(99.9%) 1428,801 MB/sec [Average]
[info]   (min, avg, max) = (1354,231, 1761,998, 2036,000), stdev = 371,055
[info]   CI (99.9%): [333,197, 3190,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   203845,534 ±(99.9%) 166989,316 B/op [Average]
[info]   (min, avg, max) = (155921,226, 203845,534, 235933,472), stdev = 43366,595
[info]   CI (99.9%): [36856,217, 370834,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,742 ±(99.9%) 17,837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,742, 12,058), stdev = 4,632
[info]   CI (99.9%): [≈ 0, 24,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44,18% complete, ETA 01:14:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11816,258 ops/s
[info] # Warmup Iteration   2: 14713,249 ops/s
[info] # Warmup Iteration   3: 14701,368 ops/s
[info] # Warmup Iteration   4: 14777,960 ops/s
[info] # Warmup Iteration   5: 14758,575 ops/s
[info] Iteration   1: 14721,668 ops/s
[info]                  ·gc.alloc.rate:                   1437,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              153656,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143693,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14772,979 ops/s
[info]                  ·gc.alloc.rate:               1442,428 MB/sec
[info]                  ·gc.alloc.rate.norm:          153656,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 214810,473 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 14747,441 ops/s
[info]                  ·gc.alloc.rate:               1439,679 MB/sec
[info]                  ·gc.alloc.rate.norm:          153647,144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 143511,046 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 14775,886 ops/s
[info]                  ·gc.alloc.rate:                   1442,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              153632,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143381,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,434 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 14700,248 ops/s
[info]                  ·gc.alloc.rate:               1434,841 MB/sec
[info]                  ·gc.alloc.rate.norm:          153632,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144264,775 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   14743,644 ±(99.9%) 125,968 ops/s [Average]
[info]   (min, avg, max) = (14700,248, 14743,644, 14775,886), stdev = 32,714
[info]   CI (99.9%): [14617,676, 14869,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1439,330 ±(99.9%) 12,762 MB/sec [Average]
[info]   (min, avg, max) = (1434,841, 1439,330, 1442,452), stdev = 3,314
[info]   CI (99.9%): [1426,569, 1452,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   153644,651 ±(99.9%) 46,520 B/op [Average]
[info]   (min, avg, max) = (153632,028, 153644,651, 153656,030), stdev = 12,081
[info]   CI (99.9%): [153598,131, 153691,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1479,767 ±(99.9%) 1155,386 MB/sec [Average]
[info]   (min, avg, max) = (1344,061, 1479,767, 2016,508), stdev = 300,050
[info]   CI (99.9%): [324,381, 2635,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   157932,115 ±(99.9%) 122441,854 B/op [Average]
[info]   (min, avg, max) = (143381,062, 157932,115, 214810,473), stdev = 31797,761
[info]   CI (99.9%): [35490,261, 280373,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,332 ±(99.9%) 7,639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,332, 4,434), stdev = 1,984
[info]   CI (99.9%): [≈ 0, 8,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44,38% complete, ETA 01:13:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24812,294 ops/s
[info] # Warmup Iteration   2: 31755,747 ops/s
[info] # Warmup Iteration   3: 31583,582 ops/s
[info] # Warmup Iteration   4: 31713,364 ops/s
[info] # Warmup Iteration   5: 31520,060 ops/s
[info] Iteration   1: 31824,156 ops/s
[info]                  ·gc.alloc.rate:                   1098,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66441,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,088 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31767,123 ops/s
[info]                  ·gc.alloc.rate:               1096,240 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33266,126 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 31848,524 ops/s
[info]                  ·gc.alloc.rate:                   1099,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66356,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,086 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31632,671 ops/s
[info]                  ·gc.alloc.rate:               1091,633 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33405,961 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 31909,341 ops/s
[info]                  ·gc.alloc.rate:               1101,014 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66248,504 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   31796,363 ±(99.9%) 403,433 ops/s [Average]
[info]   (min, avg, max) = (31632,671, 31796,363, 31909,341), stdev = 104,770
[info]   CI (99.9%): [31392,929, 32199,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1097,238 ±(99.9%) 13,747 MB/sec [Average]
[info]   (min, avg, max) = (1091,633, 1097,238, 1101,014), stdev = 3,570
[info]   CI (99.9%): [1083,490, 1110,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (54312,013, 54312,013, 54312,015), stdev = 0,001
[info]   CI (99.9%): [54312,010, 54312,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,439 ±(99.9%) 1416,591 MB/sec [Average]
[info]   (min, avg, max) = (671,436, 1074,439, 1343,530), stdev = 367,884
[info]   CI (99.9%): [≈ 0, 2491,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53143,857 ±(99.9%) 69628,017 B/op [Average]
[info]   (min, avg, max) = (33266,126, 53143,857, 66441,876), stdev = 18082,175
[info]   CI (99.9%): [≈ 0, 122771,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,235 ±(99.9%) 6,511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,235, 3,088), stdev = 1,691
[info]   CI (99.9%): [≈ 0, 7,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,58% complete, ETA 01:13:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63388,446 ops/s
[info] # Warmup Iteration   2: 89568,774 ops/s
[info] # Warmup Iteration   3: 89772,536 ops/s
[info] # Warmup Iteration   4: 89466,106 ops/s
[info] # Warmup Iteration   5: 88609,953 ops/s
[info] Iteration   1: 89036,684 ops/s
[info]                  ·gc.alloc.rate:                   1591,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23924,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,736 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 89488,510 ops/s
[info]                  ·gc.alloc.rate:                   1599,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35736,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,098 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 89092,662 ops/s
[info]                  ·gc.alloc.rate:                   1592,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23956,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,735 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 89474,376 ops/s
[info]                  ·gc.alloc.rate:                   1599,101 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23877,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,366 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 89370,900 ops/s
[info]                  ·gc.alloc.rate:                   1597,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35870,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,733 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   89292,626 ±(99.9%) 823,674 ops/s [Average]
[info]   (min, avg, max) = (89036,684, 89292,626, 89488,510), stdev = 213,906
[info]   CI (99.9%): [88468,952, 90116,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1595,777 ±(99.9%) 14,707 MB/sec [Average]
[info]   (min, avg, max) = (1591,209, 1595,777, 1599,283), stdev = 3,819
[info]   CI (99.9%): [1581,070, 1610,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   28128,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28128,005, 28128,005, 28128,005), stdev = 0,001
[info]   CI (99.9%): [28128,004, 28128,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1627,096 ±(99.9%) 1431,246 MB/sec [Average]
[info]   (min, avg, max) = (1353,410, 1627,096, 2036,641), stdev = 371,690
[info]   CI (99.9%): [195,850, 3058,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28672,977 ±(99.9%) 25064,746 B/op [Average]
[info]   (min, avg, max) = (23877,872, 28672,977, 35870,207), stdev = 6509,235
[info]   CI (99.9%): [3608,231, 53737,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,734 ±(99.9%) 0,997 B/op [Average]
[info]   (min, avg, max) = (0,366, 0,734, 1,098), stdev = 0,259
[info]   CI (99.9%): [≈ 0, 1,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,78% complete, ETA 01:13:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729360,091 ops/s
[info] # Warmup Iteration   2: 760581,948 ops/s
[info] # Warmup Iteration   3: 760791,785 ops/s
[info] # Warmup Iteration   4: 763849,695 ops/s
[info] # Warmup Iteration   5: 756503,390 ops/s
[info] Iteration   1: 754875,709 ops/s
[info]                  ·gc.alloc.rate:                   1035,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 761010,726 ops/s
[info]                  ·gc.alloc.rate:                   1044,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2780,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 762099,558 ops/s
[info]                  ·gc.alloc.rate:               1045,861 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1387,971 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 759991,725 ops/s
[info]                  ·gc.alloc.rate:                   1043,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2783,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 761317,997 ops/s
[info]                  ·gc.alloc.rate:               1044,744 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2780,163 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   759859,143 ±(99.9%) 11114,637 ops/s [Average]
[info]   (min, avg, max) = (754875,709, 759859,143, 762099,558), stdev = 2886,436
[info]   CI (99.9%): [748744,506, 770973,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1042,790 ±(99.9%) 15,267 MB/sec [Average]
[info]   (min, avg, max) = (1035,935, 1042,790, 1045,861), stdev = 3,965
[info]   CI (99.9%): [1027,522, 1058,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2160,001, 2160,001, 2160,001), stdev = 0,001
[info]   CI (99.9%): [2160,000, 2160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,566 ±(99.9%) 1417,278 MB/sec [Average]
[info]   (min, avg, max) = (672,049, 1075,566, 1344,703), stdev = 368,063
[info]   CI (99.9%): [≈ 0, 2492,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2226,901 ±(99.9%) 2923,274 B/op [Average]
[info]   (min, avg, max) = (1387,971, 2226,901, 2783,612), stdev = 759,165
[info]   CI (99.9%): [≈ 0, 5150,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,052 ±(99.9%) 0,216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,052, 0,129), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44,98% complete, ETA 01:13:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 855419,194 ops/s
[info] # Warmup Iteration   2: 896862,175 ops/s
[info] # Warmup Iteration   3: 896578,014 ops/s
[info] # Warmup Iteration   4: 898427,214 ops/s
[info] # Warmup Iteration   5: 896472,479 ops/s
[info] Iteration   1: 898350,844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 899856,428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 898233,806 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 896811,750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 898245,336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   898299,633 ±(99.9%) 4150,536 ops/s [Average]
[info]   (min, avg, max) = (896811,750, 898299,633, 899856,428), stdev = 1077,881
[info]   CI (99.9%): [894149,096, 902450,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45,18% complete, ETA 01:12:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51941,828 ops/s
[info] # Warmup Iteration   2: 81176,865 ops/s
[info] # Warmup Iteration   3: 81266,546 ops/s
[info] # Warmup Iteration   4: 81838,786 ops/s
[info] # Warmup Iteration   5: 81327,738 ops/s
[info] Iteration   1: 81855,078 ops/s
[info]                  ·gc.alloc.rate:                   1605,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26013,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,801 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81214,255 ops/s
[info]                  ·gc.alloc.rate:                   1593,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39370,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,210 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 81531,961 ops/s
[info]                  ·gc.alloc.rate:                   1599,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26165,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,402 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 81387,079 ops/s
[info]                  ·gc.alloc.rate:                   1596,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26225,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 81430,409 ops/s
[info]                  ·gc.alloc.rate:               1597,042 MB/sec
[info]                  ·gc.alloc.rate.norm:          30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2036,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39361,831 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   81483,756 ±(99.9%) 913,314 ops/s [Average]
[info]   (min, avg, max) = (81214,255, 81483,756, 81855,078), stdev = 237,185
[info]   CI (99.9%): [80570,442, 82397,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1598,310 ±(99.9%) 18,012 MB/sec [Average]
[info]   (min, avg, max) = (1593,093, 1598,310, 1605,707), stdev = 4,678
[info]   CI (99.9%): [1580,298, 1616,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30872,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (30872,005, 30872,005, 30872,005), stdev = 0,001
[info]   CI (99.9%): [30872,004, 30872,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1626,498 ±(99.9%) 1432,237 MB/sec [Average]
[info]   (min, avg, max) = (1352,998, 1626,498, 2036,229), stdev = 371,947
[info]   CI (99.9%): [194,261, 3058,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31427,337 ±(99.9%) 27907,958 B/op [Average]
[info]   (min, avg, max) = (26013,312, 31427,337, 39370,652), stdev = 7247,608
[info]   CI (99.9%): [3519,379, 59335,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,563 ±(99.9%) 1,769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,563, 1,210), stdev = 0,459
[info]   CI (99.9%): [≈ 0, 2,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45,38% complete, ETA 01:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17507,558 ops/s
[info] # Warmup Iteration   2: 18720,368 ops/s
[info] # Warmup Iteration   3: 18756,768 ops/s
[info] # Warmup Iteration   4: 18619,144 ops/s
[info] # Warmup Iteration   5: 18655,861 ops/s
[info] Iteration   1: 18681,903 ops/s
[info]                  ·gc.alloc.rate:      413,039 MB/sec
[info]                  ·gc.alloc.rate.norm: 34800,029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18738,221 ops/s
[info]                  ·gc.alloc.rate:               414,285 MB/sec
[info]                  ·gc.alloc.rate.norm:          34800,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42968,006 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 18749,472 ops/s
[info]                  ·gc.alloc.rate:                   414,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42938,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,581 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 18645,021 ops/s
[info]                  ·gc.alloc.rate:                   412,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56954,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18726,340 ops/s
[info]                  ·gc.alloc.rate:      413,989 MB/sec
[info]                  ·gc.alloc.rate.norm: 34800,022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   18708,192 ±(99.9%) 168,031 ops/s [Average]
[info]   (min, avg, max) = (18645,021, 18708,192, 18749,472), stdev = 43,637
[info]   CI (99.9%): [18540,160, 18876,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   413,632 ±(99.9%) 3,637 MB/sec [Average]
[info]   (min, avg, max) = (412,288, 413,632, 414,557), stdev = 0,945
[info]   CI (99.9%): [409,994, 417,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34800,024 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (34800,022, 34800,024, 34800,029), stdev = 0,003
[info]   CI (99.9%): [34800,011, 34800,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   339,558 ±(99.9%) 1220,872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,558, 674,763), stdev = 317,057
[info]   CI (99.9%): [≈ 0, 1560,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28572,211 ±(99.9%) 102818,979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28572,211, 56954,825), stdev = 26701,762
[info]   CI (99.9%): [≈ 0, 131391,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,646 ±(99.9%) 5,497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 3,200), stdev = 1,428
[info]   CI (99.9%): [≈ 0, 6,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   54,531 ±(99.9%) 463,990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54,531, 270,073), stdev = 120,497
[info]   CI (99.9%): [≈ 0, 518,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45,58% complete, ETA 01:12:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12135,970 ops/s
[info] # Warmup Iteration   2: 21222,474 ops/s
[info] # Warmup Iteration   3: 21480,679 ops/s
[info] # Warmup Iteration   4: 21157,866 ops/s
[info] # Warmup Iteration   5: 21353,902 ops/s
[info] Iteration   1: 21458,014 ops/s
[info]                  ·gc.alloc.rate:                   803,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              58944,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49492,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,527 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 21527,406 ops/s
[info]                  ·gc.alloc.rate:                   806,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              58944,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49190,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,566 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 21535,410 ops/s
[info]                  ·gc.alloc.rate:               806,520 MB/sec
[info]                  ·gc.alloc.rate.norm:          58944,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49164,930 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 21472,737 ops/s
[info]                  ·gc.alloc.rate:               804,200 MB/sec
[info]                  ·gc.alloc.rate.norm:          58944,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49262,615 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 21503,062 ops/s
[info]                  ·gc.alloc.rate:                   805,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              58944,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98383,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,524 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   21499,326 ±(99.9%) 129,415 ops/s [Average]
[info]   (min, avg, max) = (21458,014, 21499,326, 21535,410), stdev = 33,609
[info]   CI (99.9%): [21369,911, 21628,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   805,189 ±(99.9%) 4,807 MB/sec [Average]
[info]   (min, avg, max) = (803,690, 805,189, 806,520), stdev = 1,248
[info]   CI (99.9%): [800,382, 809,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   58944,020 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (58944,019, 58944,020, 58944,025), stdev = 0,003
[info]   CI (99.9%): [58944,009, 58944,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   807,307 ±(99.9%) 1155,305 MB/sec [Average]
[info]   (min, avg, max) = (672,112, 807,307, 1344,012), stdev = 300,029
[info]   CI (99.9%): [≈ 0, 1962,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   59098,658 ±(99.9%) 84564,451 B/op [Average]
[info]   (min, avg, max) = (49164,930, 59098,658, 98383,223), stdev = 21961,119
[info]   CI (99.9%): [≈ 0, 143663,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,523 ±(99.9%) 7,178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,523, 4,566), stdev = 1,864
[info]   CI (99.9%): [≈ 0, 8,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,78% complete, ETA 01:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9899,519 ops/s
[info] # Warmup Iteration   2: 19130,849 ops/s
[info] # Warmup Iteration   3: 18852,456 ops/s
[info] # Warmup Iteration   4: 18889,562 ops/s
[info] # Warmup Iteration   5: 18899,194 ops/s
[info] Iteration   1: 18757,732 ops/s
[info]                  ·gc.alloc.rate:                   524,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42919,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,746 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18872,028 ops/s
[info]                  ·gc.alloc.rate:                   528,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56248,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,416 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18900,934 ops/s
[info]                  ·gc.alloc.rate:               528,981 MB/sec
[info]                  ·gc.alloc.rate.norm:          44048,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56155,887 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 18812,389 ops/s
[info]                  ·gc.alloc.rate:                   526,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56477,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,741 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18866,229 ops/s
[info]                  ·gc.alloc.rate:      527,947 MB/sec
[info]                  ·gc.alloc.rate.norm: 44048,022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   18841,862 ±(99.9%) 219,011 ops/s [Average]
[info]   (min, avg, max) = (18757,732, 18841,862, 18900,934), stdev = 56,877
[info]   CI (99.9%): [18622,851, 19060,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   527,326 ±(99.9%) 6,140 MB/sec [Average]
[info]   (min, avg, max) = (524,959, 527,326, 528,981), stdev = 1,595
[info]   CI (99.9%): [521,186, 533,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44048,170 ±(99.9%) 1,268 B/op [Average]
[info]   (min, avg, max) = (44048,022, 44048,170, 44048,760), stdev = 0,329
[info]   CI (99.9%): [44046,902, 44049,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507,102 ±(99.9%) 1124,961 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,102, 675,096), stdev = 292,149
[info]   CI (99.9%): [≈ 0, 1632,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42360,227 ±(99.9%) 93871,741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42360,227, 56477,216), stdev = 24378,193
[info]   CI (99.9%): [≈ 0, 136231,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,781 ±(99.9%) 16,775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,781, 10,416), stdev = 4,357
[info]   CI (99.9%): [≈ 0, 19,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,98% complete, ETA 01:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112705,419 ops/s
[info] # Warmup Iteration   2: 116375,265 ops/s
[info] # Warmup Iteration   3: 119224,173 ops/s
[info] # Warmup Iteration   4: 118425,735 ops/s
[info] # Warmup Iteration   5: 119035,542 ops/s
[info] Iteration   1: 118681,602 ops/s
[info]                  ·gc.alloc.rate:      297,998 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 118694,617 ops/s
[info]                  ·gc.alloc.rate:               298,035 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6783,698 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 119030,738 ops/s
[info]                  ·gc.alloc.rate:      298,872 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 118708,100 ops/s
[info]                  ·gc.alloc.rate:                   298,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6782,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,559 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 118857,164 ops/s
[info]                  ·gc.alloc.rate:      298,421 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   118794,444 ±(99.9%) 577,348 ops/s [Average]
[info]   (min, avg, max) = (118681,602, 118794,444, 119030,738), stdev = 149,936
[info]   CI (99.9%): [118217,096, 119371,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   298,284 ±(99.9%) 1,422 MB/sec [Average]
[info]   (min, avg, max) = (297,998, 298,284, 298,872), stdev = 0,369
[info]   CI (99.9%): [296,862, 299,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3952,003, 3952,003, 3952,004), stdev = 0,001
[info]   CI (99.9%): [3952,003, 3952,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,634 ±(99.9%) 1078,974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,634, 511,584), stdev = 280,206
[info]   CI (99.9%): [≈ 0, 1283,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2713,216 ±(99.9%) 14306,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2713,216, 6783,698), stdev = 3715,225
[info]   CI (99.9%): [≈ 0, 17019,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,112 ±(99.9%) 0,962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,112, 0,559), stdev = 0,250
[info]   CI (99.9%): [≈ 0, 1,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46,18% complete, ETA 01:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6705,241 ops/s
[info] # Warmup Iteration   2: 17261,205 ops/s
[info] # Warmup Iteration   3: 17035,001 ops/s
[info] # Warmup Iteration   4: 17134,774 ops/s
[info] # Warmup Iteration   5: 17221,154 ops/s
[info] Iteration   1: 17317,173 ops/s
[info]                  ·gc.alloc.rate:                   1093,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              99352,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122293,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,460 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 17081,084 ops/s
[info]                  ·gc.alloc.rate:               1078,245 MB/sec
[info]                  ·gc.alloc.rate.norm:          99352,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62022,129 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 17087,072 ops/s
[info]                  ·gc.alloc.rate:                   1078,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              99352,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124108,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,834 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 17229,724 ops/s
[info]                  ·gc.alloc.rate:               1087,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          99352,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61603,992 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 17222,209 ops/s
[info]                  ·gc.alloc.rate:                   1086,972 MB/sec
[info]                  ·gc.alloc.rate.norm:              99352,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123349,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,902 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   17187,452 ±(99.9%) 390,857 ops/s [Average]
[info]   (min, avg, max) = (17081,084, 17187,452, 17317,173), stdev = 101,504
[info]   CI (99.9%): [16796,595, 17578,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1084,945 ±(99.9%) 24,958 MB/sec [Average]
[info]   (min, avg, max) = (1078,245, 1084,945, 1093,312), stdev = 6,481
[info]   CI (99.9%): [1059,988, 1109,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99352,026 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (99352,024, 99352,026, 99352,030), stdev = 0,003
[info]   CI (99.9%): [99352,016, 99352,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1078,016 ±(99.9%) 1420,985 MB/sec [Average]
[info]   (min, avg, max) = (673,112, 1078,016, 1349,517), stdev = 369,025
[info]   CI (99.9%): [≈ 0, 2499,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   98675,575 ±(99.9%) 129601,959 B/op [Average]
[info]   (min, avg, max) = (61603,992, 98675,575, 124108,896), stdev = 33657,217
[info]   CI (99.9%): [≈ 0, 228277,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,039 ±(99.9%) 15,113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,039, 9,460), stdev = 3,925
[info]   CI (99.9%): [≈ 0, 18,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46,39% complete, ETA 01:11:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11433,924 ops/s
[info] # Warmup Iteration   2: 18143,862 ops/s
[info] # Warmup Iteration   3: 18015,242 ops/s
[info] # Warmup Iteration   4: 18354,856 ops/s
[info] # Warmup Iteration   5: 18504,606 ops/s
[info] Iteration   1: 18446,361 ops/s
[info]                  ·gc.alloc.rate:               593,947 MB/sec
[info]                  ·gc.alloc.rate.norm:          50680,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43648,042 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 18492,855 ops/s
[info]                  ·gc.alloc.rate:                   595,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              50664,656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57485,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242,000 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18531,334 ops/s
[info]                  ·gc.alloc.rate:                   596,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57364,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,536 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18462,082 ops/s
[info]                  ·gc.alloc.rate:                   594,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57405,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,774 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18510,901 ops/s
[info]                  ·gc.alloc.rate:                   595,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57256,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,770 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   18488,707 ±(99.9%) 133,791 ops/s [Average]
[info]   (min, avg, max) = (18446,361, 18488,707, 18531,334), stdev = 34,745
[info]   CI (99.9%): [18354,916, 18622,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   595,113 ±(99.9%) 3,900 MB/sec [Average]
[info]   (min, avg, max) = (593,947, 595,113, 596,400), stdev = 1,013
[info]   CI (99.9%): [591,214, 599,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   50662,551 ±(99.9%) 40,280 B/op [Average]
[info]   (min, avg, max) = (50656,022, 50662,551, 50680,028), stdev = 10,461
[info]   CI (99.9%): [50622,270, 50702,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   641,818 ±(99.9%) 280,471 MB/sec [Average]
[info]   (min, avg, max) = (511,535, 641,818, 675,466), stdev = 72,837
[info]   CI (99.9%): [361,347, 922,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   54632,208 ±(99.9%) 23646,381 B/op [Average]
[info]   (min, avg, max) = (43648,042, 54632,208, 57485,730), stdev = 6140,890
[info]   CI (99.9%): [30985,827, 78278,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,585 ±(99.9%) 4,861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,585, 2,844), stdev = 1,262
[info]   CI (99.9%): [≈ 0, 5,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   49,816 ±(99.9%) 413,719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49,816, 242,000), stdev = 107,441
[info]   CI (99.9%): [≈ 0, 463,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46,59% complete, ETA 01:10:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52778,051 ops/s
[info] # Warmup Iteration   2: 66846,621 ops/s
[info] # Warmup Iteration   3: 67115,513 ops/s
[info] # Warmup Iteration   4: 67282,904 ops/s
[info] # Warmup Iteration   5: 67431,933 ops/s
[info] Iteration   1: 67529,126 ops/s
[info]                  ·gc.alloc.rate:                   1078,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15663,827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,970 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 66919,552 ops/s
[info]                  ·gc.alloc.rate:                   1069,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31581,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,469 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 67546,238 ops/s
[info]                  ·gc.alloc.rate:                   1079,102 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31288,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,455 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 67495,230 ops/s
[info]                  ·gc.alloc.rate:               1078,372 MB/sec
[info]                  ·gc.alloc.rate.norm:          25144,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15655,952 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 67351,230 ops/s
[info]                  ·gc.alloc.rate:               1075,950 MB/sec
[info]                  ·gc.alloc.rate.norm:          25144,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31395,330 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   67368,275 ±(99.9%) 1010,205 ops/s [Average]
[info]   (min, avg, max) = (66919,552, 67368,275, 67546,238), stdev = 262,347
[info]   CI (99.9%): [66358,070, 68378,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1076,271 ±(99.9%) 16,124 MB/sec [Average]
[info]   (min, avg, max) = (1069,119, 1076,271, 1079,102), stdev = 4,187
[info]   CI (99.9%): [1060,147, 1092,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25144,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25144,006, 25144,006, 25144,007), stdev = 0,001
[info]   CI (99.9%): [25144,005, 25144,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,527 ±(99.9%) 1415,796 MB/sec [Average]
[info]   (min, avg, max) = (671,450, 1074,527, 1343,454), stdev = 367,678
[info]   CI (99.9%): [≈ 0, 2490,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25117,132 ±(99.9%) 33245,997 B/op [Average]
[info]   (min, avg, max) = (15655,952, 25117,132, 31581,821), stdev = 8633,880
[info]   CI (99.9%): [≈ 0, 58363,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,779 ±(99.9%) 2,845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,779, 1,469), stdev = 0,739
[info]   CI (99.9%): [≈ 0, 3,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,79% complete, ETA 01:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61873,670 ops/s
[info] # Warmup Iteration   2: 82708,858 ops/s
[info] # Warmup Iteration   3: 82919,300 ops/s
[info] # Warmup Iteration   4: 83021,012 ops/s
[info] # Warmup Iteration   5: 82780,241 ops/s
[info] Iteration   1: 82842,573 ops/s
[info]                  ·gc.alloc.rate:                   1339,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25694,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 82721,065 ops/s
[info]                  ·gc.alloc.rate:               1337,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25751,519 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 82882,526 ops/s
[info]                  ·gc.alloc.rate:                   1339,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25727,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 82624,121 ops/s
[info]                  ·gc.alloc.rate:               1335,456 MB/sec
[info]                  ·gc.alloc.rate.norm:          25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25827,089 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 82684,952 ops/s
[info]                  ·gc.alloc.rate:               1336,290 MB/sec
[info]                  ·gc.alloc.rate.norm:          25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25825,808 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   82751,048 ±(99.9%) 417,585 ops/s [Average]
[info]   (min, avg, max) = (82624,121, 82751,048, 82882,526), stdev = 108,445
[info]   CI (99.9%): [82333,463, 83168,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1337,473 ±(99.9%) 6,770 MB/sec [Average]
[info]   (min, avg, max) = (1335,456, 1337,473, 1339,534), stdev = 1,758
[info]   CI (99.9%): [1330,703, 1344,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25440,005, 25440,005, 25440,005), stdev = 0,001
[info]   CI (99.9%): [25440,004, 25440,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,571 ±(99.9%) 6,461 MB/sec [Average]
[info]   (min, avg, max) = (1352,443, 1354,571, 1356,555), stdev = 1,678
[info]   CI (99.9%): [1348,111, 1361,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   25765,293 ±(99.9%) 228,609 B/op [Average]
[info]   (min, avg, max) = (25694,623, 25765,293, 25827,089), stdev = 59,369
[info]   CI (99.9%): [25536,684, 25993,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,158 ±(99.9%) 0,834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,158, 0,395), stdev = 0,217
[info]   CI (99.9%): [≈ 0, 0,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,99% complete, ETA 01:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265750,875 ops/s
[info] # Warmup Iteration   2: 271858,537 ops/s
[info] # Warmup Iteration   3: 261018,533 ops/s
[info] # Warmup Iteration   4: 260181,225 ops/s
[info] # Warmup Iteration   5: 259685,049 ops/s
[info] Iteration   1: 256512,635 ops/s
[info]                  ·gc.alloc.rate:               491,530 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3138,727 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 261960,868 ops/s
[info]                  ·gc.alloc.rate:      502,045 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 261635,490 ops/s
[info]                  ·gc.alloc.rate:                   501,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4063,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,979 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 261876,601 ops/s
[info]                  ·gc.alloc.rate:                   501,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4059,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 261685,289 ops/s
[info]                  ·gc.alloc.rate:                   501,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4054,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   260734,176 ±(99.9%) 9101,765 ops/s [Average]
[info]   (min, avg, max) = (256512,635, 260734,176, 261960,868), stdev = 2363,699
[info]   CI (99.9%): [251632,411, 269835,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   499,624 ±(99.9%) 17,466 MB/sec [Average]
[info]   (min, avg, max) = (491,530, 499,624, 502,045), stdev = 4,536
[info]   CI (99.9%): [482,158, 517,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,002, 3016,002, 3016,002), stdev = 0,001
[info]   CI (99.9%): [3016,002, 3016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   507,258 ±(99.9%) 1125,385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,258, 675,445), stdev = 292,259
[info]   CI (99.9%): [≈ 0, 1632,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3063,037 ±(99.9%) 6769,558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3063,037, 4063,083), stdev = 1758,033
[info]   CI (99.9%): [≈ 0, 9832,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,581 ±(99.9%) 4,825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,581, 2,822), stdev = 1,253
[info]   CI (99.9%): [≈ 0, 5,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,496 ±(99.9%) 29,030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,496, 16,979), stdev = 7,539
[info]   CI (99.9%): [≈ 0, 32,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47,19% complete, ETA 01:10:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312526,793 ops/s
[info] # Warmup Iteration   2: 325394,520 ops/s
[info] # Warmup Iteration   3: 316682,321 ops/s
[info] # Warmup Iteration   4: 327651,888 ops/s
[info] # Warmup Iteration   5: 327951,804 ops/s
[info] Iteration   1: 328261,616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 329266,657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 328967,917 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 327723,834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 328169,955 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   328477,996 ±(99.9%) 2414,325 ops/s [Average]
[info]   (min, avg, max) = (327723,834, 328477,996, 329266,657), stdev = 626,993
[info]   CI (99.9%): [326063,671, 330892,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47,39% complete, ETA 01:09:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61775,442 ops/s
[info] # Warmup Iteration   2: 76139,830 ops/s
[info] # Warmup Iteration   3: 77594,926 ops/s
[info] # Warmup Iteration   4: 77855,512 ops/s
[info] # Warmup Iteration   5: 77707,576 ops/s
[info] Iteration   1: 77614,964 ops/s
[info]                  ·gc.alloc.rate:               1393,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27177,149 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 77787,384 ops/s
[info]                  ·gc.alloc.rate:                   1396,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27124,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,421 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 77645,966 ops/s
[info]                  ·gc.alloc.rate:               1393,455 MB/sec
[info]                  ·gc.alloc.rate.norm:          28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27191,554 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 76974,128 ops/s
[info]                  ·gc.alloc.rate:                   1381,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27455,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 77623,380 ops/s
[info]                  ·gc.alloc.rate:                   1392,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27255,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,844 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   77529,165 ±(99.9%) 1224,698 ops/s [Average]
[info]   (min, avg, max) = (76974,128, 77529,165, 77787,384), stdev = 318,050
[info]   CI (99.9%): [76304,467, 78753,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1391,433 ±(99.9%) 21,723 MB/sec [Average]
[info]   (min, avg, max) = (1381,616, 1391,433, 1396,126), stdev = 5,641
[info]   CI (99.9%): [1369,710, 1413,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28248,005, 28248,006, 28248,006), stdev = 0,001
[info]   CI (99.9%): [28248,004, 28248,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341,800 ±(99.9%) 6,098 MB/sec [Average]
[info]   (min, avg, max) = (1340,234, 1341,800, 1343,977), stdev = 1,584
[info]   CI (99.9%): [1335,702, 1347,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27240,802 ±(99.9%) 496,516 B/op [Average]
[info]   (min, avg, max) = (27124,154, 27240,802, 27455,766), stdev = 128,944
[info]   CI (99.9%): [26744,286, 27737,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,338 ±(99.9%) 1,360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,338, 0,844), stdev = 0,353
[info]   CI (99.9%): [≈ 0, 1,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47,59% complete, ETA 01:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16181,055 ops/s
[info] # Warmup Iteration   2: 17295,388 ops/s
[info] # Warmup Iteration   3: 17391,006 ops/s
[info] # Warmup Iteration   4: 17395,270 ops/s
[info] # Warmup Iteration   5: 17420,791 ops/s
[info] Iteration   1: 17386,911 ops/s
[info]                  ·gc.alloc.rate:               381,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          34520,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46303,264 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 17391,947 ops/s
[info]                  ·gc.alloc.rate:                   381,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46295,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,739 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 17468,435 ops/s
[info]                  ·gc.alloc.rate:               383,116 MB/sec
[info]                  ·gc.alloc.rate.norm:          34520,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46088,615 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 17441,477 ops/s
[info]                  ·gc.alloc.rate:      382,545 MB/sec
[info]                  ·gc.alloc.rate.norm: 34520,023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17320,734 ops/s
[info]                  ·gc.alloc.rate:                   379,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61371,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   17401,901 ±(99.9%) 218,715 ops/s [Average]
[info]   (min, avg, max) = (17320,734, 17401,901, 17468,435), stdev = 56,800
[info]   CI (99.9%): [17183,185, 17620,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   381,655 ±(99.9%) 4,857 MB/sec [Average]
[info]   (min, avg, max) = (379,843, 381,655, 383,116), stdev = 1,261
[info]   CI (99.9%): [376,798, 386,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34520,025 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (34520,023, 34520,025, 34520,031), stdev = 0,003
[info]   CI (99.9%): [34520,012, 34520,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,972 ±(99.9%) 989,796 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,972, 675,302), stdev = 257,047
[info]   CI (99.9%): [≈ 0, 1431,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   40011,672 ±(99.9%) 89753,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40011,672, 61371,201), stdev = 23308,585
[info]   CI (99.9%): [≈ 0, 129764,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,567 ±(99.9%) 4,868 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,567, 2,829), stdev = 1,264
[info]   CI (99.9%): [≈ 0, 5,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   51,569 ±(99.9%) 442,432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51,569, 257,104), stdev = 114,898
[info]   CI (99.9%): [≈ 0, 494,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 3,000), stdev = 1,095
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47,79% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115368,172 ops/s
[info] # Warmup Iteration   2: 136142,899 ops/s
[info] # Warmup Iteration   3: 135215,348 ops/s
[info] # Warmup Iteration   4: 133776,081 ops/s
[info] # Warmup Iteration   5: 137858,234 ops/s
[info] Iteration   1: 137798,837 ops/s
[info]                  ·gc.alloc.rate:                   1996,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23043,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,713 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 137127,788 ops/s
[info]                  ·gc.alloc.rate:                   1986,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23187,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,478 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 137793,228 ops/s
[info]                  ·gc.alloc.rate:                   1996,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23112,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 138038,142 ops/s
[info]                  ·gc.alloc.rate:                   1999,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23111,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,237 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 137727,669 ops/s
[info]                  ·gc.alloc.rate:                   1994,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23193,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   137697,133 ±(99.9%) 1307,166 ops/s [Average]
[info]   (min, avg, max) = (137127,788, 137697,133, 138038,142), stdev = 339,467
[info]   CI (99.9%): [136389,966, 139004,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1994,722 ±(99.9%) 19,173 MB/sec [Average]
[info]   (min, avg, max) = (1986,462, 1994,722, 1999,894), stdev = 4,979
[info]   CI (99.9%): [1975,549, 2013,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (22800,003, 22800,003, 22800,003), stdev = 0,001
[info]   CI (99.9%): [22800,003, 22800,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,554 ±(99.9%) 18,795 MB/sec [Average]
[info]   (min, avg, max) = (2017,511, 2023,554, 2029,385), stdev = 4,881
[info]   CI (99.9%): [2004,758, 2042,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23129,627 ±(99.9%) 239,293 B/op [Average]
[info]   (min, avg, max) = (23043,536, 23129,627, 23193,768), stdev = 62,144
[info]   CI (99.9%): [22890,335, 23368,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,381 ±(99.9%) 0,820 B/op [Average]
[info]   (min, avg, max) = (0,237, 0,381, 0,713), stdev = 0,213
[info]   CI (99.9%): [≈ 0, 1,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47,99% complete, ETA 01:09:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191124,678 ops/s
[info] # Warmup Iteration   2: 734686,456 ops/s
[info] # Warmup Iteration   3: 748335,432 ops/s
[info] # Warmup Iteration   4: 747557,829 ops/s
[info] # Warmup Iteration   5: 746049,543 ops/s
[info] Iteration   1: 745591,149 ops/s
[info]                  ·gc.alloc.rate:               413,084 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1079,860 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 745923,837 ops/s
[info]                  ·gc.alloc.rate:                   413,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1079,488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 749568,028 ops/s
[info]                  ·gc.alloc.rate:      415,302 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 745830,411 ops/s
[info]                  ·gc.alloc.rate:                   413,258 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1422,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,573 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 748388,532 ops/s
[info]                  ·gc.alloc.rate:               414,582 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1417,646 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   747060,391 ±(99.9%) 6945,979 ops/s [Average]
[info]   (min, avg, max) = (745591,149, 747060,391, 749568,028), stdev = 1803,849
[info]   CI (99.9%): [740114,412, 754006,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   413,910 ±(99.9%) 3,774 MB/sec [Average]
[info]   (min, avg, max) = (413,084, 413,910, 415,302), stdev = 0,980
[info]   CI (99.9%): [410,136, 417,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (872,001, 872,001, 872,001), stdev = 0,001
[info]   CI (99.9%): [872,000, 872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   474,270 ±(99.9%) 1067,739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,270, 674,124), stdev = 277,289
[info]   CI (99.9%): [≈ 0, 1542,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   999,888 ±(99.9%) 2249,897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 999,888, 1422,446), stdev = 584,291
[info]   CI (99.9%): [≈ 0, 3249,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,533 ±(99.9%) 4,538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,533, 2,641), stdev = 1,178
[info]   CI (99.9%): [≈ 0, 5,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,125 ±(99.9%) 9,575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,125, 5,573), stdev = 2,487
[info]   CI (99.9%): [≈ 0, 10,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,19% complete, ETA 01:08:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299117,321 ops/s
[info] # Warmup Iteration   2: 416481,072 ops/s
[info] # Warmup Iteration   3: 418216,608 ops/s
[info] # Warmup Iteration   4: 416664,599 ops/s
[info] # Warmup Iteration   5: 415154,920 ops/s
[info] Iteration   1: 408784,009 ops/s
[info]                  ·gc.alloc.rate:               407,235 MB/sec
[info]                  ·gc.alloc.rate.norm:          1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1969,610 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 411016,239 ops/s
[info]                  ·gc.alloc.rate:               409,505 MB/sec
[info]                  ·gc.alloc.rate.norm:          1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1958,887 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 417417,540 ops/s
[info]                  ·gc.alloc.rate:                   415,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2543,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,392 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 418017,093 ops/s
[info]                  ·gc.alloc.rate:      416,508 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 415846,890 ops/s
[info]                  ·gc.alloc.rate:                   414,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2552,639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   414216,354 ±(99.9%) 15771,545 ops/s [Average]
[info]   (min, avg, max) = (408784,009, 414216,354, 418017,093), stdev = 4095,820
[info]   CI (99.9%): [398444,809, 429987,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   412,683 ±(99.9%) 15,770 MB/sec [Average]
[info]   (min, avg, max) = (407,235, 412,683, 416,508), stdev = 4,095
[info]   CI (99.9%): [396,913, 428,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1568,001, 1568,001, 1568,001), stdev = 0,001
[info]   CI (99.9%): [1568,001, 1568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,414 ±(99.9%) 1068,290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,414, 674,503), stdev = 277,432
[info]   CI (99.9%): [≈ 0, 1542,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1804,840 ±(99.9%) 4044,324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1804,840, 2552,639), stdev = 1050,298
[info]   CI (99.9%): [≈ 0, 5849,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,110 ±(99.9%) 0,662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,110, 0,392), stdev = 0,172
[info]   CI (99.9%): [≈ 0, 0,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,39% complete, ETA 01:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 941605,447 ops/s
[info] # Warmup Iteration   2: 984442,096 ops/s
[info] # Warmup Iteration   3: 991297,006 ops/s
[info] # Warmup Iteration   4: 994833,918 ops/s
[info] # Warmup Iteration   5: 990135,548 ops/s
[info] Iteration   1: 992058,525 ops/s
[info]                  ·gc.alloc.rate:                   342,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 993996,373 ops/s
[info]                  ·gc.alloc.rate:      343,558 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 993649,639 ops/s
[info]                  ·gc.alloc.rate:                   343,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 987846,005 ops/s
[info]                  ·gc.alloc.rate:               341,413 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 815,055 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 995138,379 ops/s
[info]                  ·gc.alloc.rate:      343,919 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   992537,784 ±(99.9%) 10953,929 ops/s [Average]
[info]   (min, avg, max) = (987846,005, 992537,784, 995138,379), stdev = 2844,700
[info]   CI (99.9%): [981583,855, 1003491,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   343,028 ±(99.9%) 3,794 MB/sec [Average]
[info]   (min, avg, max) = (341,413, 343,028, 343,919), stdev = 0,985
[info]   CI (99.9%): [339,234, 346,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,906 ±(99.9%) 1078,818 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,906, 511,541), stdev = 280,166
[info]   CI (99.9%): [≈ 0, 1385,724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   487,391 ±(99.9%) 1713,261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 487,391, 815,055), stdev = 444,928
[info]   CI (99.9%): [≈ 0, 2200,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,040), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48,59% complete, ETA 01:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60106,922 ops/s
[info] # Warmup Iteration   2: 91250,620 ops/s
[info] # Warmup Iteration   3: 91104,204 ops/s
[info] # Warmup Iteration   4: 91177,822 ops/s
[info] # Warmup Iteration   5: 91529,158 ops/s
[info] Iteration   1: 91333,877 ops/s
[info]                  ·gc.alloc.rate:                   3913,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4076,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70245,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,717 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 91447,504 ops/s
[info]                  ·gc.alloc.rate:                   3918,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58527,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,433 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 91184,983 ops/s
[info]                  ·gc.alloc.rate:                   3906,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70498,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,156 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 90895,391 ops/s
[info]                  ·gc.alloc.rate:                   3894,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70733,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,081 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 91156,683 ops/s
[info]                  ·gc.alloc.rate:                   3904,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70590,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,797 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   91203,688 ±(99.9%) 803,119 ops/s [Average]
[info]   (min, avg, max) = (90895,391, 91203,688, 91447,504), stdev = 208,567
[info]   CI (99.9%): [90400,569, 92006,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3907,503 ±(99.9%) 34,661 MB/sec [Average]
[info]   (min, avg, max) = (3894,593, 3907,503, 3918,370), stdev = 9,001
[info]   CI (99.9%): [3872,842, 3942,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67432,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67432,004, 67432,005, 67432,005), stdev = 0,001
[info]   CI (99.9%): [67432,004, 67432,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3946,922 ±(99.9%) 1175,379 MB/sec [Average]
[info]   (min, avg, max) = (3400,941, 3946,922, 4087,901), stdev = 305,242
[info]   CI (99.9%): [2771,542, 5122,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68119,155 ±(99.9%) 20658,187 B/op [Average]
[info]   (min, avg, max) = (58527,465, 68119,155, 70733,929), stdev = 5364,866
[info]   CI (99.9%): [47460,968, 88777,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,125), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,437 ±(99.9%) 2,187 B/op [Average]
[info]   (min, avg, max) = (0,717, 1,437, 2,156), stdev = 0,568
[info]   CI (99.9%): [≈ 0, 3,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48,80% complete, ETA 01:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222040,914 ops/s
[info] # Warmup Iteration   2: 244737,173 ops/s
[info] # Warmup Iteration   3: 245838,813 ops/s
[info] # Warmup Iteration   4: 245253,133 ops/s
[info] # Warmup Iteration   5: 246219,909 ops/s
[info] Iteration   1: 244398,657 ops/s
[info]                  ·gc.alloc.rate:                   1544,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12984,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,402 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 246467,864 ops/s
[info]                  ·gc.alloc.rate:               1557,272 MB/sec
[info]                  ·gc.alloc.rate.norm:          9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8588,365 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 246385,786 ops/s
[info]                  ·gc.alloc.rate:                   1556,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8599,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,399 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 245164,154 ops/s
[info]                  ·gc.alloc.rate:                   1549,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12977,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,134 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 245638,727 ops/s
[info]                  ·gc.alloc.rate:                   1551,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8646,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   245611,038 ±(99.9%) 3337,381 ops/s [Average]
[info]   (min, avg, max) = (244398,657, 245611,038, 246467,864), stdev = 866,707
[info]   CI (99.9%): [242273,656, 248948,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1551,763 ±(99.9%) 21,112 MB/sec [Average]
[info]   (min, avg, max) = (1544,063, 1551,763, 1557,272), stdev = 5,483
[info]   CI (99.9%): [1530,651, 1572,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9944,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9944,002, 9944,002, 9944,002), stdev = 0,001
[info]   CI (99.9%): [9944,001, 9944,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1615,638 ±(99.9%) 1417,492 MB/sec [Average]
[info]   (min, avg, max) = (1344,974, 1615,638, 2021,623), stdev = 368,118
[info]   CI (99.9%): [198,146, 3033,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10359,193 ±(99.9%) 9215,754 B/op [Average]
[info]   (min, avg, max) = (8588,365, 10359,193, 12984,253), stdev = 2393,302
[info]   CI (99.9%): [1143,439, 19574,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,240 ±(99.9%) 0,670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,240, 0,402), stdev = 0,174
[info]   CI (99.9%): [≈ 0, 0,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49,00% complete, ETA 01:07:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207560,109 ops/s
[info] # Warmup Iteration   2: 250074,985 ops/s
[info] # Warmup Iteration   3: 252078,829 ops/s
[info] # Warmup Iteration   4: 253785,884 ops/s
[info] # Warmup Iteration   5: 253417,524 ops/s
[info] Iteration   1: 253858,869 ops/s
[info]                  ·gc.alloc.rate:                   1322,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8319,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 254095,040 ops/s
[info]                  ·gc.alloc.rate:               1323,714 MB/sec
[info]                  ·gc.alloc.rate.norm:          8200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4159,084 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 254283,685 ops/s
[info]                  ·gc.alloc.rate:                   1324,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8311,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 253206,499 ops/s
[info]                  ·gc.alloc.rate:                   1319,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8354,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 253631,491 ops/s
[info]                  ·gc.alloc.rate:                   1321,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8349,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   253815,117 ±(99.9%) 1615,392 ops/s [Average]
[info]   (min, avg, max) = (253206,499, 253815,117, 254283,685), stdev = 419,512
[info]   CI (99.9%): [252199,724, 255430,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1322,378 ±(99.9%) 8,341 MB/sec [Average]
[info]   (min, avg, max) = (1319,275, 1322,378, 1324,768), stdev = 2,166
[info]   CI (99.9%): [1314,038, 1330,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8200,002, 8200,002, 8200,002), stdev = 0,001
[info]   CI (99.9%): [8200,001, 8200,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,178 ±(99.9%) 1157,628 MB/sec [Average]
[info]   (min, avg, max) = (671,395, 1209,178, 1345,266), stdev = 300,632
[info]   CI (99.9%): [51,550, 2366,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7498,913 ±(99.9%) 7189,593 B/op [Average]
[info]   (min, avg, max) = (4159,084, 7498,913, 8354,989), stdev = 1867,114
[info]   CI (99.9%): [309,321, 14688,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,155 ±(99.9%) 0,416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,155, 0,259), stdev = 0,108
[info]   CI (99.9%): [≈ 0, 0,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49,20% complete, ETA 01:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 404258,093 ops/s
[info] # Warmup Iteration   2: 1630285,200 ops/s
[info] # Warmup Iteration   3: 1634486,919 ops/s
[info] # Warmup Iteration   4: 1634693,000 ops/s
[info] # Warmup Iteration   5: 1636046,056 ops/s
[info] Iteration   1: 1631467,850 ops/s
[info]                  ·gc.alloc.rate:               555,627 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 493,500 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1631577,208 ops/s
[info]                  ·gc.alloc.rate:                   555,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650,241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,532 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1638776,198 ops/s
[info]                  ·gc.alloc.rate:                   558,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1635088,700 ops/s
[info]                  ·gc.alloc.rate:               556,903 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 647,566 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1633287,885 ops/s
[info]                  ·gc.alloc.rate:                   556,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1634039,568 ±(99.9%) 11676,140 ops/s [Average]
[info]   (min, avg, max) = (1631467,850, 1634039,568, 1638776,198), stdev = 3032,256
[info]   CI (99.9%): [1622363,428, 1645715,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   556,501 ±(99.9%) 3,896 MB/sec [Average]
[info]   (min, avg, max) = (555,627, 556,501, 558,047), stdev = 1,012
[info]   CI (99.9%): [552,606, 560,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   641,061 ±(99.9%) 278,747 MB/sec [Average]
[info]   (min, avg, max) = (511,571, 641,061, 674,073), stdev = 72,390
[info]   CI (99.9%): [362,314, 919,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   617,397 ±(99.9%) 266,733 B/op [Average]
[info]   (min, avg, max) = (493,500, 617,397, 650,241), stdev = 69,270
[info]   CI (99.9%): [350,664, 884,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,538 ±(99.9%) 4,495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,538, 2,625), stdev = 1,167
[info]   CI (99.9%): [≈ 0, 5,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,519 ±(99.9%) 4,336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,519, 2,532), stdev = 1,126
[info]   CI (99.9%): [≈ 0, 4,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,40% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1184414,304 ops/s
[info] # Warmup Iteration   2: 1583710,847 ops/s
[info] # Warmup Iteration   3: 1587973,814 ops/s
[info] # Warmup Iteration   4: 1592773,925 ops/s
[info] # Warmup Iteration   5: 1591211,924 ops/s
[info] Iteration   1: 1584467,891 ops/s
[info]                  ·gc.alloc.rate:                   926,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1335,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1592000,345 ops/s
[info]                  ·gc.alloc.rate:               930,684 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 665,466 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1585015,248 ops/s
[info]                  ·gc.alloc.rate:                   926,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1337,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1594698,627 ops/s
[info]                  ·gc.alloc.rate:               932,213 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 664,946 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1595673,661 ops/s
[info]                  ·gc.alloc.rate:                   932,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     665,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1590371,155 ±(99.9%) 20469,360 ops/s [Average]
[info]   (min, avg, max) = (1584467,891, 1590371,155, 1595673,661), stdev = 5315,828
[info]   CI (99.9%): [1569901,794, 1610840,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   929,641 ±(99.9%) 11,939 MB/sec [Average]
[info]   (min, avg, max) = (926,220, 929,641, 932,629), stdev = 3,101
[info]   CI (99.9%): [917,702, 941,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   942,585 ±(99.9%) 1417,419 MB/sec [Average]
[info]   (min, avg, max) = (673,194, 942,585, 1346,747), stdev = 368,099
[info]   CI (99.9%): [≈ 0, 2360,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   933,763 ±(99.9%) 1416,050 B/op [Average]
[info]   (min, avg, max) = (664,946, 933,763, 1337,358), stdev = 367,744
[info]   CI (99.9%): [≈ 0, 2349,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,029 ±(99.9%) 0,121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,60% complete, ETA 01:06:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1446020,399 ops/s
[info] # Warmup Iteration   2: 1562923,438 ops/s
[info] # Warmup Iteration   3: 1563492,242 ops/s
[info] # Warmup Iteration   4: 1559362,832 ops/s
[info] # Warmup Iteration   5: 1558777,495 ops/s
[info] Iteration   1: 1561212,118 ops/s
[info]                  ·gc.alloc.rate:               531,660 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 515,705 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1563363,329 ops/s
[info]                  ·gc.alloc.rate:                   532,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,158 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1564430,618 ops/s
[info]                  ·gc.alloc.rate:      532,754 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1563720,444 ops/s
[info]                  ·gc.alloc.rate:                   532,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1563732,846 ops/s
[info]                  ·gc.alloc.rate:                   532,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677,137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1563291,871 ±(99.9%) 4718,162 ops/s [Average]
[info]   (min, avg, max) = (1561212,118, 1563291,871, 1564430,618), stdev = 1225,292
[info]   CI (99.9%): [1558573,709, 1568010,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   532,382 ±(99.9%) 1,633 MB/sec [Average]
[info]   (min, avg, max) = (531,660, 532,382, 532,754), stdev = 0,424
[info]   CI (99.9%): [530,749, 534,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,761 ±(99.9%) 1124,018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,761, 674,805), stdev = 291,904
[info]   CI (99.9%): [≈ 0, 1630,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   510,256 ±(99.9%) 1131,422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 510,256, 679,306), stdev = 293,827
[info]   CI (99.9%): [≈ 0, 1641,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,640 ±(99.9%) 5,375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,640, 3,137), stdev = 1,396
[info]   CI (99.9%): [≈ 0, 6,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,644 ±(99.9%) 5,412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,158), stdev = 1,405
[info]   CI (99.9%): [≈ 0, 6,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49,80% complete, ETA 01:06:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1476485,642 ops/s
[info] # Warmup Iteration   2: 1542917,946 ops/s
[info] # Warmup Iteration   3: 1533036,351 ops/s
[info] # Warmup Iteration   4: 1542927,851 ops/s
[info] # Warmup Iteration   5: 1543888,760 ops/s
[info] Iteration   1: 1544361,392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1531254,051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1542820,547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1540422,050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1545400,502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1540851,708 ±(99.9%) 21883,158 ops/s [Average]
[info]   (min, avg, max) = (1531254,051, 1540851,708, 1545400,502), stdev = 5682,987
[info]   CI (99.9%): [1518968,550, 1562734,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50,00% complete, ETA 01:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31483,746 ops/s
[info] # Warmup Iteration   2: 44331,677 ops/s
[info] # Warmup Iteration   3: 43926,708 ops/s
[info] # Warmup Iteration   4: 44830,051 ops/s
[info] # Warmup Iteration   5: 43769,472 ops/s
[info] Iteration   1: 44743,153 ops/s
[info]                  ·gc.alloc.rate:                   2074,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70824,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,465 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44879,818 ops/s
[info]                  ·gc.alloc.rate:                   2081,460 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70725,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,460 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 44331,853 ops/s
[info]                  ·gc.alloc.rate:                   2056,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71764,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,739 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44148,838 ops/s
[info]                  ·gc.alloc.rate:                   2047,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72174,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,742 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 43901,795 ops/s
[info]                  ·gc.alloc.rate:                   2035,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72708,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,239 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   44401,092 ±(99.9%) 1568,762 ops/s [Average]
[info]   (min, avg, max) = (43901,795, 44401,092, 44879,818), stdev = 407,402
[info]   CI (99.9%): [42832,330, 45969,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2059,175 ±(99.9%) 72,725 MB/sec [Average]
[info]   (min, avg, max) = (2035,848, 2059,175, 2081,460), stdev = 18,886
[info]   CI (99.9%): [1986,450, 2131,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72992,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72992,009, 72992,009, 72992,010), stdev = 0,001
[info]   CI (99.9%): [72992,008, 72992,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2020,838 ±(99.9%) 22,846 MB/sec [Average]
[info]   (min, avg, max) = (2013,164, 2020,838, 2027,936), stdev = 5,933
[info]   CI (99.9%): [1997,992, 2043,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71639,365 ±(99.9%) 3303,927 B/op [Average]
[info]   (min, avg, max) = (70725,033, 71639,365, 72708,337), stdev = 858,019
[info]   CI (99.9%): [68335,438, 74943,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,329 ±(99.9%) 2,401 B/op [Average]
[info]   (min, avg, max) = (0,739, 1,329, 2,239), stdev = 0,624
[info]   CI (99.9%): [≈ 0, 3,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50,20% complete, ETA 01:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145690,350 ops/s
[info] # Warmup Iteration   2: 154115,497 ops/s
[info] # Warmup Iteration   3: 153672,815 ops/s
[info] # Warmup Iteration   4: 154234,703 ops/s
[info] # Warmup Iteration   5: 154586,676 ops/s
[info] Iteration   1: 154838,745 ops/s
[info]                  ·gc.alloc.rate:                   1044,955 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6838,922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,212 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 153891,531 ops/s
[info]                  ·gc.alloc.rate:                   1038,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13748,376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 152989,120 ops/s
[info]                  ·gc.alloc.rate:               1032,716 MB/sec
[info]                  ·gc.alloc.rate.norm:          10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6914,757 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 154385,759 ops/s
[info]                  ·gc.alloc.rate:                   1042,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13703,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,212 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 153670,108 ops/s
[info]                  ·gc.alloc.rate:                   1037,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6883,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   153955,053 ±(99.9%) 2712,364 ops/s [Average]
[info]   (min, avg, max) = (152989,120, 153955,053, 154838,745), stdev = 704,392
[info]   CI (99.9%): [151242,688, 156667,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1039,155 ±(99.9%) 18,127 MB/sec [Average]
[info]   (min, avg, max) = (1032,716, 1039,155, 1044,955), stdev = 4,707
[info]   CI (99.9%): [1021,028, 1057,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10624,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10624,003, 10624,003, 10624,003), stdev = 0,001
[info]   CI (99.9%): [10624,002, 10624,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   941,069 ±(99.9%) 1417,292 MB/sec [Average]
[info]   (min, avg, max) = (671,998, 941,069, 1344,299), stdev = 368,066
[info]   CI (99.9%): [≈ 0, 2358,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9617,819 ±(99.9%) 14440,970 B/op [Average]
[info]   (min, avg, max) = (6838,922, 9617,819, 13748,376), stdev = 3750,274
[info]   CI (99.9%): [≈ 0, 24058,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,255 ±(99.9%) 0,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,255, 0,426), stdev = 0,178
[info]   CI (99.9%): [≈ 0, 0,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50,40% complete, ETA 01:05:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55440,816 ops/s
[info] # Warmup Iteration   2: 64722,406 ops/s
[info] # Warmup Iteration   3: 65027,369 ops/s
[info] # Warmup Iteration   4: 65792,965 ops/s
[info] # Warmup Iteration   5: 65908,308 ops/s
[info] Iteration   1: 65606,209 ops/s
[info]                  ·gc.alloc.rate:                   1308,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              31400,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32245,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,498 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65974,298 ops/s
[info]                  ·gc.alloc.rate:               1316,324 MB/sec
[info]                  ·gc.alloc.rate.norm:          31400,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32069,266 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 65890,364 ops/s
[info]                  ·gc.alloc.rate:                   1314,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              31400,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32106,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,994 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 65791,937 ops/s
[info]                  ·gc.alloc.rate:                   1312,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              31400,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32186,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,494 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 65610,112 ops/s
[info]                  ·gc.alloc.rate:                   1308,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              31400,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32291,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,997 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   65774,584 ±(99.9%) 635,627 ops/s [Average]
[info]   (min, avg, max) = (65606,209, 65774,584, 65974,298), stdev = 165,070
[info]   CI (99.9%): [65138,957, 66410,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1312,250 ±(99.9%) 12,886 MB/sec [Average]
[info]   (min, avg, max) = (1308,872, 1312,250, 1316,324), stdev = 3,346
[info]   CI (99.9%): [1299,364, 1325,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31400,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (31400,006, 31400,007, 31400,007), stdev = 0,001
[info]   CI (99.9%): [31400,005, 31400,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1344,829 ±(99.9%) 3,366 MB/sec [Average]
[info]   (min, avg, max) = (1344,116, 1344,829, 1346,018), stdev = 0,874
[info]   CI (99.9%): [1341,463, 1348,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32179,755 ±(99.9%) 357,167 B/op [Average]
[info]   (min, avg, max) = (32069,266, 32179,755, 32291,162), stdev = 92,755
[info]   CI (99.9%): [31822,587, 32536,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,197 ±(99.9%) 2,915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,197, 1,997), stdev = 0,757
[info]   CI (99.9%): [≈ 0, 4,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,60% complete, ETA 01:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62961,488 ops/s
[info] # Warmup Iteration   2: 91597,804 ops/s
[info] # Warmup Iteration   3: 91789,679 ops/s
[info] # Warmup Iteration   4: 92002,501 ops/s
[info] # Warmup Iteration   5: 91830,646 ops/s
[info] Iteration   1: 91845,169 ops/s
[info]                  ·gc.alloc.rate:               964,058 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11569,037 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 92026,688 ops/s
[info]                  ·gc.alloc.rate:               966,022 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11557,554 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 91864,884 ops/s
[info]                  ·gc.alloc.rate:                   964,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23166,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,713 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 91887,883 ops/s
[info]                  ·gc.alloc.rate:               964,466 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11586,065 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 91490,357 ops/s
[info]                  ·gc.alloc.rate:                   960,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23294,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,358 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   91822,996 ±(99.9%) 766,741 ops/s [Average]
[info]   (min, avg, max) = (91490,357, 91822,996, 92026,688), stdev = 199,120
[info]   CI (99.9%): [91056,255, 92589,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   963,806 ±(99.9%) 7,941 MB/sec [Average]
[info]   (min, avg, max) = (960,411, 963,806, 966,022), stdev = 2,062
[info]   CI (99.9%): [955,865, 971,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16520,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16520,004, 16520,005, 16520,005), stdev = 0,001
[info]   CI (99.9%): [16520,004, 16520,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,724 ±(99.9%) 1428,534 MB/sec [Average]
[info]   (min, avg, max) = (675,134, 946,724, 1354,273), stdev = 370,986
[info]   CI (99.9%): [≈ 0, 2375,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16234,848 ±(99.9%) 24592,379 B/op [Average]
[info]   (min, avg, max) = (11557,554, 16234,848, 23294,814), stdev = 6386,563
[info]   CI (99.9%): [≈ 0, 40827,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,214 ±(99.9%) 1,229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,214, 0,713), stdev = 0,319
[info]   CI (99.9%): [≈ 0, 1,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,80% complete, ETA 01:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278360,707 ops/s
[info] # Warmup Iteration   2: 291711,364 ops/s
[info] # Warmup Iteration   3: 293188,432 ops/s
[info] # Warmup Iteration   4: 294179,830 ops/s
[info] # Warmup Iteration   5: 295239,188 ops/s
[info] Iteration   1: 294692,257 ops/s
[info]                  ·gc.alloc.rate:                   958,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7185,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 295299,041 ops/s
[info]                  ·gc.alloc.rate:               960,718 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3582,320 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 295398,125 ops/s
[info]                  ·gc.alloc.rate:               960,949 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3580,768 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 294220,936 ops/s
[info]                  ·gc.alloc.rate:                   957,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7190,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,445 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 295116,843 ops/s
[info]                  ·gc.alloc.rate:               959,937 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3584,225 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   294945,441 ±(99.9%) 1874,935 ops/s [Average]
[info]   (min, avg, max) = (294220,936, 294945,441, 295398,125), stdev = 486,915
[info]   CI (99.9%): [293070,505, 296820,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   959,478 ±(99.9%) 6,077 MB/sec [Average]
[info]   (min, avg, max) = (957,178, 959,478, 960,949), stdev = 1,578
[info]   CI (99.9%): [953,401, 965,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5120,001, 5120,001, 5120,001), stdev = 0,001
[info]   CI (99.9%): [5120,001, 5120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,171 ±(99.9%) 1418,835 MB/sec [Average]
[info]   (min, avg, max) = (671,998, 941,171, 1345,408), stdev = 368,467
[info]   CI (99.9%): [≈ 0, 2360,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5024,698 ±(99.9%) 7604,626 B/op [Average]
[info]   (min, avg, max) = (3580,768, 5024,698, 7190,227), stdev = 1974,897
[info]   CI (99.9%): [≈ 0, 12629,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,134 ±(99.9%) 0,767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,134, 0,445), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 0,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51,00% complete, ETA 01:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25389,127 ops/s
[info] # Warmup Iteration   2: 37938,166 ops/s
[info] # Warmup Iteration   3: 38010,773 ops/s
[info] # Warmup Iteration   4: 38000,158 ops/s
[info] # Warmup Iteration   5: 38049,940 ops/s
[info] Iteration   1: 38024,532 ops/s
[info]                  ·gc.alloc.rate:                   1785,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              73904,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83811,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,862 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38163,540 ops/s
[info]                  ·gc.alloc.rate:                   1792,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              73904,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83624,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,434 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 38132,398 ops/s
[info]                  ·gc.alloc.rate:               1790,505 MB/sec
[info]                  ·gc.alloc.rate.norm:          73904,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55863,937 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 37891,149 ops/s
[info]                  ·gc.alloc.rate:                   1779,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              73904,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84439,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,729 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37920,627 ops/s
[info]                  ·gc.alloc.rate:                   1780,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              73904,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56303,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,864 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   38026,449 ±(99.9%) 469,743 ops/s [Average]
[info]   (min, avg, max) = (37891,149, 38026,449, 38163,540), stdev = 121,991
[info]   CI (99.9%): [37556,706, 38496,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1785,740 ±(99.9%) 21,595 MB/sec [Average]
[info]   (min, avg, max) = (1779,859, 1785,740, 1792,231), stdev = 5,608
[info]   CI (99.9%): [1764,145, 1807,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73904,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (73904,011, 73904,011, 73904,012), stdev = 0,001
[info]   CI (99.9%): [73904,010, 73904,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1759,277 ±(99.9%) 1421,161 MB/sec [Average]
[info]   (min, avg, max) = (1353,440, 1759,277, 2033,587), stdev = 369,071
[info]   CI (99.9%): [338,116, 3180,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72808,510 ±(99.9%) 58804,435 B/op [Average]
[info]   (min, avg, max) = (55863,937, 72808,510, 84439,418), stdev = 15271,325
[info]   CI (99.9%): [14004,075, 131612,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,378 ±(99.9%) 5,013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,378, 3,434), stdev = 1,302
[info]   CI (99.9%): [≈ 0, 6,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51,20% complete, ETA 01:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47233,296 ops/s
[info] # Warmup Iteration   2: 53846,844 ops/s
[info] # Warmup Iteration   3: 53937,212 ops/s
[info] # Warmup Iteration   4: 54200,772 ops/s
[info] # Warmup Iteration   5: 54054,367 ops/s
[info] Iteration   1: 54113,071 ops/s
[info]                  ·gc.alloc.rate:               902,943 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19566,599 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 54465,972 ops/s
[info]                  ·gc.alloc.rate:               908,887 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19440,173 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 54289,194 ops/s
[info]                  ·gc.alloc.rate:                   905,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38967,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,603 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 54325,759 ops/s
[info]                  ·gc.alloc.rate:               906,604 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19470,605 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 54361,595 ops/s
[info]                  ·gc.alloc.rate:               907,039 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19457,714 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   54311,118 ±(99.9%) 496,290 ops/s [Average]
[info]   (min, avg, max) = (54113,071, 54311,118, 54465,972), stdev = 128,885
[info]   CI (99.9%): [53814,828, 54807,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   906,274 ±(99.9%) 8,339 MB/sec [Average]
[info]   (min, avg, max) = (902,943, 906,274, 908,887), stdev = 2,166
[info]   CI (99.9%): [897,936, 914,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   26264,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26264,008, 26264,008, 26264,009), stdev = 0,001
[info]   CI (99.9%): [26264,006, 26264,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   806,718 ±(99.9%) 1156,703 MB/sec [Average]
[info]   (min, avg, max) = (671,980, 806,718, 1344,076), stdev = 300,392
[info]   CI (99.9%): [≈ 0, 1963,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   23380,567 ±(99.9%) 33553,103 B/op [Average]
[info]   (min, avg, max) = (19440,173, 23380,567, 38967,743), stdev = 8713,634
[info]   CI (99.9%): [≈ 0, 56933,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,121 ±(99.9%) 1,039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,121, 0,603), stdev = 0,270
[info]   CI (99.9%): [≈ 0, 1,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51,41% complete, ETA 01:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52597,675 ops/s
[info] # Warmup Iteration   2: 65821,659 ops/s
[info] # Warmup Iteration   3: 65949,122 ops/s
[info] # Warmup Iteration   4: 66078,931 ops/s
[info] # Warmup Iteration   5: 66298,466 ops/s
[info] Iteration   1: 66202,911 ops/s
[info]                  ·gc.alloc.rate:                   982,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31954,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,495 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 66110,995 ops/s
[info]                  ·gc.alloc.rate:               980,972 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15985,309 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 65995,313 ops/s
[info]                  ·gc.alloc.rate:               979,154 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16011,947 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 65806,035 ops/s
[info]                  ·gc.alloc.rate:                   976,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32116,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,498 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 66032,760 ops/s
[info]                  ·gc.alloc.rate:                   979,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16002,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,496 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   66029,603 ±(99.9%) 570,587 ops/s [Average]
[info]   (min, avg, max) = (65806,035, 66029,603, 66202,911), stdev = 148,180
[info]   CI (99.9%): [65459,016, 66600,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   979,703 ±(99.9%) 8,455 MB/sec [Average]
[info]   (min, avg, max) = (976,431, 979,703, 982,285), stdev = 2,196
[info]   CI (99.9%): [971,248, 988,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (23352,006, 23352,006, 23352,007), stdev = 0,001
[info]   CI (99.9%): [23352,005, 23352,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,264 ±(99.9%) 1417,542 MB/sec [Average]
[info]   (min, avg, max) = (671,363, 940,264, 1344,163), stdev = 368,131
[info]   CI (99.9%): [≈ 0, 2357,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22414,308 ±(99.9%) 33821,119 B/op [Average]
[info]   (min, avg, max) = (15985,309, 22414,308, 32116,334), stdev = 8783,237
[info]   CI (99.9%): [≈ 0, 56235,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,298 ±(99.9%) 1,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,298, 0,498), stdev = 0,272
[info]   CI (99.9%): [≈ 0, 1,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,61% complete, ETA 01:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72906,473 ops/s
[info] # Warmup Iteration   2: 106792,885 ops/s
[info] # Warmup Iteration   3: 106857,003 ops/s
[info] # Warmup Iteration   4: 107025,152 ops/s
[info] # Warmup Iteration   5: 106948,221 ops/s
[info] Iteration   1: 106358,991 ops/s
[info]                  ·gc.alloc.rate:                   1456,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20018,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,308 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 106611,099 ops/s
[info]                  ·gc.alloc.rate:               1460,506 MB/sec
[info]                  ·gc.alloc.rate.norm:          21559,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19982,429 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 106755,542 ops/s
[info]                  ·gc.alloc.rate:                   1462,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19972,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,921 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 106807,072 ops/s
[info]                  ·gc.alloc.rate:                   1462,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559,986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29980,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,307 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 106655,403 ops/s
[info]                  ·gc.alloc.rate:                   1460,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20027,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,307 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   106637,621 ±(99.9%) 670,480 ops/s [Average]
[info]   (min, avg, max) = (106358,991, 106637,621, 106807,072), stdev = 174,121
[info]   CI (99.9%): [105967,142, 107308,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1460,691 ±(99.9%) 8,888 MB/sec [Average]
[info]   (min, avg, max) = (1456,970, 1460,691, 1462,957), stdev = 2,308
[info]   CI (99.9%): [1451,803, 1469,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560,000 ±(99.9%) 0,060 B/op [Average]
[info]   (min, avg, max) = (21559,985, 21560,000, 21560,023), stdev = 0,016
[info]   CI (99.9%): [21559,940, 21560,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,461 ±(99.9%) 1170,780 MB/sec [Average]
[info]   (min, avg, max) = (1352,780, 1490,461, 2034,351), stdev = 304,048
[info]   CI (99.9%): [319,681, 2661,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21996,320 ±(99.9%) 17187,354 B/op [Average]
[info]   (min, avg, max) = (19972,876, 21996,320, 29980,768), stdev = 4463,501
[info]   CI (99.9%): [4808,966, 39183,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,368 ±(99.9%) 1,294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,368, 0,921), stdev = 0,336
[info]   CI (99.9%): [≈ 0, 1,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,81% complete, ETA 01:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304492,031 ops/s
[info] # Warmup Iteration   2: 318342,973 ops/s
[info] # Warmup Iteration   3: 306198,481 ops/s
[info] # Warmup Iteration   4: 305221,468 ops/s
[info] # Warmup Iteration   5: 306342,116 ops/s
[info] Iteration   1: 305787,349 ops/s
[info]                  ·gc.alloc.rate:                   974,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6925,141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,536 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 307315,240 ops/s
[info]                  ·gc.alloc.rate:               979,534 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3442,260 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 307133,146 ops/s
[info]                  ·gc.alloc.rate:                   978,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6887,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 304388,126 ops/s
[info]                  ·gc.alloc.rate:               970,098 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3475,094 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 305108,604 ops/s
[info]                  ·gc.alloc.rate:                   972,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6933,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,322 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   305946,493 ±(99.9%) 4884,973 ops/s [Average]
[info]   (min, avg, max) = (304388,126, 305946,493, 307315,240), stdev = 1268,612
[info]   CI (99.9%): [301061,520, 310831,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   975,072 ±(99.9%) 15,584 MB/sec [Average]
[info]   (min, avg, max) = (970,098, 975,072, 979,534), stdev = 4,047
[info]   CI (99.9%): [959,488, 990,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5016,001, 5016,001, 5016,002), stdev = 0,001
[info]   CI (99.9%): [5016,001, 5016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,597 ±(99.9%) 1418,180 MB/sec [Average]
[info]   (min, avg, max) = (672,085, 1075,597, 1345,508), stdev = 368,297
[info]   CI (99.9%): [≈ 0, 2493,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5532,824 ±(99.9%) 7291,357 B/op [Average]
[info]   (min, avg, max) = (3442,260, 5532,824, 6933,677), stdev = 1893,542
[info]   CI (99.9%): [≈ 0, 12824,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,236 ±(99.9%) 0,894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,236, 0,536), stdev = 0,232
[info]   CI (99.9%): [≈ 0, 1,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52,01% complete, ETA 01:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345642,765 ops/s
[info] # Warmup Iteration   2: 359870,353 ops/s
[info] # Warmup Iteration   3: 361225,530 ops/s
[info] # Warmup Iteration   4: 361111,636 ops/s
[info] # Warmup Iteration   5: 361319,773 ops/s
[info] Iteration   1: 362181,982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 361222,911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 362256,925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 361247,402 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 361333,749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   361648,594 ±(99.9%) 2015,489 ops/s [Average]
[info]   (min, avg, max) = (361222,911, 361648,594, 362256,925), stdev = 523,416
[info]   CI (99.9%): [359633,104, 363664,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52,21% complete, ETA 01:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65811,746 ops/s
[info] # Warmup Iteration   2: 81373,879 ops/s
[info] # Warmup Iteration   3: 81804,087 ops/s
[info] # Warmup Iteration   4: 81900,673 ops/s
[info] # Warmup Iteration   5: 81501,725 ops/s
[info] Iteration   1: 81780,178 ops/s
[info]                  ·gc.alloc.rate:                   1212,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25793,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,401 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81714,297 ops/s
[info]                  ·gc.alloc.rate:               1211,924 MB/sec
[info]                  ·gc.alloc.rate.norm:          23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12907,367 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 81839,353 ops/s
[info]                  ·gc.alloc.rate:                   1213,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25781,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,801 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 81826,579 ops/s
[info]                  ·gc.alloc.rate:                   1213,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25796,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,400 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 81334,082 ops/s
[info]                  ·gc.alloc.rate:                   1206,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25978,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,208 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   81698,898 ±(99.9%) 807,637 ops/s [Average]
[info]   (min, avg, max) = (81334,082, 81698,898, 81839,353), stdev = 209,741
[info]   CI (99.9%): [80891,261, 82506,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1211,691 ±(99.9%) 11,941 MB/sec [Average]
[info]   (min, avg, max) = (1206,295, 1211,691, 1213,706), stdev = 3,101
[info]   CI (99.9%): [1199,751, 1223,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344,010 ±(99.9%) 0,042 B/op [Average]
[info]   (min, avg, max) = (23344,005, 23344,010, 23344,029), stdev = 0,011
[info]   CI (99.9%): [23343,968, 23344,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,863 ±(99.9%) 1155,434 MB/sec [Average]
[info]   (min, avg, max) = (670,097, 1206,863, 1342,433), stdev = 300,062
[info]   CI (99.9%): [51,429, 2362,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23251,648 ±(99.9%) 22269,057 B/op [Average]
[info]   (min, avg, max) = (12907,367, 23251,648, 25978,525), stdev = 5783,203
[info]   CI (99.9%): [982,591, 45520,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,562 ±(99.9%) 1,768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,562, 1,208), stdev = 0,459
[info]   CI (99.9%): [≈ 0, 2,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52,41% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10631,135 ops/s
[info] # Warmup Iteration   2: 11020,513 ops/s
[info] # Warmup Iteration   3: 11037,434 ops/s
[info] # Warmup Iteration   4: 11088,213 ops/s
[info] # Warmup Iteration   5: 11116,957 ops/s
[info] Iteration   1: 11027,405 ops/s
[info]                  ·gc.alloc.rate:               273,277 MB/sec
[info]                  ·gc.alloc.rate.norm:          39011,066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73003,931 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 11115,743 ops/s
[info]                  ·gc.alloc.rate:      275,494 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,037 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 11090,332 ops/s
[info]                  ·gc.alloc.rate:               274,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          39008,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72595,904 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 11108,679 ops/s
[info]                  ·gc.alloc.rate:      275,325 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,040 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10987,315 ops/s
[info]                  ·gc.alloc.rate:                   272,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73276,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,348 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   11065,895 ±(99.9%) 215,849 ops/s [Average]
[info]   (min, avg, max) = (10987,315, 11065,895, 11115,743), stdev = 56,055
[info]   CI (99.9%): [10850,046, 11281,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   274,246 ±(99.9%) 5,408 MB/sec [Average]
[info]   (min, avg, max) = (272,282, 274,246, 275,494), stdev = 1,404
[info]   CI (99.9%): [268,839, 279,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39008,646 ±(99.9%) 5,209 B/op [Average]
[info]   (min, avg, max) = (39008,037, 39008,646, 39011,066), stdev = 1,353
[info]   CI (99.9%): [39003,437, 39013,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,879 ±(99.9%) 1078,724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,879, 511,516), stdev = 280,141
[info]   CI (99.9%): [≈ 0, 1385,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   43775,224 ±(99.9%) 153878,906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43775,224, 73276,285), stdev = 39961,863
[info]   CI (99.9%): [≈ 0, 197654,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,023), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,670 ±(99.9%) 5,765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,670, 3,348), stdev = 1,497
[info]   CI (99.9%): [≈ 0, 6,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52,61% complete, ETA 01:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21724,070 ops/s
[info] # Warmup Iteration   2: 28938,053 ops/s
[info] # Warmup Iteration   3: 29008,924 ops/s
[info] # Warmup Iteration   4: 29127,163 ops/s
[info] # Warmup Iteration   5: 29048,850 ops/s
[info] Iteration   1: 29146,949 ops/s
[info]                  ·gc.alloc.rate:                   1518,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72580,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29248,459 ops/s
[info]                  ·gc.alloc.rate:               1523,484 MB/sec
[info]                  ·gc.alloc.rate.norm:          81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72332,890 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 28952,703 ops/s
[info]                  ·gc.alloc.rate:                   1508,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109702,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,395 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29127,282 ops/s
[info]                  ·gc.alloc.rate:               1517,413 MB/sec
[info]                  ·gc.alloc.rate.norm:          81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72777,286 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 29084,276 ops/s
[info]                  ·gc.alloc.rate:                   1514,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72956,955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,126 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   29111,934 ±(99.9%) 413,922 ops/s [Average]
[info]   (min, avg, max) = (28952,703, 29111,934, 29248,459), stdev = 107,494
[info]   CI (99.9%): [28698,012, 29525,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1516,460 ±(99.9%) 21,231 MB/sec [Average]
[info]   (min, avg, max) = (1508,316, 1516,460, 1523,484), stdev = 5,514
[info]   CI (99.9%): [1495,230, 1537,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81984,014, 81984,014, 81984,015), stdev = 0,001
[info]   CI (99.9%): [81984,012, 81984,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,317 ±(99.9%) 1158,017 MB/sec [Average]
[info]   (min, avg, max) = (1344,010, 1480,317, 2018,276), stdev = 300,733
[info]   CI (99.9%): [322,300, 2638,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80070,165 ±(99.9%) 63792,511 B/op [Average]
[info]   (min, avg, max) = (72332,890, 80070,165, 109702,697), stdev = 16566,712
[info]   CI (99.9%): [16277,654, 143862,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,803 ±(99.9%) 7,878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,803, 4,496), stdev = 2,046
[info]   CI (99.9%): [≈ 0, 9,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52,81% complete, ETA 01:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22723,420 ops/s
[info] # Warmup Iteration   2: 33957,830 ops/s
[info] # Warmup Iteration   3: 33899,580 ops/s
[info] # Warmup Iteration   4: 33972,888 ops/s
[info] # Warmup Iteration   5: 33950,974 ops/s
[info] Iteration   1: 33792,931 ops/s
[info]                  ·gc.alloc.rate:                   1322,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62976,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,908 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33999,161 ops/s
[info]                  ·gc.alloc.rate:                   1330,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62658,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,964 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33981,599 ops/s
[info]                  ·gc.alloc.rate:                   1330,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62732,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,892 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33906,248 ops/s
[info]                  ·gc.alloc.rate:                   1327,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62915,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,932 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 33942,347 ops/s
[info]                  ·gc.alloc.rate:                   1328,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62899,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,965 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   33924,457 ±(99.9%) 315,168 ops/s [Average]
[info]   (min, avg, max) = (33792,931, 33924,457, 33999,161), stdev = 81,848
[info]   CI (99.9%): [33609,289, 34239,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1327,946 ±(99.9%) 12,372 MB/sec [Average]
[info]   (min, avg, max) = (1322,775, 1327,946, 1330,960), stdev = 3,213
[info]   CI (99.9%): [1315,575, 1340,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61608,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (61608,012, 61608,012, 61608,013), stdev = 0,001
[info]   CI (99.9%): [61608,010, 61608,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,422 ±(99.9%) 6,294 MB/sec [Average]
[info]   (min, avg, max) = (1352,160, 1354,422, 1356,367), stdev = 1,634
[info]   CI (99.9%): [1348,128, 1360,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62836,538 ±(99.9%) 517,641 B/op [Average]
[info]   (min, avg, max) = (62658,622, 62836,538, 62976,606), stdev = 134,430
[info]   CI (99.9%): [62318,897, 63354,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,932 ±(99.9%) 3,727 B/op [Average]
[info]   (min, avg, max) = (0,964, 1,932, 2,908), stdev = 0,968
[info]   CI (99.9%): [≈ 0, 5,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,01% complete, ETA 01:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532660,249 ops/s
[info] # Warmup Iteration   2: 557849,834 ops/s
[info] # Warmup Iteration   3: 559080,804 ops/s
[info] # Warmup Iteration   4: 555430,485 ops/s
[info] # Warmup Iteration   5: 560596,172 ops/s
[info] Iteration   1: 556389,641 ops/s
[info]                  ·gc.alloc.rate:                   1448,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3802,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,177 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 556291,667 ops/s
[info]                  ·gc.alloc.rate:                   1447,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3803,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 559189,374 ops/s
[info]                  ·gc.alloc.rate:               1455,217 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3787,016 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 559898,738 ops/s
[info]                  ·gc.alloc.rate:                   1457,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3786,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,176 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 559319,916 ops/s
[info]                  ·gc.alloc.rate:                   1455,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5692,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   558217,867 ±(99.9%) 6679,598 ops/s [Average]
[info]   (min, avg, max) = (556291,667, 558217,867, 559898,738), stdev = 1734,670
[info]   CI (99.9%): [551538,269, 564897,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1452,771 ±(99.9%) 17,383 MB/sec [Average]
[info]   (min, avg, max) = (1447,801, 1452,771, 1457,285), stdev = 4,514
[info]   CI (99.9%): [1435,387, 1470,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,789 ±(99.9%) 1167,057 MB/sec [Average]
[info]   (min, avg, max) = (1344,141, 1480,789, 2022,953), stdev = 303,081
[info]   CI (99.9%): [313,732, 2647,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4174,290 ±(99.9%) 3268,665 B/op [Average]
[info]   (min, avg, max) = (3786,203, 4174,290, 5692,711), stdev = 848,862
[info]   CI (99.9%): [905,625, 7442,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,117 ±(99.9%) 0,277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,177), stdev = 0,072
[info]   CI (99.9%): [≈ 0, 0,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53,21% complete, ETA 01:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14047,415 ops/s
[info] # Warmup Iteration   2: 26653,837 ops/s
[info] # Warmup Iteration   3: 26659,744 ops/s
[info] # Warmup Iteration   4: 26771,736 ops/s
[info] # Warmup Iteration   5: 26739,751 ops/s
[info] Iteration   1: 26873,593 ops/s
[info]                  ·gc.alloc.rate:                   2007,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              117552,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118940,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,657 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26820,674 ops/s
[info]                  ·gc.alloc.rate:                   2003,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              117552,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119326,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,664 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 26659,035 ops/s
[info]                  ·gc.alloc.rate:                   1991,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              117552,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120169,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,229 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 26835,640 ops/s
[info]                  ·gc.alloc.rate:                   2004,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              117552,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119499,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,662 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26856,731 ops/s
[info]                  ·gc.alloc.rate:                   2005,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              117552,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119444,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,440 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   26809,135 ±(99.9%) 332,283 ops/s [Average]
[info]   (min, avg, max) = (26659,035, 26809,135, 26873,593), stdev = 86,293
[info]   CI (99.9%): [26476,851, 27141,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2002,313 ±(99.9%) 24,821 MB/sec [Average]
[info]   (min, avg, max) = (1991,071, 2002,313, 2007,111), stdev = 6,446
[info]   CI (99.9%): [1977,491, 2027,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   117552,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (117552,015, 117552,015, 117552,017), stdev = 0,001
[info]   CI (99.9%): [117552,013, 117552,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2035,069 ±(99.9%) 11,527 MB/sec [Average]
[info]   (min, avg, max) = (2030,810, 2035,069, 2037,982), stdev = 2,993
[info]   CI (99.9%): [2023,542, 2046,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   119476,104 ±(99.9%) 1713,830 B/op [Average]
[info]   (min, avg, max) = (118940,038, 119476,104, 120169,814), stdev = 445,076
[info]   CI (99.9%): [117762,274, 121189,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,930 ±(99.9%) 4,191 B/op [Average]
[info]   (min, avg, max) = (1,229, 2,930, 3,664), stdev = 1,088
[info]   CI (99.9%): [≈ 0, 7,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53,41% complete, ETA 01:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26895,364 ops/s
[info] # Warmup Iteration   2: 32708,576 ops/s
[info] # Warmup Iteration   3: 32677,552 ops/s
[info] # Warmup Iteration   4: 32810,673 ops/s
[info] # Warmup Iteration   5: 32933,363 ops/s
[info] Iteration   1: 32732,159 ops/s
[info]                  ·gc.alloc.rate:                   1477,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64631,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 32900,592 ops/s
[info]                  ·gc.alloc.rate:                   1485,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64305,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,987 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 32583,075 ops/s
[info]                  ·gc.alloc.rate:                   1470,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64962,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 32705,076 ops/s
[info]                  ·gc.alloc.rate:                   1476,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64780,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 32663,935 ops/s
[info]                  ·gc.alloc.rate:                   1474,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97421,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   32716,967 ±(99.9%) 450,829 ops/s [Average]
[info]   (min, avg, max) = (32583,075, 32716,967, 32900,592), stdev = 117,079
[info]   CI (99.9%): [32266,138, 33167,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1476,666 ±(99.9%) 21,112 MB/sec [Average]
[info]   (min, avg, max) = (1470,569, 1476,666, 1485,368), stdev = 5,483
[info]   CI (99.9%): [1455,554, 1497,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   71032,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71032,012, 71032,013, 71032,013), stdev = 0,001
[info]   CI (99.9%): [71032,011, 71032,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1480,326 ±(99.9%) 1165,346 MB/sec [Average]
[info]   (min, avg, max) = (1344,084, 1480,326, 2021,697), stdev = 302,637
[info]   CI (99.9%): [314,979, 2645,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   71220,285 ±(99.9%) 56407,550 B/op [Average]
[info]   (min, avg, max) = (64305,183, 71220,285, 97421,414), stdev = 14648,862
[info]   CI (99.9%): [14812,735, 127627,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,600 ±(99.9%) 3,419 B/op [Average]
[info]   (min, avg, max) = (1,002, 1,600, 2,987), stdev = 0,888
[info]   CI (99.9%): [≈ 0, 5,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53,61% complete, ETA 01:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63593,437 ops/s
[info] # Warmup Iteration   2: 79626,897 ops/s
[info] # Warmup Iteration   3: 80471,935 ops/s
[info] # Warmup Iteration   4: 80396,731 ops/s
[info] # Warmup Iteration   5: 80483,779 ops/s
[info] Iteration   1: 79992,692 ops/s
[info]                  ·gc.alloc.rate:                   1693,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39630,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,819 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 80397,185 ops/s
[info]                  ·gc.alloc.rate:                   1701,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26302,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 80267,440 ops/s
[info]                  ·gc.alloc.rate:                   1698,821 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39573,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,816 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 80210,209 ops/s
[info]                  ·gc.alloc.rate:                   1697,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26440,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,408 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 79543,952 ops/s
[info]                  ·gc.alloc.rate:                   1683,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40052,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   80082,295 ±(99.9%) 1288,152 ops/s [Average]
[info]   (min, avg, max) = (79543,952, 80082,295, 80397,185), stdev = 334,529
[info]   CI (99.9%): [78794,143, 81370,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1694,970 ±(99.9%) 27,532 MB/sec [Average]
[info]   (min, avg, max) = (1683,444, 1694,970, 1701,681), stdev = 7,150
[info]   CI (99.9%): [1667,438, 1722,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (33312,005, 33312,005, 33312,006), stdev = 0,001
[info]   CI (99.9%): [33312,004, 33312,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1749,526 ±(99.9%) 1419,903 MB/sec [Average]
[info]   (min, avg, max) = (1343,627, 1749,526, 2024,083), stdev = 368,744
[info]   CI (99.9%): [329,623, 3169,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34399,814 ±(99.9%) 28230,399 B/op [Average]
[info]   (min, avg, max) = (26302,750, 34399,814, 40052,569), stdev = 7331,345
[info]   CI (99.9%): [6169,415, 62630,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,736 ±(99.9%) 1,309 B/op [Average]
[info]   (min, avg, max) = (0,408, 0,736, 1,223), stdev = 0,340
[info]   CI (99.9%): [≈ 0, 2,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,82% complete, ETA 01:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106260,774 ops/s
[info] # Warmup Iteration   2: 141763,010 ops/s
[info] # Warmup Iteration   3: 141594,923 ops/s
[info] # Warmup Iteration   4: 141676,409 ops/s
[info] # Warmup Iteration   5: 141533,788 ops/s
[info] Iteration   1: 141291,556 ops/s
[info]                  ·gc.alloc.rate:                   1346,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              15000,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15069,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,464 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 141113,776 ops/s
[info]                  ·gc.alloc.rate:                   1344,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              15000,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15099,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,696 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 141776,840 ops/s
[info]                  ·gc.alloc.rate:                   1351,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              15000,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15039,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,693 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 141624,465 ops/s
[info]                  ·gc.alloc.rate:                   1349,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              15000,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15067,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 141658,332 ops/s
[info]                  ·gc.alloc.rate:                   1349,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              15000,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15074,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   141492,994 ±(99.9%) 1071,236 ops/s [Average]
[info]   (min, avg, max) = (141113,776, 141492,994, 141776,840), stdev = 278,197
[info]   CI (99.9%): [140421,757, 142564,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1348,469 ±(99.9%) 10,000 MB/sec [Average]
[info]   (min, avg, max) = (1344,917, 1348,469, 1351,140), stdev = 2,597
[info]   CI (99.9%): [1338,469, 1358,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15000,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15000,003, 15000,003, 15000,003), stdev = 0,001
[info]   CI (99.9%): [15000,002, 15000,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,760 ±(99.9%) 5,854 MB/sec [Average]
[info]   (min, avg, max) = (1352,812, 1354,760, 1356,603), stdev = 1,520
[info]   CI (99.9%): [1348,906, 1360,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15070,011 ±(99.9%) 81,546 B/op [Average]
[info]   (min, avg, max) = (15039,867, 15070,011, 15099,263), stdev = 21,177
[info]   CI (99.9%): [14988,464, 15151,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,509 ±(99.9%) 0,747 B/op [Average]
[info]   (min, avg, max) = (0,231, 0,509, 0,696), stdev = 0,194
[info]   CI (99.9%): [≈ 0, 1,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,02% complete, ETA 01:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1242456,526 ops/s
[info] # Warmup Iteration   2: 1305258,426 ops/s
[info] # Warmup Iteration   3: 1318430,082 ops/s
[info] # Warmup Iteration   4: 1324488,907 ops/s
[info] # Warmup Iteration   5: 1327807,632 ops/s
[info] Iteration   1: 1330352,472 ops/s
[info]                  ·gc.alloc.rate:                   1102,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1332010,325 ops/s
[info]                  ·gc.alloc.rate:               1103,740 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 794,194 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1328599,370 ops/s
[info]                  ·gc.alloc.rate:                   1100,772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1592,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1329172,560 ops/s
[info]                  ·gc.alloc.rate:                   1101,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1330096,161 ops/s
[info]                  ·gc.alloc.rate:               1101,940 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 796,103 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1330046,178 ±(99.9%) 5024,555 ops/s [Average]
[info]   (min, avg, max) = (1328599,370, 1330046,178, 1332010,325), stdev = 1304,861
[info]   CI (99.9%): [1325021,623, 1335070,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1102,004 ±(99.9%) 4,309 MB/sec [Average]
[info]   (min, avg, max) = (1100,772, 1102,004, 1103,740), stdev = 1,119
[info]   CI (99.9%): [1097,695, 1106,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,000, 1304,000, 1304,000), stdev = 0,001
[info]   CI (99.9%): [1304,000, 1304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,681 ±(99.9%) 1417,290 MB/sec [Average]
[info]   (min, avg, max) = (672,227, 1075,681, 1344,829), stdev = 368,066
[info]   CI (99.9%): [≈ 0, 2492,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1273,095 ±(99.9%) 1680,051 B/op [Average]
[info]   (min, avg, max) = (794,194, 1273,095, 1592,421), stdev = 436,304
[info]   CI (99.9%): [≈ 0, 2953,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,044 ±(99.9%) 0,170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,044, 0,099), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54,22% complete, ETA 01:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1443324,902 ops/s
[info] # Warmup Iteration   2: 1528977,761 ops/s
[info] # Warmup Iteration   3: 1531675,313 ops/s
[info] # Warmup Iteration   4: 1531481,953 ops/s
[info] # Warmup Iteration   5: 1531504,650 ops/s
[info] Iteration   1: 1534564,876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1524266,612 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1535094,791 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1531732,337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1534501,902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1532032,104 ±(99.9%) 17465,080 ops/s [Average]
[info]   (min, avg, max) = (1524266,612, 1532032,104, 1535094,791), stdev = 4535,626
[info]   CI (99.9%): [1514567,023, 1549497,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54,42% complete, ETA 01:00:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92771,098 ops/s
[info] # Warmup Iteration   2: 138456,403 ops/s
[info] # Warmup Iteration   3: 138929,402 ops/s
[info] # Warmup Iteration   4: 138888,940 ops/s
[info] # Warmup Iteration   5: 138305,589 ops/s
[info] Iteration   1: 138389,679 ops/s
[info]                  ·gc.alloc.rate:                   1560,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15385,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,237 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 139021,755 ops/s
[info]                  ·gc.alloc.rate:                   1567,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15331,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,707 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 138837,062 ops/s
[info]                  ·gc.alloc.rate:                   1565,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23046,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 138619,528 ops/s
[info]                  ·gc.alloc.rate:               1562,891 MB/sec
[info]                  ·gc.alloc.rate.norm:          17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15397,658 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 138735,051 ops/s
[info]                  ·gc.alloc.rate:                   1563,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15399,678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   138720,615 ±(99.9%) 911,617 ops/s [Average]
[info]   (min, avg, max) = (138389,679, 138720,615, 139021,755), stdev = 236,744
[info]   CI (99.9%): [137808,998, 139632,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1563,926 ±(99.9%) 10,665 MB/sec [Average]
[info]   (min, avg, max) = (1560,049, 1563,926, 1567,526), stdev = 2,770
[info]   CI (99.9%): [1553,260, 1574,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17744,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17744,003, 17744,003, 17744,003), stdev = 0,001
[info]   CI (99.9%): [17744,003, 17744,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,730 ±(99.9%) 1167,177 MB/sec [Average]
[info]   (min, avg, max) = (1352,717, 1490,730, 2032,945), stdev = 303,112
[info]   CI (99.9%): [323,554, 2657,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16912,323 ±(99.9%) 13204,969 B/op [Average]
[info]   (min, avg, max) = (15331,845, 16912,323, 23046,622), stdev = 3429,289
[info]   CI (99.9%): [3707,354, 30117,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,378 ±(99.9%) 1,035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,378, 0,707), stdev = 0,269
[info]   CI (99.9%): [≈ 0, 1,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54,62% complete, ETA 01:00:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30971,888 ops/s
[info] # Warmup Iteration   2: 33112,184 ops/s
[info] # Warmup Iteration   3: 33183,735 ops/s
[info] # Warmup Iteration   4: 33018,541 ops/s
[info] # Warmup Iteration   5: 33082,721 ops/s
[info] Iteration   1: 33085,568 ops/s
[info]                  ·gc.alloc.rate:               437,211 MB/sec
[info]                  ·gc.alloc.rate.norm:          20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24334,644 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 33091,113 ops/s
[info]                  ·gc.alloc.rate:                   437,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24331,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,990 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33127,119 ops/s
[info]                  ·gc.alloc.rate:      437,773 MB/sec
[info]                  ·gc.alloc.rate.norm: 20800,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 32913,590 ops/s
[info]                  ·gc.alloc.rate:                   434,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32263,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152,371 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33122,490 ops/s
[info]                  ·gc.alloc.rate:                   437,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32060,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,978 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   33067,976 ±(99.9%) 339,804 ops/s [Average]
[info]   (min, avg, max) = (32913,590, 33067,976, 33127,119), stdev = 88,246
[info]   CI (99.9%): [32728,172, 33407,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   436,996 ±(99.9%) 4,404 MB/sec [Average]
[info]   (min, avg, max) = (434,996, 436,996, 437,773), stdev = 1,144
[info]   CI (99.9%): [432,592, 441,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   20800,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20800,012, 20800,013, 20800,013), stdev = 0,001
[info]   CI (99.9%): [20800,011, 20800,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,490 ±(99.9%) 1068,593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,490, 674,732), stdev = 277,510
[info]   CI (99.9%): [≈ 0, 1543,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22598,113 ±(99.9%) 50926,720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22598,113, 32263,387), stdev = 13225,507
[info]   CI (99.9%): [≈ 0, 73524,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,187), stdev = 1,418
[info]   CI (99.9%): [≈ 0, 6,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   31,068 ±(99.9%) 261,133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31,068, 152,371), stdev = 67,815
[info]   CI (99.9%): [≈ 0, 292,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,82% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27329,897 ops/s
[info] # Warmup Iteration   2: 41339,186 ops/s
[info] # Warmup Iteration   3: 41218,292 ops/s
[info] # Warmup Iteration   4: 41479,998 ops/s
[info] # Warmup Iteration   5: 41286,610 ops/s
[info] Iteration   1: 41288,094 ops/s
[info]                  ·gc.alloc.rate:               1481,048 MB/sec
[info]                  ·gc.alloc.rate.norm:          56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51568,063 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 41247,664 ops/s
[info]                  ·gc.alloc.rate:                   1479,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51668,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,794 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 41374,736 ops/s
[info]                  ·gc.alloc.rate:                   1484,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77328,838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,584 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41329,796 ops/s
[info]                  ·gc.alloc.rate:                   1482,641 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51655,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,793 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 41362,989 ops/s
[info]                  ·gc.alloc.rate:                   1483,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51638,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,792 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   41320,656 ±(99.9%) 203,651 ops/s [Average]
[info]   (min, avg, max) = (41247,664, 41320,656, 41374,736), stdev = 52,888
[info]   CI (99.9%): [41117,005, 41524,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1482,219 ±(99.9%) 7,253 MB/sec [Average]
[info]   (min, avg, max) = (1479,603, 1482,219, 1484,161), stdev = 1,884
[info]   CI (99.9%): [1474,966, 1489,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56456,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56456,010, 56456,010, 56456,011), stdev = 0,001
[info]   CI (99.9%): [56456,009, 56456,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,687 ±(99.9%) 1167,136 MB/sec [Average]
[info]   (min, avg, max) = (1352,819, 1490,687, 2032,882), stdev = 303,101
[info]   CI (99.9%): [323,551, 2657,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   56771,808 ±(99.9%) 44250,809 B/op [Average]
[info]   (min, avg, max) = (51568,063, 56771,808, 77328,838), stdev = 11491,795
[info]   CI (99.9%): [12520,998, 101022,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,792 ±(99.9%) 2,156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,792, 1,584), stdev = 0,560
[info]   CI (99.9%): [≈ 0, 2,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,02% complete, ETA 00:59:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 720755,199 ops/s
[info] # Warmup Iteration   2: 772380,914 ops/s
[info] # Warmup Iteration   3: 762471,316 ops/s
[info] # Warmup Iteration   4: 773511,974 ops/s
[info] # Warmup Iteration   5: 772174,233 ops/s
[info] Iteration   1: 766786,548 ops/s
[info]                  ·gc.alloc.rate:               1496,633 MB/sec
[info]                  ·gc.alloc.rate.norm:          3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2758,950 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 772406,001 ops/s
[info]                  ·gc.alloc.rate:                   1507,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4109,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 777568,034 ops/s
[info]                  ·gc.alloc.rate:                   1517,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2724,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 776713,167 ops/s
[info]                  ·gc.alloc.rate:                   1516,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2730,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 774886,865 ops/s
[info]                  ·gc.alloc.rate:                   1512,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2739,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   773672,123 ±(99.9%) 16664,424 ops/s [Average]
[info]   (min, avg, max) = (766786,548, 773672,123, 777568,034), stdev = 4327,698
[info]   CI (99.9%): [757007,699, 790336,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1510,131 ±(99.9%) 32,608 MB/sec [Average]
[info]   (min, avg, max) = (1496,633, 1510,131, 1517,590), stdev = 8,468
[info]   CI (99.9%): [1477,523, 1542,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,001, 3072,001, 3072,001), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,723 ±(99.9%) 1154,108 MB/sec [Average]
[info]   (min, avg, max) = (1344,119, 1480,723, 2016,866), stdev = 299,718
[info]   CI (99.9%): [326,615, 2634,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3012,691 ±(99.9%) 2361,887 B/op [Average]
[info]   (min, avg, max) = (2724,800, 3012,691, 4109,684), stdev = 613,374
[info]   CI (99.9%): [650,804, 5374,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,068 ±(99.9%) 0,186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,068, 0,127), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55,22% complete, ETA 00:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16418,103 ops/s
[info] # Warmup Iteration   2: 30783,038 ops/s
[info] # Warmup Iteration   3: 30864,796 ops/s
[info] # Warmup Iteration   4: 30896,936 ops/s
[info] # Warmup Iteration   5: 31015,384 ops/s
[info] Iteration   1: 30927,366 ops/s
[info]                  ·gc.alloc.rate:                   2250,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              114520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103443,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,119 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30902,650 ops/s
[info]                  ·gc.alloc.rate:                   2248,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              114520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138204,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,120 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 31047,550 ops/s
[info]                  ·gc.alloc.rate:                   2258,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              114520,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103253,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,055 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30967,296 ops/s
[info]                  ·gc.alloc.rate:                   2253,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              114520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103591,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,116 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 31052,353 ops/s
[info]                  ·gc.alloc.rate:                   2258,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              114520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137879,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,055 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   30979,443 ±(99.9%) 263,363 ops/s [Average]
[info]   (min, avg, max) = (30902,650, 30979,443, 31052,353), stdev = 68,394
[info]   CI (99.9%): [30716,080, 31242,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2253,980 ±(99.9%) 18,221 MB/sec [Average]
[info]   (min, avg, max) = (2248,368, 2253,980, 2258,868), stdev = 4,732
[info]   CI (99.9%): [2235,759, 2272,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114520,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (114520,013, 114520,013, 114520,014), stdev = 0,001
[info]   CI (99.9%): [114520,012, 114520,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2308,146 ±(99.9%) 1435,429 MB/sec [Average]
[info]   (min, avg, max) = (2032,967, 2308,146, 2719,616), stdev = 372,776
[info]   CI (99.9%): [872,716, 3743,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117274,534 ±(99.9%) 73002,379 B/op [Average]
[info]   (min, avg, max) = (103253,756, 117274,534, 138204,420), stdev = 18958,486
[info]   CI (99.9%): [44272,155, 190276,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,693 ±(99.9%) 2,242 B/op [Average]
[info]   (min, avg, max) = (1,055, 1,693, 2,120), stdev = 0,582
[info]   CI (99.9%): [≈ 0, 3,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55,42% complete, ETA 00:59:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33682,908 ops/s
[info] # Warmup Iteration   2: 40913,769 ops/s
[info] # Warmup Iteration   3: 41889,926 ops/s
[info] # Warmup Iteration   4: 41999,472 ops/s
[info] # Warmup Iteration   5: 41921,493 ops/s
[info] Iteration   1: 41831,194 ops/s
[info]                  ·gc.alloc.rate:               1746,342 MB/sec
[info]                  ·gc.alloc.rate.norm:          65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50574,244 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 42085,662 ops/s
[info]                  ·gc.alloc.rate:                   1757,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75469,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,114 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 42105,357 ops/s
[info]                  ·gc.alloc.rate:                   1757,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50344,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,556 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 41955,939 ops/s
[info]                  ·gc.alloc.rate:                   1752,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75894,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,342 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42007,853 ops/s
[info]                  ·gc.alloc.rate:                   1753,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75935,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,560 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   41997,201 ±(99.9%) 425,743 ops/s [Average]
[info]   (min, avg, max) = (41831,194, 41997,201, 42105,357), stdev = 110,564
[info]   CI (99.9%): [41571,458, 42422,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1753,574 ±(99.9%) 18,246 MB/sec [Average]
[info]   (min, avg, max) = (1746,342, 1753,574, 1757,986), stdev = 4,738
[info]   CI (99.9%): [1735,329, 1771,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65720,010 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (65720,010, 65720,010, 65720,011), stdev = 0,001
[info]   CI (99.9%): [65720,007, 65720,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1751,746 ±(99.9%) 1428,790 MB/sec [Average]
[info]   (min, avg, max) = (1343,882, 1751,746, 2026,617), stdev = 371,052
[info]   CI (99.9%): [322,956, 3180,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   65643,665 ±(99.9%) 53379,948 B/op [Average]
[info]   (min, avg, max) = (50344,794, 65643,665, 75935,668), stdev = 13862,603
[info]   CI (99.9%): [12263,717, 119023,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,714 ±(99.9%) 4,450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,714, 3,114), stdev = 1,156
[info]   CI (99.9%): [≈ 0, 6,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,62% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290889,598 ops/s
[info] # Warmup Iteration   2: 399908,209 ops/s
[info] # Warmup Iteration   3: 400079,527 ops/s
[info] # Warmup Iteration   4: 400239,722 ops/s
[info] # Warmup Iteration   5: 399847,824 ops/s
[info] Iteration   1: 400237,426 ops/s
[info]                  ·gc.alloc.rate:               1112,837 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2658,582 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 399328,218 ops/s
[info]                  ·gc.alloc.rate:                   1110,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5330,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 399356,527 ops/s
[info]                  ·gc.alloc.rate:                   1110,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5334,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,246 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 400100,231 ops/s
[info]                  ·gc.alloc.rate:               1112,445 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2663,402 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 399095,110 ops/s
[info]                  ·gc.alloc.rate:                   1109,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5345,535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,246 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   399623,502 ±(99.9%) 1965,187 ops/s [Average]
[info]   (min, avg, max) = (399095,110, 399623,502, 400237,426), stdev = 510,353
[info]   CI (99.9%): [397658,316, 401588,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1111,111 ±(99.9%) 5,471 MB/sec [Average]
[info]   (min, avg, max) = (1109,728, 1111,111, 1112,837), stdev = 1,421
[info]   CI (99.9%): [1105,641, 1116,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4376,001, 4376,001, 4376,001), stdev = 0,001
[info]   CI (99.9%): [4376,001, 4376,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,917 ±(99.9%) 1428,330 MB/sec [Average]
[info]   (min, avg, max) = (676,089, 1082,917, 1355,596), stdev = 370,933
[info]   CI (99.9%): [≈ 0, 2511,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4266,437 ±(99.9%) 5643,408 B/op [Average]
[info]   (min, avg, max) = (2658,582, 4266,437, 5345,535), stdev = 1465,575
[info]   CI (99.9%): [≈ 0, 9909,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,131 ±(99.9%) 0,479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,131, 0,246), stdev = 0,124
[info]   CI (99.9%): [≈ 0, 0,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,82% complete, ETA 00:58:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1598822,362 ops/s
[info] # Warmup Iteration   2: 1693353,577 ops/s
[info] # Warmup Iteration   3: 1706431,754 ops/s
[info] # Warmup Iteration   4: 1690757,932 ops/s
[info] # Warmup Iteration   5: 1704103,115 ops/s
[info] Iteration   1: 1704155,663 ops/s
[info]                  ·gc.alloc.rate:                   996,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1242,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1708155,089 ops/s
[info]                  ·gc.alloc.rate:               998,581 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619,297 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1696798,087 ops/s
[info]                  ·gc.alloc.rate:                   991,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1700158,298 ops/s
[info]                  ·gc.alloc.rate:               993,910 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 622,203 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1698292,294 ops/s
[info]                  ·gc.alloc.rate:                   992,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1701511,886 ±(99.9%) 17806,843 ops/s [Average]
[info]   (min, avg, max) = (1696798,087, 1701511,886, 1708155,089), stdev = 4624,381
[info]   CI (99.9%): [1683705,043, 1719318,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   994,635 ±(99.9%) 10,596 MB/sec [Average]
[info]   (min, avg, max) = (991,845, 994,635, 998,581), stdev = 2,752
[info]   CI (99.9%): [984,039, 1005,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,678 ±(99.9%) 1418,315 MB/sec [Average]
[info]   (min, avg, max) = (672,188, 1075,678, 1345,698), stdev = 368,332
[info]   CI (99.9%): [≈ 0, 2493,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   995,369 ±(99.9%) 1316,860 B/op [Average]
[info]   (min, avg, max) = (619,297, 995,369, 1246,800), stdev = 341,984
[info]   CI (99.9%): [≈ 0, 2312,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,039), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56,02% complete, ETA 00:58:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1698177,199 ops/s
[info] # Warmup Iteration   2: 1771484,705 ops/s
[info] # Warmup Iteration   3: 1775667,546 ops/s
[info] # Warmup Iteration   4: 1772213,303 ops/s
[info] # Warmup Iteration   5: 1772298,561 ops/s
[info] Iteration   1: 1777975,681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1744234,512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1776883,636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1771707,542 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1775027,753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1769165,825 ±(99.9%) 54441,729 ops/s [Average]
[info]   (min, avg, max) = (1744234,512, 1769165,825, 1777975,681), stdev = 14138,344
[info]   CI (99.9%): [1714724,096, 1823607,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56,22% complete, ETA 00:58:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169544,240 ops/s
[info] # Warmup Iteration   2: 253883,401 ops/s
[info] # Warmup Iteration   3: 255444,838 ops/s
[info] # Warmup Iteration   4: 255890,142 ops/s
[info] # Warmup Iteration   5: 256095,199 ops/s
[info] Iteration   1: 254771,845 ops/s
[info]                  ·gc.alloc.rate:                   1649,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12537,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,257 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 254760,742 ops/s
[info]                  ·gc.alloc.rate:                   1649,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8369,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,386 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 255565,955 ops/s
[info]                  ·gc.alloc.rate:                   1654,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12523,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,385 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 255086,583 ops/s
[info]                  ·gc.alloc.rate:               1651,678 MB/sec
[info]                  ·gc.alloc.rate.norm:          10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8371,512 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 255693,440 ops/s
[info]                  ·gc.alloc.rate:               1655,552 MB/sec
[info]                  ·gc.alloc.rate.norm:          10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8357,629 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   255175,713 ±(99.9%) 1682,410 ops/s [Average]
[info]   (min, avg, max) = (254760,742, 255175,713, 255693,440), stdev = 436,917
[info]   CI (99.9%): [253493,303, 256858,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1652,353 ±(99.9%) 10,620 MB/sec [Average]
[info]   (min, avg, max) = (1649,761, 1652,353, 1655,552), stdev = 2,758
[info]   CI (99.9%): [1641,733, 1662,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10192,002, 10192,002, 10192,002), stdev = 0,001
[info]   CI (99.9%): [10192,001, 10192,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1626,423 ±(99.9%) 1424,021 MB/sec [Average]
[info]   (min, avg, max) = (1354,817, 1626,423, 2033,516), stdev = 369,814
[info]   CI (99.9%): [202,401, 3050,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10032,033 ±(99.9%) 8782,769 B/op [Average]
[info]   (min, avg, max) = (8357,629, 10032,033, 12537,666), stdev = 2280,857
[info]   CI (99.9%): [1249,264, 18814,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,206 ±(99.9%) 0,750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,206, 0,386), stdev = 0,195
[info]   CI (99.9%): [≈ 0, 0,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56,43% complete, ETA 00:57:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55532,882 ops/s
[info] # Warmup Iteration   2: 59450,640 ops/s
[info] # Warmup Iteration   3: 59733,972 ops/s
[info] # Warmup Iteration   4: 59833,305 ops/s
[info] # Warmup Iteration   5: 59736,616 ops/s
[info] Iteration   1: 59956,184 ops/s
[info]                  ·gc.alloc.rate:      401,593 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 59833,264 ops/s
[info]                  ·gc.alloc.rate:                   400,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13455,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,237 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 59778,245 ops/s
[info]                  ·gc.alloc.rate:                   400,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13468,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,274 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 59708,494 ops/s
[info]                  ·gc.alloc.rate:      400,013 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 59665,707 ops/s
[info]                  ·gc.alloc.rate:                   399,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17798,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84,119 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   59788,379 ±(99.9%) 437,798 ops/s [Average]
[info]   (min, avg, max) = (59665,707, 59788,379, 59956,184), stdev = 113,695
[info]   CI (99.9%): [59350,581, 60226,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   400,522 ±(99.9%) 2,877 MB/sec [Average]
[info]   (min, avg, max) = (399,676, 400,522, 401,593), stdev = 0,747
[info]   CI (99.9%): [397,645, 403,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10544,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10544,007, 10544,007, 10544,008), stdev = 0,001
[info]   CI (99.9%): [10544,006, 10544,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   339,550 ±(99.9%) 1220,799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,550, 674,656), stdev = 317,038
[info]   CI (99.9%): [≈ 0, 1560,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   8944,496 ±(99.9%) 32171,663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8944,496, 17798,383), stdev = 8354,879
[info]   CI (99.9%): [≈ 0, 41116,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,483 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,189), stdev = 1,424
[info]   CI (99.9%): [≈ 0, 6,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   16,926 ±(99.9%) 144,638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,926, 84,119), stdev = 37,562
[info]   CI (99.9%): [≈ 0, 161,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56,63% complete, ETA 00:57:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67991,781 ops/s
[info] # Warmup Iteration   2: 88500,312 ops/s
[info] # Warmup Iteration   3: 88580,396 ops/s
[info] # Warmup Iteration   4: 88543,688 ops/s
[info] # Warmup Iteration   5: 87149,345 ops/s
[info] Iteration   1: 88433,480 ops/s
[info]                  ·gc.alloc.rate:                   1661,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23839,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,111 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 87919,069 ops/s
[info]                  ·gc.alloc.rate:                   1652,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35998,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,490 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 88300,812 ops/s
[info]                  ·gc.alloc.rate:               1659,225 MB/sec
[info]                  ·gc.alloc.rate.norm:          29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23922,473 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 87871,960 ops/s
[info]                  ·gc.alloc.rate:                   1651,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36130,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,746 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 88537,543 ops/s
[info]                  ·gc.alloc.rate:               1663,691 MB/sec
[info]                  ·gc.alloc.rate.norm:          29576,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23939,983 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   88212,573 ±(99.9%) 1162,157 ops/s [Average]
[info]   (min, avg, max) = (87871,960, 88212,573, 88537,543), stdev = 301,809
[info]   CI (99.9%): [87050,416, 89374,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1657,669 ±(99.9%) 21,500 MB/sec [Average]
[info]   (min, avg, max) = (1651,481, 1657,669, 1663,691), stdev = 5,583
[info]   CI (99.9%): [1636,169, 1679,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29576,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (29576,005, 29576,005, 29576,005), stdev = 0,001
[info]   CI (99.9%): [29576,004, 29576,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611,318 ±(99.9%) 1416,184 MB/sec [Average]
[info]   (min, avg, max) = (1339,510, 1611,318, 2017,471), stdev = 367,778
[info]   CI (99.9%): [195,134, 3027,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28766,209 ±(99.9%) 25655,029 B/op [Average]
[info]   (min, avg, max) = (23839,894, 28766,209, 36130,436), stdev = 6662,530
[info]   CI (99.9%): [3111,180, 54421,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,670 ±(99.9%) 2,563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,670, 1,490), stdev = 0,665
[info]   CI (99.9%): [≈ 0, 3,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56,83% complete, ETA 00:57:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66281,112 ops/s
[info] # Warmup Iteration   2: 92908,241 ops/s
[info] # Warmup Iteration   3: 94132,098 ops/s
[info] # Warmup Iteration   4: 94191,752 ops/s
[info] # Warmup Iteration   5: 94253,409 ops/s
[info] Iteration   1: 94327,677 ops/s
[info]                  ·gc.alloc.rate:                   1093,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22516,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,695 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 94497,388 ops/s
[info]                  ·gc.alloc.rate:                   1095,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22500,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,347 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 94279,254 ops/s
[info]                  ·gc.alloc.rate:               1092,630 MB/sec
[info]                  ·gc.alloc.rate.norm:          18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11281,408 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 94448,856 ops/s
[info]                  ·gc.alloc.rate:               1094,686 MB/sec
[info]                  ·gc.alloc.rate.norm:          18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22544,650 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 93167,218 ops/s
[info]                  ·gc.alloc.rate:                   1079,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22876,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,352 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   94144,079 ±(99.9%) 2130,031 ops/s [Average]
[info]   (min, avg, max) = (93167,218, 94144,079, 94497,388), stdev = 553,162
[info]   CI (99.9%): [92014,048, 96274,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1091,071 ±(99.9%) 24,904 MB/sec [Average]
[info]   (min, avg, max) = (1079,655, 1091,071, 1095,198), stdev = 6,468
[info]   CI (99.9%): [1066,167, 1115,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18240,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18240,004, 18240,004, 18240,005), stdev = 0,001
[info]   CI (99.9%): [18240,004, 18240,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1216,682 ±(99.9%) 1164,333 MB/sec [Average]
[info]   (min, avg, max) = (675,789, 1216,682, 1354,117), stdev = 302,374
[info]   CI (99.9%): [52,349, 2381,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20343,874 ±(99.9%) 19516,789 B/op [Average]
[info]   (min, avg, max) = (11281,408, 20343,874, 22876,835), stdev = 5068,448
[info]   CI (99.9%): [827,085, 39860,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,279 ±(99.9%) 1,120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,279, 0,695), stdev = 0,291
[info]   CI (99.9%): [≈ 0, 1,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,03% complete, ETA 00:57:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101537,069 ops/s
[info] # Warmup Iteration   2: 118954,569 ops/s
[info] # Warmup Iteration   3: 117954,362 ops/s
[info] # Warmup Iteration   4: 117631,447 ops/s
[info] # Warmup Iteration   5: 118035,686 ops/s
[info] Iteration   1: 118632,823 ops/s
[info]                  ·gc.alloc.rate:                   1249,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17779,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 118554,560 ops/s
[info]                  ·gc.alloc.rate:               1248,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17793,009 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 118745,633 ops/s
[info]                  ·gc.alloc.rate:                   1250,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17764,543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,552 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 118386,273 ops/s
[info]                  ·gc.alloc.rate:               1246,913 MB/sec
[info]                  ·gc.alloc.rate.norm:          16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17834,160 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 118675,010 ops/s
[info]                  ·gc.alloc.rate:                   1249,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8904,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,552 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   118598,860 ±(99.9%) 529,552 ops/s [Average]
[info]   (min, avg, max) = (118386,273, 118598,860, 118745,633), stdev = 137,523
[info]   CI (99.9%): [118069,308, 119128,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1249,063 ±(99.9%) 5,566 MB/sec [Average]
[info]   (min, avg, max) = (1246,913, 1249,063, 1250,709), stdev = 1,446
[info]   CI (99.9%): [1243,497, 1254,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16576,003, 16576,004, 16576,004), stdev = 0,001
[info]   CI (99.9%): [16576,003, 16576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206,722 ±(99.9%) 1152,385 MB/sec [Average]
[info]   (min, avg, max) = (671,371, 1206,722, 1341,556), stdev = 299,271
[info]   CI (99.9%): [54,337, 2359,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16015,176 ±(99.9%) 15306,905 B/op [Average]
[info]   (min, avg, max) = (8904,354, 16015,176, 17834,160), stdev = 3975,155
[info]   CI (99.9%): [708,271, 31322,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,276 ±(99.9%) 1,063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,276, 0,552), stdev = 0,276
[info]   CI (99.9%): [≈ 0, 1,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57,23% complete, ETA 00:56:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33605,266 ops/s
[info] # Warmup Iteration   2: 55347,455 ops/s
[info] # Warmup Iteration   3: 55611,481 ops/s
[info] # Warmup Iteration   4: 55576,106 ops/s
[info] # Warmup Iteration   5: 55591,032 ops/s
[info] Iteration   1: 55447,702 ops/s
[info]                  ·gc.alloc.rate:                   2648,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77025,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,182 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 55672,063 ops/s
[info]                  ·gc.alloc.rate:                   2659,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76790,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,354 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 55577,430 ops/s
[info]                  ·gc.alloc.rate:                   2654,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76997,432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,358 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 55481,843 ops/s
[info]                  ·gc.alloc.rate:                   2650,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77185,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,181 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 55376,847 ops/s
[info]                  ·gc.alloc.rate:                   2644,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              75176,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58044,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,592 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   55511,177 ±(99.9%) 444,110 ops/s [Average]
[info]   (min, avg, max) = (55376,847, 55511,177, 55672,063), stdev = 115,334
[info]   CI (99.9%): [55067,067, 55955,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2651,462 ±(99.9%) 21,433 MB/sec [Average]
[info]   (min, avg, max) = (2644,885, 2651,462, 2659,221), stdev = 5,566
[info]   CI (99.9%): [2630,029, 2672,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75176,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (75176,007, 75176,007, 75176,008), stdev = 0,001
[info]   CI (99.9%): [75176,006, 75176,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2582,407 ±(99.9%) 1162,956 MB/sec [Average]
[info]   (min, avg, max) = (2042,169, 2582,407, 2721,239), stdev = 302,016
[info]   CI (99.9%): [1419,451, 3745,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73208,860 ±(99.9%) 32646,009 B/op [Average]
[info]   (min, avg, max) = (58044,921, 73208,860, 77185,926), stdev = 8478,065
[info]   CI (99.9%): [40562,852, 105854,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,533 ±(99.9%) 3,037 B/op [Average]
[info]   (min, avg, max) = (0,592, 1,533, 2,358), stdev = 0,789
[info]   CI (99.9%): [≈ 0, 4,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57,43% complete, ETA 00:56:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72514,310 ops/s
[info] # Warmup Iteration   2: 84582,059 ops/s
[info] # Warmup Iteration   3: 84580,646 ops/s
[info] # Warmup Iteration   4: 82796,355 ops/s
[info] # Warmup Iteration   5: 84529,438 ops/s
[info] Iteration   1: 84508,993 ops/s
[info]                  ·gc.alloc.rate:                   1466,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24935,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,163 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 84864,605 ops/s
[info]                  ·gc.alloc.rate:                   1473,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24855,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,772 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 84296,344 ops/s
[info]                  ·gc.alloc.rate:                   1463,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25035,980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,777 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 84263,170 ops/s
[info]                  ·gc.alloc.rate:               1462,679 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25070,370 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 84554,018 ops/s
[info]                  ·gc.alloc.rate:                   1467,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37548,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,550 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   84497,426 ±(99.9%) 930,285 ops/s [Average]
[info]   (min, avg, max) = (84263,170, 84497,426, 84864,605), stdev = 241,592
[info]   CI (99.9%): [83567,141, 85427,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1466,754 ±(99.9%) 16,207 MB/sec [Average]
[info]   (min, avg, max) = (1462,679, 1466,754, 1473,181), stdev = 4,209
[info]   CI (99.9%): [1450,547, 1482,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27320,005, 27320,005, 27320,005), stdev = 0,001
[info]   CI (99.9%): [27320,004, 27320,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1475,913 ±(99.9%) 1165,150 MB/sec [Average]
[info]   (min, avg, max) = (1338,901, 1475,913, 2017,191), stdev = 302,586
[info]   CI (99.9%): [310,764, 2641,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27489,170 ±(99.9%) 21655,550 B/op [Average]
[info]   (min, avg, max) = (24855,501, 27489,170, 37548,329), stdev = 5623,877
[info]   CI (99.9%): [5833,621, 49144,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,852 ±(99.9%) 2,213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,852, 1,550), stdev = 0,575
[info]   CI (99.9%): [≈ 0, 3,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57,63% complete, ETA 00:56:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108472,388 ops/s
[info] # Warmup Iteration   2: 134670,554 ops/s
[info] # Warmup Iteration   3: 138139,906 ops/s
[info] # Warmup Iteration   4: 138219,698 ops/s
[info] # Warmup Iteration   5: 136453,934 ops/s
[info] Iteration   1: 137584,135 ops/s
[info]                  ·gc.alloc.rate:               608,407 MB/sec
[info]                  ·gc.alloc.rate.norm:          6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5851,794 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 139782,239 ops/s
[info]                  ·gc.alloc.rate:                   618,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7574,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46,468 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 140788,249 ops/s
[info]                  ·gc.alloc.rate:                   622,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7520,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,698 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 140771,637 ops/s
[info]                  ·gc.alloc.rate:               622,580 MB/sec
[info]                  ·gc.alloc.rate.norm:          6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7491,690 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 140676,256 ops/s
[info]                  ·gc.alloc.rate:                   622,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7496,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   139920,503 ±(99.9%) 5281,950 ops/s [Average]
[info]   (min, avg, max) = (137584,135, 139920,503, 140788,249), stdev = 1371,706
[info]   CI (99.9%): [134638,553, 145202,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   618,753 ±(99.9%) 23,380 MB/sec [Average]
[info]   (min, avg, max) = (608,407, 618,753, 622,581), stdev = 6,072
[info]   CI (99.9%): [595,373, 642,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6960,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6960,003, 6960,003, 6960,003), stdev = 0,001
[info]   CI (99.9%): [6960,002, 6960,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   639,435 ±(99.9%) 275,366 MB/sec [Average]
[info]   (min, avg, max) = (511,533, 639,435, 672,757), stdev = 71,512
[info]   CI (99.9%): [364,069, 914,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7187,129 ±(99.9%) 2877,196 B/op [Average]
[info]   (min, avg, max) = (5851,794, 7187,129, 7574,682), stdev = 747,199
[info]   CI (99.9%): [4309,933, 10064,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,846 ±(99.9%) 7,063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,846, 4,127), stdev = 1,834
[info]   CI (99.9%): [≈ 0, 7,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,526 ±(99.9%) 79,529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,526, 46,468), stdev = 20,653
[info]   CI (99.9%): [≈ 0, 89,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,83% complete, ETA 00:56:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143867,315 ops/s
[info] # Warmup Iteration   2: 192381,276 ops/s
[info] # Warmup Iteration   3: 194016,272 ops/s
[info] # Warmup Iteration   4: 190957,210 ops/s
[info] # Warmup Iteration   5: 192563,563 ops/s
[info] Iteration   1: 192778,660 ops/s
[info]                  ·gc.alloc.rate:                   286,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4176,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 191169,149 ops/s
[info]                  ·gc.alloc.rate:      283,723 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 191583,928 ops/s
[info]                  ·gc.alloc.rate:               284,324 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4202,402 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 193941,442 ops/s
[info]                  ·gc.alloc.rate:               287,862 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4151,171 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 193245,199 ops/s
[info]                  ·gc.alloc.rate:      286,772 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   192543,676 ±(99.9%) 4437,248 ops/s [Average]
[info]   (min, avg, max) = (191169,149, 192543,676, 193941,442), stdev = 1152,339
[info]   CI (99.9%): [188106,428, 196980,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   285,761 ±(99.9%) 6,609 MB/sec [Average]
[info]   (min, avg, max) = (283,723, 285,761, 287,862), stdev = 1,716
[info]   CI (99.9%): [279,152, 292,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2336,002, 2336,002, 2336,002), stdev = 0,001
[info]   CI (99.9%): [2336,002, 2336,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   306,913 ±(99.9%) 1078,843 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,913, 511,542), stdev = 280,172
[info]   CI (99.9%): [≈ 0, 1385,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2505,978 ±(99.9%) 8809,141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2505,978, 4202,402), stdev = 2287,706
[info]   CI (99.9%): [≈ 0, 11315,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,034, 0,170), stdev = 0,076
[info]   CI (99.9%): [≈ 0, 0,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58,03% complete, ETA 00:55:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 724996,945 ops/s
[info] # Warmup Iteration   2: 797471,451 ops/s
[info] # Warmup Iteration   3: 771181,257 ops/s
[info] # Warmup Iteration   4: 779977,248 ops/s
[info] # Warmup Iteration   5: 779366,157 ops/s
[info] Iteration   1: 776180,825 ops/s
[info]                  ·gc.alloc.rate:                   962,595 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2720,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 776914,087 ops/s
[info]                  ·gc.alloc.rate:               963,569 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1357,457 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 776896,271 ops/s
[info]                  ·gc.alloc.rate:               963,534 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1357,469 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 774745,668 ops/s
[info]                  ·gc.alloc.rate:                   960,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2722,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 778899,969 ops/s
[info]                  ·gc.alloc.rate:               965,797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1354,031 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   776727,364 ±(99.9%) 5778,991 ops/s [Average]
[info]   (min, avg, max) = (774745,668, 776727,364, 778899,969), stdev = 1500,786
[info]   CI (99.9%): [770948,373, 782506,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   963,288 ±(99.9%) 6,780 MB/sec [Average]
[info]   (min, avg, max) = (960,946, 963,288, 965,797), stdev = 1,761
[info]   CI (99.9%): [956,508, 970,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,001, 1952,001, 1952,001), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938,345 ±(99.9%) 1414,754 MB/sec [Average]
[info]   (min, avg, max) = (669,938, 938,345, 1341,396), stdev = 367,407
[info]   CI (99.9%): [≈ 0, 2353,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1902,318 ±(99.9%) 2878,900 B/op [Average]
[info]   (min, avg, max) = (1354,031, 1902,318, 2722,477), stdev = 747,641
[info]   CI (99.9%): [≈ 0, 4781,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,051 ±(99.9%) 0,267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,051, 0,127), stdev = 0,069
[info]   CI (99.9%): [≈ 0, 0,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58,23% complete, ETA 00:55:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 764569,046 ops/s
[info] # Warmup Iteration   2: 797112,555 ops/s
[info] # Warmup Iteration   3: 791978,566 ops/s
[info] # Warmup Iteration   4: 795457,854 ops/s
[info] # Warmup Iteration   5: 804747,096 ops/s
[info] Iteration   1: 801872,988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 797034,261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 801676,226 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 797650,287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 800339,342 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   799714,621 ±(99.9%) 8683,719 ops/s [Average]
[info]   (min, avg, max) = (797034,261, 799714,621, 801872,988), stdev = 2255,134
[info]   CI (99.9%): [791030,902, 808398,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58,43% complete, ETA 00:55:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179923,721 ops/s
[info] # Warmup Iteration   2: 223533,810 ops/s
[info] # Warmup Iteration   3: 226020,192 ops/s
[info] # Warmup Iteration   4: 226268,702 ops/s
[info] # Warmup Iteration   5: 225765,056 ops/s
[info] Iteration   1: 226052,247 ops/s
[info]                  ·gc.alloc.rate:                   738,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4679,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31,359 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 227618,438 ops/s
[info]                  ·gc.alloc.rate:                   743,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9276,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 227604,546 ops/s
[info]                  ·gc.alloc.rate:               743,839 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4629,424 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 227978,173 ops/s
[info]                  ·gc.alloc.rate:               745,011 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4612,329 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 226915,304 ops/s
[info]                  ·gc.alloc.rate:                   741,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4633,952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,144 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   227233,742 ±(99.9%) 2943,286 ops/s [Average]
[info]   (min, avg, max) = (226052,247, 227233,742, 227978,173), stdev = 764,362
[info]   CI (99.9%): [224290,455, 230177,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   742,598 ±(99.9%) 9,588 MB/sec [Average]
[info]   (min, avg, max) = (738,814, 742,598, 745,011), stdev = 2,490
[info]   CI (99.9%): [733,010, 752,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5144,002, 5144,002, 5144,002), stdev = 0,001
[info]   CI (99.9%): [5144,002, 5144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   803,803 ±(99.9%) 1157,592 MB/sec [Average]
[info]   (min, avg, max) = (667,901, 803,803, 1341,565), stdev = 300,623
[info]   CI (99.9%): [≈ 0, 1961,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5566,387 ±(99.9%) 7987,220 B/op [Average]
[info]   (min, avg, max) = (4612,329, 5566,387, 9276,662), stdev = 2074,256
[info]   CI (99.9%): [≈ 0, 13553,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,913 ±(99.9%) 7,730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,913, 4,504), stdev = 2,007
[info]   CI (99.9%): [≈ 0, 8,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,358 ±(99.9%) 53,818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,358, 31,359), stdev = 13,976
[info]   CI (99.9%): [≈ 0, 60,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58,63% complete, ETA 00:54:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28300,510 ops/s
[info] # Warmup Iteration   2: 30256,934 ops/s
[info] # Warmup Iteration   3: 29894,795 ops/s
[info] # Warmup Iteration   4: 30154,910 ops/s
[info] # Warmup Iteration   5: 30003,067 ops/s
[info] Iteration   1: 30042,786 ops/s
[info]                  ·gc.alloc.rate:               167,633 MB/sec
[info]                  ·gc.alloc.rate.norm:          8784,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26799,773 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 30116,053 ops/s
[info]                  ·gc.alloc.rate:      168,080 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 30247,274 ops/s
[info]                  ·gc.alloc.rate:      168,800 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30108,819 ops/s
[info]                  ·gc.alloc.rate:                   168,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26741,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,335 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 30130,250 ops/s
[info]                  ·gc.alloc.rate:      168,135 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   30129,036 ±(99.9%) 285,559 ops/s [Average]
[info]   (min, avg, max) = (30042,786, 30129,036, 30247,274), stdev = 74,159
[info]   CI (99.9%): [29843,477, 30414,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   168,137 ±(99.9%) 1,618 MB/sec [Average]
[info]   (min, avg, max) = (167,633, 168,137, 168,800), stdev = 0,420
[info]   CI (99.9%): [166,519, 169,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8784,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (8784,013, 8784,014, 8784,016), stdev = 0,001
[info]   CI (99.9%): [8784,010, 8784,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,600 ±(99.9%) 1078,798 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,600, 511,558), stdev = 280,161
[info]   CI (99.9%): [≈ 0, 1283,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10708,162 ±(99.9%) 56461,105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10708,162, 26799,773), stdev = 14662,770
[info]   CI (99.9%): [≈ 0, 67169,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,026), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,267 ±(99.9%) 2,298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,267, 1,335), stdev = 0,597
[info]   CI (99.9%): [≈ 0, 2,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58,84% complete, ETA 00:54:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122016,616 ops/s
[info] # Warmup Iteration   2: 157846,916 ops/s
[info] # Warmup Iteration   3: 157966,462 ops/s
[info] # Warmup Iteration   4: 158042,398 ops/s
[info] # Warmup Iteration   5: 157682,689 ops/s
[info] Iteration   1: 157211,666 ops/s
[info]                  ·gc.alloc.rate:                   1936,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20178,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,042 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 156548,093 ops/s
[info]                  ·gc.alloc.rate:                   1928,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20297,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,628 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 157939,239 ops/s
[info]                  ·gc.alloc.rate:                   1945,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20151,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,415 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 157048,601 ops/s
[info]                  ·gc.alloc.rate:                   1934,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13530,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,417 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 155941,707 ops/s
[info]                  ·gc.alloc.rate:                   1920,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20466,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,420 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   156937,861 ±(99.9%) 2877,845 ops/s [Average]
[info]   (min, avg, max) = (155941,707, 156937,861, 157939,239), stdev = 747,367
[info]   CI (99.9%): [154060,016, 159815,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1932,851 ±(99.9%) 35,700 MB/sec [Average]
[info]   (min, avg, max) = (1920,371, 1932,851, 1945,177), stdev = 9,271
[info]   CI (99.9%): [1897,151, 1968,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19384,003, 19384,003, 19384,003), stdev = 0,001
[info]   CI (99.9%): [19384,002, 19384,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886,923 ±(99.9%) 1155,355 MB/sec [Average]
[info]   (min, avg, max) = (1350,250, 1886,923, 2027,616), stdev = 300,042
[info]   CI (99.9%): [731,568, 3042,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18924,906 ±(99.9%) 11621,366 B/op [Average]
[info]   (min, avg, max) = (13530,659, 18924,906, 20466,529), stdev = 3018,032
[info]   CI (99.9%): [7303,540, 30546,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,584 ±(99.9%) 1,046 B/op [Average]
[info]   (min, avg, max) = (0,415, 0,584, 1,042), stdev = 0,272
[info]   CI (99.9%): [≈ 0, 1,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,04% complete, ETA 00:54:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145483,505 ops/s
[info] # Warmup Iteration   2: 179576,274 ops/s
[info] # Warmup Iteration   3: 198112,657 ops/s
[info] # Warmup Iteration   4: 201891,563 ops/s
[info] # Warmup Iteration   5: 201479,930 ops/s
[info] Iteration   1: 202112,956 ops/s
[info]                  ·gc.alloc.rate:                   1069,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10519,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 202529,458 ops/s
[info]                  ·gc.alloc.rate:               1071,768 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5251,914 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 201809,984 ops/s
[info]                  ·gc.alloc.rate:                   1067,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10550,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,649 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 201764,346 ops/s
[info]                  ·gc.alloc.rate:               1067,642 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5278,782 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 201358,973 ops/s
[info]                  ·gc.alloc.rate:                   1065,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10584,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,488 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   201915,143 ±(99.9%) 1678,056 ops/s [Average]
[info]   (min, avg, max) = (201358,973, 201915,143, 202529,458), stdev = 435,786
[info]   CI (99.9%): [200237,088, 203593,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1068,388 ±(99.9%) 9,209 MB/sec [Average]
[info]   (min, avg, max) = (1065,350, 1068,388, 1071,768), stdev = 2,391
[info]   CI (99.9%): [1059,179, 1077,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,060 ±(99.9%) 1426,262 MB/sec [Average]
[info]   (min, avg, max) = (675,892, 1082,060, 1354,040), stdev = 370,396
[info]   CI (99.9%): [≈ 0, 2508,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8437,214 ±(99.9%) 11149,969 B/op [Average]
[info]   (min, avg, max) = (5251,914, 8437,214, 10584,735), stdev = 2895,612
[info]   CI (99.9%): [≈ 0, 19587,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,260 ±(99.9%) 1,136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,260, 0,649), stdev = 0,295
[info]   CI (99.9%): [≈ 0, 1,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,24% complete, ETA 00:54:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 496999,861 ops/s
[info] # Warmup Iteration   2: 535457,380 ops/s
[info] # Warmup Iteration   3: 534268,052 ops/s
[info] # Warmup Iteration   4: 534777,702 ops/s
[info] # Warmup Iteration   5: 526167,353 ops/s
[info] Iteration   1: 533447,063 ops/s
[info]                  ·gc.alloc.rate:                   1035,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1984,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 533976,027 ops/s
[info]                  ·gc.alloc.rate:                   1036,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3961,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 535627,813 ops/s
[info]                  ·gc.alloc.rate:               1039,972 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1974,804 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 534965,597 ops/s
[info]                  ·gc.alloc.rate:                   1038,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3954,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 535281,202 ops/s
[info]                  ·gc.alloc.rate:               1039,188 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1976,121 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   534659,540 ±(99.9%) 3526,535 ops/s [Average]
[info]   (min, avg, max) = (533447,063, 534659,540, 535627,813), stdev = 915,830
[info]   CI (99.9%): [531133,006, 538186,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1038,105 ±(99.9%) 6,752 MB/sec [Average]
[info]   (min, avg, max) = (1035,761, 1038,105, 1039,972), stdev = 1,753
[info]   CI (99.9%): [1031,353, 1044,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3056,001, 3056,001, 3056,001), stdev = 0,001
[info]   CI (99.9%): [3056,001, 3056,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,018 ±(99.9%) 1417,154 MB/sec [Average]
[info]   (min, avg, max) = (671,977, 941,018, 1344,210), stdev = 368,031
[info]   CI (99.9%): [≈ 0, 2358,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2770,431 ±(99.9%) 4175,139 B/op [Average]
[info]   (min, avg, max) = (1974,804, 2770,431, 3961,847), stdev = 1084,270
[info]   CI (99.9%): [≈ 0, 6945,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,061 ±(99.9%) 0,289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,061, 0,184), stdev = 0,075
[info]   CI (99.9%): [≈ 0, 0,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59,44% complete, ETA 00:53:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42081,820 ops/s
[info] # Warmup Iteration   2: 75942,154 ops/s
[info] # Warmup Iteration   3: 76372,956 ops/s
[info] # Warmup Iteration   4: 76506,466 ops/s
[info] # Warmup Iteration   5: 75625,061 ops/s
[info] Iteration   1: 75937,955 ops/s
[info]                  ·gc.alloc.rate:                   3204,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70379,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,294 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 76534,104 ops/s
[info]                  ·gc.alloc.rate:                   3229,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69903,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,140 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 76477,430 ops/s
[info]                  ·gc.alloc.rate:                   3226,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70020,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,285 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 76546,237 ops/s
[info]                  ·gc.alloc.rate:                   3230,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55990,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,284 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 75998,080 ops/s
[info]                  ·gc.alloc.rate:                   3206,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70506,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,431 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   76298,761 ±(99.9%) 1169,771 ops/s [Average]
[info]   (min, avg, max) = (75937,955, 76298,761, 76546,237), stdev = 303,786
[info]   CI (99.9%): [75128,990, 77468,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3219,363 ±(99.9%) 49,793 MB/sec [Average]
[info]   (min, avg, max) = (3204,063, 3219,363, 3230,294), stdev = 12,931
[info]   CI (99.9%): [3169,570, 3269,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,006, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,005, 66408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3265,018 ±(99.9%) 1165,611 MB/sec [Average]
[info]   (min, avg, max) = (2723,555, 3265,018, 3404,423), stdev = 302,706
[info]   CI (99.9%): [2099,407, 4430,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67360,097 ±(99.9%) 24492,535 B/op [Average]
[info]   (min, avg, max) = (55990,526, 67360,097, 70506,531), stdev = 6360,634
[info]   CI (99.9%): [42867,562, 91852,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,287 ±(99.9%) 2,327 B/op [Average]
[info]   (min, avg, max) = (0,431, 1,287, 2,140), stdev = 0,604
[info]   CI (99.9%): [≈ 0, 3,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59,64% complete, ETA 00:53:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125985,513 ops/s
[info] # Warmup Iteration   2: 142151,423 ops/s
[info] # Warmup Iteration   3: 142893,214 ops/s
[info] # Warmup Iteration   4: 144442,190 ops/s
[info] # Warmup Iteration   5: 142371,222 ops/s
[info] Iteration   1: 144272,868 ops/s
[info]                  ·gc.alloc.rate:                   1624,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14663,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,681 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 144453,769 ops/s
[info]                  ·gc.alloc.rate:                   1626,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21982,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,454 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 144312,921 ops/s
[info]                  ·gc.alloc.rate:                   1624,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14680,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,454 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 144193,932 ops/s
[info]                  ·gc.alloc.rate:               1623,496 MB/sec
[info]                  ·gc.alloc.rate.norm:          17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14715,121 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 144349,068 ops/s
[info]                  ·gc.alloc.rate:                   1625,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22077,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,227 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   144316,512 ±(99.9%) 369,556 ops/s [Average]
[info]   (min, avg, max) = (144193,932, 144316,512, 144453,769), stdev = 95,973
[info]   CI (99.9%): [143946,955, 144686,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1624,784 ±(99.9%) 4,127 MB/sec [Average]
[info]   (min, avg, max) = (1623,496, 1624,784, 1626,394), stdev = 1,072
[info]   CI (99.9%): [1620,657, 1628,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17720,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17720,003, 17720,003, 17720,003), stdev = 0,001
[info]   CI (99.9%): [17720,002, 17720,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,115 ±(99.9%) 1423,596 MB/sec [Average]
[info]   (min, avg, max) = (1344,076, 1616,115, 2024,598), stdev = 369,703
[info]   CI (99.9%): [192,519, 3039,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17623,803 ±(99.9%) 15488,114 B/op [Average]
[info]   (min, avg, max) = (14663,468, 17623,803, 22077,272), stdev = 4022,214
[info]   CI (99.9%): [2135,690, 33111,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,363 ±(99.9%) 0,997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,363, 0,681), stdev = 0,259
[info]   CI (99.9%): [≈ 0, 1,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59,84% complete, ETA 00:53:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169503,380 ops/s
[info] # Warmup Iteration   2: 207360,919 ops/s
[info] # Warmup Iteration   3: 208380,820 ops/s
[info] # Warmup Iteration   4: 208783,552 ops/s
[info] # Warmup Iteration   5: 208458,587 ops/s
[info] Iteration   1: 208007,702 ops/s
[info]                  ·gc.alloc.rate:                   715,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5105,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,260 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 208931,809 ops/s
[info]                  ·gc.alloc.rate:                   718,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5083,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,470 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 209284,131 ops/s
[info]                  ·gc.alloc.rate:               720,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5054,187 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 208676,157 ops/s
[info]                  ·gc.alloc.rate:                   718,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10132,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 208598,653 ops/s
[info]                  ·gc.alloc.rate:               717,756 MB/sec
[info]                  ·gc.alloc.rate.norm:          5416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5065,803 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   208699,690 ±(99.9%) 1811,297 ops/s [Average]
[info]   (min, avg, max) = (208007,702, 208699,690, 209284,131), stdev = 470,388
[info]   CI (99.9%): [206888,393, 210510,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   718,170 ±(99.9%) 6,201 MB/sec [Average]
[info]   (min, avg, max) = (715,801, 718,170, 720,153), stdev = 1,610
[info]   CI (99.9%): [711,969, 724,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5416,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5416,002, 5416,002, 5416,002), stdev = 0,001
[info]   CI (99.9%): [5416,002, 5416,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   807,312 ±(99.9%) 1154,389 MB/sec [Average]
[info]   (min, avg, max) = (671,346, 807,312, 1343,588), stdev = 299,791
[info]   CI (99.9%): [≈ 0, 1961,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6088,307 ±(99.9%) 8706,178 B/op [Average]
[info]   (min, avg, max) = (5054,187, 6088,307, 10132,698), stdev = 2260,967
[info]   CI (99.9%): [≈ 0, 14794,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,693 ±(99.9%) 5,697 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,693, 3,338), stdev = 1,479
[info]   CI (99.9%): [≈ 0, 6,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,240 ±(99.9%) 43,104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,240, 25,260), stdev = 11,194
[info]   CI (99.9%): [≈ 0, 48,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,04% complete, ETA 00:53:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240286,192 ops/s
[info] # Warmup Iteration   2: 321361,680 ops/s
[info] # Warmup Iteration   3: 322693,696 ops/s
[info] # Warmup Iteration   4: 320386,632 ops/s
[info] # Warmup Iteration   5: 319482,564 ops/s
[info] Iteration   1: 321915,395 ops/s
[info]                  ·gc.alloc.rate:      317,413 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 321209,107 ops/s
[info]                  ·gc.alloc.rate:                   316,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2506,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 321518,986 ops/s
[info]                  ·gc.alloc.rate:      317,020 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 320215,277 ops/s
[info]                  ·gc.alloc.rate:               315,769 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2514,280 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 322537,745 ops/s
[info]                  ·gc.alloc.rate:      318,003 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   321479,302 ±(99.9%) 3325,192 ops/s [Average]
[info]   (min, avg, max) = (320215,277, 321479,302, 322537,745), stdev = 863,542
[info]   CI (99.9%): [318154,110, 324804,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   316,990 ±(99.9%) 3,197 MB/sec [Average]
[info]   (min, avg, max) = (315,769, 316,990, 318,003), stdev = 0,830
[info]   CI (99.9%): [313,793, 320,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1552,001, 1552,001, 1552,001), stdev = 0,001
[info]   CI (99.9%): [1552,001, 1552,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,620 ±(99.9%) 1078,903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,620, 511,553), stdev = 280,188
[info]   CI (99.9%): [≈ 0, 1283,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1004,158 ±(99.9%) 5294,645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1004,158, 2514,280), stdev = 1375,003
[info]   CI (99.9%): [≈ 0, 6298,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,020, 0,102), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,24% complete, ETA 00:52:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1258534,381 ops/s
[info] # Warmup Iteration   2: 1322705,002 ops/s
[info] # Warmup Iteration   3: 1325769,287 ops/s
[info] # Warmup Iteration   4: 1328186,130 ops/s
[info] # Warmup Iteration   5: 1325826,902 ops/s
[info] Iteration   1: 1326283,658 ops/s
[info]                  ·gc.alloc.rate:                   984,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596,667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1331946,976 ops/s
[info]                  ·gc.alloc.rate:               988,545 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 794,227 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1329028,512 ops/s
[info]                  ·gc.alloc.rate:                   986,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1331435,015 ops/s
[info]                  ·gc.alloc.rate:               988,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 794,491 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1326979,586 ops/s
[info]                  ·gc.alloc.rate:                   984,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1594,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1329134,749 ±(99.9%) 9814,343 ops/s [Average]
[info]   (min, avg, max) = (1326283,658, 1329134,749, 1331946,976), stdev = 2548,754
[info]   CI (99.9%): [1319320,406, 1338949,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   986,362 ±(99.9%) 7,525 MB/sec [Average]
[info]   (min, avg, max) = (984,234, 986,362, 988,545), stdev = 1,954
[info]   CI (99.9%): [978,837, 993,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,000, 1168,000, 1168,000), stdev = 0,001
[info]   CI (99.9%): [1168,000, 1168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,582 ±(99.9%) 1418,074 MB/sec [Average]
[info]   (min, avg, max) = (672,129, 1075,582, 1345,457), stdev = 368,269
[info]   CI (99.9%): [≈ 0, 2493,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1274,290 ±(99.9%) 1687,036 B/op [Average]
[info]   (min, avg, max) = (794,227, 1274,290, 1596,667), stdev = 438,118
[info]   CI (99.9%): [≈ 0, 2961,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,035 ±(99.9%) 0,144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,035, 0,074), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60,44% complete, ETA 00:52:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1340922,921 ops/s
[info] # Warmup Iteration   2: 1399798,109 ops/s
[info] # Warmup Iteration   3: 1398954,573 ops/s
[info] # Warmup Iteration   4: 1397939,329 ops/s
[info] # Warmup Iteration   5: 1398525,073 ops/s
[info] Iteration   1: 1402017,065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1398662,199 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1402133,013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1396500,888 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1401370,052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1400136,643 ±(99.9%) 9517,300 ops/s [Average]
[info]   (min, avg, max) = (1396500,888, 1400136,643, 1402133,013), stdev = 2471,613
[info]   CI (99.9%): [1390619,343, 1409653,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60,64% complete, ETA 00:52:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196647,810 ops/s
[info] # Warmup Iteration   2: 324913,961 ops/s
[info] # Warmup Iteration   3: 322127,866 ops/s
[info] # Warmup Iteration   4: 324172,633 ops/s
[info] # Warmup Iteration   5: 318925,234 ops/s
[info] Iteration   1: 319442,288 ops/s
[info]                  ·gc.alloc.rate:                   871,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3326,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,205 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 318836,834 ops/s
[info]                  ·gc.alloc.rate:               870,270 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3332,346 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 319904,005 ops/s
[info]                  ·gc.alloc.rate:                   873,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6649,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,205 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 319097,927 ops/s
[info]                  ·gc.alloc.rate:               871,072 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3334,559 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 320270,708 ops/s
[info]                  ·gc.alloc.rate:               874,102 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3322,422 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   319510,352 ±(99.9%) 2246,495 ops/s [Average]
[info]   (min, avg, max) = (318836,834, 319510,352, 320270,708), stdev = 583,408
[info]   CI (99.9%): [317263,857, 321756,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   872,112 ±(99.9%) 5,971 MB/sec [Average]
[info]   (min, avg, max) = (870,270, 872,112, 874,102), stdev = 1,551
[info]   CI (99.9%): [866,142, 878,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4296,001, 4296,001, 4296,001), stdev = 0,001
[info]   CI (99.9%): [4296,001, 4296,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   810,742 ±(99.9%) 1163,924 MB/sec [Average]
[info]   (min, avg, max) = (675,056, 810,742, 1351,453), stdev = 302,267
[info]   CI (99.9%): [≈ 0, 1974,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3992,879 ±(99.9%) 5717,623 B/op [Average]
[info]   (min, avg, max) = (3322,422, 3992,879, 6649,043), stdev = 1484,849
[info]   CI (99.9%): [≈ 0, 9710,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,082 ±(99.9%) 0,432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,082, 0,205), stdev = 0,112
[info]   CI (99.9%): [≈ 0, 0,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60,84% complete, ETA 00:52:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40314,124 ops/s
[info] # Warmup Iteration   2: 42847,197 ops/s
[info] # Warmup Iteration   3: 42748,203 ops/s
[info] # Warmup Iteration   4: 42314,834 ops/s
[info] # Warmup Iteration   5: 42994,643 ops/s
[info] Iteration   1: 42870,210 ops/s
[info]                  ·gc.alloc.rate:      133,346 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42815,888 ops/s
[info]                  ·gc.alloc.rate:      133,193 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42832,573 ops/s
[info]                  ·gc.alloc.rate:               133,235 MB/sec
[info]                  ·gc.alloc.rate.norm:          4896,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18796,246 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 42846,671 ops/s
[info]                  ·gc.alloc.rate:      133,289 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42809,457 ops/s
[info]                  ·gc.alloc.rate:      133,182 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   42834,960 ±(99.9%) 94,312 ops/s [Average]
[info]   (min, avg, max) = (42809,457, 42834,960, 42870,210), stdev = 24,493
[info]   CI (99.9%): [42740,647, 42929,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   133,249 ±(99.9%) 0,264 MB/sec [Average]
[info]   (min, avg, max) = (133,182, 133,249, 133,346), stdev = 0,069
[info]   CI (99.9%): [132,985, 133,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4896,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4896,010, 4896,010, 4896,010), stdev = 0,001
[info]   CI (99.9%): [4896,008, 4896,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   102,301 ±(99.9%) 880,840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,301, 511,503), stdev = 228,751
[info]   CI (99.9%): [≈ 0, 983,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3759,249 ±(99.9%) 32368,270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3759,249, 18796,246), stdev = 8405,937
[info]   CI (99.9%): [≈ 0, 36127,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61,04% complete, ETA 00:51:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4261,110 ops/s
[info] # Warmup Iteration   2: 5864,577 ops/s
[info] # Warmup Iteration   3: 5969,812 ops/s
[info] # Warmup Iteration   4: 5923,984 ops/s
[info] # Warmup Iteration   5: 5929,727 ops/s
[info] Iteration   1: 5930,535 ops/s
[info]                  ·gc.alloc.rate:                   1168,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353295,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,569 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5940,935 ops/s
[info]                  ·gc.alloc.rate:                   1170,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352407,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,515 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5939,807 ops/s
[info]                  ·gc.alloc.rate:                   1169,951 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352407,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,515 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5945,141 ops/s
[info]                  ·gc.alloc.rate:               1171,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          310024,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176143,841 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 5918,993 ops/s
[info]                  ·gc.alloc.rate:                   1165,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354188,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,534 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5935,082 ±(99.9%) 40,261 ops/s [Average]
[info]   (min, avg, max) = (5918,993, 5935,082, 5945,141), stdev = 10,456
[info]   CI (99.9%): [5894,821, 5975,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1169,105 ±(99.9%) 7,983 MB/sec [Average]
[info]   (min, avg, max) = (1165,858, 1169,105, 1171,021), stdev = 2,073
[info]   CI (99.9%): [1161,122, 1177,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310024,070 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (310024,069, 310024,070, 310024,074), stdev = 0,002
[info]   CI (99.9%): [310024,061, 310024,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1197,787 ±(99.9%) 1146,159 MB/sec [Average]
[info]   (min, avg, max) = (665,329, 1197,787, 1331,941), stdev = 297,654
[info]   CI (99.9%): [51,628, 2343,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   317688,734 ±(99.9%) 304699,315 B/op [Average]
[info]   (min, avg, max) = (176143,841, 317688,734, 354188,819), stdev = 79129,445
[info]   CI (99.9%): [12989,419, 622388,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6,627 ±(99.9%) 23,298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,627, 16,569), stdev = 6,050
[info]   CI (99.9%): [≈ 0, 29,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,24% complete, ETA 00:51:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2993,279 ops/s
[info] # Warmup Iteration   2: 5809,014 ops/s
[info] # Warmup Iteration   3: 5874,064 ops/s
[info] # Warmup Iteration   4: 5872,333 ops/s
[info] # Warmup Iteration   5: 5864,461 ops/s
[info] Iteration   1: 5867,596 ops/s
[info]                  ·gc.alloc.rate:                   1090,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              292384,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360632,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,166 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5880,117 ops/s
[info]                  ·gc.alloc.rate:                   1092,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              292384,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180051,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,571 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 5881,220 ops/s
[info]                  ·gc.alloc.rate:                   1092,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              292384,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360576,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,570 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5872,401 ops/s
[info]                  ·gc.alloc.rate:               1091,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          292384,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 361485,598 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 5862,558 ops/s
[info]                  ·gc.alloc.rate:               1089,541 MB/sec
[info]                  ·gc.alloc.rate.norm:          292384,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 181288,331 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   5872,779 ±(99.9%) 30,840 ops/s [Average]
[info]   (min, avg, max) = (5862,558, 5872,779, 5881,220), stdev = 8,009
[info]   CI (99.9%): [5841,939, 5903,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1091,127 ±(99.9%) 5,201 MB/sec [Average]
[info]   (min, avg, max) = (1089,541, 1091,127, 1092,507), stdev = 1,351
[info]   CI (99.9%): [1085,926, 1096,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292384,072 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (292384,069, 292384,072, 292384,075), stdev = 0,003
[info]   CI (99.9%): [292384,060, 292384,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1077,805 ±(99.9%) 1418,911 MB/sec [Average]
[info]   (min, avg, max) = (672,753, 1077,805, 1348,846), stdev = 368,487
[info]   CI (99.9%): [≈ 0, 2496,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   288806,717 ±(99.9%) 380122,706 B/op [Average]
[info]   (min, avg, max) = (180051,302, 288806,717, 361485,598), stdev = 98716,660
[info]   CI (99.9%): [≈ 0, 668929,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,461 ±(99.9%) 17,982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,461, 11,166), stdev = 4,670
[info]   CI (99.9%): [≈ 0, 22,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,45% complete, ETA 00:51:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33997,814 ops/s
[info] # Warmup Iteration   2: 41439,918 ops/s
[info] # Warmup Iteration   3: 41245,322 ops/s
[info] # Warmup Iteration   4: 40750,025 ops/s
[info] # Warmup Iteration   5: 40269,820 ops/s
[info] Iteration   1: 40496,713 ops/s
[info]                  ·gc.alloc.rate:                   664,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26068,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209,203 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 40789,546 ops/s
[info]                  ·gc.alloc.rate:                   669,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25881,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,803 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 41088,559 ops/s
[info]                  ·gc.alloc.rate:               674,528 MB/sec
[info]                  ·gc.alloc.rate.norm:          25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25538,932 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 41143,078 ops/s
[info]                  ·gc.alloc.rate:                   675,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25505,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,592 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 41259,611 ops/s
[info]                  ·gc.alloc.rate:               677,450 MB/sec
[info]                  ·gc.alloc.rate.norm:          25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25382,298 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   40955,501 ±(99.9%) 1192,147 ops/s [Average]
[info]   (min, avg, max) = (40496,713, 40955,501, 41259,611), stdev = 309,597
[info]   CI (99.9%): [39763,355, 42147,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   672,393 ±(99.9%) 19,633 MB/sec [Average]
[info]   (min, avg, max) = (664,839, 672,393, 677,450), stdev = 5,099
[info]   CI (99.9%): [652,761, 692,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (25840,010, 25840,010, 25840,011), stdev = 0,001
[info]   CI (99.9%): [25840,009, 25840,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668,065 ±(99.9%) 9,615 MB/sec [Average]
[info]   (min, avg, max) = (665,450, 668,065, 670,760), stdev = 2,497
[info]   CI (99.9%): [658,450, 677,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25675,399 ±(99.9%) 1107,150 B/op [Average]
[info]   (min, avg, max) = (25382,298, 25675,399, 26068,782), stdev = 287,523
[info]   CI (99.9%): [24568,249, 26782,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1,089 ±(99.9%) 9,243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,089, 5,383), stdev = 2,400
[info]   CI (99.9%): [≈ 0, 10,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42,320 ±(99.9%) 359,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42,320, 209,203), stdev = 93,293
[info]   CI (99.9%): [≈ 0, 401,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61,65% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2860,159 ops/s
[info] # Warmup Iteration   2: 5199,277 ops/s
[info] # Warmup Iteration   3: 5228,512 ops/s
[info] # Warmup Iteration   4: 5249,893 ops/s
[info] # Warmup Iteration   5: 5234,484 ops/s
[info] Iteration   1: 5263,846 ops/s
[info]                  ·gc.alloc.rate:                   1341,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              400984,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402601,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5270,027 ops/s
[info]                  ·gc.alloc.rate:                   1342,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              400984,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402640,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,217 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5260,444 ops/s
[info]                  ·gc.alloc.rate:               1340,238 MB/sec
[info]                  ·gc.alloc.rate.norm:          400984,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 403827,302 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 5260,914 ops/s
[info]                  ·gc.alloc.rate:                   1340,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              400984,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404325,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,227 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5253,608 ops/s
[info]                  ·gc.alloc.rate:                   1338,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              400984,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     405263,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   5261,768 ±(99.9%) 22,910 ops/s [Average]
[info]   (min, avg, max) = (5253,608, 5261,768, 5270,027), stdev = 5,950
[info]   CI (99.9%): [5238,857, 5284,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1340,624 ±(99.9%) 6,032 MB/sec [Average]
[info]   (min, avg, max) = (1338,442, 1340,624, 1342,733), stdev = 1,566
[info]   CI (99.9%): [1334,592, 1346,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400984,079 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (400984,077, 400984,079, 400984,084), stdev = 0,003
[info]   CI (99.9%): [400984,068, 400984,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1349,807 ±(99.9%) 9,402 MB/sec [Average]
[info]   (min, avg, max) = (1346,683, 1349,807, 1352,725), stdev = 2,442
[info]   CI (99.9%): [1340,405, 1359,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   403731,559 ±(99.9%) 4380,036 B/op [Average]
[info]   (min, avg, max) = (402601,402, 403731,559, 405263,151), stdev = 1137,481
[info]   CI (99.9%): [399351,523, 408111,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,225 ±(99.9%) 16,946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,225, 12,447), stdev = 4,401
[info]   CI (99.9%): [≈ 0, 23,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61,85% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4388,936 ops/s
[info] # Warmup Iteration   2: 5843,004 ops/s
[info] # Warmup Iteration   3: 5886,248 ops/s
[info] # Warmup Iteration   4: 5915,197 ops/s
[info] # Warmup Iteration   5: 5900,007 ops/s
[info] Iteration   1: 5898,003 ops/s
[info]                  ·gc.alloc.rate:                   1063,255 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177902,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,554 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5921,992 ops/s
[info]                  ·gc.alloc.rate:               1067,687 MB/sec
[info]                  ·gc.alloc.rate.norm:          283728,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 353715,152 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 5936,603 ops/s
[info]                  ·gc.alloc.rate:               1070,330 MB/sec
[info]                  ·gc.alloc.rate.norm:          283728,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176204,554 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 5907,888 ops/s
[info]                  ·gc.alloc.rate:                   1065,169 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354315,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5918,694 ops/s
[info]                  ·gc.alloc.rate:                   1066,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              283728,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354011,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,068 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   5916,636 ±(99.9%) 56,307 ops/s [Average]
[info]   (min, avg, max) = (5898,003, 5916,636, 5936,603), stdev = 14,623
[info]   CI (99.9%): [5860,329, 5972,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1066,674 ±(99.9%) 10,263 MB/sec [Average]
[info]   (min, avg, max) = (1063,255, 1066,674, 1070,330), stdev = 2,665
[info]   CI (99.9%): [1056,411, 1076,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   283728,073 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (283728,069, 283728,073, 283728,075), stdev = 0,003
[info]   CI (99.9%): [283728,063, 283728,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1064,766 ±(99.9%) 1402,796 MB/sec [Average]
[info]   (min, avg, max) = (664,711, 1064,766, 1331,221), stdev = 364,302
[info]   CI (99.9%): [≈ 0, 2467,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   283229,937 ±(99.9%) 373233,146 B/op [Average]
[info]   (min, avg, max) = (176204,554, 283229,937, 354315,782), stdev = 96927,463
[info]   CI (99.9%): [≈ 0, 656463,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,542 ±(99.9%) 21,330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,542, 11,089), stdev = 5,539
[info]   CI (99.9%): [≈ 0, 26,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62,05% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12202,375 ops/s
[info] # Warmup Iteration   2: 15887,518 ops/s
[info] # Warmup Iteration   3: 16181,268 ops/s
[info] # Warmup Iteration   4: 16199,261 ops/s
[info] # Warmup Iteration   5: 16185,574 ops/s
[info] Iteration   1: 16196,541 ops/s
[info]                  ·gc.alloc.rate:                   907,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129186,945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 16237,777 ops/s
[info]                  ·gc.alloc.rate:               910,092 MB/sec
[info]                  ·gc.alloc.rate.norm:          88208,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64470,636 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16219,044 ops/s
[info]                  ·gc.alloc.rate:               908,704 MB/sec
[info]                  ·gc.alloc.rate.norm:          88182,184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64538,195 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 16195,865 ops/s
[info]                  ·gc.alloc.rate:                   907,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129389,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16009,301 ops/s
[info]                  ·gc.alloc.rate:               896,944 MB/sec
[info]                  ·gc.alloc.rate.norm:          88184,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65576,924 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16171,706 ±(99.9%) 355,962 ops/s [Average]
[info]   (min, avg, max) = (16009,301, 16171,706, 16237,777), stdev = 92,442
[info]   CI (99.9%): [15815,743, 16527,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   906,191 ±(99.9%) 20,291 MB/sec [Average]
[info]   (min, avg, max) = (896,944, 906,191, 910,092), stdev = 5,270
[info]   CI (99.9%): [885,900, 926,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88193,259 ±(99.9%) 51,997 B/op [Average]
[info]   (min, avg, max) = (88182,184, 88193,259, 88208,032), stdev = 13,503
[info]   CI (99.9%): [88141,262, 88245,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931,638 ±(99.9%) 1401,976 MB/sec [Average]
[info]   (min, avg, max) = (665,056, 931,638, 1331,522), stdev = 364,089
[info]   CI (99.9%): [≈ 0, 2333,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   90632,360 ±(99.9%) 135890,870 B/op [Average]
[info]   (min, avg, max) = (64470,636, 90632,360, 129389,100), stdev = 35290,427
[info]   CI (99.9%): [≈ 0, 226523,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,214 ±(99.9%) 6,966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,214, 4,045), stdev = 1,809
[info]   CI (99.9%): [≈ 0, 8,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,25% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13482,612 ops/s
[info] # Warmup Iteration   2: 18595,108 ops/s
[info] # Warmup Iteration   3: 18662,325 ops/s
[info] # Warmup Iteration   4: 18668,582 ops/s
[info] # Warmup Iteration   5: 18641,410 ops/s
[info] Iteration   1: 18657,955 ops/s
[info]                  ·gc.alloc.rate:               971,352 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56668,394 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 18651,717 ops/s
[info]                  ·gc.alloc.rate:                   971,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              81943,917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113541,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18677,503 ops/s
[info]                  ·gc.alloc.rate:               972,505 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56776,116 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 18686,519 ops/s
[info]                  ·gc.alloc.rate:                   972,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56745,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,753 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18683,200 ops/s
[info]                  ·gc.alloc.rate:                   972,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113621,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,753 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18671,379 ±(99.9%) 60,065 ops/s [Average]
[info]   (min, avg, max) = (18651,717, 18671,379, 18686,519), stdev = 15,599
[info]   CI (99.9%): [18611,314, 18731,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   972,074 ±(99.9%) 3,182 MB/sec [Average]
[info]   (min, avg, max) = (971,035, 972,074, 972,911), stdev = 0,826
[info]   CI (99.9%): [968,892, 975,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944,027 ±(99.9%) 0,271 B/op [Average]
[info]   (min, avg, max) = (81943,917, 81944,027, 81944,112), stdev = 0,070
[info]   CI (99.9%): [81943,756, 81944,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   942,660 ±(99.9%) 1421,343 MB/sec [Average]
[info]   (min, avg, max) = (671,738, 942,660, 1348,541), stdev = 369,118
[info]   CI (99.9%): [≈ 0, 2364,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   79470,807 ±(99.9%) 119905,416 B/op [Average]
[info]   (min, avg, max) = (56668,394, 79470,807, 113621,918), stdev = 31139,056
[info]   CI (99.9%): [≈ 0, 199376,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,107 ±(99.9%) 11,115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,107, 7,026), stdev = 2,886
[info]   CI (99.9%): [≈ 0, 13,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,45% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272139,279 ops/s
[info] # Warmup Iteration   2: 289635,779 ops/s
[info] # Warmup Iteration   3: 291095,609 ops/s
[info] # Warmup Iteration   4: 289895,086 ops/s
[info] # Warmup Iteration   5: 289190,128 ops/s
[info] Iteration   1: 288868,684 ops/s
[info]                  ·gc.alloc.rate:               1046,893 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3632,673 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 287595,746 ops/s
[info]                  ·gc.alloc.rate:                   1042,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7282,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 289287,852 ops/s
[info]                  ·gc.alloc.rate:                   1048,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7240,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,340 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 289281,824 ops/s
[info]                  ·gc.alloc.rate:               1048,440 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3622,115 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 289028,693 ops/s
[info]                  ·gc.alloc.rate:               1047,436 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7254,147 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   288812,560 ±(99.9%) 2706,849 ops/s [Average]
[info]   (min, avg, max) = (287595,746, 288812,560, 289287,852), stdev = 702,960
[info]   CI (99.9%): [286105,711, 291519,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1046,695 ±(99.9%) 9,821 MB/sec [Average]
[info]   (min, avg, max) = (1042,289, 1046,695, 1048,440), stdev = 2,551
[info]   CI (99.9%): [1036,874, 1056,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5704,001, 5704,001, 5704,002), stdev = 0,001
[info]   CI (99.9%): [5704,001, 5704,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1065,251 ±(99.9%) 1402,542 MB/sec [Average]
[info]   (min, avg, max) = (665,773, 1065,251, 1332,092), stdev = 364,236
[info]   CI (99.9%): [≈ 0, 2467,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5806,497 ±(99.9%) 7660,093 B/op [Average]
[info]   (min, avg, max) = (3622,115, 5806,497, 7282,968), stdev = 1989,302
[info]   CI (99.9%): [≈ 0, 13466,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,159 ±(99.9%) 0,853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,159, 0,456), stdev = 0,222
[info]   CI (99.9%): [≈ 0, 1,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62,65% complete, ETA 00:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317242,467 ops/s
[info] # Warmup Iteration   2: 333618,002 ops/s
[info] # Warmup Iteration   3: 332121,814 ops/s
[info] # Warmup Iteration   4: 332009,796 ops/s
[info] # Warmup Iteration   5: 331837,940 ops/s
[info] Iteration   1: 331397,340 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 332544,814 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 330961,953 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 331627,842 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 330815,131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   331469,416 ±(99.9%) 2634,515 ops/s [Average]
[info]   (min, avg, max) = (330815,131, 331469,416, 332544,814), stdev = 684,175
[info]   CI (99.9%): [328834,901, 334103,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62,85% complete, ETA 00:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12809,477 ops/s
[info] # Warmup Iteration   2: 16346,361 ops/s
[info] # Warmup Iteration   3: 16388,875 ops/s
[info] # Warmup Iteration   4: 16580,708 ops/s
[info] # Warmup Iteration   5: 16713,851 ops/s
[info] Iteration   1: 17104,842 ops/s
[info]                  ·gc.alloc.rate:               954,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          87800,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61161,826 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 17091,125 ops/s
[info]                  ·gc.alloc.rate:                   953,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              87800,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122315,464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,834 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17000,274 ops/s
[info]                  ·gc.alloc.rate:               948,314 MB/sec
[info]                  ·gc.alloc.rate.norm:          87799,909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61416,154 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 15496,525 ops/s
[info]                  ·gc.alloc.rate:               864,725 MB/sec
[info]                  ·gc.alloc.rate.norm:          87800,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67375,117 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     44,000 ms
[info] Iteration   5: 17150,721 ops/s
[info]                  ·gc.alloc.rate:               956,745 MB/sec
[info]                  ·gc.alloc.rate.norm:          87800,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60913,255 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   16768,697 ±(99.9%) 2746,501 ops/s [Average]
[info]   (min, avg, max) = (15496,525, 16768,697, 17150,721), stdev = 713,258
[info]   CI (99.9%): [14022,197, 19515,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   935,485 ±(99.9%) 152,771 MB/sec [Average]
[info]   (min, avg, max) = (864,725, 935,485, 956,745), stdev = 39,674
[info]   CI (99.9%): [782,714, 1088,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   87800,006 ±(99.9%) 0,210 B/op [Average]
[info]   (min, avg, max) = (87799,909, 87800,006, 87800,039), stdev = 0,054
[info]   CI (99.9%): [87799,796, 87800,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   796,732 ±(99.9%) 1144,280 MB/sec [Average]
[info]   (min, avg, max) = (663,347, 796,732, 1328,317), stdev = 297,166
[info]   CI (99.9%): [≈ 0, 1941,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74636,363 ±(99.9%) 103156,356 B/op [Average]
[info]   (min, avg, max) = (60913,255, 74636,363, 122315,464), stdev = 26789,378
[info]   CI (99.9%): [≈ 0, 177792,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,767 ±(99.9%) 6,602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,767, 3,834), stdev = 1,715
[info]   CI (99.9%): [≈ 0, 7,369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   46,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 9,200, 44,000), stdev = 19,460
[info]   CI (99.9%): [46,000, 46,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63,05% complete, ETA 00:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7537,267 ops/s
[info] # Warmup Iteration   2: 8309,434 ops/s
[info] # Warmup Iteration   3: 8285,158 ops/s
[info] # Warmup Iteration   4: 8306,964 ops/s
[info] # Warmup Iteration   5: 8290,612 ops/s
[info] Iteration   1: 8293,066 ops/s
[info]                  ·gc.alloc.rate:                   544,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              103408,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97083,348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,996 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 8322,430 ops/s
[info]                  ·gc.alloc.rate:                   546,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              103408,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126726,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1029,130 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 8330,073 ops/s
[info]                  ·gc.alloc.rate:                   547,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              103412,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126604,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,866 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 8320,952 ops/s
[info]                  ·gc.alloc.rate:      546,734 MB/sec
[info]                  ·gc.alloc.rate.norm: 103408,049 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8316,397 ops/s
[info]                  ·gc.alloc.rate:               546,372 MB/sec
[info]                  ·gc.alloc.rate.norm:          103408,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126187,133 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   8316,584 ±(99.9%) 54,059 ops/s [Average]
[info]   (min, avg, max) = (8293,066, 8316,584, 8330,073), stdev = 14,039
[info]   CI (99.9%): [8262,525, 8370,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   546,430 ±(99.9%) 3,612 MB/sec [Average]
[info]   (min, avg, max) = (544,871, 546,430, 547,344), stdev = 0,938
[info]   CI (99.9%): [542,818, 550,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   103408,855 ±(99.9%) 6,924 B/op [Average]
[info]   (min, avg, max) = (103408,049, 103408,855, 103412,072), stdev = 1,798
[info]   CI (99.9%): [103401,931, 103415,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   503,701 ±(99.9%) 1115,594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503,701, 670,134), stdev = 289,716
[info]   CI (99.9%): [≈ 0, 1619,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   95320,172 ±(99.9%) 210968,563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95320,172, 126726,028), stdev = 54787,866
[info]   CI (99.9%): [≈ 0, 306288,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1,104 ±(99.9%) 9,338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,104, 5,442), stdev = 2,425
[info]   CI (99.9%): [≈ 0, 10,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   208,798 ±(99.9%) 1765,885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 208,798, 1029,130), stdev = 458,595
[info]   CI (99.9%): [≈ 0, 1974,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,517
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,25% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 931551,825 ops/s
[info] # Warmup Iteration   2: 986534,155 ops/s
[info] # Warmup Iteration   3: 985646,347 ops/s
[info] # Warmup Iteration   4: 986477,277 ops/s
[info] # Warmup Iteration   5: 983525,751 ops/s
[info] Iteration   1: 986155,133 ops/s
[info]                  ·gc.alloc.rate:      40,100 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 988180,318 ops/s
[info]                  ·gc.alloc.rate:      40,185 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 986338,717 ops/s
[info]                  ·gc.alloc.rate:      40,109 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 983852,948 ops/s
[info]                  ·gc.alloc.rate:      40,010 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 985504,980 ops/s
[info]                  ·gc.alloc.rate:      40,071 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   986006,419 ±(99.9%) 6010,968 ops/s [Average]
[info]   (min, avg, max) = (983852,948, 986006,419, 988180,318), stdev = 1561,029
[info]   CI (99.9%): [979995,451, 992017,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   40,095 ±(99.9%) 0,244 MB/sec [Average]
[info]   (min, avg, max) = (40,010, 40,095, 40,185), stdev = 0,063
[info]   CI (99.9%): [39,851, 40,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64,000, 64,000, 64,000), stdev = 0,001
[info]   CI (99.9%): [64,000, 64,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63,45% complete, ETA 00:48:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47515,572 ops/s
[info] # Warmup Iteration   2: 81258,792 ops/s
[info] # Warmup Iteration   3: 81680,966 ops/s
[info] # Warmup Iteration   4: 81892,801 ops/s
[info] # Warmup Iteration   5: 82334,421 ops/s
[info] Iteration   1: 81484,127 ops/s
[info]                  ·gc.alloc.rate:                   3674,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65638,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 81318,726 ops/s
[info]                  ·gc.alloc.rate:                   3666,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79014,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,806 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 82055,027 ops/s
[info]                  ·gc.alloc.rate:                   3699,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65285,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,996 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 82130,906 ops/s
[info]                  ·gc.alloc.rate:                   3703,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65249,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,399 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 81560,273 ops/s
[info]                  ·gc.alloc.rate:                   3677,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78891,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,008 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   81709,812 ±(99.9%) 1392,020 ops/s [Average]
[info]   (min, avg, max) = (81318,726, 81709,812, 82130,906), stdev = 361,503
[info]   CI (99.9%): [80317,792, 83101,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3684,320 ±(99.9%) 63,116 MB/sec [Average]
[info]   (min, avg, max) = (3666,743, 3684,320, 3703,502), stdev = 16,391
[info]   CI (99.9%): [3621,203, 3747,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70968,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70968,005, 70968,005, 70968,005), stdev = 0,001
[info]   CI (99.9%): [70968,004, 70968,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3675,466 ±(99.9%) 1440,121 MB/sec [Average]
[info]   (min, avg, max) = (3398,278, 3675,466, 4087,800), stdev = 373,995
[info]   CI (99.9%): [2235,345, 5115,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70816,039 ±(99.9%) 28609,744 B/op [Average]
[info]   (min, avg, max) = (65249,608, 70816,039, 79014,487), stdev = 7429,860
[info]   CI (99.9%): [42206,295, 99425,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,104), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,444 ±(99.9%) 3,010 B/op [Average]
[info]   (min, avg, max) = (0,399, 1,444, 2,010), stdev = 0,782
[info]   CI (99.9%): [≈ 0, 4,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 4,000), stdev = 0,894
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,65% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 869717,396 ops/s
[info] # Warmup Iteration   2: 1202320,130 ops/s
[info] # Warmup Iteration   3: 1202791,736 ops/s
[info] # Warmup Iteration   4: 1196554,784 ops/s
[info] # Warmup Iteration   5: 1203542,798 ops/s
[info] Iteration   1: 1203414,961 ops/s
[info]                  ·gc.alloc.rate:               691,216 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 882,031 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1193947,980 ops/s
[info]                  ·gc.alloc.rate:                   685,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     890,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1187854,616 ops/s
[info]                  ·gc.alloc.rate:               682,254 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 894,504 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1190262,189 ops/s
[info]                  ·gc.alloc.rate:                   683,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     893,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1201151,872 ops/s
[info]                  ·gc.alloc.rate:               689,871 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885,488 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1195326,324 ±(99.9%) 26026,392 ops/s [Average]
[info]   (min, avg, max) = (1187854,616, 1195326,324, 1203414,961), stdev = 6758,971
[info]   CI (99.9%): [1169299,932, 1221352,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   686,578 ±(99.9%) 14,893 MB/sec [Average]
[info]   (min, avg, max) = (682,254, 686,578, 691,216), stdev = 3,868
[info]   CI (99.9%): [671,686, 701,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,261 ±(99.9%) 2,198 MB/sec [Average]
[info]   (min, avg, max) = (674,418, 675,261, 675,833), stdev = 0,571
[info]   CI (99.9%): [673,063, 677,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   889,123 ±(99.9%) 20,482 B/op [Average]
[info]   (min, avg, max) = (882,031, 889,123, 894,504), stdev = 5,319
[info]   CI (99.9%): [868,641, 909,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,055), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,86% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1534894,546 ops/s
[info] # Warmup Iteration   2: 1597135,689 ops/s
[info] # Warmup Iteration   3: 1591568,303 ops/s
[info] # Warmup Iteration   4: 1592525,961 ops/s
[info] # Warmup Iteration   5: 1612365,352 ops/s
[info] Iteration   1: 1610806,392 ops/s
[info]                  ·gc.alloc.rate:               450,280 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 499,824 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1614017,578 ops/s
[info]                  ·gc.alloc.rate:               451,266 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 498,871 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1614322,410 ops/s
[info]                  ·gc.alloc.rate:      451,284 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1612167,298 ops/s
[info]                  ·gc.alloc.rate:                   450,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1613082,341 ops/s
[info]                  ·gc.alloc.rate:                   450,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658,355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   1612879,204 ±(99.9%) 5521,132 ops/s [Average]
[info]   (min, avg, max) = (1610806,392, 1612879,204, 1614322,410), stdev = 1433,820
[info]   CI (99.9%): [1607358,072, 1618400,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   450,892 ±(99.9%) 1,601 MB/sec [Average]
[info]   (min, avg, max) = (450,280, 450,892, 451,284), stdev = 0,416
[info]   CI (99.9%): [449,291, 452,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,520 ±(99.9%) 1068,651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,520, 674,804), stdev = 277,525
[info]   CI (99.9%): [≈ 0, 1543,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   463,155 ±(99.9%) 1043,027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 463,155, 658,727), stdev = 270,871
[info]   CI (99.9%): [≈ 0, 1506,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,638 ±(99.9%) 5,403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,638, 3,148), stdev = 1,403
[info]   CI (99.9%): [≈ 0, 6,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,623 ±(99.9%) 5,275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,623, 3,073), stdev = 1,370
[info]   CI (99.9%): [≈ 0, 5,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64,06% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1558246,098 ops/s
[info] # Warmup Iteration   2: 1635765,393 ops/s
[info] # Warmup Iteration   3: 1632042,567 ops/s
[info] # Warmup Iteration   4: 1632216,964 ops/s
[info] # Warmup Iteration   5: 1628234,806 ops/s
[info] Iteration   1: 1630991,823 ops/s
[info]                  ·gc.alloc.rate:      16,579 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1635031,127 ops/s
[info]                  ·gc.alloc.rate:      16,623 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1638586,911 ops/s
[info]                  ·gc.alloc.rate:      16,658 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1634455,485 ops/s
[info]                  ·gc.alloc.rate:      16,617 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1635654,440 ops/s
[info]                  ·gc.alloc.rate:      16,626 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1634943,957 ±(99.9%) 10482,218 ops/s [Average]
[info]   (min, avg, max) = (1630991,823, 1634943,957, 1638586,911), stdev = 2722,199
[info]   CI (99.9%): [1624461,739, 1645426,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   16,621 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (16,579, 16,621, 16,658), stdev = 0,028
[info]   CI (99.9%): [16,512, 16,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64,26% complete, ETA 00:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30283,168 ops/s
[info] # Warmup Iteration   2: 50543,810 ops/s
[info] # Warmup Iteration   3: 50553,707 ops/s
[info] # Warmup Iteration   4: 50347,474 ops/s
[info] # Warmup Iteration   5: 50361,934 ops/s
[info] Iteration   1: 50349,214 ops/s
[info]                  ·gc.alloc.rate:                   2121,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63515,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,301 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 50349,750 ops/s
[info]                  ·gc.alloc.rate:                   2121,931 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84801,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,301 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 50345,015 ops/s
[info]                  ·gc.alloc.rate:                   2121,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63683,848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,952 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 49927,248 ops/s
[info]                  ·gc.alloc.rate:                   2104,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64252,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,656 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 50139,239 ops/s
[info]                  ·gc.alloc.rate:               2112,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2039,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64018,896 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   50222,093 ±(99.9%) 723,891 ops/s [Average]
[info]   (min, avg, max) = (49927,248, 50222,093, 50349,750), stdev = 187,992
[info]   CI (99.9%): [49498,202, 50945,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2116,461 ±(99.9%) 30,417 MB/sec [Average]
[info]   (min, avg, max) = (2104,224, 2116,461, 2121,931), stdev = 7,899
[info]   CI (99.9%): [2086,044, 2146,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66328,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66328,008, 66328,008, 66328,009), stdev = 0,001
[info]   CI (99.9%): [66328,007, 66328,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2171,865 ±(99.9%) 1164,697 MB/sec [Average]
[info]   (min, avg, max) = (2031,620, 2171,865, 2712,911), stdev = 302,468
[info]   CI (99.9%): [1007,168, 3336,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68054,269 ±(99.9%) 36065,595 B/op [Average]
[info]   (min, avg, max) = (63515,043, 68054,269, 84801,036), stdev = 9366,120
[info]   CI (99.9%): [31988,675, 104119,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,042 ±(99.9%) 2,854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,042, 1,952), stdev = 0,741
[info]   CI (99.9%): [≈ 0, 3,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64,46% complete, ETA 00:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596584,726 ops/s
[info] # Warmup Iteration   2: 876054,455 ops/s
[info] # Warmup Iteration   3: 889240,972 ops/s
[info] # Warmup Iteration   4: 888771,170 ops/s
[info] # Warmup Iteration   5: 889215,903 ops/s
[info] Iteration   1: 885444,287 ops/s
[info]                  ·gc.alloc.rate:                   2812,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4795,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 883029,942 ops/s
[info]                  ·gc.alloc.rate:                   2805,693 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4820,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 882958,396 ops/s
[info]                  ·gc.alloc.rate:                   2805,212 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4830,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 885979,956 ops/s
[info]                  ·gc.alloc.rate:                   2814,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4820,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 888575,165 ops/s
[info]                  ·gc.alloc.rate:                   2822,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4812,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   885197,549 ±(99.9%) 8988,111 ops/s [Average]
[info]   (min, avg, max) = (882958,396, 885197,549, 888575,165), stdev = 2334,184
[info]   CI (99.9%): [876209,438, 894185,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2812,176 ±(99.9%) 27,286 MB/sec [Average]
[info]   (min, avg, max) = (2805,212, 2812,176, 2822,345), stdev = 7,086
[info]   CI (99.9%): [2784,890, 2839,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5000,000, 5000,000, 5000,000), stdev = 0,001
[info]   CI (99.9%): [5000,000, 5000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2708,587 ±(99.9%) 28,197 MB/sec [Average]
[info]   (min, avg, max) = (2698,025, 2708,587, 2716,444), stdev = 7,323
[info]   CI (99.9%): [2680,390, 2736,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4815,833 ±(99.9%) 49,546 B/op [Average]
[info]   (min, avg, max) = (4795,747, 4815,833, 4830,123), stdev = 12,867
[info]   CI (99.9%): [4766,287, 4865,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,081 ±(99.9%) 0,157 B/op [Average]
[info]   (min, avg, max) = (0,037, 0,081, 0,148), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64,66% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403671,905 ops/s
[info] # Warmup Iteration   2: 6082581,080 ops/s
[info] # Warmup Iteration   3: 6041509,203 ops/s
[info] # Warmup Iteration   4: 6059435,574 ops/s
[info] # Warmup Iteration   5: 6044667,623 ops/s
[info] Iteration   1: 6053842,708 ops/s
[info]                  ·gc.alloc.rate:      369,250 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6040520,956 ops/s
[info]                  ·gc.alloc.rate:                   368,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6053332,970 ops/s
[info]                  ·gc.alloc.rate:               369,217 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133,006 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6039302,045 ops/s
[info]                  ·gc.alloc.rate:      368,425 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6035526,783 ops/s
[info]                  ·gc.alloc.rate:                   368,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,690 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   6044505,092 ±(99.9%) 32712,211 ops/s [Average]
[info]   (min, avg, max) = (6035526,783, 6044505,092, 6053842,708), stdev = 8495,257
[info]   CI (99.9%): [6011792,882, 6077217,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   368,691 ±(99.9%) 1,971 MB/sec [Average]
[info]   (min, avg, max) = (368,118, 368,691, 369,250), stdev = 0,512
[info]   CI (99.9%): [366,720, 370,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,427 ±(99.9%) 1220,168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,427, 674,035), stdev = 316,874
[info]   CI (99.9%): [≈ 0, 1559,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   88,415 ±(99.9%) 317,934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88,415, 175,779), stdev = 82,566
[info]   CI (99.9%): [≈ 0, 406,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,535 ±(99.9%) 4,542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,535, 2,645), stdev = 1,179
[info]   CI (99.9%): [≈ 0, 5,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,140 ±(99.9%) 1,184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,140, 0,690), stdev = 0,308
[info]   CI (99.9%): [≈ 0, 1,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64,86% complete, ETA 00:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483104,816 ops/s
[info] # Warmup Iteration   2: 1092355,789 ops/s
[info] # Warmup Iteration   3: 1100991,614 ops/s
[info] # Warmup Iteration   4: 1102225,841 ops/s
[info] # Warmup Iteration   5: 1098142,095 ops/s
[info] Iteration   1: 1098970,091 ops/s
[info]                  ·gc.alloc.rate:               1312,738 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1935,492 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1099684,000 ops/s
[info]                  ·gc.alloc.rate:                   1313,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1935,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1103847,040 ops/s
[info]                  ·gc.alloc.rate:               1318,555 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1929,816 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1095120,925 ops/s
[info]                  ·gc.alloc.rate:                   1308,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1947,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1102166,335 ops/s
[info]                  ·gc.alloc.rate:                   1316,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1935,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1099957,678 ±(99.9%) 12836,240 ops/s [Average]
[info]   (min, avg, max) = (1095120,925, 1099957,678, 1103847,040), stdev = 3333,531
[info]   CI (99.9%): [1087121,438, 1112793,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1313,896 ±(99.9%) 15,129 MB/sec [Average]
[info]   (min, avg, max) = (1308,223, 1313,896, 1318,555), stdev = 3,929
[info]   CI (99.9%): [1298,767, 1329,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1880,000, 1880,000, 1880,000), stdev = 0,001
[info]   CI (99.9%): [1880,000, 1880,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,475 ±(99.9%) 6,498 MB/sec [Average]
[info]   (min, avg, max) = (1351,486, 1353,475, 1355,363), stdev = 1,687
[info]   CI (99.9%): [1346,978, 1359,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1936,647 ±(99.9%) 24,361 B/op [Average]
[info]   (min, avg, max) = (1929,816, 1936,647, 1947,088), stdev = 6,326
[info]   CI (99.9%): [1912,287, 1961,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,089), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65,06% complete, ETA 00:46:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8312326,526 ops/s
[info] # Warmup Iteration   2: 9032162,889 ops/s
[info] # Warmup Iteration   3: 9004486,247 ops/s
[info] # Warmup Iteration   4: 9015889,708 ops/s
[info] # Warmup Iteration   5: 9007312,784 ops/s
[info] Iteration   1: 9020710,491 ops/s
[info]                  ·gc.alloc.rate:      412,670 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9000649,238 ops/s
[info]                  ·gc.alloc.rate:               411,758 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89,462 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 9001810,445 ops/s
[info]                  ·gc.alloc.rate:                   411,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8996701,770 ops/s
[info]                  ·gc.alloc.rate:                   411,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,534 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9013036,276 ops/s
[info]                  ·gc.alloc.rate:      412,289 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9006581,644 ±(99.9%) 38354,824 ops/s [Average]
[info]   (min, avg, max) = (8996701,770, 9006581,644, 9020710,491), stdev = 9960,626
[info]   CI (99.9%): [8968226,820, 9044936,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   412,018 ±(99.9%) 1,725 MB/sec [Average]
[info]   (min, avg, max) = (411,593, 412,018, 412,670), stdev = 0,448
[info]   CI (99.9%): [410,293, 413,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,723 ±(99.9%) 1221,640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,723, 675,446), stdev = 317,256
[info]   CI (99.9%): [≈ 0, 1561,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   59,412 ±(99.9%) 213,662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59,412, 118,156), stdev = 55,487
[info]   CI (99.9%): [≈ 0, 273,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,612 ±(99.9%) 5,251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,612, 3,051), stdev = 1,364
[info]   CI (99.9%): [≈ 0, 5,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,107 ±(99.9%) 0,919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,107, 0,534), stdev = 0,239
[info]   CI (99.9%): [≈ 0, 1,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65,26% complete, ETA 00:46:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92955,866 ops/s
[info] # Warmup Iteration   2: 349633,239 ops/s
[info] # Warmup Iteration   3: 350247,731 ops/s
[info] # Warmup Iteration   4: 350373,287 ops/s
[info] # Warmup Iteration   5: 349707,113 ops/s
[info] Iteration   1: 350779,114 ops/s
[info]                  ·gc.alloc.rate:                   1923,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              8632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9112,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 346940,441 ops/s
[info]                  ·gc.alloc.rate:                   1902,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              8632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9222,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,189 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 349425,458 ops/s
[info]                  ·gc.alloc.rate:                   1916,406 MB/sec
[info]                  ·gc.alloc.rate.norm:              8632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6108,250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,188 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 349800,048 ops/s
[info]                  ·gc.alloc.rate:                   1918,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              8632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9163,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 349457,567 ops/s
[info]                  ·gc.alloc.rate:               1916,304 MB/sec
[info]                  ·gc.alloc.rate.norm:          8632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2037,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9178,167 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   349280,526 ±(99.9%) 5460,594 ops/s [Average]
[info]   (min, avg, max) = (346940,441, 349280,526, 350779,114), stdev = 1418,099
[info]   CI (99.9%): [343819,932, 354741,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1915,604 ±(99.9%) 30,039 MB/sec [Average]
[info]   (min, avg, max) = (1902,786, 1915,604, 1923,903), stdev = 7,801
[info]   CI (99.9%): [1885,565, 1945,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8632,001, 8632,001, 8632,001), stdev = 0,001
[info]   CI (99.9%): [8632,001, 8632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,835 ±(99.9%) 1168,317 MB/sec [Average]
[info]   (min, avg, max) = (1356,103, 1898,835, 2037,553), stdev = 303,408
[info]   CI (99.9%): [730,518, 3067,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8556,812 ±(99.9%) 5272,890 B/op [Average]
[info]   (min, avg, max) = (6108,250, 8556,812, 9222,288), stdev = 1369,353
[info]   CI (99.9%): [3283,923, 13829,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,150 ±(99.9%) 0,323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,150, 0,189), stdev = 0,084
[info]   CI (99.9%): [≈ 0, 0,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65,46% complete, ETA 00:45:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596187,987 ops/s
[info] # Warmup Iteration   2: 800682,453 ops/s
[info] # Warmup Iteration   3: 809781,336 ops/s
[info] # Warmup Iteration   4: 812917,873 ops/s
[info] # Warmup Iteration   5: 817193,027 ops/s
[info] Iteration   1: 815492,718 ops/s
[info]                  ·gc.alloc.rate:                   1280,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2594,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 819988,154 ops/s
[info]                  ·gc.alloc.rate:                   1287,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2579,935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 820678,434 ops/s
[info]                  ·gc.alloc.rate:                   1288,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2577,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 819451,722 ops/s
[info]                  ·gc.alloc.rate:                   1287,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2582,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 819449,246 ops/s
[info]                  ·gc.alloc.rate:               1286,895 MB/sec
[info]                  ·gc.alloc.rate.norm:          2472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2585,479 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   819012,055 ±(99.9%) 7820,639 ops/s [Average]
[info]   (min, avg, max) = (815492,718, 819012,055, 820678,434), stdev = 2030,995
[info]   CI (99.9%): [811191,416, 826832,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1286,323 ±(99.9%) 12,166 MB/sec [Average]
[info]   (min, avg, max) = (1280,851, 1286,323, 1288,928), stdev = 3,159
[info]   CI (99.9%): [1274,157, 1298,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2472,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2472,000, 2472,001, 2472,001), stdev = 0,001
[info]   CI (99.9%): [2472,000, 2472,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1344,627 ±(99.9%) 3,176 MB/sec [Average]
[info]   (min, avg, max) = (1344,047, 1344,627, 1345,970), stdev = 0,825
[info]   CI (99.9%): [1341,451, 1347,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2584,060 ±(99.9%) 24,512 B/op [Average]
[info]   (min, avg, max) = (2577,782, 2584,060, 2594,177), stdev = 6,366
[info]   CI (99.9%): [2559,548, 2608,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,056 ±(99.9%) 0,138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,056, 0,080), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65,66% complete, ETA 00:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2946,549 ops/s
[info] # Warmup Iteration   2: 4340,872 ops/s
[info] # Warmup Iteration   3: 4415,190 ops/s
[info] # Warmup Iteration   4: 4431,846 ops/s
[info] # Warmup Iteration   5: 4458,534 ops/s
[info] Iteration   1: 4434,873 ops/s
[info]                  ·gc.alloc.rate:                   2020,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     721427,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,161 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4451,276 ops/s
[info]                  ·gc.alloc.rate:                   2028,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     719541,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,081 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4446,188 ops/s
[info]                  ·gc.alloc.rate:                   2026,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     720778,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95,770 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 4396,055 ops/s
[info]                  ·gc.alloc.rate:               2003,362 MB/sec
[info]                  ·gc.alloc.rate.norm:          717152,107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1358,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 486259,834 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 4405,452 ops/s
[info]                  ·gc.alloc.rate:                   2007,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728316,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37,177 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4426,769 ±(99.9%) 95,125 ops/s [Average]
[info]   (min, avg, max) = (4396,055, 4426,769, 4451,276), stdev = 24,704
[info]   CI (99.9%): [4331,644, 4521,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2017,158 ±(99.9%) 43,442 MB/sec [Average]
[info]   (min, avg, max) = (2003,362, 2017,158, 2028,458), stdev = 11,282
[info]   CI (99.9%): [1973,716, 2060,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   717152,098 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (717152,092, 717152,098, 717152,107), stdev = 0,007
[info]   CI (99.9%): [717152,073, 717152,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1900,219 ±(99.9%) 1166,406 MB/sec [Average]
[info]   (min, avg, max) = (1358,365, 1900,219, 2038,424), stdev = 302,912
[info]   CI (99.9%): [733,812, 3066,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   675264,819 ±(99.9%) 407060,158 B/op [Average]
[info]   (min, avg, max) = (486259,834, 675264,819, 728316,573), stdev = 105712,230
[info]   CI (99.9%): [268204,661, 1082324,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,271), stdev = 0,102
[info]   CI (99.9%): [≈ 0, 0,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35,438 ±(99.9%) 139,549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35,438, 95,770), stdev = 36,241
[info]   CI (99.9%): [≈ 0, 174,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65,86% complete, ETA 00:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3028,711 ops/s
[info] # Warmup Iteration   2: 5469,521 ops/s
[info] # Warmup Iteration   3: 5551,728 ops/s
[info] # Warmup Iteration   4: 5537,532 ops/s
[info] # Warmup Iteration   5: 5557,617 ops/s
[info] Iteration   1: 5549,174 ops/s
[info]                  ·gc.alloc.rate:                   2293,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              650496,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768061,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,612 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5572,114 ops/s
[info]                  ·gc.alloc.rate:                   2302,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              650496,079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     574430,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,519 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5568,592 ops/s
[info]                  ·gc.alloc.rate:                   2301,333 MB/sec
[info]                  ·gc.alloc.rate.norm:              650496,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575493,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,883 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5563,153 ops/s
[info]                  ·gc.alloc.rate:                   2299,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              650496,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     768578,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,441 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5546,897 ops/s
[info]                  ·gc.alloc.rate:                   2292,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              650496,079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     578720,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,625 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5559,986 ±(99.9%) 43,879 ops/s [Average]
[info]   (min, avg, max) = (5546,897, 5559,986, 5572,114), stdev = 11,395
[info]   CI (99.9%): [5516,107, 5603,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2297,817 ±(99.9%) 18,661 MB/sec [Average]
[info]   (min, avg, max) = (2292,063, 2297,817, 2302,936), stdev = 4,846
[info]   CI (99.9%): [2279,156, 2316,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650496,076 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (650496,073, 650496,076, 650496,079), stdev = 0,003
[info]   CI (99.9%): [650496,063, 650496,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2306,686 ±(99.9%) 1425,937 MB/sec [Average]
[info]   (min, avg, max) = (2033,644, 2306,686, 2716,790), stdev = 370,311
[info]   CI (99.9%): [880,749, 3732,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   653056,920 ±(99.9%) 405213,113 B/op [Average]
[info]   (min, avg, max) = (574430,743, 653056,920, 768578,887), stdev = 105232,559
[info]   CI (99.9%): [247843,806, 1058270,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21,216 ±(99.9%) 34,420 B/op [Average]
[info]   (min, avg, max) = (5,883, 21,216, 29,441), stdev = 8,939
[info]   CI (99.9%): [≈ 0, 55,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66,06% complete, ETA 00:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45539,052 ops/s
[info] # Warmup Iteration   2: 48034,814 ops/s
[info] # Warmup Iteration   3: 48201,287 ops/s
[info] # Warmup Iteration   4: 47941,639 ops/s
[info] # Warmup Iteration   5: 48054,926 ops/s
[info] Iteration   1: 48059,905 ops/s
[info]                  ·gc.alloc.rate:                   799,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22118,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,363 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 46627,545 ops/s
[info]                  ·gc.alloc.rate:               775,791 MB/sec
[info]                  ·gc.alloc.rate.norm:          26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22732,075 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 47765,518 ops/s
[info]                  ·gc.alloc.rate:                   794,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22188,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,686 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 48079,229 ops/s
[info]                  ·gc.alloc.rate:                   799,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44044,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 48417,859 ops/s
[info]                  ·gc.alloc.rate:               805,294 MB/sec
[info]                  ·gc.alloc.rate.norm:          26184,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21869,242 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   47790,011 ±(99.9%) 2655,696 ops/s [Average]
[info]   (min, avg, max) = (46627,545, 47790,011, 48417,859), stdev = 689,676
[info]   CI (99.9%): [45134,316, 50445,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   795,061 ±(99.9%) 43,959 MB/sec [Average]
[info]   (min, avg, max) = (775,791, 795,061, 805,294), stdev = 11,416
[info]   CI (99.9%): [751,102, 839,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26184,008, 26184,009, 26184,009), stdev = 0,001
[info]   CI (99.9%): [26184,007, 26184,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   808,100 ±(99.9%) 1156,724 MB/sec [Average]
[info]   (min, avg, max) = (672,593, 808,100, 1345,464), stdev = 300,398
[info]   CI (99.9%): [≈ 0, 1964,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26590,512 ±(99.9%) 37589,654 B/op [Average]
[info]   (min, avg, max) = (21869,242, 26590,512, 44044,073), stdev = 9761,914
[info]   CI (99.9%): [≈ 0, 64180,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,819 ±(99.9%) 3,421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,819, 2,044), stdev = 0,888
[info]   CI (99.9%): [≈ 0, 4,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66,27% complete, ETA 00:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3221,473 ops/s
[info] # Warmup Iteration   2: 4511,614 ops/s
[info] # Warmup Iteration   3: 4557,382 ops/s
[info] # Warmup Iteration   4: 4574,697 ops/s
[info] # Warmup Iteration   5: 4561,062 ops/s
[info] Iteration   1: 4579,806 ops/s
[info]                  ·gc.alloc.rate:               842,045 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,103 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231300,163 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 4582,205 ops/s
[info]                  ·gc.alloc.rate:               842,751 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231148,789 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 4582,508 ops/s
[info]                  ·gc.alloc.rate:                   842,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              289408,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231377,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,445 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 4510,964 ops/s
[info]                  ·gc.alloc.rate:               829,606 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470267,632 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 4550,575 ops/s
[info]                  ·gc.alloc.rate:               836,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 233234,446 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4561,212 ±(99.9%) 119,896 ops/s [Average]
[info]   (min, avg, max) = (4510,964, 4561,212, 4582,508), stdev = 31,136
[info]   CI (99.9%): [4441,316, 4681,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   838,738 ±(99.9%) 21,908 MB/sec [Average]
[info]   (min, avg, max) = (829,606, 838,738, 842,751), stdev = 5,689
[info]   CI (99.9%): [816,830, 860,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289408,096 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (289408,090, 289408,096, 289408,103), stdev = 0,004
[info]   CI (99.9%): [289408,079, 289408,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   808,413 ±(99.9%) 1161,615 MB/sec [Average]
[info]   (min, avg, max) = (672,978, 808,413, 1348,052), stdev = 301,668
[info]   CI (99.9%): [≈ 0, 1970,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   279465,713 ±(99.9%) 410728,626 B/op [Average]
[info]   (min, avg, max) = (231148,789, 279465,713, 470267,632), stdev = 106664,920
[info]   CI (99.9%): [≈ 0, 690194,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,289 ±(99.9%) 36,930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,289, 21,445), stdev = 9,591
[info]   CI (99.9%): [≈ 0, 41,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66,47% complete, ETA 00:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e724a5b0/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3128,478 ops/s
[info] # Warmup Iteration   2: 5333,276 ops/s
[info] # Warmup Iteration   3: 5430,007 ops/s
[info] # Warmup Iteration   4: 5451,647 ops/s
[info] # Warmup Iteration   5: 5427,509 ops/s
[info] Iteration   1: 5447,616 ops/s
[info]                  ·gc.alloc.rate:      546,433 MB/sec
[info]                  ·gc.alloc.rate.norm: 157877,442 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5434,870 ops/s
[info]                  ·gc.alloc.rate:                   545,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877,163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195173,609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257,179 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5457,414 ops/s
[info]                  ·gc.alloc.rate:                   547,406 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877,815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194387,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 5442,852 ops/s
[info]                  ·gc.alloc.rate:               546,013 MB/sec
[info]                  ·gc.alloc.rate.norm:          157877,272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194886,853 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 5447,865 ops/s
[info]                  ·gc.alloc.rate:                   546,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              157877,336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194708,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5446,123 ±(99.9%) 31,640 ops/s [Average]
[info]   (min, avg, max) = (5434,870, 5446,123, 5457,414), stdev = 8,217
[info]   CI (99.9%): [5414,483, 5477,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   546,295 ±(99.9%) 3,096 MB/sec [Average]
[info]   (min, avg, max) = (545,185, 546,295, 547,406), stdev = 0,804
[info]   CI (99.9%): [543,198, 549,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157877,406 ±(99.9%) 0,964 B/op [Average]
[info]   (min, avg, max) = (157877,163, 157877,406, 157877,815), stdev = 0,250
[info]   CI (99.9%): [157876,442, 157878,369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,178 ±(99.9%) 1160,622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,178, 674,009), stdev = 301,410
[info]   CI (99.9%): [≈ 0, 1699,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   155831,114 ±(99.9%) 335440,021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 155831,114, 195173,609), stdev = 87112,708
[info]   CI (99.9%): [≈ 0, 491271,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,194 ±(99.9%) 1,497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,194, 0,888), stdev = 0,389
[info]   CI (99.9%): [≈ 0, 1,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   56,240 ±(99.9%) 433,461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56,240, 257,179), stdev = 112,569
[info]   CI (99.9%): [≈ 0, 489,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66,67% complete, ETA 00:44:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6855,200 ops/s
[info] # Warmup Iteration   2: 7172,857 ops/s
[info] # Warmup Iteration   3: 7112,429 ops/s
[info] # Warmup Iteration   4: 7140,659 ops/s
[info] # Warmup Iteration   5: 7151,708 ops/s
[info] Iteration   1: 7127,016 ops/s
[info]                  ·gc.alloc.rate:               190,440 MB/sec
[info]                  ·gc.alloc.rate.norm:          42056,062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112962,038 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 7190,171 ops/s
[info]                  ·gc.alloc.rate:      192,151 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7146,925 ops/s
[info]                  ·gc.alloc.rate:               190,969 MB/sec
[info]                  ·gc.alloc.rate.norm:          42056,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112646,016 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 7131,262 ops/s
[info]                  ·gc.alloc.rate:      190,572 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7139,097 ops/s
[info]                  ·gc.alloc.rate:      190,753 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   7146,894 ±(99.9%) 97,665 ops/s [Average]
[info]   (min, avg, max) = (7127,016, 7146,894, 7190,171), stdev = 25,363
[info]   CI (99.9%): [7049,229, 7244,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   190,977 ±(99.9%) 2,641 MB/sec [Average]
[info]   (min, avg, max) = (190,440, 190,977, 192,151), stdev = 0,686
[info]   CI (99.9%): [188,336, 193,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056,059 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (42056,057, 42056,059, 42056,062), stdev = 0,003
[info]   CI (99.9%): [42056,049, 42056,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,605 ±(99.9%) 1078,823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,605, 511,520), stdev = 280,167
[info]   CI (99.9%): [≈ 0, 1283,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45121,611 ±(99.9%) 237913,618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45121,611, 112962,038), stdev = 61785,411
[info]   CI (99.9%): [≈ 0, 283035,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66,87% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6920,571 ops/s
[info] # Warmup Iteration   2: 7206,507 ops/s
[info] # Warmup Iteration   3: 7175,582 ops/s
[info] # Warmup Iteration   4: 7118,988 ops/s
[info] # Warmup Iteration   5: 7192,158 ops/s
[info] Iteration   1: 7150,460 ops/s
[info]                  ·gc.alloc.rate:      138,810 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7186,213 ops/s
[info]                  ·gc.alloc.rate:               139,520 MB/sec
[info]                  ·gc.alloc.rate.norm:          30552,057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112034,831 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 7188,934 ops/s
[info]                  ·gc.alloc.rate:      139,547 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7173,393 ops/s
[info]                  ·gc.alloc.rate:      139,255 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7164,879 ops/s
[info]                  ·gc.alloc.rate:      139,102 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7172,776 ±(99.9%) 60,956 ops/s [Average]
[info]   (min, avg, max) = (7150,460, 7172,776, 7188,934), stdev = 15,830
[info]   CI (99.9%): [7111,820, 7233,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   139,247 ±(99.9%) 1,181 MB/sec [Average]
[info]   (min, avg, max) = (138,810, 139,247, 139,547), stdev = 0,307
[info]   CI (99.9%): [138,066, 140,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552,059 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (30552,057, 30552,059, 30552,061), stdev = 0,002
[info]   CI (99.9%): [30552,049, 30552,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102,325 ±(99.9%) 881,046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,325, 511,623), stdev = 228,805
[info]   CI (99.9%): [≈ 0, 983,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   22406,966 ±(99.9%) 192930,737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22406,966, 112034,831), stdev = 50103,500
[info]   CI (99.9%): [≈ 0, 215337,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67,07% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6803,550 ops/s
[info] # Warmup Iteration   2: 8808,195 ops/s
[info] # Warmup Iteration   3: 8911,729 ops/s
[info] # Warmup Iteration   4: 8931,684 ops/s
[info] # Warmup Iteration   5: 8898,966 ops/s
[info] Iteration   1: 8918,919 ops/s
[info]                  ·gc.alloc.rate:                   2077,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355754,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,673 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8943,664 ops/s
[info]                  ·gc.alloc.rate:                   2082,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355425,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,386 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8917,103 ops/s
[info]                  ·gc.alloc.rate:                   2076,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              366564,915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357068,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,347 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8883,909 ops/s
[info]                  ·gc.alloc.rate:                   2069,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358984,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,749 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8934,941 ops/s
[info]                  ·gc.alloc.rate:                   2080,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357522,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,744 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8919,707 ±(99.9%) 88,122 ops/s [Average]
[info]   (min, avg, max) = (8883,909, 8919,707, 8943,664), stdev = 22,885
[info]   CI (99.9%): [8831,585, 9007,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2077,383 ±(99.9%) 20,017 MB/sec [Average]
[info]   (min, avg, max) = (2069,231, 2077,383, 2082,828), stdev = 5,198
[info]   CI (99.9%): [2057,366, 2097,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366557,821 ±(99.9%) 48,666 B/op [Average]
[info]   (min, avg, max) = (366544,046, 366557,821, 366568,049), stdev = 12,638
[info]   CI (99.9%): [366509,155, 366606,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2022,926 ±(99.9%) 20,431 MB/sec [Average]
[info]   (min, avg, max) = (2016,068, 2022,926, 2029,454), stdev = 5,306
[info]   CI (99.9%): [2002,495, 2043,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   356950,972 ±(99.9%) 5524,369 B/op [Average]
[info]   (min, avg, max) = (355425,649, 356950,972, 358984,188), stdev = 1434,661
[info]   CI (99.9%): [351426,603, 362475,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,060 ±(99.9%) 0,225 MB/sec [Average]
[info]   (min, avg, max) = (0,004, 0,060, 0,150), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10,580 ±(99.9%) 39,557 B/op [Average]
[info]   (min, avg, max) = (0,744, 10,580, 26,386), stdev = 10,273
[info]   CI (99.9%): [≈ 0, 50,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67,27% complete, ETA 00:43:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3910,382 ops/s
[info] # Warmup Iteration   2: 15609,012 ops/s
[info] # Warmup Iteration   3: 15659,152 ops/s
[info] # Warmup Iteration   4: 15625,940 ops/s
[info] # Warmup Iteration   5: 15591,677 ops/s
[info] Iteration   1: 15648,165 ops/s
[info]                  ·gc.alloc.rate:      360,706 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280,028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15531,375 ops/s
[info]                  ·gc.alloc.rate:                   358,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51834,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,109 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 15538,903 ops/s
[info]                  ·gc.alloc.rate:               358,155 MB/sec
[info]                  ·gc.alloc.rate.norm:          36280,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51811,514 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 15655,680 ops/s
[info]                  ·gc.alloc.rate:      360,931 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280,026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15630,710 ops/s
[info]                  ·gc.alloc.rate:                   360,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67870,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 307,830 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   15600,967 ±(99.9%) 234,232 ops/s [Average]
[info]   (min, avg, max) = (15531,375, 15600,967, 15655,680), stdev = 60,829
[info]   CI (99.9%): [15366,735, 15835,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   359,633 ±(99.9%) 5,466 MB/sec [Average]
[info]   (min, avg, max) = (358,037, 359,633, 360,931), stdev = 1,420
[info]   CI (99.9%): [354,167, 365,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280,028 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (36280,026, 36280,028, 36280,035), stdev = 0,004
[info]   CI (99.9%): [36280,014, 36280,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,424 ±(99.9%) 1220,190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,424, 674,095), stdev = 316,880
[info]   CI (99.9%): [≈ 0, 1559,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   34303,421 ±(99.9%) 123192,000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34303,421, 67870,733), stdev = 31992,571
[info]   CI (99.9%): [≈ 0, 157495,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,616 ±(99.9%) 5,256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,616, 3,057), stdev = 1,365
[info]   CI (99.9%): [≈ 0, 5,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   61,988 ±(99.9%) 529,205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61,988, 307,830), stdev = 137,433
[info]   CI (99.9%): [≈ 0, 591,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67,47% complete, ETA 00:43:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10619,008 ops/s
[info] # Warmup Iteration   2: 17461,513 ops/s
[info] # Warmup Iteration   3: 17458,271 ops/s
[info] # Warmup Iteration   4: 17405,651 ops/s
[info] # Warmup Iteration   5: 17361,701 ops/s
[info] Iteration   1: 17382,447 ops/s
[info]                  ·gc.alloc.rate:               441,267 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46316,580 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 17259,679 ops/s
[info]                  ·gc.alloc.rate:      438,123 MB/sec
[info]                  ·gc.alloc.rate.norm: 39952,030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17430,842 ops/s
[info]                  ·gc.alloc.rate:                   442,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              39952,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60860,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48,863 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 17503,278 ops/s
[info]                  ·gc.alloc.rate:      444,333 MB/sec
[info]                  ·gc.alloc.rate.norm: 39952,023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17497,121 ops/s
[info]                  ·gc.alloc.rate:                   444,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              39952,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60634,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,745 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   17414,673 ±(99.9%) 384,928 ops/s [Average]
[info]   (min, avg, max) = (17259,679, 17414,673, 17503,278), stdev = 99,965
[info]   CI (99.9%): [17029,746, 17799,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   442,052 ±(99.9%) 9,733 MB/sec [Average]
[info]   (min, avg, max) = (438,123, 442,052, 444,333), stdev = 2,528
[info]   CI (99.9%): [432,319, 451,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39952,025 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (39952,023, 39952,025, 39952,030), stdev = 0,003
[info]   CI (99.9%): [39952,014, 39952,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   371,909 ±(99.9%) 1332,013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371,909, 674,003), stdev = 345,920
[info]   CI (99.9%): [≈ 0, 1703,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   33562,199 ±(99.9%) 120137,491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33562,199, 60860,227), stdev = 31199,325
[info]   CI (99.9%): [≈ 0, 153699,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,117 ±(99.9%) 0,917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,541), stdev = 0,238
[info]   CI (99.9%): [≈ 0, 1,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,521 ±(99.9%) 82,768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,521, 48,863), stdev = 21,495
[info]   CI (99.9%): [≈ 0, 93,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67,67% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22382,702 ops/s
[info] # Warmup Iteration   2: 25117,848 ops/s
[info] # Warmup Iteration   3: 25475,065 ops/s
[info] # Warmup Iteration   4: 25421,426 ops/s
[info] # Warmup Iteration   5: 25063,962 ops/s
[info] Iteration   1: 25424,202 ops/s
[info]                  ·gc.alloc.rate:               476,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          29496,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31666,327 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 25522,721 ops/s
[info]                  ·gc.alloc.rate:               478,297 MB/sec
[info]                  ·gc.alloc.rate.norm:          29496,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31547,239 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 25519,743 ops/s
[info]                  ·gc.alloc.rate:                   478,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41612,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203,314 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 25488,758 ops/s
[info]                  ·gc.alloc.rate:      477,743 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25511,959 ops/s
[info]                  ·gc.alloc.rate:                   478,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41624,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,568 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   25493,477 ±(99.9%) 157,689 ops/s [Average]
[info]   (min, avg, max) = (25424,202, 25493,477, 25522,721), stdev = 40,951
[info]   CI (99.9%): [25335,788, 25651,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   477,759 ±(99.9%) 2,998 MB/sec [Average]
[info]   (min, avg, max) = (476,421, 477,759, 478,297), stdev = 0,778
[info]   CI (99.9%): [474,761, 480,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (29496,016, 29496,016, 29496,017), stdev = 0,001
[info]   CI (99.9%): [29496,014, 29496,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,482 ±(99.9%) 1068,580 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,482, 674,703), stdev = 277,507
[info]   CI (99.9%): [≈ 0, 1543,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29290,103 ±(99.9%) 65930,086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29290,103, 41624,182), stdev = 17121,834
[info]   CI (99.9%): [≈ 0, 95220,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,668 ±(99.9%) 5,659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,668, 3,296), stdev = 1,470
[info]   CI (99.9%): [≈ 0, 6,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41,176 ±(99.9%) 349,039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,176, 203,314), stdev = 90,644
[info]   CI (99.9%): [≈ 0, 390,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67,87% complete, ETA 00:42:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1325,229 ops/s
[info] # Warmup Iteration   2: 2542,491 ops/s
[info] # Warmup Iteration   3: 2602,853 ops/s
[info] # Warmup Iteration   4: 2630,470 ops/s
[info] # Warmup Iteration   5: 2630,498 ops/s
[info] Iteration   1: 2636,148 ops/s
[info]                  ·gc.alloc.rate:               1674,443 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 807208,677 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2631,719 ops/s
[info]                  ·gc.alloc.rate:                   1671,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1213648,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37,335 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2642,545 ops/s
[info]                  ·gc.alloc.rate:                   1678,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     806657,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37,180 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2633,364 ops/s
[info]                  ·gc.alloc.rate:                   1672,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1215376,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49,762 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2635,981 ops/s
[info]                  ·gc.alloc.rate:               1674,325 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,167 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 809992,155 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2635,951 ±(99.9%) 15,891 ops/s [Average]
[info]   (min, avg, max) = (2631,719, 2635,951, 2642,545), stdev = 4,127
[info]   CI (99.9%): [2620,060, 2651,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1674,423 ±(99.9%) 10,135 MB/sec [Average]
[info]   (min, avg, max) = (1671,787, 1674,423, 1678,701), stdev = 2,632
[info]   CI (99.9%): [1664,288, 1684,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999760,160 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (999760,155, 999760,160, 999760,167), stdev = 0,006
[info]   CI (99.9%): [999760,135, 999760,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1625,203 ±(99.9%) 1428,372 MB/sec [Average]
[info]   (min, avg, max) = (1351,949, 1625,203, 2033,641), stdev = 370,944
[info]   CI (99.9%): [196,831, 3053,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   970576,730 ±(99.9%) 857485,434 B/op [Average]
[info]   (min, avg, max) = (806657,936, 970576,730, 1215376,814), stdev = 222686,244
[info]   CI (99.9%): [113091,295, 1828062,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24,855 ±(99.9%) 89,554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24,855, 49,762), stdev = 23,257
[info]   CI (99.9%): [≈ 0, 114,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68,07% complete, ETA 00:42:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7662,839 ops/s
[info] # Warmup Iteration   2: 8906,533 ops/s
[info] # Warmup Iteration   3: 8928,174 ops/s
[info] # Warmup Iteration   4: 8995,857 ops/s
[info] # Warmup Iteration   5: 8981,525 ops/s
[info] Iteration   1: 8950,121 ops/s
[info]                  ·gc.alloc.rate:                   1098,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236231,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,980 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8997,268 ops/s
[info]                  ·gc.alloc.rate:               1104,796 MB/sec
[info]                  ·gc.alloc.rate.norm:          193248,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117453,562 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9003,027 ops/s
[info]                  ·gc.alloc.rate:                   1105,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              193274,700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234724,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,638 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9024,807 ops/s
[info]                  ·gc.alloc.rate:                   1108,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234294,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,890 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9014,527 ops/s
[info]                  ·gc.alloc.rate:               1106,872 MB/sec
[info]                  ·gc.alloc.rate.norm:          193272,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117335,387 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   8997,950 ±(99.9%) 110,768 ops/s [Average]
[info]   (min, avg, max) = (8950,121, 8997,950, 9024,807), stdev = 28,766
[info]   CI (99.9%): [8887,182, 9108,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1104,890 ±(99.9%) 13,842 MB/sec [Average]
[info]   (min, avg, max) = (1098,917, 1104,890, 1108,299), stdev = 3,595
[info]   CI (99.9%): [1091,048, 1118,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   193262,980 ±(99.9%) 52,649 B/op [Average]
[info]   (min, avg, max) = (193248,049, 193262,980, 193274,700), stdev = 13,673
[info]   CI (99.9%): [193210,331, 193315,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1074,602 ±(99.9%) 1416,149 MB/sec [Average]
[info]   (min, avg, max) = (671,480, 1074,602, 1343,539), stdev = 367,769
[info]   CI (99.9%): [≈ 0, 2490,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   188007,865 ±(99.9%) 248231,511 B/op [Average]
[info]   (min, avg, max) = (117335,387, 188007,865, 236231,184), stdev = 64464,935
[info]   CI (99.9%): [≈ 0, 436239,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,102 ±(99.9%) 21,288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,102, 10,980), stdev = 5,528
[info]   CI (99.9%): [≈ 0, 26,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68,27% complete, ETA 00:42:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6815,894 ops/s
[info] # Warmup Iteration   2: 9067,557 ops/s
[info] # Warmup Iteration   3: 9169,377 ops/s
[info] # Warmup Iteration   4: 9142,738 ops/s
[info] # Warmup Iteration   5: 9175,123 ops/s
[info] Iteration   1: 9177,369 ops/s
[info]                  ·gc.alloc.rate:                   1697,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              291048,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346498,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,708 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9145,738 ops/s
[info]                  ·gc.alloc.rate:               1691,244 MB/sec
[info]                  ·gc.alloc.rate.norm:          291049,435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232087,266 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 9167,604 ops/s
[info]                  ·gc.alloc.rate:                   1695,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              291096,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347791,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,294 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9093,843 ops/s
[info]                  ·gc.alloc.rate:                   1682,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              291096,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234015,972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,602 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9155,246 ops/s
[info]                  ·gc.alloc.rate:                   1693,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              291096,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349086,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,578 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9147,960 ±(99.9%) 125,331 ops/s [Average]
[info]   (min, avg, max) = (9093,843, 9147,960, 9177,369), stdev = 32,548
[info]   CI (99.9%): [9022,629, 9273,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1691,814 ±(99.9%) 22,639 MB/sec [Average]
[info]   (min, avg, max) = (1682,059, 1691,814, 1697,085), stdev = 5,879
[info]   CI (99.9%): [1669,175, 1714,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   291077,123 ±(99.9%) 99,784 B/op [Average]
[info]   (min, avg, max) = (291048,048, 291077,123, 291096,045), stdev = 25,914
[info]   CI (99.9%): [290977,339, 291176,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1755,496 ±(99.9%) 1423,951 MB/sec [Average]
[info]   (min, avg, max) = (1348,624, 1755,496, 2030,614), stdev = 369,795
[info]   CI (99.9%): [331,545, 3179,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   301895,812 ±(99.9%) 242036,928 B/op [Average]
[info]   (min, avg, max) = (232087,266, 301895,812, 349086,375), stdev = 62856,221
[info]   CI (99.9%): [59858,884, 543932,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6,437 ±(99.9%) 22,586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,437, 14,294), stdev = 5,865
[info]   CI (99.9%): [≈ 0, 29,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68,47% complete, ETA 00:41:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14538,130 ops/s
[info] # Warmup Iteration   2: 55550,530 ops/s
[info] # Warmup Iteration   3: 55683,871 ops/s
[info] # Warmup Iteration   4: 55502,375 ops/s
[info] # Warmup Iteration   5: 55864,909 ops/s
[info] Iteration   1: 55833,982 ops/s
[info]                  ·gc.alloc.rate:               521,940 MB/sec
[info]                  ·gc.alloc.rate.norm:          14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14419,868 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 55699,471 ops/s
[info]                  ·gc.alloc.rate:                   520,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19046,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85,414 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 56337,833 ops/s
[info]                  ·gc.alloc.rate:      526,622 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56141,392 ops/s
[info]                  ·gc.alloc.rate:                   524,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18897,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,584 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 56233,070 ops/s
[info]                  ·gc.alloc.rate:                   525,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18810,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,583 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   56049,150 ±(99.9%) 1044,380 ops/s [Average]
[info]   (min, avg, max) = (55699,471, 56049,150, 56337,833), stdev = 271,222
[info]   CI (99.9%): [55004,770, 57093,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   523,936 ±(99.9%) 9,711 MB/sec [Average]
[info]   (min, avg, max) = (520,674, 523,936, 526,622), stdev = 2,522
[info]   CI (99.9%): [514,224, 533,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (14712,007, 14712,008, 14712,008), stdev = 0,001
[info]   CI (99.9%): [14712,006, 14712,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,363 ±(99.9%) 1122,894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,363, 674,140), stdev = 291,612
[info]   CI (99.9%): [≈ 0, 1629,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14234,767 ±(99.9%) 31547,628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14234,767, 19046,540), stdev = 8192,819
[info]   CI (99.9%): [≈ 0, 45782,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,613 ±(99.9%) 5,188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,613, 3,023), stdev = 1,347
[info]   CI (99.9%): [≈ 0, 5,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   17,316 ±(99.9%) 146,590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17,316, 85,414), stdev = 38,069
[info]   CI (99.9%): [≈ 0, 163,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68,67% complete, ETA 00:41:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e724a5b0/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 28459,722 ops/s
[info] # Warmup Iteration   2: 45220,762 ops/s
[info] # Warmup Iteration   3: 45312,172 ops/s
[info] # Warmup Iteration   4: 45281,598 ops/s
[info] # Warmup Iteration   5: 45283,937 ops/s
[info] Iteration   1: 45366,452 ops/s
[info]                  ·gc.alloc.rate:                   675,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23386,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,331 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45429,572 ops/s
[info]                  ·gc.alloc.rate:                   676,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23355,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,442 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45381,203 ops/s
[info]                  ·gc.alloc.rate:                   675,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23390,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,722 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 45379,699 ops/s
[info]                  ·gc.alloc.rate:               675,644 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23390,760 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 45231,487 ops/s
[info]                  ·gc.alloc.rate:                   673,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23477,831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,173 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45357,683 ±(99.9%) 286,920 ops/s [Average]
[info]   (min, avg, max) = (45231,487, 45357,683, 45429,572), stdev = 74,512
[info]   CI (99.9%): [45070,763, 45644,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   675,292 ±(99.9%) 4,195 MB/sec [Average]
[info]   (min, avg, max) = (673,453, 675,292, 676,358), stdev = 1,089
[info]   CI (99.9%): [671,098, 679,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431,838 ±(99.9%) 0,358 B/op [Average]
[info]   (min, avg, max) = (23431,722, 23431,838, 23431,958), stdev = 0,093
[info]   CI (99.9%): [23431,481, 23432,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,378 ±(99.9%) 1,032 MB/sec [Average]
[info]   (min, avg, max) = (674,105, 674,378, 674,774), stdev = 0,268
[info]   CI (99.9%): [673,345, 675,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23400,159 ±(99.9%) 176,450 B/op [Average]
[info]   (min, avg, max) = (23355,539, 23400,159, 23477,831), stdev = 45,823
[info]   CI (99.9%): [23223,709, 23576,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,171 ±(99.9%) 1,207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,171, 0,730), stdev = 0,313
[info]   CI (99.9%): [≈ 0, 1,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,934 ±(99.9%) 41,870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,934, 25,331), stdev = 10,874
[info]   CI (99.9%): [≈ 0, 47,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68,88% complete, ETA 00:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79139,775 ops/s
[info] # Warmup Iteration   2: 84764,801 ops/s
[info] # Warmup Iteration   3: 84539,566 ops/s
[info] # Warmup Iteration   4: 84118,062 ops/s
[info] # Warmup Iteration   5: 84633,358 ops/s
[info] Iteration   1: 84454,374 ops/s
[info]                  ·gc.alloc.rate:                   634,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12575,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60,518 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 84783,711 ops/s
[info]                  ·gc.alloc.rate:                   637,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12527,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,159 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 84667,892 ops/s
[info]                  ·gc.alloc.rate:               636,529 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12506,339 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 84621,934 ops/s
[info]                  ·gc.alloc.rate:                   636,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12513,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 84674,929 ops/s
[info]                  ·gc.alloc.rate:      636,526 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   84640,568 ±(99.9%) 461,406 ops/s [Average]
[info]   (min, avg, max) = (84454,374, 84640,568, 84783,711), stdev = 119,826
[info]   CI (99.9%): [84179,162, 85101,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   636,320 ±(99.9%) 3,564 MB/sec [Average]
[info]   (min, avg, max) = (634,877, 636,320, 637,438), stdev = 0,926
[info]   CI (99.9%): [632,756, 639,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11832,005, 11832,005, 11832,005), stdev = 0,001
[info]   CI (99.9%): [11832,004, 11832,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,059 ±(99.9%) 1160,372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,059, 674,884), stdev = 301,345
[info]   CI (99.9%): [≈ 0, 1699,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10024,331 ±(99.9%) 21578,377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10024,331, 12575,116), stdev = 5603,836
[info]   CI (99.9%): [≈ 0, 31602,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,666 ±(99.9%) 5,557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,247), stdev = 1,443
[info]   CI (99.9%): [≈ 0, 6,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12,413 ±(99.9%) 103,565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,413, 60,518), stdev = 26,896
[info]   CI (99.9%): [≈ 0, 115,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69,08% complete, ETA 00:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104325,601 ops/s
[info] # Warmup Iteration   2: 113482,472 ops/s
[info] # Warmup Iteration   3: 112890,780 ops/s
[info] # Warmup Iteration   4: 113301,292 ops/s
[info] # Warmup Iteration   5: 113011,387 ops/s
[info] Iteration   1: 113234,078 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 113487,837 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 113171,146 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 112256,850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 112727,708 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   112975,524 ±(99.9%) 1872,109 ops/s [Average]
[info]   (min, avg, max) = (112256,850, 112975,524, 113487,837), stdev = 486,181
[info]   CI (99.9%): [111103,415, 114847,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,004, 0,004), stdev = 0,001
[info]   CI (99.9%): [0,003, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69,28% complete, ETA 00:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3837,276 ops/s
[info] # Warmup Iteration   2: 6843,788 ops/s
[info] # Warmup Iteration   3: 6381,035 ops/s
[info] # Warmup Iteration   4: 6847,402 ops/s
[info] # Warmup Iteration   5: 6874,849 ops/s
[info] Iteration   1: 6891,510 ops/s
[info]                  ·gc.alloc.rate:                   2124,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              485207,200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     463743,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33,277 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6910,784 ops/s
[info]                  ·gc.alloc.rate:               2130,684 MB/sec
[info]                  ·gc.alloc.rate.norm:          485208,115 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2031,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 462705,206 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6904,310 ops/s
[info]                  ·gc.alloc.rate:               2128,559 MB/sec
[info]                  ·gc.alloc.rate.norm:          485207,846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2034,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 463857,469 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 6893,178 ops/s
[info]                  ·gc.alloc.rate:                   2125,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              485208,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464901,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,010 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6846,266 ops/s
[info]                  ·gc.alloc.rate:                   2110,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              485208,312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624735,701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,355 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6889,210 ±(99.9%) 97,389 ops/s [Average]
[info]   (min, avg, max) = (6846,266, 6889,210, 6910,784), stdev = 25,292
[info]   CI (99.9%): [6791,820, 6986,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2123,919 ±(99.9%) 30,923 MB/sec [Average]
[info]   (min, avg, max) = (2110,211, 2123,919, 2130,684), stdev = 8,031
[info]   CI (99.9%): [2092,996, 2154,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   485207,904 ±(99.9%) 1,645 B/op [Average]
[info]   (min, avg, max) = (485207,200, 485207,904, 485208,312), stdev = 0,427
[info]   CI (99.9%): [485206,259, 485209,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2170,198 ±(99.9%) 1177,122 MB/sec [Average]
[info]   (min, avg, max) = (2030,836, 2170,198, 2717,027), stdev = 305,695
[info]   CI (99.9%): [993,077, 3347,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   495988,704 ±(99.9%) 277153,794 B/op [Average]
[info]   (min, avg, max) = (462705,206, 495988,704, 624735,701), stdev = 71975,960
[info]   CI (99.9%): [218834,910, 773142,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,146), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13,328 ±(99.9%) 53,997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13,328, 33,277), stdev = 14,023
[info]   CI (99.9%): [≈ 0, 67,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69,48% complete, ETA 00:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4519,511 ops/s
[info] # Warmup Iteration   2: 4837,965 ops/s
[info] # Warmup Iteration   3: 4884,567 ops/s
[info] # Warmup Iteration   4: 4876,725 ops/s
[info] # Warmup Iteration   5: 4877,376 ops/s
[info] Iteration   1: 4878,930 ops/s
[info]                  ·gc.alloc.rate:               270,591 MB/sec
[info]                  ·gc.alloc.rate.norm:          87296,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164987,988 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 4890,846 ops/s
[info]                  ·gc.alloc.rate:      271,306 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4867,265 ops/s
[info]                  ·gc.alloc.rate:                   269,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165394,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,362 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4881,760 ops/s
[info]                  ·gc.alloc.rate:      270,774 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4832,025 ops/s
[info]                  ·gc.alloc.rate:               268,002 MB/sec
[info]                  ·gc.alloc.rate.norm:          87296,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166592,132 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4870,165 ±(99.9%) 88,272 ops/s [Average]
[info]   (min, avg, max) = (4832,025, 4870,165, 4890,846), stdev = 22,924
[info]   CI (99.9%): [4781,893, 4958,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   270,120 ±(99.9%) 4,940 MB/sec [Average]
[info]   (min, avg, max) = (268,002, 270,120, 271,306), stdev = 1,283
[info]   CI (99.9%): [265,180, 275,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   87296,085 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (87296,083, 87296,085, 87296,090), stdev = 0,003
[info]   CI (99.9%): [87296,074, 87296,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,853 ±(99.9%) 1078,631 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,853, 511,443), stdev = 280,117
[info]   CI (99.9%): [≈ 0, 1385,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   99394,947 ±(99.9%) 349394,620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99394,947, 166592,132), stdev = 90736,673
[info]   CI (99.9%): [≈ 0, 448789,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,002 ±(99.9%) 0,018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,672 ±(99.9%) 5,789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,672, 3,362), stdev = 1,503
[info]   CI (99.9%): [≈ 0, 6,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69,68% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4414434,363 ops/s
[info] # Warmup Iteration   2: 6136358,079 ops/s
[info] # Warmup Iteration   3: 6121961,382 ops/s
[info] # Warmup Iteration   4: 6121948,423 ops/s
[info] # Warmup Iteration   5: 6144466,377 ops/s
[info] Iteration   1: 6094767,901 ops/s
[info]                  ·gc.alloc.rate:                   3779,346 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     874,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6170730,821 ops/s
[info]                  ·gc.alloc.rate:                   3821,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4065,970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1038,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 6173780,331 ops/s
[info]                  ·gc.alloc.rate:                   3828,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1039,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6157252,148 ops/s
[info]                  ·gc.alloc.rate:                   3818,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     869,670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6120915,412 ops/s
[info]                  ·gc.alloc.rate:                   3795,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1050,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6143489,323 ±(99.9%) 132447,852 ops/s [Average]
[info]   (min, avg, max) = (6094767,901, 6143489,323, 6173780,331), stdev = 34396,287
[info]   CI (99.9%): [6011041,470, 6275937,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3808,576 ±(99.9%) 78,812 MB/sec [Average]
[info]   (min, avg, max) = (3779,346, 3808,576, 3828,573), stdev = 20,467
[info]   CI (99.9%): [3729,765, 3887,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3803,520 ±(99.9%) 1439,011 MB/sec [Average]
[info]   (min, avg, max) = (3386,180, 3803,520, 4084,201), stdev = 373,707
[info]   CI (99.9%): [2364,509, 5242,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   974,546 ±(99.9%) 360,703 B/op [Average]
[info]   (min, avg, max) = (869,670, 974,546, 1050,225), stdev = 93,673
[info]   CI (99.9%): [613,843, 1335,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,018, 0,022), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69,88% complete, ETA 00:40:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5535477,426 ops/s
[info] # Warmup Iteration   2: 44001648,551 ops/s
[info] # Warmup Iteration   3: 47264658,012 ops/s
[info] # Warmup Iteration   4: 47338738,166 ops/s
[info] # Warmup Iteration   5: 46951112,089 ops/s
[info] Iteration   1: 47160683,421 ops/s
[info]                  ·gc.alloc.rate:               479,446 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17,072 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 47124186,032 ops/s
[info]                  ·gc.alloc.rate:               479,068 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17,085 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 47366665,679 ops/s
[info]                  ·gc.alloc.rate:                   481,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 47287628,297 ops/s
[info]                  ·gc.alloc.rate:                   480,772 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 47216607,885 ops/s
[info]                  ·gc.alloc.rate:      480,026 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   47231154,263 ±(99.9%) 376165,734 ops/s [Average]
[info]   (min, avg, max) = (47124186,032, 47231154,263, 47366665,679), stdev = 97689,047
[info]   CI (99.9%): [46854988,529, 47607319,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   480,161 ±(99.9%) 3,789 MB/sec [Average]
[info]   (min, avg, max) = (479,068, 480,161, 481,493), stdev = 0,984
[info]   CI (99.9%): [476,372, 483,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   474,126 ±(99.9%) 1067,298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,126, 673,809), stdev = 277,174
[info]   CI (99.9%): [≈ 0, 1541,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15,794 ±(99.9%) 35,511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15,794, 22,424), stdev = 9,222
[info]   CI (99.9%): [≈ 0, 51,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,535 ±(99.9%) 4,564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,535, 2,655), stdev = 1,185
[info]   CI (99.9%): [≈ 0, 5,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,088), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70,08% complete, ETA 00:39:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5267175,263 ops/s
[info] # Warmup Iteration   2: 9647424,307 ops/s
[info] # Warmup Iteration   3: 9603233,498 ops/s
[info] # Warmup Iteration   4: 9633259,425 ops/s
[info] # Warmup Iteration   5: 9672414,268 ops/s
[info] Iteration   1: 9553042,201 ops/s
[info]                  ·gc.alloc.rate:                   3593,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 9662622,837 ops/s
[info]                  ·gc.alloc.rate:                   3634,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9657362,262 ops/s
[info]                  ·gc.alloc.rate:                   3632,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     554,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9587405,840 ops/s
[info]                  ·gc.alloc.rate:                   3606,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     670,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9613742,769 ops/s
[info]                  ·gc.alloc.rate:                   3615,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              592,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557,679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9614835,182 ±(99.9%) 179211,665 ops/s [Average]
[info]   (min, avg, max) = (9553042,201, 9614835,182, 9662622,837), stdev = 46540,700
[info]   CI (99.9%): [9435623,517, 9794046,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3616,424 ±(99.9%) 67,226 MB/sec [Average]
[info]   (min, avg, max) = (3593,325, 3616,424, 3634,567), stdev = 17,459
[info]   CI (99.9%): [3549,197, 3683,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (592,000, 592,000, 592,000), stdev = 0,001
[info]   CI (99.9%): [592,000, 592,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3673,038 ±(99.9%) 1426,698 MB/sec [Average]
[info]   (min, avg, max) = (3399,369, 3673,038, 4084,636), stdev = 370,509
[info]   CI (99.9%): [2246,340, 5099,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   601,482 ±(99.9%) 243,651 B/op [Average]
[info]   (min, avg, max) = (553,691, 601,482, 671,046), stdev = 63,276
[info]   CI (99.9%): [357,831, 845,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,012, 0,017), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70,28% complete, ETA 00:39:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54398729,177 ops/s
[info] # Warmup Iteration   2: 56503789,674 ops/s
[info] # Warmup Iteration   3: 51392149,609 ops/s
[info] # Warmup Iteration   4: 56879551,543 ops/s
[info] # Warmup Iteration   5: 56423521,004 ops/s
[info] Iteration   1: 55958885,811 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 51640087,175 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56563246,602 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56775448,071 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 56912964,547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   55570126,441 ±(99.9%) 8575498,264 ops/s [Average]
[info]   (min, avg, max) = (51640087,175, 55570126,441, 56912964,547), stdev = 2227029,667
[info]   CI (99.9%): [46994628,177, 64145624,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70,48% complete, ETA 00:39:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38079973,623 ops/s
[info] # Warmup Iteration   2: 43376786,502 ops/s
[info] # Warmup Iteration   3: 47126182,840 ops/s
[info] # Warmup Iteration   4: 47579015,843 ops/s
[info] # Warmup Iteration   5: 47332719,151 ops/s
[info] Iteration   1: 47457617,555 ops/s
[info]                  ·gc.alloc.rate:                   1688,521 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 47006235,819 ops/s
[info]                  ·gc.alloc.rate:                   1672,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 47519898,697 ops/s
[info]                  ·gc.alloc.rate:                   1690,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 47269117,118 ops/s
[info]                  ·gc.alloc.rate:                   1682,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67,360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 47506092,178 ops/s
[info]                  ·gc.alloc.rate:               1690,207 MB/sec
[info]                  ·gc.alloc.rate.norm:          56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44,745 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   47351792,274 ±(99.9%) 838149,208 ops/s [Average]
[info]   (min, avg, max) = (47006235,819, 47351792,274, 47519898,697), stdev = 217664,688
[info]   CI (99.9%): [46513643,066, 48189941,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1684,831 ±(99.9%) 29,359 MB/sec [Average]
[info]   (min, avg, max) = (1672,679, 1684,831, 1690,708), stdev = 7,624
[info]   CI (99.9%): [1655,472, 1714,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56,000, 56,000, 56,000), stdev = 0,001
[info]   CI (99.9%): [56,000, 56,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1616,641 ±(99.9%) 1420,576 MB/sec [Average]
[info]   (min, avg, max) = (1344,422, 1616,641, 2023,251), stdev = 368,919
[info]   CI (99.9%): [196,064, 3037,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   53,774 ±(99.9%) 48,127 B/op [Average]
[info]   (min, avg, max) = (44,588, 53,774, 67,570), stdev = 12,498
[info]   CI (99.9%): [5,647, 101,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70,68% complete, ETA 00:38:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5768576,707 ops/s
[info] # Warmup Iteration   2: 9135857,350 ops/s
[info] # Warmup Iteration   3: 9284063,898 ops/s
[info] # Warmup Iteration   4: 9257644,486 ops/s
[info] # Warmup Iteration   5: 9279568,972 ops/s
[info] Iteration   1: 9249212,944 ops/s
[info]                  ·gc.alloc.rate:                   4090,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4061,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     691,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 9311925,916 ops/s
[info]                  ·gc.alloc.rate:                   4117,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     688,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9289722,468 ops/s
[info]                  ·gc.alloc.rate:                   4107,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9272267,382 ops/s
[info]                  ·gc.alloc.rate:                   4100,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     693,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9281350,854 ops/s
[info]                  ·gc.alloc.rate:                   4104,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     692,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9280895,913 ±(99.9%) 88632,551 ops/s [Average]
[info]   (min, avg, max) = (9249212,944, 9280895,913, 9311925,916), stdev = 23017,592
[info]   CI (99.9%): [9192263,362, 9369528,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4104,178 ±(99.9%) 38,851 MB/sec [Average]
[info]   (min, avg, max) = (4090,296, 4104,178, 4117,901), stdev = 10,090
[info]   CI (99.9%): [4065,327, 4143,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   696,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (696,000, 696,000, 696,000), stdev = 0,001
[info]   CI (99.9%): [696,000, 696,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4075,849 ±(99.9%) 37,002 MB/sec [Average]
[info]   (min, avg, max) = (4061,406, 4075,849, 4084,810), stdev = 9,609
[info]   CI (99.9%): [4038,847, 4112,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   691,198 ±(99.9%) 7,480 B/op [Average]
[info]   (min, avg, max) = (688,159, 691,198, 693,062), stdev = 1,943
[info]   CI (99.9%): [683,718, 698,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,079, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,013, 0,018), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70,88% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9300947,211 ops/s
[info] # Warmup Iteration   2: 11262660,223 ops/s
[info] # Warmup Iteration   3: 11400699,792 ops/s
[info] # Warmup Iteration   4: 11405194,508 ops/s
[info] # Warmup Iteration   5: 11384085,811 ops/s
[info] Iteration   1: 11391128,170 ops/s
[info]                  ·gc.alloc.rate:                   4805,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4753,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 11375706,765 ops/s
[info]                  ·gc.alloc.rate:                   4799,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658,887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 11416724,548 ops/s
[info]                  ·gc.alloc.rate:                   4816,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5446,931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 11371785,279 ops/s
[info]                  ·gc.alloc.rate:                   4798,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     660,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 11438915,219 ops/s
[info]                  ·gc.alloc.rate:                   4825,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   11398851,996 ±(99.9%) 109801,710 ops/s [Average]
[info]   (min, avg, max) = (11371785,279, 11398851,996, 11438915,219), stdev = 28515,155
[info]   CI (99.9%): [11289050,286, 11508653,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4808,918 ±(99.9%) 46,152 MB/sec [Average]
[info]   (min, avg, max) = (4798,129, 4808,918, 4825,916), stdev = 11,986
[info]   CI (99.9%): [4762,766, 4855,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   664,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (664,000, 664,000, 664,000), stdev = 0,001
[info]   CI (99.9%): [664,000, 664,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4900,563 ±(99.9%) 1176,389 MB/sec [Average]
[info]   (min, avg, max) = (4753,688, 4900,563, 5446,931), stdev = 305,505
[info]   CI (99.9%): [3724,174, 6076,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   676,627 ±(99.9%) 160,035 B/op [Average]
[info]   (min, avg, max) = (656,275, 676,627, 750,921), stdev = 41,560
[info]   CI (99.9%): [516,593, 836,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,006, 0,009), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   36,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,200, 8,000), stdev = 0,447
[info]   CI (99.9%): [36,000, 36,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71,08% complete, ETA 00:38:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18858110,835 ops/s
[info] # Warmup Iteration   2: 23516322,761 ops/s
[info] # Warmup Iteration   3: 23370413,131 ops/s
[info] # Warmup Iteration   4: 23363878,442 ops/s
[info] # Warmup Iteration   5: 23379876,187 ops/s
[info] Iteration   1: 23233266,272 ops/s
[info]                  ·gc.alloc.rate:                   2125,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23418966,894 ops/s
[info]                  ·gc.alloc.rate:                   2142,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23322614,528 ops/s
[info]                  ·gc.alloc.rate:                   2133,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23275223,010 ops/s
[info]                  ·gc.alloc.rate:                   2129,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23322823,874 ops/s
[info]                  ·gc.alloc.rate:                   2133,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   23314578,916 ±(99.9%) 266711,188 ops/s [Average]
[info]   (min, avg, max) = (23233266,272, 23314578,916, 23418966,894), stdev = 69264,048
[info]   CI (99.9%): [23047867,728, 23581290,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2133,109 ±(99.9%) 24,367 MB/sec [Average]
[info]   (min, avg, max) = (2125,691, 2133,109, 2142,730), stdev = 6,328
[info]   CI (99.9%): [2108,742, 2157,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (144,000, 144,000, 144,000), stdev = 0,001
[info]   CI (99.9%): [144,000, 144,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2158,761 ±(99.9%) 1179,353 MB/sec [Average]
[info]   (min, avg, max) = (2016,862, 2158,761, 2706,600), stdev = 306,274
[info]   CI (99.9%): [979,408, 3338,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   145,731 ±(99.9%) 79,542 B/op [Average]
[info]   (min, avg, max) = (135,737, 145,731, 182,673), stdev = 20,657
[info]   CI (99.9%): [66,189, 225,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,125), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,004, 0,008), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71,29% complete, ETA 00:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7263391,226 ops/s
[info] # Warmup Iteration   2: 60709503,981 ops/s
[info] # Warmup Iteration   3: 59696330,868 ops/s
[info] # Warmup Iteration   4: 63995524,267 ops/s
[info] # Warmup Iteration   5: 64237393,763 ops/s
[info] Iteration   1: 63511109,600 ops/s
[info]                  ·gc.alloc.rate:                   1936,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 63962814,093 ops/s
[info]                  ·gc.alloc.rate:                   1950,792 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 64265145,751 ops/s
[info]                  ·gc.alloc.rate:                   1959,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 64160943,762 ops/s
[info]                  ·gc.alloc.rate:                   1956,970 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 64179728,958 ops/s
[info]                  ·gc.alloc.rate:                   1957,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   64015948,433 ±(99.9%) 1167374,823 ops/s [Average]
[info]   (min, avg, max) = (63511109,600, 64015948,433, 64265145,751), stdev = 303163,534
[info]   CI (99.9%): [62848573,610, 65183323,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1952,374 ±(99.9%) 35,534 MB/sec [Average]
[info]   (min, avg, max) = (1936,989, 1952,374, 1959,934), stdev = 9,228
[info]   CI (99.9%): [1916,841, 1987,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   2022,808 ±(99.9%) 17,706 MB/sec [Average]
[info]   (min, avg, max) = (2016,964, 2022,808, 2028,411), stdev = 4,598
[info]   CI (99.9%): [2005,102, 2040,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   49,732 ±(99.9%) 0,621 B/op [Average]
[info]   (min, avg, max) = (49,534, 49,732, 49,982), stdev = 0,161
[info]   CI (99.9%): [49,111, 50,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71,49% complete, ETA 00:37:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7516118,243 ops/s
[info] # Warmup Iteration   2: 15175397,237 ops/s
[info] # Warmup Iteration   3: 15267894,808 ops/s
[info] # Warmup Iteration   4: 15249324,162 ops/s
[info] # Warmup Iteration   5: 15287697,505 ops/s
[info] Iteration   1: 15329546,074 ops/s
[info]                  ·gc.alloc.rate:                   3038,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15288047,402 ops/s
[info]                  ·gc.alloc.rate:                   3030,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 15275566,035 ops/s
[info]                  ·gc.alloc.rate:                   3028,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 15205284,840 ops/s
[info]                  ·gc.alloc.rate:                   3014,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 15315244,180 ops/s
[info]                  ·gc.alloc.rate:                   3035,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   15282737,706 ±(99.9%) 185933,341 ops/s [Average]
[info]   (min, avg, max) = (15205284,840, 15282737,706, 15329546,074), stdev = 48286,298
[info]   CI (99.9%): [15096804,365, 15468671,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   3029,548 ±(99.9%) 36,559 MB/sec [Average]
[info]   (min, avg, max) = (3014,227, 3029,548, 3038,722), stdev = 9,494
[info]   CI (99.9%): [2992,989, 3066,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (312,000, 312,000, 312,000), stdev = 0,001
[info]   CI (99.9%): [312,000, 312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2992,379 ±(99.9%) 1437,220 MB/sec [Average]
[info]   (min, avg, max) = (2715,485, 2992,379, 3403,674), stdev = 373,242
[info]   CI (99.9%): [1555,159, 4429,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   308,241 ±(99.9%) 150,709 B/op [Average]
[info]   (min, avg, max) = (278,812, 308,241, 352,311), stdev = 39,139
[info]   CI (99.9%): [157,532, 458,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,006, 0,011), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71,69% complete, ETA 00:37:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39945108,210 ops/s
[info] # Warmup Iteration   2: 48864815,847 ops/s
[info] # Warmup Iteration   3: 49615783,727 ops/s
[info] # Warmup Iteration   4: 50055425,237 ops/s
[info] # Warmup Iteration   5: 50427342,749 ops/s
[info] Iteration   1: 50261864,653 ops/s
[info]                  ·gc.alloc.rate:                   1021,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 50357280,762 ops/s
[info]                  ·gc.alloc.rate:               1023,930 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21,007 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 50284447,191 ops/s
[info]                  ·gc.alloc.rate:                   1022,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50248153,856 ops/s
[info]                  ·gc.alloc.rate:               1021,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21,051 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 50226940,945 ops/s
[info]                  ·gc.alloc.rate:                   1021,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   50275737,481 ±(99.9%) 193104,891 ops/s [Average]
[info]   (min, avg, max) = (50226940,945, 50275737,481, 50357280,762), stdev = 50148,727
[info]   CI (99.9%): [50082632,590, 50468842,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1022,184 ±(99.9%) 4,156 MB/sec [Average]
[info]   (min, avg, max) = (1021,053, 1022,184, 1023,930), stdev = 1,079
[info]   CI (99.9%): [1018,028, 1026,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,000, 32,000, 32,000), stdev = 0,001
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,568 ±(99.9%) 1418,081 MB/sec [Average]
[info]   (min, avg, max) = (672,117, 1075,568, 1345,472), stdev = 368,271
[info]   CI (99.9%): [≈ 0, 2493,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   33,676 ±(99.9%) 44,458 B/op [Average]
[info]   (min, avg, max) = (21,007, 33,676, 42,132), stdev = 11,546
[info]   CI (99.9%): [≈ 0, 78,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71,89% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42468618,956 ops/s
[info] # Warmup Iteration   2: 52160167,378 ops/s
[info] # Warmup Iteration   3: 57844836,419 ops/s
[info] # Warmup Iteration   4: 57975897,409 ops/s
[info] # Warmup Iteration   5: 57852087,693 ops/s
[info] Iteration   1: 58034285,702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 58073285,467 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 58127052,691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 57967066,631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57933868,544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   58027111,807 ±(99.9%) 301184,493 ops/s [Average]
[info]   (min, avg, max) = (57933868,544, 58027111,807, 58127052,691), stdev = 78216,656
[info]   CI (99.9%): [57725927,314, 58328296,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72,09% complete, ETA 00:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47910309,494 ops/s
[info] # Warmup Iteration   2: 44284300,282 ops/s
[info] # Warmup Iteration   3: 45448720,306 ops/s
[info] # Warmup Iteration   4: 45194503,169 ops/s
[info] # Warmup Iteration   5: 45316027,652 ops/s
[info] Iteration   1: 45176626,327 ops/s
[info]                  ·gc.alloc.rate:                   2296,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44988185,909 ops/s
[info]                  ·gc.alloc.rate:                   2286,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45083415,988 ops/s
[info]                  ·gc.alloc.rate:                   2291,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45105254,034 ops/s
[info]                  ·gc.alloc.rate:                   2292,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45277971,259 ops/s
[info]                  ·gc.alloc.rate:                   2300,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   45126290,703 ±(99.9%) 416930,606 ops/s [Average]
[info]   (min, avg, max) = (44988185,909, 45126290,703, 45277971,259), stdev = 108275,554
[info]   CI (99.9%): [44709360,097, 45543221,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2293,616 ±(99.9%) 20,001 MB/sec [Average]
[info]   (min, avg, max) = (2286,920, 2293,616, 2300,794), stdev = 5,194
[info]   CI (99.9%): [2273,615, 2313,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2298,934 ±(99.9%) 1419,946 MB/sec [Average]
[info]   (min, avg, max) = (2026,265, 2298,934, 2709,824), stdev = 368,756
[info]   CI (99.9%): [878,988, 3718,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   80,182 ±(99.9%) 49,415 B/op [Average]
[info]   (min, avg, max) = (70,735, 80,182, 94,547), stdev = 12,833
[info]   CI (99.9%): [30,767, 129,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72,29% complete, ETA 00:36:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1875786,509 ops/s
[info] # Warmup Iteration   2: 2525771,065 ops/s
[info] # Warmup Iteration   3: 2538564,529 ops/s
[info] # Warmup Iteration   4: 2537551,638 ops/s
[info] # Warmup Iteration   5: 2526704,981 ops/s
[info] Iteration   1: 2542900,581 ops/s
[info]                  ·gc.alloc.rate:                   2080,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246,453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2535296,295 ops/s
[info]                  ·gc.alloc.rate:                   2074,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2535587,246 ops/s
[info]                  ·gc.alloc.rate:                   2074,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2526218,018 ops/s
[info]                  ·gc.alloc.rate:                   2067,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1261,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2526936,748 ops/s
[info]                  ·gc.alloc.rate:                   2067,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1263,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2533387,778 ±(99.9%) 26677,679 ops/s [Average]
[info]   (min, avg, max) = (2526218,018, 2533387,778, 2542900,581), stdev = 6928,109
[info]   CI (99.9%): [2506710,098, 2560065,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2073,181 ±(99.9%) 21,875 MB/sec [Average]
[info]   (min, avg, max) = (2067,480, 2073,181, 2080,990), stdev = 5,681
[info]   CI (99.9%): [2051,306, 2095,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1288,000, 1288,000, 1288,000), stdev = 0,001
[info]   CI (99.9%): [1288,000, 1288,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2021,349 ±(99.9%) 22,806 MB/sec [Average]
[info]   (min, avg, max) = (2013,863, 2021,349, 2028,804), stdev = 5,923
[info]   CI (99.9%): [1998,543, 2044,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1255,814 ±(99.9%) 26,895 B/op [Average]
[info]   (min, avg, max) = (1246,453, 1255,814, 1263,766), stdev = 6,985
[info]   CI (99.9%): [1228,919, 1282,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,028, 0,039), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72,49% complete, ETA 00:36:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11463081,599 ops/s
[info] # Warmup Iteration   2: 12920269,059 ops/s
[info] # Warmup Iteration   3: 14143243,492 ops/s
[info] # Warmup Iteration   4: 14094225,517 ops/s
[info] # Warmup Iteration   5: 14025542,230 ops/s
[info] Iteration   1: 14092574,082 ops/s
[info]                  ·gc.alloc.rate:                   2721,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 14110232,210 ops/s
[info]                  ·gc.alloc.rate:                   2725,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 14115351,687 ops/s
[info]                  ·gc.alloc.rate:                   2726,292 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 14033568,824 ops/s
[info]                  ·gc.alloc.rate:                   2710,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 14020274,041 ops/s
[info]                  ·gc.alloc.rate:                   2707,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   14074400,169 ±(99.9%) 170997,312 ops/s [Average]
[info]   (min, avg, max) = (14020274,041, 14074400,169, 14115351,687), stdev = 44407,459
[info]   CI (99.9%): [13903402,857, 14245397,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2718,477 ±(99.9%) 33,218 MB/sec [Average]
[info]   (min, avg, max) = (2707,749, 2718,477, 2726,292), stdev = 8,627
[info]   CI (99.9%): [2685,259, 2751,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2707,712 ±(99.9%) 29,279 MB/sec [Average]
[info]   (min, avg, max) = (2697,504, 2707,712, 2715,986), stdev = 7,604
[info]   CI (99.9%): [2678,433, 2736,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   302,800 ±(99.9%) 6,559 B/op [Average]
[info]   (min, avg, max) = (301,274, 302,800, 304,925), stdev = 1,703
[info]   CI (99.9%): [296,241, 309,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,006, 0,007), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72,69% complete, ETA 00:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172481,369 ops/s
[info] # Warmup Iteration   2: 189425,315 ops/s
[info] # Warmup Iteration   3: 191029,704 ops/s
[info] # Warmup Iteration   4: 190302,153 ops/s
[info] # Warmup Iteration   5: 189906,945 ops/s
[info] Iteration   1: 189299,796 ops/s
[info]                  ·gc.alloc.rate:                   3472,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28139,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 188149,530 ops/s
[info]                  ·gc.alloc.rate:                   3451,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28374,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,348 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 190218,814 ops/s
[info]                  ·gc.alloc.rate:                   3489,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28106,638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,689 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 189926,920 ops/s
[info]                  ·gc.alloc.rate:                   3484,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28180,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,345 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 189774,421 ops/s
[info]                  ·gc.alloc.rate:                   3480,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28225,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,691 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   189473,896 ±(99.9%) 3125,140 ops/s [Average]
[info]   (min, avg, max) = (188149,530, 189473,896, 190218,814), stdev = 811,589
[info]   CI (99.9%): [186348,756, 192599,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3475,720 ±(99.9%) 56,444 MB/sec [Average]
[info]   (min, avg, max) = (3451,839, 3475,720, 3489,397), stdev = 14,658
[info]   CI (99.9%): [3419,276, 3532,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28872,002, 28872,002, 28872,002), stdev = 0,001
[info]   CI (99.9%): [28872,002, 28872,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3395,418 ±(99.9%) 27,747 MB/sec [Average]
[info]   (min, avg, max) = (3384,560, 3395,418, 3402,607), stdev = 7,206
[info]   CI (99.9%): [3367,671, 3423,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28205,259 ±(99.9%) 403,532 B/op [Average]
[info]   (min, avg, max) = (28106,638, 28205,259, 28374,983), stdev = 104,796
[info]   CI (99.9%): [27801,727, 28608,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,449 ±(99.9%) 0,889 B/op [Average]
[info]   (min, avg, max) = (0,173, 0,449, 0,691), stdev = 0,231
[info]   CI (99.9%): [≈ 0, 1,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72,89% complete, ETA 00:36:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15315,266 ops/s
[info] # Warmup Iteration   2: 29162,608 ops/s
[info] # Warmup Iteration   3: 29195,979 ops/s
[info] # Warmup Iteration   4: 28991,188 ops/s
[info] # Warmup Iteration   5: 29233,413 ops/s
[info] Iteration   1: 29254,103 ops/s
[info]                  ·gc.alloc.rate:                   2273,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              122336,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109365,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,359 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29198,480 ops/s
[info]                  ·gc.alloc.rate:                   2269,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              122336,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146282,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,488 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 29321,048 ops/s
[info]                  ·gc.alloc.rate:                   2278,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              122336,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109333,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,235 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29351,607 ops/s
[info]                  ·gc.alloc.rate:                   2281,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              122336,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109286,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,116 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29225,891 ops/s
[info]                  ·gc.alloc.rate:               2271,092 MB/sec
[info]                  ·gc.alloc.rate.norm:          122336,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2719,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146496,455 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   29270,226 ±(99.9%) 247,901 ops/s [Average]
[info]   (min, avg, max) = (29198,480, 29270,226, 29351,607), stdev = 64,379
[info]   CI (99.9%): [29022,325, 29518,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2275,079 ±(99.9%) 19,323 MB/sec [Average]
[info]   (min, avg, max) = (2269,942, 2275,079, 2281,540), stdev = 5,018
[info]   CI (99.9%): [2255,756, 2294,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122336,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (122336,014, 122336,014, 122336,015), stdev = 0,001
[info]   CI (99.9%): [122336,012, 122336,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2308,316 ±(99.9%) 1436,428 MB/sec [Average]
[info]   (min, avg, max) = (2032,765, 2308,316, 2719,615), stdev = 373,036
[info]   CI (99.9%): [871,889, 3744,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   124152,993 ±(99.9%) 78165,641 B/op [Average]
[info]   (min, avg, max) = (109286,191, 124152,993, 146496,455), stdev = 20299,369
[info]   CI (99.9%): [45987,352, 202318,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,240 ±(99.9%) 6,831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,240, 4,488), stdev = 1,774
[info]   CI (99.9%): [≈ 0, 9,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,09% complete, ETA 00:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103270,831 ops/s
[info] # Warmup Iteration   2: 165973,731 ops/s
[info] # Warmup Iteration   3: 166324,932 ops/s
[info] # Warmup Iteration   4: 165877,213 ops/s
[info] # Warmup Iteration   5: 166256,726 ops/s
[info] Iteration   1: 165987,073 ops/s
[info]                  ·gc.alloc.rate:                   1543,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12827,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 165639,183 ops/s
[info]                  ·gc.alloc.rate:                   1539,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12863,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,593 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 166250,348 ops/s
[info]                  ·gc.alloc.rate:                   1545,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12825,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 165938,484 ops/s
[info]                  ·gc.alloc.rate:                   1542,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19291,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 165452,636 ops/s
[info]                  ·gc.alloc.rate:               1538,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12913,466 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   165853,545 ±(99.9%) 1201,092 ops/s [Average]
[info]   (min, avg, max) = (165452,636, 165853,545, 166250,348), stdev = 311,920
[info]   CI (99.9%): [164652,453, 167054,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1541,870 ±(99.9%) 11,361 MB/sec [Average]
[info]   (min, avg, max) = (1538,021, 1541,870, 1545,565), stdev = 2,950
[info]   CI (99.9%): [1530,509, 1553,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14632,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14632,002, 14632,003, 14632,003), stdev = 0,001
[info]   CI (99.9%): [14632,002, 14632,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,538 ±(99.9%) 1169,880 MB/sec [Average]
[info]   (min, avg, max) = (1352,778, 1490,538, 2034,009), stdev = 303,814
[info]   CI (99.9%): [320,657, 2660,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14144,171 ±(99.9%) 11079,833 B/op [Average]
[info]   (min, avg, max) = (12825,576, 14144,171, 19291,019), stdev = 2877,397
[info]   CI (99.9%): [3064,338, 25224,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,277 ±(99.9%) 0,868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,277, 0,593), stdev = 0,226
[info]   CI (99.9%): [≈ 0, 1,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,29% complete, ETA 00:35:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505637,407 ops/s
[info] # Warmup Iteration   2: 546650,115 ops/s
[info] # Warmup Iteration   3: 557533,752 ops/s
[info] # Warmup Iteration   4: 502772,789 ops/s
[info] # Warmup Iteration   5: 480781,663 ops/s
[info] Iteration   1: 477945,414 ops/s
[info]                  ·gc.alloc.rate:                   988,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4428,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,206 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 480185,869 ops/s
[info]                  ·gc.alloc.rate:               993,496 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2203,005 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 480118,475 ops/s
[info]                  ·gc.alloc.rate:               993,146 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2203,116 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 476910,187 ops/s
[info]                  ·gc.alloc.rate:                   986,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4435,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,206 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 477321,314 ops/s
[info]                  ·gc.alloc.rate:               987,499 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2215,990 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   478496,252 ±(99.9%) 5992,027 ops/s [Average]
[info]   (min, avg, max) = (476910,187, 478496,252, 480185,869), stdev = 1556,110
[info]   CI (99.9%): [472504,225, 484488,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   989,903 ±(99.9%) 12,330 MB/sec [Average]
[info]   (min, avg, max) = (986,691, 989,903, 993,496), stdev = 3,202
[info]   CI (99.9%): [977,573, 1002,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3256,001, 3256,001, 3256,001), stdev = 0,001
[info]   CI (99.9%): [3256,001, 3256,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,060 ±(99.9%) 1418,201 MB/sec [Average]
[info]   (min, avg, max) = (671,994, 941,060, 1344,797), stdev = 368,302
[info]   CI (99.9%): [≈ 0, 2359,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3097,350 ±(99.9%) 4692,661 B/op [Average]
[info]   (min, avg, max) = (2203,005, 3097,350, 4435,863), stdev = 1218,669
[info]   CI (99.9%): [≈ 0, 7790,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,082 ±(99.9%) 0,434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,082, 0,206), stdev = 0,113
[info]   CI (99.9%): [≈ 0, 0,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73,49% complete, ETA 00:35:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548214,867 ops/s
[info] # Warmup Iteration   2: 583444,360 ops/s
[info] # Warmup Iteration   3: 585625,639 ops/s
[info] # Warmup Iteration   4: 586379,305 ops/s
[info] # Warmup Iteration   5: 586612,714 ops/s
[info] Iteration   1: 583201,357 ops/s
[info]                  ·gc.alloc.rate:                   569,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1380,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 585080,484 ops/s
[info]                  ·gc.alloc.rate:                   570,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1815,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,420 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 586101,441 ops/s
[info]                  ·gc.alloc.rate:                   571,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1812,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,224 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 585408,040 ops/s
[info]                  ·gc.alloc.rate:               571,379 MB/sec
[info]                  ·gc.alloc.rate.norm:          1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1808,813 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 586644,445 ops/s
[info]                  ·gc.alloc.rate:                   572,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1805,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   585287,154 ±(99.9%) 5062,234 ops/s [Average]
[info]   (min, avg, max) = (583201,357, 585287,154, 586644,445), stdev = 1314,646
[info]   CI (99.9%): [580224,919, 590349,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   571,189 ±(99.9%) 4,872 MB/sec [Average]
[info]   (min, avg, max) = (569,161, 571,189, 572,464), stdev = 1,265
[info]   CI (99.9%): [566,318, 576,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1536,001, 1536,001, 1536,001), stdev = 0,001
[info]   CI (99.9%): [1536,001, 1536,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   641,336 ±(99.9%) 279,330 MB/sec [Average]
[info]   (min, avg, max) = (511,583, 641,336, 674,770), stdev = 72,541
[info]   CI (99.9%): [362,007, 920,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1724,332 ±(99.9%) 740,023 B/op [Average]
[info]   (min, avg, max) = (1380,614, 1724,332, 1815,187), stdev = 192,182
[info]   CI (99.9%): [984,309, 2464,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,649 ±(99.9%) 5,343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,649, 3,130), stdev = 1,388
[info]   CI (99.9%): [≈ 0, 5,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,745 ±(99.9%) 14,374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,745, 8,420), stdev = 3,733
[info]   CI (99.9%): [≈ 0, 16,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73,69% complete, ETA 00:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39423,510 ops/s
[info] # Warmup Iteration   2: 61607,321 ops/s
[info] # Warmup Iteration   3: 61783,674 ops/s
[info] # Warmup Iteration   4: 61482,204 ops/s
[info] # Warmup Iteration   5: 61743,518 ops/s
[info] Iteration   1: 61556,169 ops/s
[info]                  ·gc.alloc.rate:                   1345,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34554,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,064 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 61443,782 ops/s
[info]                  ·gc.alloc.rate:               1343,249 MB/sec
[info]                  ·gc.alloc.rate.norm:          34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34647,100 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 61841,618 ops/s
[info]                  ·gc.alloc.rate:                   1352,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34449,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,060 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 61776,198 ops/s
[info]                  ·gc.alloc.rate:               1350,544 MB/sec
[info]                  ·gc.alloc.rate.norm:          34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34509,044 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 61782,987 ops/s
[info]                  ·gc.alloc.rate:               1350,254 MB/sec
[info]                  ·gc.alloc.rate.norm:          34408,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34530,587 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   61680,151 ±(99.9%) 658,882 ops/s [Average]
[info]   (min, avg, max) = (61443,782, 61680,151, 61841,618), stdev = 171,110
[info]   CI (99.9%): [61021,269, 62339,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1348,316 ±(99.9%) 14,481 MB/sec [Average]
[info]   (min, avg, max) = (1343,249, 1348,316, 1352,066), stdev = 3,761
[info]   CI (99.9%): [1333,834, 1362,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34408,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (34408,007, 34408,007, 34408,007), stdev = 0,001
[info]   CI (99.9%): [34408,006, 34408,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,407 ±(99.9%) 5,996 MB/sec [Average]
[info]   (min, avg, max) = (1351,177, 1353,407, 1355,064), stdev = 1,557
[info]   CI (99.9%): [1347,411, 1359,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34538,068 ±(99.9%) 278,150 B/op [Average]
[info]   (min, avg, max) = (34449,579, 34538,068, 34647,100), stdev = 72,235
[info]   CI (99.9%): [34259,917, 34816,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,425 ±(99.9%) 2,240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,425, 1,064), stdev = 0,582
[info]   CI (99.9%): [≈ 0, 2,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73,90% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354056,469 ops/s
[info] # Warmup Iteration   2: 422784,645 ops/s
[info] # Warmup Iteration   3: 435397,227 ops/s
[info] # Warmup Iteration   4: 432670,122 ops/s
[info] # Warmup Iteration   5: 433805,573 ops/s
[info] Iteration   1: 431613,267 ops/s
[info]                  ·gc.alloc.rate:                   2928,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9846,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,228 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 432833,089 ops/s
[info]                  ·gc.alloc.rate:                   2937,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12302,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,303 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 433139,700 ops/s
[info]                  ·gc.alloc.rate:                   2939,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9854,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 429997,723 ops/s
[info]                  ·gc.alloc.rate:                   2917,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9938,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 430701,568 ops/s
[info]                  ·gc.alloc.rate:                   2922,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12418,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,228 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   431657,070 ±(99.9%) 5183,926 ops/s [Average]
[info]   (min, avg, max) = (429997,723, 431657,070, 433139,700), stdev = 1346,249
[info]   CI (99.9%): [426473,144, 436840,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2929,083 ±(99.9%) 35,354 MB/sec [Average]
[info]   (min, avg, max) = (2917,912, 2929,083, 2939,133), stdev = 9,181
[info]   CI (99.9%): [2893,729, 2964,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10680,001, 10680,001, 10680,001), stdev = 0,001
[info]   CI (99.9%): [10680,001, 10680,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2981,781 ±(99.9%) 1437,713 MB/sec [Average]
[info]   (min, avg, max) = (2700,281, 2981,781, 3397,997), stdev = 373,369
[info]   CI (99.9%): [1544,068, 4419,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10872,036 ±(99.9%) 5236,061 B/op [Average]
[info]   (min, avg, max) = (9846,582, 10872,036, 12418,343), stdev = 1359,788
[info]   CI (99.9%): [5635,975, 16108,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,212 ±(99.9%) 0,243 B/op [Average]
[info]   (min, avg, max) = (0,151, 0,212, 0,303), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,10% complete, ETA 00:34:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217642,649 ops/s
[info] # Warmup Iteration   2: 348017,678 ops/s
[info] # Warmup Iteration   3: 350028,631 ops/s
[info] # Warmup Iteration   4: 350369,037 ops/s
[info] # Warmup Iteration   5: 351157,046 ops/s
[info] Iteration   1: 348356,236 ops/s
[info]                  ·gc.alloc.rate:                   913,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3050,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,376 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 351805,556 ops/s
[info]                  ·gc.alloc.rate:                   922,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6043,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 351950,920 ops/s
[info]                  ·gc.alloc.rate:               923,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3021,803 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 350891,770 ops/s
[info]                  ·gc.alloc.rate:                   920,380 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6064,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 351631,403 ops/s
[info]                  ·gc.alloc.rate:               922,182 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3029,050 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   350927,177 ±(99.9%) 5752,340 ops/s [Average]
[info]   (min, avg, max) = (348356,236, 350927,177, 351950,920), stdev = 1493,865
[info]   CI (99.9%): [345174,836, 356679,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   920,430 ±(99.9%) 14,981 MB/sec [Average]
[info]   (min, avg, max) = (913,728, 920,430, 923,063), stdev = 3,890
[info]   CI (99.9%): [905,450, 935,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4128,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4128,001, 4128,001, 4128,001), stdev = 0,001
[info]   CI (99.9%): [4128,001, 4128,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,167 ±(99.9%) 1425,382 MB/sec [Average]
[info]   (min, avg, max) = (675,121, 946,167, 1352,249), stdev = 370,167
[info]   CI (99.9%): [≈ 0, 2371,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4241,941 ±(99.9%) 6371,276 B/op [Average]
[info]   (min, avg, max) = (3021,803, 4241,941, 6064,984), stdev = 1654,600
[info]   CI (99.9%): [≈ 0, 10613,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,131 ±(99.9%) 0,606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,131, 0,376), stdev = 0,157
[info]   CI (99.9%): [≈ 0, 0,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,30% complete, ETA 00:34:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1249003,096 ops/s
[info] # Warmup Iteration   2: 1349390,970 ops/s
[info] # Warmup Iteration   3: 1354000,661 ops/s
[info] # Warmup Iteration   4: 1352571,670 ops/s
[info] # Warmup Iteration   5: 1346522,007 ops/s
[info] Iteration   1: 1349710,877 ops/s
[info]                  ·gc.alloc.rate:                   2634,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3145,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1352546,796 ops/s
[info]                  ·gc.alloc.rate:                   2639,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3145,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1352464,103 ops/s
[info]                  ·gc.alloc.rate:                   2640,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3151,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1351666,120 ops/s
[info]                  ·gc.alloc.rate:                   2638,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3159,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1351416,221 ops/s
[info]                  ·gc.alloc.rate:                   2637,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3163,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1351560,823 ±(99.9%) 4408,254 ops/s [Average]
[info]   (min, avg, max) = (1349710,877, 1351560,823, 1352546,796), stdev = 1144,809
[info]   CI (99.9%): [1347152,569, 1355969,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2637,963 ±(99.9%) 9,311 MB/sec [Average]
[info]   (min, avg, max) = (2634,073, 2637,963, 2640,009), stdev = 2,418
[info]   CI (99.9%): [2628,652, 2647,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,000, 3072,000, 3072,000), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2707,671 ±(99.9%) 29,316 MB/sec [Average]
[info]   (min, avg, max) = (2697,224, 2707,671, 2716,221), stdev = 7,613
[info]   CI (99.9%): [2678,355, 2736,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3153,176 ±(99.9%) 30,947 B/op [Average]
[info]   (min, avg, max) = (3145,604, 3153,176, 3163,591), stdev = 8,037
[info]   CI (99.9%): [3122,229, 3184,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,063 ±(99.9%) 0,125 B/op [Average]
[info]   (min, avg, max) = (0,024, 0,063, 0,097), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74,50% complete, ETA 00:33:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86483,565 ops/s
[info] # Warmup Iteration   2: 122393,963 ops/s
[info] # Warmup Iteration   3: 122420,191 ops/s
[info] # Warmup Iteration   4: 122764,831 ops/s
[info] # Warmup Iteration   5: 122793,748 ops/s
[info] Iteration   1: 122583,164 ops/s
[info]                  ·gc.alloc.rate:                   4435,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52384,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,069 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 122551,326 ops/s
[info]                  ·gc.alloc.rate:                   4434,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4765,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61193,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 122023,559 ops/s
[info]                  ·gc.alloc.rate:                   4414,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52711,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,805 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 122831,384 ops/s
[info]                  ·gc.alloc.rate:                   4444,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61115,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 123290,443 ops/s
[info]                  ·gc.alloc.rate:                   4460,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52189,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,531 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   122655,975 ±(99.9%) 1774,558 ops/s [Average]
[info]   (min, avg, max) = (122023,559, 122655,975, 123290,443), stdev = 460,847
[info]   CI (99.9%): [120881,417, 124430,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4437,866 ±(99.9%) 63,806 MB/sec [Average]
[info]   (min, avg, max) = (4414,904, 4437,866, 4460,305), stdev = 16,570
[info]   CI (99.9%): [4374,060, 4501,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56944,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56944,003, 56944,003, 56944,004), stdev = 0,001
[info]   CI (99.9%): [56944,003, 56944,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4358,019 ±(99.9%) 1440,306 MB/sec [Average]
[info]   (min, avg, max) = (4079,994, 4358,019, 4770,302), stdev = 374,043
[info]   CI (99.9%): [2917,712, 5798,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55918,715 ±(99.9%) 18418,382 B/op [Average]
[info]   (min, avg, max) = (52189,450, 55918,715, 61193,594), stdev = 4783,195
[info]   CI (99.9%): [37500,333, 74337,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,641 ±(99.9%) 1,177 B/op [Average]
[info]   (min, avg, max) = (0,267, 0,641, 1,069), stdev = 0,306
[info]   CI (99.9%): [≈ 0, 1,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74,70% complete, ETA 00:33:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 568975,343 ops/s
[info] # Warmup Iteration   2: 617666,084 ops/s
[info] # Warmup Iteration   3: 622790,925 ops/s
[info] # Warmup Iteration   4: 620034,379 ops/s
[info] # Warmup Iteration   5: 623253,330 ops/s
[info] Iteration   1: 616952,246 ops/s
[info]                  ·gc.alloc.rate:                   2693,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6885,190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,159 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 623342,343 ops/s
[info]                  ·gc.alloc.rate:                   2721,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6828,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 622684,631 ops/s
[info]                  ·gc.alloc.rate:                   2718,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6848,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 620603,322 ops/s
[info]                  ·gc.alloc.rate:                   2709,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6881,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 614610,983 ops/s
[info]                  ·gc.alloc.rate:                   2683,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6958,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   619638,705 ±(99.9%) 14461,736 ops/s [Average]
[info]   (min, avg, max) = (614610,983, 619638,705, 623342,343), stdev = 3755,667
[info]   CI (99.9%): [605176,969, 634100,441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2705,472 ±(99.9%) 63,829 MB/sec [Average]
[info]   (min, avg, max) = (2683,229, 2705,472, 2721,892), stdev = 16,576
[info]   CI (99.9%): [2641,644, 2769,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6872,001, 6872,001, 6872,001), stdev = 0,001
[info]   CI (99.9%): [6872,001, 6872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2708,728 ±(99.9%) 27,697 MB/sec [Average]
[info]   (min, avg, max) = (2698,798, 2708,728, 2716,810), stdev = 7,193
[info]   CI (99.9%): [2681,031, 2736,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6880,495 ±(99.9%) 189,958 B/op [Average]
[info]   (min, avg, max) = (6828,605, 6880,495, 6958,005), stdev = 49,332
[info]   CI (99.9%): [6690,536, 7070,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,116 ±(99.9%) 0,222 B/op [Average]
[info]   (min, avg, max) = (0,053, 0,116, 0,159), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74,90% complete, ETA 00:33:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311706,160 ops/s
[info] # Warmup Iteration   2: 363490,465 ops/s
[info] # Warmup Iteration   3: 362108,443 ops/s
[info] # Warmup Iteration   4: 358681,485 ops/s
[info] # Warmup Iteration   5: 355003,342 ops/s
[info] Iteration   1: 360539,728 ops/s
[info]                  ·gc.alloc.rate:                   549,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2233,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 360325,413 ops/s
[info]                  ·gc.alloc.rate:                   549,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2947,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,658 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 360964,547 ops/s
[info]                  ·gc.alloc.rate:                   550,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2942,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,272 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 361123,357 ops/s
[info]                  ·gc.alloc.rate:      550,752 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 360710,000 ops/s
[info]                  ·gc.alloc.rate:                   550,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2932,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   360732,609 ±(99.9%) 1232,811 ops/s [Average]
[info]   (min, avg, max) = (360325,413, 360732,609, 361123,357), stdev = 320,157
[info]   CI (99.9%): [359499,798, 361965,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   550,097 ±(99.9%) 1,939 MB/sec [Average]
[info]   (min, avg, max) = (549,477, 550,097, 550,752), stdev = 0,504
[info]   CI (99.9%): [548,158, 552,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2400,001, 2400,001, 2400,001), stdev = 0,001
[info]   CI (99.9%): [2400,001, 2400,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,671 ±(99.9%) 1123,738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,671, 674,854), stdev = 291,831
[info]   CI (99.9%): [≈ 0, 1630,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2211,158 ±(99.9%) 4903,779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2211,158, 2947,621), stdev = 1273,496
[info]   CI (99.9%): [≈ 0, 7114,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,690 ±(99.9%) 5,740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,690, 3,356), stdev = 1,491
[info]   CI (99.9%): [≈ 0, 6,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,013 ±(99.9%) 25,069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,013, 14,658), stdev = 6,510
[info]   CI (99.9%): [≈ 0, 28,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,10% complete, ETA 00:33:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 450397,593 ops/s
[info] # Warmup Iteration   2: 666900,458 ops/s
[info] # Warmup Iteration   3: 664353,148 ops/s
[info] # Warmup Iteration   4: 665945,841 ops/s
[info] # Warmup Iteration   5: 663526,606 ops/s
[info] Iteration   1: 664380,090 ops/s
[info]                  ·gc.alloc.rate:               486,244 MB/sec
[info]                  ·gc.alloc.rate.norm:          1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1211,845 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 659091,194 ops/s
[info]                  ·gc.alloc.rate:                   482,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1609,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 665359,259 ops/s
[info]                  ·gc.alloc.rate:      486,985 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 663603,247 ops/s
[info]                  ·gc.alloc.rate:                   485,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 665058,755 ops/s
[info]                  ·gc.alloc.rate:               486,713 MB/sec
[info]                  ·gc.alloc.rate.norm:          1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1596,843 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   663498,509 ±(99.9%) 9837,875 ops/s [Average]
[info]   (min, avg, max) = (659091,194, 663498,509, 665359,259), stdev = 2554,865
[info]   CI (99.9%): [653660,634, 673336,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   485,623 ±(99.9%) 7,136 MB/sec [Average]
[info]   (min, avg, max) = (482,415, 485,623, 486,985), stdev = 1,853
[info]   CI (99.9%): [478,487, 492,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1152,001, 1152,001, 1152,001), stdev = 0,001
[info]   CI (99.9%): [1152,001, 1152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   506,867 ±(99.9%) 1124,319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,867, 674,656), stdev = 291,982
[info]   CI (99.9%): [≈ 0, 1631,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1203,407 ±(99.9%) 2670,818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1203,407, 1609,658), stdev = 693,603
[info]   CI (99.9%): [≈ 0, 3874,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,291), stdev = 0,126
[info]   CI (99.9%): [≈ 0, 0,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,169 ±(99.9%) 1,161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,169, 0,696), stdev = 0,302
[info]   CI (99.9%): [≈ 0, 1,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,30% complete, ETA 00:32:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2308799,258 ops/s
[info] # Warmup Iteration   2: 2375440,179 ops/s
[info] # Warmup Iteration   3: 2189194,648 ops/s
[info] # Warmup Iteration   4: 2206041,997 ops/s
[info] # Warmup Iteration   5: 2184652,133 ops/s
[info] Iteration   1: 2205152,664 ops/s
[info]                  ·gc.alloc.rate:               1020,009 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 480,158 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 2200759,680 ops/s
[info]                  ·gc.alloc.rate:                   1017,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     961,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2213488,578 ops/s
[info]                  ·gc.alloc.rate:               1023,782 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 477,887 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2210252,588 ops/s
[info]                  ·gc.alloc.rate:                   1022,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     957,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2206443,814 ops/s
[info]                  ·gc.alloc.rate:               1020,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,403 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2207219,465 ±(99.9%) 18775,961 ops/s [Average]
[info]   (min, avg, max) = (2200759,680, 2207219,465, 2213488,578), stdev = 4876,058
[info]   CI (99.9%): [2188443,504, 2225995,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1020,937 ±(99.9%) 8,682 MB/sec [Average]
[info]   (min, avg, max) = (1017,943, 1020,937, 1023,782), stdev = 2,255
[info]   CI (99.9%): [1012,255, 1029,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,058 ±(99.9%) 1417,198 MB/sec [Average]
[info]   (min, avg, max) = (672,033, 941,058, 1344,330), stdev = 368,042
[info]   CI (99.9%): [≈ 0, 2358,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   671,185 ±(99.9%) 1012,569 B/op [Average]
[info]   (min, avg, max) = (477,887, 671,185, 961,276), stdev = 262,961
[info]   CI (99.9%): [≈ 0, 1683,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,045), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75,50% complete, ETA 00:32:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2580969,806 ops/s
[info] # Warmup Iteration   2: 2544898,653 ops/s
[info] # Warmup Iteration   3: 2251666,888 ops/s
[info] # Warmup Iteration   4: 2256370,981 ops/s
[info] # Warmup Iteration   5: 2248750,406 ops/s
[info] Iteration   1: 2254271,853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2248386,983 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2254497,930 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2141544,795 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2294646,524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2238669,617 ±(99.9%) 220825,597 ops/s [Average]
[info]   (min, avg, max) = (2141544,795, 2238669,617, 2294646,524), stdev = 57347,706
[info]   CI (99.9%): [2017844,020, 2459495,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75,70% complete, ETA 00:32:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 365297,216 ops/s
[info] # Warmup Iteration   2: 435234,038 ops/s
[info] # Warmup Iteration   3: 422472,079 ops/s
[info] # Warmup Iteration   4: 427943,091 ops/s
[info] # Warmup Iteration   5: 424434,778 ops/s
[info] Iteration   1: 427903,350 ops/s
[info]                  ·gc.alloc.rate:      615,507 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 426635,701 ops/s
[info]                  ·gc.alloc.rate:                   613,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2484,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,936 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 428717,457 ops/s
[info]                  ·gc.alloc.rate:                   616,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2472,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 428412,953 ops/s
[info]                  ·gc.alloc.rate:               616,300 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2464,111 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 428318,658 ops/s
[info]                  ·gc.alloc.rate:                   616,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2464,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   427997,624 ±(99.9%) 3138,596 ops/s [Average]
[info]   (min, avg, max) = (426635,701, 427997,624, 428717,457), stdev = 815,083
[info]   CI (99.9%): [424859,028, 431136,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   615,659 ±(99.9%) 4,513 MB/sec [Average]
[info]   (min, avg, max) = (613,712, 615,659, 616,710), stdev = 1,172
[info]   CI (99.9%): [611,145, 620,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,654 ±(99.9%) 1157,353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,654, 673,415), stdev = 300,561
[info]   CI (99.9%): [≈ 0, 1695,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1977,038 ±(99.9%) 4255,838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1977,038, 2484,247), stdev = 1105,228
[info]   CI (99.9%): [≈ 0, 6232,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,772 ±(99.9%) 6,470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,772, 3,778), stdev = 1,680
[info]   CI (99.9%): [≈ 0, 7,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,848 ±(99.9%) 23,869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,848, 13,936), stdev = 6,199
[info]   CI (99.9%): [≈ 0, 26,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75,90% complete, ETA 00:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188322,247 ops/s
[info] # Warmup Iteration   2: 195732,552 ops/s
[info] # Warmup Iteration   3: 194335,848 ops/s
[info] # Warmup Iteration   4: 195337,984 ops/s
[info] # Warmup Iteration   5: 195705,529 ops/s
[info] Iteration   1: 195904,101 ops/s
[info]                  ·gc.alloc.rate:               499,805 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4109,880 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 196336,280 ops/s
[info]                  ·gc.alloc.rate:                   500,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4100,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 196410,069 ops/s
[info]                  ·gc.alloc.rate:                   501,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5406,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,915 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 196235,124 ops/s
[info]                  ·gc.alloc.rate:                   500,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5411,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,501 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 196786,984 ops/s
[info]                  ·gc.alloc.rate:      502,087 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   196334,512 ±(99.9%) 1226,136 ops/s [Average]
[info]   (min, avg, max) = (195904,101, 196334,512, 196786,984), stdev = 318,424
[info]   CI (99.9%): [195108,375, 197560,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   500,959 ±(99.9%) 3,157 MB/sec [Average]
[info]   (min, avg, max) = (499,805, 500,959, 502,087), stdev = 0,820
[info]   CI (99.9%): [497,803, 504,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,514 ±(99.9%) 1068,663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,514, 674,768), stdev = 277,528
[info]   CI (99.9%): [≈ 0, 1543,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3805,854 ±(99.9%) 8568,336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3805,854, 5411,640), stdev = 2225,170
[info]   CI (99.9%): [≈ 0, 12374,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 5,314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 3,109), stdev = 1,380
[info]   CI (99.9%): [≈ 0, 5,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,135 ±(99.9%) 42,585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,135, 24,915), stdev = 11,059
[info]   CI (99.9%): [≈ 0, 47,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76,10% complete, ETA 00:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55993,824 ops/s
[info] # Warmup Iteration   2: 66666,360 ops/s
[info] # Warmup Iteration   3: 66667,072 ops/s
[info] # Warmup Iteration   4: 67095,749 ops/s
[info] # Warmup Iteration   5: 66913,225 ops/s
[info] Iteration   1: 67049,669 ops/s
[info]                  ·gc.alloc.rate:                   2258,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63200,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,977 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 66669,470 ops/s
[info]                  ·gc.alloc.rate:                   2245,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47762,609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,983 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 67233,953 ops/s
[info]                  ·gc.alloc.rate:                   2264,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47446,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,974 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 66835,679 ops/s
[info]                  ·gc.alloc.rate:                   2251,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63744,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,470 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 67144,342 ops/s
[info]                  ·gc.alloc.rate:                   2261,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47666,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,488 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   66986,623 ±(99.9%) 889,391 ops/s [Average]
[info]   (min, avg, max) = (66669,470, 66986,623, 67233,953), stdev = 230,972
[info]   CI (99.9%): [66097,231, 67876,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2256,403 ±(99.9%) 29,674 MB/sec [Average]
[info]   (min, avg, max) = (2245,737, 2256,403, 2264,720), stdev = 7,706
[info]   CI (99.9%): [2226,729, 2286,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53016,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (53016,006, 53016,007, 53016,007), stdev = 0,001
[info]   CI (99.9%): [53016,005, 53016,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296,578 ±(99.9%) 1417,513 MB/sec [Average]
[info]   (min, avg, max) = (2023,205, 2296,578, 2707,152), stdev = 368,124
[info]   CI (99.9%): [879,065, 3714,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53964,224 ±(99.9%) 33434,634 B/op [Average]
[info]   (min, avg, max) = (47446,384, 53964,224, 63744,938), stdev = 8682,868
[info]   CI (99.9%): [20529,590, 87398,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,979 ±(99.9%) 1,338 B/op [Average]
[info]   (min, avg, max) = (0,488, 0,979, 1,470), stdev = 0,347
[info]   CI (99.9%): [≈ 0, 2,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,31% complete, ETA 00:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45706,561 ops/s
[info] # Warmup Iteration   2: 79134,194 ops/s
[info] # Warmup Iteration   3: 79215,503 ops/s
[info] # Warmup Iteration   4: 79839,671 ops/s
[info] # Warmup Iteration   5: 79328,319 ops/s
[info] Iteration   1: 80357,276 ops/s
[info]                  ·gc.alloc.rate:                   1443,067 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26483,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,815 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 80359,107 ops/s
[info]                  ·gc.alloc.rate:               1443,233 MB/sec
[info]                  ·gc.alloc.rate.norm:          28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26510,886 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 80058,730 ops/s
[info]                  ·gc.alloc.rate:                   1438,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26633,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,228 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 77546,918 ops/s
[info]                  ·gc.alloc.rate:                   1392,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27512,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,845 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 79777,646 ops/s
[info]                  ·gc.alloc.rate:                   1432,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26755,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,411 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   79619,935 ±(99.9%) 4558,121 ops/s [Average]
[info]   (min, avg, max) = (77546,918, 79619,935, 80359,107), stdev = 1183,729
[info]   CI (99.9%): [75061,815, 84178,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1429,960 ±(99.9%) 81,766 MB/sec [Average]
[info]   (min, avg, max) = (1392,795, 1429,960, 1443,233), stdev = 21,234
[info]   CI (99.9%): [1348,195, 1511,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28264,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28264,005, 28264,005, 28264,006), stdev = 0,001
[info]   CI (99.9%): [28264,004, 28264,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,577 ±(99.9%) 6,280 MB/sec [Average]
[info]   (min, avg, max) = (1352,142, 1354,577, 1356,036), stdev = 1,631
[info]   CI (99.9%): [1348,297, 1360,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26779,046 ±(99.9%) 1633,003 B/op [Average]
[info]   (min, avg, max) = (26483,145, 26779,046, 27512,631), stdev = 424,086
[info]   CI (99.9%): [25146,043, 28412,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,660 ±(99.9%) 1,804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,660, 1,228), stdev = 0,469
[info]   CI (99.9%): [≈ 0, 2,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,51% complete, ETA 00:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98713,906 ops/s
[info] # Warmup Iteration   2: 109074,517 ops/s
[info] # Warmup Iteration   3: 109855,103 ops/s
[info] # Warmup Iteration   4: 111024,236 ops/s
[info] # Warmup Iteration   5: 110695,465 ops/s
[info] Iteration   1: 110644,002 ops/s
[info]                  ·gc.alloc.rate:                   1696,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28679,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,592 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 111069,558 ops/s
[info]                  ·gc.alloc.rate:                   1703,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19067,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,885 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 110114,484 ops/s
[info]                  ·gc.alloc.rate:                   1688,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28884,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,190 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 110293,294 ops/s
[info]                  ·gc.alloc.rate:                   1691,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19247,339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,594 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 110364,033 ops/s
[info]                  ·gc.alloc.rate:                   1692,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28885,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,297 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   110497,074 ±(99.9%) 1434,238 ops/s [Average]
[info]   (min, avg, max) = (110114,484, 110497,074, 111069,558), stdev = 372,467
[info]   CI (99.9%): [109062,836, 111931,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1694,530 ±(99.9%) 22,387 MB/sec [Average]
[info]   (min, avg, max) = (1688,666, 1694,530, 1703,548), stdev = 5,814
[info]   CI (99.9%): [1672,143, 1716,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24136,004, 24136,004, 24136,004), stdev = 0,001
[info]   CI (99.9%): [24136,003, 24136,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1751,409 ±(99.9%) 1420,599 MB/sec [Average]
[info]   (min, avg, max) = (1345,789, 1751,409, 2025,405), stdev = 368,925
[info]   CI (99.9%): [330,810, 3172,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24953,072 ±(99.9%) 20377,012 B/op [Average]
[info]   (min, avg, max) = (19067,249, 24953,072, 28885,946), stdev = 5291,845
[info]   CI (99.9%): [4576,060, 45330,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,712 ±(99.9%) 1,304 B/op [Average]
[info]   (min, avg, max) = (0,297, 0,712, 1,190), stdev = 0,339
[info]   CI (99.9%): [≈ 0, 2,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76,71% complete, ETA 00:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11754,863 ops/s
[info] # Warmup Iteration   2: 20460,113 ops/s
[info] # Warmup Iteration   3: 20477,798 ops/s
[info] # Warmup Iteration   4: 20443,173 ops/s
[info] # Warmup Iteration   5: 20402,375 ops/s
[info] Iteration   1: 20465,290 ops/s
[info]                  ·gc.alloc.rate:               1425,791 MB/sec
[info]                  ·gc.alloc.rate.norm:          109656,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103986,775 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 20449,599 ops/s
[info]                  ·gc.alloc.rate:               1424,840 MB/sec
[info]                  ·gc.alloc.rate.norm:          109656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104119,383 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 20565,016 ops/s
[info]                  ·gc.alloc.rate:                   1432,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              109656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103639,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20489,449 ops/s
[info]                  ·gc.alloc.rate:               1427,641 MB/sec
[info]                  ·gc.alloc.rate.norm:          109656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 104064,581 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 20565,745 ops/s
[info]                  ·gc.alloc.rate:               1432,704 MB/sec
[info]                  ·gc.alloc.rate.norm:          109656,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103787,104 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20507,020 ±(99.9%) 212,306 ops/s [Average]
[info]   (min, avg, max) = (20449,599, 20507,020, 20565,745), stdev = 55,135
[info]   CI (99.9%): [20294,714, 20719,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1428,762 ±(99.9%) 14,612 MB/sec [Average]
[info]   (min, avg, max) = (1424,840, 1428,762, 1432,836), stdev = 3,795
[info]   CI (99.9%): [1414,150, 1443,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109656,022 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (109656,020, 109656,022, 109656,027), stdev = 0,003
[info]   CI (99.9%): [109656,010, 109656,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1354,012 ±(99.9%) 6,017 MB/sec [Average]
[info]   (min, avg, max) = (1352,077, 1354,012, 1356,024), stdev = 1,563
[info]   CI (99.9%): [1347,995, 1360,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   103919,411 ±(99.9%) 774,008 B/op [Average]
[info]   (min, avg, max) = (103639,215, 103919,411, 104119,383), stdev = 201,007
[info]   CI (99.9%): [103145,404, 104693,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,274 ±(99.9%) 10,973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,274, 6,372), stdev = 2,850
[info]   CI (99.9%): [≈ 0, 12,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,91% complete, ETA 00:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122530,563 ops/s
[info] # Warmup Iteration   2: 183228,071 ops/s
[info] # Warmup Iteration   3: 183941,846 ops/s
[info] # Warmup Iteration   4: 184405,806 ops/s
[info] # Warmup Iteration   5: 183857,013 ops/s
[info] Iteration   1: 184147,656 ops/s
[info]                  ·gc.alloc.rate:                   1359,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              11624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11550,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 183793,421 ops/s
[info]                  ·gc.alloc.rate:                   1357,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              11624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11582,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 183204,438 ops/s
[info]                  ·gc.alloc.rate:                   1353,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              11624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11628,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,358 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 184241,437 ops/s
[info]                  ·gc.alloc.rate:                   1360,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              11624,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11571,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 183798,199 ops/s
[info]                  ·gc.alloc.rate:                   1357,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              11624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11606,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   183837,030 ±(99.9%) 1568,417 ops/s [Average]
[info]   (min, avg, max) = (183204,438, 183837,030, 184241,437), stdev = 407,313
[info]   CI (99.9%): [182268,613, 185405,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1357,727 ±(99.9%) 11,452 MB/sec [Average]
[info]   (min, avg, max) = (1353,088, 1357,727, 1360,673), stdev = 2,974
[info]   CI (99.9%): [1346,274, 1369,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11624,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11624,002, 11624,002, 11624,003), stdev = 0,001
[info]   CI (99.9%): [11624,002, 11624,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,521 ±(99.9%) 5,844 MB/sec [Average]
[info]   (min, avg, max) = (1351,402, 1353,521, 1355,321), stdev = 1,518
[info]   CI (99.9%): [1347,677, 1359,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11588,049 ±(99.9%) 116,937 B/op [Average]
[info]   (min, avg, max) = (11550,840, 11588,049, 11628,462), stdev = 30,368
[info]   CI (99.9%): [11471,112, 11704,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,285 ±(99.9%) 0,615 B/op [Average]
[info]   (min, avg, max) = (0,178, 0,285, 0,535), stdev = 0,160
[info]   CI (99.9%): [≈ 0, 0,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77,11% complete, ETA 00:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 490712,842 ops/s
[info] # Warmup Iteration   2: 513296,417 ops/s
[info] # Warmup Iteration   3: 518745,409 ops/s
[info] # Warmup Iteration   4: 522436,050 ops/s
[info] # Warmup Iteration   5: 522120,016 ops/s
[info] Iteration   1: 523505,800 ops/s
[info]                  ·gc.alloc.rate:               577,379 MB/sec
[info]                  ·gc.alloc.rate.norm:          1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1537,957 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 520050,257 ops/s
[info]                  ·gc.alloc.rate:                   573,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2042,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,652 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 516938,695 ops/s
[info]                  ·gc.alloc.rate:                   570,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2054,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 522046,752 ops/s
[info]                  ·gc.alloc.rate:               575,856 MB/sec
[info]                  ·gc.alloc.rate.norm:          1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2028,201 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 521906,487 ops/s
[info]                  ·gc.alloc.rate:                   575,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2028,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   520889,598 ±(99.9%) 9728,443 ops/s [Average]
[info]   (min, avg, max) = (516938,695, 520889,598, 523505,800), stdev = 2526,446
[info]   CI (99.9%): [511161,155, 530618,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   574,504 ±(99.9%) 10,766 MB/sec [Average]
[info]   (min, avg, max) = (570,137, 574,504, 577,379), stdev = 2,796
[info]   CI (99.9%): [563,738, 585,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1736,001, 1736,001, 1736,001), stdev = 0,001
[info]   CI (99.9%): [1736,001, 1736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,262 ±(99.9%) 279,323 MB/sec [Average]
[info]   (min, avg, max) = (511,511, 641,262, 674,682), stdev = 72,539
[info]   CI (99.9%): [361,939, 920,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1938,259 ±(99.9%) 862,677 B/op [Average]
[info]   (min, avg, max) = (1537,957, 1938,259, 2054,329), stdev = 224,034
[info]   CI (99.9%): [1075,582, 2800,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,189), stdev = 1,419
[info]   CI (99.9%): [≈ 0, 6,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,968 ±(99.9%) 16,540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,968, 9,652), stdev = 4,295
[info]   CI (99.9%): [≈ 0, 18,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77,31% complete, ETA 00:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552203,887 ops/s
[info] # Warmup Iteration   2: 573516,232 ops/s
[info] # Warmup Iteration   3: 572683,055 ops/s
[info] # Warmup Iteration   4: 574276,890 ops/s
[info] # Warmup Iteration   5: 572934,364 ops/s
[info] Iteration   1: 573932,884 ops/s
[info]                  ·gc.alloc.rate:      5,835 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 573364,657 ops/s
[info]                  ·gc.alloc.rate:      5,829 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 574447,058 ops/s
[info]                  ·gc.alloc.rate:      5,840 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 573659,374 ops/s
[info]                  ·gc.alloc.rate:      5,833 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 573896,142 ops/s
[info]                  ·gc.alloc.rate:      5,834 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   573860,023 ±(99.9%) 1536,487 ops/s [Average]
[info]   (min, avg, max) = (573364,657, 573860,023, 574447,058), stdev = 399,021
[info]   CI (99.9%): [572323,536, 575396,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5,834 ±(99.9%) 0,015 MB/sec [Average]
[info]   (min, avg, max) = (5,829, 5,834, 5,840), stdev = 0,004
[info]   CI (99.9%): [5,819, 5,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77,51% complete, ETA 00:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15086,778 ops/s
[info] # Warmup Iteration   2: 23312,894 ops/s
[info] # Warmup Iteration   3: 23324,785 ops/s
[info] # Warmup Iteration   4: 23156,406 ops/s
[info] # Warmup Iteration   5: 23371,044 ops/s
[info] Iteration   1: 23401,058 ops/s
[info]                  ·gc.alloc.rate:               446,775 MB/sec
[info]                  ·gc.alloc.rate.norm:          30048,718 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34404,510 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 23509,021 ops/s
[info]                  ·gc.alloc.rate:      448,896 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23452,466 ops/s
[info]                  ·gc.alloc.rate:                   447,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45256,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33,524 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23409,492 ops/s
[info]                  ·gc.alloc.rate:                   446,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45342,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,399 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 23525,940 ops/s
[info]                  ·gc.alloc.rate:      449,100 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   23459,595 ±(99.9%) 218,099 ops/s [Average]
[info]   (min, avg, max) = (23401,058, 23459,595, 23525,940), stdev = 56,640
[info]   CI (99.9%): [23241,496, 23677,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   447,896 ±(99.9%) 4,125 MB/sec [Average]
[info]   (min, avg, max) = (446,775, 447,896, 449,100), stdev = 1,071
[info]   CI (99.9%): [443,771, 452,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30048,158 ±(99.9%) 1,205 B/op [Average]
[info]   (min, avg, max) = (30048,017, 30048,158, 30048,718), stdev = 0,313
[info]   CI (99.9%): [30046,953, 30049,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   372,075 ±(99.9%) 1332,724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,075, 674,470), stdev = 346,104
[info]   CI (99.9%): [≈ 0, 1704,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   25000,698 ±(99.9%) 89534,447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25000,698, 45342,012), stdev = 23251,812
[info]   CI (99.9%): [≈ 0, 114535,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,104, 0,500), stdev = 0,221
[info]   CI (99.9%): [≈ 0, 0,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,985 ±(99.9%) 57,175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,985, 33,524), stdev = 14,848
[info]   CI (99.9%): [≈ 0, 64,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77,71% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1451887,495 ops/s
[info] # Warmup Iteration   2: 2585288,204 ops/s
[info] # Warmup Iteration   3: 2587206,120 ops/s
[info] # Warmup Iteration   4: 2559859,072 ops/s
[info] # Warmup Iteration   5: 2546452,862 ops/s
[info] Iteration   1: 2531406,269 ops/s
[info]                  ·gc.alloc.rate:                   3422,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2102,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2559021,389 ops/s
[info]                  ·gc.alloc.rate:                   3460,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2084,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2543328,792 ops/s
[info]                  ·gc.alloc.rate:                   3438,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2100,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2563589,705 ops/s
[info]                  ·gc.alloc.rate:                   3466,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2086,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2564723,368 ops/s
[info]                  ·gc.alloc.rate:                   3467,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2087,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2552413,905 ±(99.9%) 55931,855 ops/s [Average]
[info]   (min, avg, max) = (2531406,269, 2552413,905, 2564723,368), stdev = 14525,325
[info]   CI (99.9%): [2496482,050, 2608345,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3451,027 ±(99.9%) 75,455 MB/sec [Average]
[info]   (min, avg, max) = (3422,723, 3451,027, 3467,189), stdev = 19,595
[info]   CI (99.9%): [3375,572, 3526,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2128,000, 2128,000, 2128,000), stdev = 0,001
[info]   CI (99.9%): [2128,000, 2128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3393,346 ±(99.9%) 31,503 MB/sec [Average]
[info]   (min, avg, max) = (3381,170, 3393,346, 3401,860), stdev = 8,181
[info]   CI (99.9%): [3361,843, 3424,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2092,468 ±(99.9%) 31,922 B/op [Average]
[info]   (min, avg, max) = (2084,776, 2092,468, 2102,166), stdev = 8,290
[info]   CI (99.9%): [2060,546, 2124,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,057 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,031, 0,052), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 1,000
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77,91% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62281,977 ops/s
[info] # Warmup Iteration   2: 858234,469 ops/s
[info] # Warmup Iteration   3: 899281,156 ops/s
[info] # Warmup Iteration   4: 899723,304 ops/s
[info] # Warmup Iteration   5: 899606,870 ops/s
[info] Iteration   1: 884422,946 ops/s
[info]                  ·gc.alloc.rate:                   561,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     910,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 879629,801 ops/s
[info]                  ·gc.alloc.rate:                   558,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1206,185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 883041,061 ops/s
[info]                  ·gc.alloc.rate:               561,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1201,450 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 886043,721 ops/s
[info]                  ·gc.alloc.rate:                   563,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1195,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 887249,834 ops/s
[info]                  ·gc.alloc.rate:      563,697 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   884077,472 ±(99.9%) 11374,937 ops/s [Average]
[info]   (min, avg, max) = (879629,801, 884077,472, 887249,834), stdev = 2954,035
[info]   CI (99.9%): [872702,535, 895452,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   561,725 ±(99.9%) 7,158 MB/sec [Average]
[info]   (min, avg, max) = (558,945, 561,725, 563,697), stdev = 1,859
[info]   CI (99.9%): [554,567, 568,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,000), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,521 ±(99.9%) 1123,332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,521, 674,191), stdev = 291,726
[info]   CI (99.9%): [≈ 0, 1629,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   902,598 ±(99.9%) 2002,450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 902,598, 1206,185), stdev = 520,030
[info]   CI (99.9%): [≈ 0, 2905,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,536 ±(99.9%) 4,497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,536, 2,625), stdev = 1,168
[info]   CI (99.9%): [≈ 0, 5,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,958 ±(99.9%) 8,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,958, 4,696), stdev = 2,090
[info]   CI (99.9%): [≈ 0, 9,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78,11% complete, ETA 00:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45923,638 ops/s
[info] # Warmup Iteration   2: 305794,858 ops/s
[info] # Warmup Iteration   3: 320888,260 ops/s
[info] # Warmup Iteration   4: 317995,933 ops/s
[info] # Warmup Iteration   5: 316036,856 ops/s
[info] Iteration   1: 319014,914 ops/s
[info]                  ·gc.alloc.rate:                   621,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              3064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3327,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,335 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 320119,302 ops/s
[info]                  ·gc.alloc.rate:      623,178 MB/sec
[info]                  ·gc.alloc.rate.norm: 3064,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 314421,154 ops/s
[info]                  ·gc.alloc.rate:                   612,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              3064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3375,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 314266,145 ops/s
[info]                  ·gc.alloc.rate:                   611,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              3064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3380,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 315181,645 ops/s
[info]                  ·gc.alloc.rate:                   613,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              3064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3370,959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   316600,632 ±(99.9%) 10619,556 ops/s [Average]
[info]   (min, avg, max) = (314266,145, 316600,632, 320119,302), stdev = 2757,865
[info]   CI (99.9%): [305981,076, 327220,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   616,314 ±(99.9%) 20,744 MB/sec [Average]
[info]   (min, avg, max) = (611,794, 616,314, 623,178), stdev = 5,387
[info]   CI (99.9%): [595,570, 637,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3064,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3064,001, 3064,001, 3064,001), stdev = 0,001
[info]   CI (99.9%): [3064,001, 3064,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,752 ±(99.9%) 1161,857 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,752, 675,074), stdev = 301,731
[info]   CI (99.9%): [≈ 0, 1701,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2690,972 ±(99.9%) 5793,106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2690,972, 3380,921), stdev = 1504,451
[info]   CI (99.9%): [≈ 0, 8484,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,271), stdev = 0,114
[info]   CI (99.9%): [≈ 0, 0,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,329 ±(99.9%) 2,171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,329, 1,335), stdev = 0,564
[info]   CI (99.9%): [≈ 0, 2,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78,31% complete, ETA 00:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711639,089 ops/s
[info] # Warmup Iteration   2: 760763,361 ops/s
[info] # Warmup Iteration   3: 780090,975 ops/s
[info] # Warmup Iteration   4: 778147,838 ops/s
[info] # Warmup Iteration   5: 782048,515 ops/s
[info] Iteration   1: 785870,902 ops/s
[info]                  ·gc.alloc.rate:                   591,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1024,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 785159,142 ops/s
[info]                  ·gc.alloc.rate:                   590,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1354,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 786286,682 ops/s
[info]                  ·gc.alloc.rate:                   591,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1352,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 786347,257 ops/s
[info]                  ·gc.alloc.rate:               591,614 MB/sec
[info]                  ·gc.alloc.rate.norm:          1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1347,926 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 780096,400 ops/s
[info]                  ·gc.alloc.rate:                   586,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1358,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   784752,077 ±(99.9%) 10186,465 ops/s [Average]
[info]   (min, avg, max) = (780096,400, 784752,077, 786347,257), stdev = 2645,393
[info]   CI (99.9%): [774565,611, 794938,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   590,364 ±(99.9%) 7,843 MB/sec [Average]
[info]   (min, avg, max) = (586,771, 590,364, 591,614), stdev = 2,037
[info]   CI (99.9%): [582,521, 598,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1184,001, 1184,001, 1184,001), stdev = 0,001
[info]   CI (99.9%): [1184,000, 1184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,895 ±(99.9%) 280,599 MB/sec [Average]
[info]   (min, avg, max) = (511,553, 641,895, 675,589), stdev = 72,871
[info]   CI (99.9%): [361,296, 922,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1287,449 ±(99.9%) 566,198 B/op [Average]
[info]   (min, avg, max) = (1024,508, 1287,449, 1358,719), stdev = 147,040
[info]   CI (99.9%): [721,251, 1853,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,628 ±(99.9%) 5,178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,628, 3,032), stdev = 1,345
[info]   CI (99.9%): [≈ 0, 5,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,258 ±(99.9%) 10,379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,258, 6,078), stdev = 2,695
[info]   CI (99.9%): [≈ 0, 11,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78,51% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4351606,423 ops/s
[info] # Warmup Iteration   2: 4872987,293 ops/s
[info] # Warmup Iteration   3: 4841444,482 ops/s
[info] # Warmup Iteration   4: 4856447,069 ops/s
[info] # Warmup Iteration   5: 4855740,690 ops/s
[info] Iteration   1: 4829085,926 ops/s
[info]                  ·gc.alloc.rate:                   1546,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     657,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4872388,969 ops/s
[info]                  ·gc.alloc.rate:               1560,285 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 434,546 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 4856298,446 ops/s
[info]                  ·gc.alloc.rate:                   1555,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 4868108,247 ops/s
[info]                  ·gc.alloc.rate:                   1558,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4857292,546 ops/s
[info]                  ·gc.alloc.rate:                   1555,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4856634,827 ±(99.9%) 64986,963 ops/s [Average]
[info]   (min, avg, max) = (4829085,926, 4856634,827, 4872388,969), stdev = 16876,908
[info]   CI (99.9%): [4791647,864, 4921621,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1555,210 ±(99.9%) 20,777 MB/sec [Average]
[info]   (min, avg, max) = (1546,450, 1555,210, 1560,285), stdev = 5,396
[info]   CI (99.9%): [1534,433, 1575,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1615,935 ±(99.9%) 1417,354 MB/sec [Average]
[info]   (min, avg, max) = (1345,268, 1615,935, 2021,647), stdev = 368,082
[info]   CI (99.9%): [198,581, 3033,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   523,825 ±(99.9%) 462,593 B/op [Average]
[info]   (min, avg, max) = (434,546, 523,825, 657,236), stdev = 120,134
[info]   CI (99.9%): [61,232, 986,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78,71% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8830410,463 ops/s
[info] # Warmup Iteration   2: 9424954,458 ops/s
[info] # Warmup Iteration   3: 9435553,041 ops/s
[info] # Warmup Iteration   4: 9438744,617 ops/s
[info] # Warmup Iteration   5: 9465539,762 ops/s
[info] Iteration   1: 9367474,040 ops/s
[info]                  ·gc.alloc.rate:                   761,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9291204,434 ops/s
[info]                  ·gc.alloc.rate:               755,641 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113,969 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   3: 9339782,356 ops/s
[info]                  ·gc.alloc.rate:               759,551 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113,368 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 9373222,100 ops/s
[info]                  ·gc.alloc.rate:                   762,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9401157,051 ops/s
[info]                  ·gc.alloc.rate:               764,457 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 112,516 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9354567,996 ±(99.9%) 160145,103 ops/s [Average]
[info]   (min, avg, max) = (9291204,434, 9354567,996, 9401157,051), stdev = 41589,175
[info]   CI (99.9%): [9194422,893, 9514713,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   760,764 ±(99.9%) 12,911 MB/sec [Average]
[info]   (min, avg, max) = (755,641, 760,764, 764,457), stdev = 3,353
[info]   CI (99.9%): [747,854, 773,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (128,000, 128,000, 128,000), stdev = 0,001
[info]   CI (99.9%): [128,000, 128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   673,007 ±(99.9%) 5,381 MB/sec [Average]
[info]   (min, avg, max) = (671,982, 673,007, 675,420), stdev = 1,397
[info]   CI (99.9%): [667,626, 678,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   113,237 ±(99.9%) 2,178 B/op [Average]
[info]   (min, avg, max) = (112,516, 113,237, 113,969), stdev = 0,566
[info]   CI (99.9%): [111,059, 115,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,010), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 4,000), stdev = 1,643
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78,92% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57333,344 ops/s
[info] # Warmup Iteration   2: 211725,740 ops/s
[info] # Warmup Iteration   3: 212851,449 ops/s
[info] # Warmup Iteration   4: 216468,025 ops/s
[info] # Warmup Iteration   5: 212844,363 ops/s
[info] Iteration   1: 213481,073 ops/s
[info]                  ·gc.alloc.rate:                   1443,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9963,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 214668,667 ops/s
[info]                  ·gc.alloc.rate:                   1451,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9918,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 214445,081 ops/s
[info]                  ·gc.alloc.rate:                   1449,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9935,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,458 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 213409,430 ops/s
[info]                  ·gc.alloc.rate:                   1442,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14989,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,461 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 214738,186 ops/s
[info]                  ·gc.alloc.rate:               1451,603 MB/sec
[info]                  ·gc.alloc.rate.norm:          10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9939,340 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   214148,487 ±(99.9%) 2508,797 ops/s [Average]
[info]   (min, avg, max) = (213409,430, 214148,487, 214738,186), stdev = 651,527
[info]   CI (99.9%): [211639,691, 216657,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1447,696 ±(99.9%) 16,800 MB/sec [Average]
[info]   (min, avg, max) = (1442,781, 1447,696, 1451,603), stdev = 4,363
[info]   CI (99.9%): [1430,896, 1464,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10640,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10640,002, 10640,002, 10640,002), stdev = 0,001
[info]   CI (99.9%): [10640,002, 10640,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1489,345 ±(99.9%) 1169,473 MB/sec [Average]
[info]   (min, avg, max) = (1351,436, 1489,345, 2032,627), stdev = 303,708
[info]   CI (99.9%): [319,872, 2658,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10949,560 ±(99.9%) 8697,359 B/op [Average]
[info]   (min, avg, max) = (9918,949, 10949,560, 14989,903), stdev = 2258,676
[info]   CI (99.9%): [2252,201, 19646,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,245 ±(99.9%) 0,791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,245, 0,461), stdev = 0,205
[info]   CI (99.9%): [≈ 0, 1,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79,12% complete, ETA 00:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234751,224 ops/s
[info] # Warmup Iteration   2: 325505,318 ops/s
[info] # Warmup Iteration   3: 333406,053 ops/s
[info] # Warmup Iteration   4: 334330,404 ops/s
[info] # Warmup Iteration   5: 331502,066 ops/s
[info] Iteration   1: 334119,000 ops/s
[info]                  ·gc.alloc.rate:                   660,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3178,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 333448,871 ops/s
[info]                  ·gc.alloc.rate:                   659,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3185,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 333884,885 ops/s
[info]                  ·gc.alloc.rate:               660,147 MB/sec
[info]                  ·gc.alloc.rate.norm:          3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3171,233 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 332042,692 ops/s
[info]                  ·gc.alloc.rate:               656,593 MB/sec
[info]                  ·gc.alloc.rate.norm:          3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3188,821 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 333948,320 ops/s
[info]                  ·gc.alloc.rate:                   660,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3167,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   333488,753 ±(99.9%) 3254,885 ops/s [Average]
[info]   (min, avg, max) = (332042,692, 333488,753, 334119,000), stdev = 845,283
[info]   CI (99.9%): [330233,868, 336743,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   659,404 ±(99.9%) 6,328 MB/sec [Average]
[info]   (min, avg, max) = (656,593, 659,404, 660,684), stdev = 1,643
[info]   CI (99.9%): [653,075, 665,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3112,001, 3112,001, 3112,001), stdev = 0,001
[info]   CI (99.9%): [3112,001, 3112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   673,446 ±(99.9%) 5,083 MB/sec [Average]
[info]   (min, avg, max) = (672,011, 673,446, 674,855), stdev = 1,320
[info]   CI (99.9%): [668,363, 678,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3178,285 ±(99.9%) 34,718 B/op [Average]
[info]   (min, avg, max) = (3167,467, 3178,285, 3188,821), stdev = 9,016
[info]   CI (99.9%): [3143,566, 3213,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,658 ±(99.9%) 5,489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,658, 3,208), stdev = 1,426
[info]   CI (99.9%): [≈ 0, 6,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,101 ±(99.9%) 25,856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,101, 15,110), stdev = 6,715
[info]   CI (99.9%): [≈ 0, 28,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,32% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 958214,521 ops/s
[info] # Warmup Iteration   2: 1013014,803 ops/s
[info] # Warmup Iteration   3: 1012311,447 ops/s
[info] # Warmup Iteration   4: 1010414,221 ops/s
[info] # Warmup Iteration   5: 1010976,886 ops/s
[info] Iteration   1: 1013313,849 ops/s
[info]                  ·gc.alloc.rate:      56,654 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1015371,769 ops/s
[info]                  ·gc.alloc.rate:      56,777 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1013466,921 ops/s
[info]                  ·gc.alloc.rate:      56,663 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 996488,767 ops/s
[info]                  ·gc.alloc.rate:               55,719 MB/sec
[info]                  ·gc.alloc.rate.norm:          88,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 807,988 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1016875,635 ops/s
[info]                  ·gc.alloc.rate:      56,867 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1011103,388 ±(99.9%) 31962,518 ops/s [Average]
[info]   (min, avg, max) = (996488,767, 1011103,388, 1016875,635), stdev = 8300,564
[info]   CI (99.9%): [979140,870, 1043065,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   56,536 ±(99.9%) 1,790 MB/sec [Average]
[info]   (min, avg, max) = (55,719, 56,536, 56,867), stdev = 0,465
[info]   CI (99.9%): [54,746, 58,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (88,000, 88,000, 88,000), stdev = 0,001
[info]   CI (99.9%): [88,000, 88,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102,319 ±(99.9%) 880,996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,319, 511,594), stdev = 228,792
[info]   CI (99.9%): [≈ 0, 983,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   161,598 ±(99.9%) 1391,404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 161,598, 807,988), stdev = 361,343
[info]   CI (99.9%): [≈ 0, 1553,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79,52% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40036,523 ops/s
[info] # Warmup Iteration   2: 71835,467 ops/s
[info] # Warmup Iteration   3: 71937,667 ops/s
[info] # Warmup Iteration   4: 72500,308 ops/s
[info] # Warmup Iteration   5: 72777,314 ops/s
[info] Iteration   1: 72675,139 ops/s
[info]                  ·gc.alloc.rate:                   3375,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73562,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,803 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 71670,762 ops/s
[info]                  ·gc.alloc.rate:                   3328,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74672,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,914 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 72364,086 ops/s
[info]                  ·gc.alloc.rate:                   3359,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74013,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,811 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 72209,987 ops/s
[info]                  ·gc.alloc.rate:                   3353,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74184,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,361 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 72861,572 ops/s
[info]                  ·gc.alloc.rate:                   3383,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73564,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,349 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   72356,309 ±(99.9%) 1773,375 ops/s [Average]
[info]   (min, avg, max) = (71670,762, 72356,309, 72861,572), stdev = 460,540
[info]   CI (99.9%): [70582,934, 74129,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3359,933 ±(99.9%) 82,110 MB/sec [Average]
[info]   (min, avg, max) = (3328,353, 3359,933, 3383,113), stdev = 21,324
[info]   CI (99.9%): [3277,822, 3442,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73080,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (73080,006, 73080,006, 73080,006), stdev = 0,001
[info]   CI (99.9%): [73080,005, 73080,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3402,106 ±(99.9%) 11,592 MB/sec [Average]
[info]   (min, avg, max) = (3397,658, 3402,106, 3405,535), stdev = 3,010
[info]   CI (99.9%): [3390,514, 3413,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73999,644 ±(99.9%) 1793,324 B/op [Average]
[info]   (min, avg, max) = (73562,896, 73999,644, 74672,585), stdev = 465,721
[info]   CI (99.9%): [72206,320, 75792,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,448 ±(99.9%) 1,441 B/op [Average]
[info]   (min, avg, max) = (0,914, 1,448, 1,811), stdev = 0,374
[info]   CI (99.9%): [0,007, 2,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,72% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 897412,372 ops/s
[info] # Warmup Iteration   2: 1206054,024 ops/s
[info] # Warmup Iteration   3: 1205897,701 ops/s
[info] # Warmup Iteration   4: 1201483,743 ops/s
[info] # Warmup Iteration   5: 1203626,980 ops/s
[info] Iteration   1: 1205330,673 ops/s
[info]                  ·gc.alloc.rate:               692,311 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 880,627 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1203425,670 ops/s
[info]                  ·gc.alloc.rate:                   691,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     882,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,109 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1211070,476 ops/s
[info]                  ·gc.alloc.rate:               695,612 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 877,306 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1205773,598 ops/s
[info]                  ·gc.alloc.rate:                   692,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     882,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1201287,063 ops/s
[info]                  ·gc.alloc.rate:                   689,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     885,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1205377,496 ±(99.9%) 14031,143 ops/s [Average]
[info]   (min, avg, max) = (1201287,063, 1205377,496, 1211070,476), stdev = 3643,843
[info]   CI (99.9%): [1191346,353, 1219408,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   692,289 ±(99.9%) 8,245 MB/sec [Average]
[info]   (min, avg, max) = (689,927, 692,289, 695,612), stdev = 2,141
[info]   CI (99.9%): [684,044, 700,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,155 ±(99.9%) 2,156 MB/sec [Average]
[info]   (min, avg, max) = (674,411, 675,155, 675,748), stdev = 0,560
[info]   CI (99.9%): [672,999, 677,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   881,633 ±(99.9%) 11,398 B/op [Average]
[info]   (min, avg, max) = (877,306, 881,633, 885,317), stdev = 2,960
[info]   CI (99.9%): [870,235, 893,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,033 ±(99.9%) 0,172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,109), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,92% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1535685,897 ops/s
[info] # Warmup Iteration   2: 1557442,394 ops/s
[info] # Warmup Iteration   3: 1613382,351 ops/s
[info] # Warmup Iteration   4: 1609259,426 ops/s
[info] # Warmup Iteration   5: 1607333,770 ops/s
[info] Iteration   1: 1611287,460 ops/s
[info]                  ·gc.alloc.rate:                   450,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     499,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1614040,942 ops/s
[info]                  ·gc.alloc.rate:               451,226 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 498,853 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1615722,056 ops/s
[info]                  ·gc.alloc.rate:      451,666 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1609024,127 ops/s
[info]                  ·gc.alloc.rate:                   449,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     660,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1612236,399 ops/s
[info]                  ·gc.alloc.rate:                   450,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     658,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1612462,197 ±(99.9%) 9886,942 ops/s [Average]
[info]   (min, avg, max) = (1609024,127, 1612462,197, 1615722,056), stdev = 2567,608
[info]   CI (99.9%): [1602575,254, 1622349,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   450,768 ±(99.9%) 2,717 MB/sec [Average]
[info]   (min, avg, max) = (449,851, 450,768, 451,666), stdev = 0,705
[info]   CI (99.9%): [448,051, 453,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,511 ±(99.9%) 1068,657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,511, 674,790), stdev = 277,527
[info]   CI (99.9%): [≈ 0, 1543,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   463,447 ±(99.9%) 1044,136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 463,447, 660,014), stdev = 271,159
[info]   CI (99.9%): [≈ 0, 1507,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,635 ±(99.9%) 5,348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,635, 3,120), stdev = 1,389
[info]   CI (99.9%): [≈ 0, 5,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,621 ±(99.9%) 5,231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,621, 3,051), stdev = 1,359
[info]   CI (99.9%): [≈ 0, 5,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80,12% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 994951,227 ops/s
[info] # Warmup Iteration   2: 1028574,261 ops/s
[info] # Warmup Iteration   3: 1028778,655 ops/s
[info] # Warmup Iteration   4: 1028996,844 ops/s
[info] # Warmup Iteration   5: 1028591,292 ops/s
[info] Iteration   1: 1030694,106 ops/s
[info]                  ·gc.alloc.rate:      10,478 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1029065,269 ops/s
[info]                  ·gc.alloc.rate:      10,462 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1031370,309 ops/s
[info]                  ·gc.alloc.rate:      10,485 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1029138,989 ops/s
[info]                  ·gc.alloc.rate:      10,463 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1028429,564 ops/s
[info]                  ·gc.alloc.rate:      10,454 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1029739,648 ±(99.9%) 4755,953 ops/s [Average]
[info]   (min, avg, max) = (1028429,564, 1029739,648, 1031370,309), stdev = 1235,106
[info]   CI (99.9%): [1024983,695, 1034495,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   10,468 ±(99.9%) 0,048 MB/sec [Average]
[info]   (min, avg, max) = (10,454, 10,468, 10,485), stdev = 0,012
[info]   CI (99.9%): [10,420, 10,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,32% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29780,395 ops/s
[info] # Warmup Iteration   2: 49379,846 ops/s
[info] # Warmup Iteration   3: 49551,249 ops/s
[info] # Warmup Iteration   4: 49525,190 ops/s
[info] # Warmup Iteration   5: 49541,582 ops/s
[info] Iteration   1: 48818,408 ops/s
[info]                  ·gc.alloc.rate:                   2057,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65533,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,684 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 49773,297 ops/s
[info]                  ·gc.alloc.rate:                   2097,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64313,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,316 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 49410,676 ops/s
[info]                  ·gc.alloc.rate:                   2081,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64872,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,989 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 49616,974 ops/s
[info]                  ·gc.alloc.rate:                   2090,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64643,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,660 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 49674,381 ops/s
[info]                  ·gc.alloc.rate:                   2092,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64599,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,319 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   49458,747 ±(99.9%) 1469,841 ops/s [Average]
[info]   (min, avg, max) = (48818,408, 49458,747, 49773,297), stdev = 381,713
[info]   CI (99.9%): [47988,906, 50928,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2083,871 ±(99.9%) 61,689 MB/sec [Average]
[info]   (min, avg, max) = (2057,015, 2083,871, 2097,161), stdev = 16,020
[info]   CI (99.9%): [2022,182, 2145,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66312,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66312,008, 66312,009, 66312,010), stdev = 0,001
[info]   CI (99.9%): [66312,006, 66312,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,030 ±(99.9%) 9,789 MB/sec [Average]
[info]   (min, avg, max) = (2032,860, 2036,030, 2038,692), stdev = 2,542
[info]   CI (99.9%): [2026,241, 2045,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64792,433 ±(99.9%) 1769,437 B/op [Average]
[info]   (min, avg, max) = (64313,083, 64792,433, 65533,316), stdev = 459,517
[info]   CI (99.9%): [63022,996, 66561,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,594 ±(99.9%) 2,964 B/op [Average]
[info]   (min, avg, max) = (0,660, 1,594, 2,684), stdev = 0,770
[info]   CI (99.9%): [≈ 0, 4,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,52% complete, ETA 00:25:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277692,684 ops/s
[info] # Warmup Iteration   2: 297399,481 ops/s
[info] # Warmup Iteration   3: 298417,784 ops/s
[info] # Warmup Iteration   4: 299549,805 ops/s
[info] # Warmup Iteration   5: 298615,879 ops/s
[info] Iteration   1: 299007,091 ops/s
[info]                  ·gc.alloc.rate:               1170,062 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3537,571 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 297194,297 ops/s
[info]                  ·gc.alloc.rate:                   1163,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7118,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,331 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 299865,650 ops/s
[info]                  ·gc.alloc.rate:                   1173,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7054,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 299311,371 ops/s
[info]                  ·gc.alloc.rate:               1171,518 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7071,342 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 300388,808 ops/s
[info]                  ·gc.alloc.rate:                   1175,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3524,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   299153,443 ±(99.9%) 4683,710 ops/s [Average]
[info]   (min, avg, max) = (297194,297, 299153,443, 300388,808), stdev = 1216,345
[info]   CI (99.9%): [294469,733, 303837,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1170,773 ±(99.9%) 18,307 MB/sec [Average]
[info]   (min, avg, max) = (1163,124, 1170,773, 1175,541), stdev = 4,754
[info]   CI (99.9%): [1152,466, 1189,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6160,001, 6160,001, 6160,002), stdev = 0,001
[info]   CI (99.9%): [6160,001, 6160,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,519 ±(99.9%) 1417,392 MB/sec [Average]
[info]   (min, avg, max) = (671,944, 1075,519, 1344,838), stdev = 368,092
[info]   CI (99.9%): [≈ 0, 2492,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5661,354 ±(99.9%) 7488,479 B/op [Average]
[info]   (min, avg, max) = (3524,754, 5661,354, 7118,293), stdev = 1944,734
[info]   CI (99.9%): [≈ 0, 13149,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,153 ±(99.9%) 0,568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,153, 0,331), stdev = 0,147
[info]   CI (99.9%): [≈ 0, 0,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,72% complete, ETA 00:25:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11889,470 ops/s
[info] # Warmup Iteration   2: 21859,875 ops/s
[info] # Warmup Iteration   3: 21779,048 ops/s
[info] # Warmup Iteration   4: 21754,809 ops/s
[info] # Warmup Iteration   5: 21908,618 ops/s
[info] Iteration   1: 21948,887 ops/s
[info]                  ·gc.alloc.rate:                   1198,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96862,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,478 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 21926,712 ops/s
[info]                  ·gc.alloc.rate:               1197,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          85920,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48525,265 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 21943,486 ops/s
[info]                  ·gc.alloc.rate:                   1197,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97027,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,479 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21950,427 ops/s
[info]                  ·gc.alloc.rate:                   1198,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97068,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,492 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21942,077 ops/s
[info]                  ·gc.alloc.rate:               1197,744 MB/sec
[info]                  ·gc.alloc.rate.norm:          85920,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 97175,305 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   21942,318 ±(99.9%) 36,219 ops/s [Average]
[info]   (min, avg, max) = (21926,712, 21942,318, 21950,427), stdev = 9,406
[info]   CI (99.9%): [21906,099, 21978,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1197,843 ±(99.9%) 2,028 MB/sec [Average]
[info]   (min, avg, max) = (1197,020, 1197,843, 1198,365), stdev = 0,527
[info]   CI (99.9%): [1195,816, 1199,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85920,021 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (85920,019, 85920,021, 85920,026), stdev = 0,003
[info]   CI (99.9%): [85920,008, 85920,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1217,617 ±(99.9%) 1165,790 MB/sec [Average]
[info]   (min, avg, max) = (676,044, 1217,617, 1354,645), stdev = 302,752
[info]   CI (99.9%): [51,827, 2383,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   87331,712 ±(99.9%) 83534,927 B/op [Average]
[info]   (min, avg, max) = (48525,265, 87331,712, 97175,305), stdev = 21693,755
[info]   CI (99.9%): [3796,784, 170866,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,090 ±(99.9%) 8,717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,090, 4,479), stdev = 2,264
[info]   CI (99.9%): [≈ 0, 10,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,92% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99555,888 ops/s
[info] # Warmup Iteration   2: 147463,693 ops/s
[info] # Warmup Iteration   3: 148967,000 ops/s
[info] # Warmup Iteration   4: 147925,941 ops/s
[info] # Warmup Iteration   5: 148192,676 ops/s
[info] Iteration   1: 148095,964 ops/s
[info]                  ·gc.alloc.rate:                   1809,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21579,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,664 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 148878,186 ops/s
[info]                  ·gc.alloc.rate:                   1818,972 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21488,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,440 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 148972,090 ops/s
[info]                  ·gc.alloc.rate:                   1820,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14328,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 148753,629 ops/s
[info]                  ·gc.alloc.rate:                   1817,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21544,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,440 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 148625,628 ops/s
[info]                  ·gc.alloc.rate:                   1815,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21577,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,441 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   148665,099 ±(99.9%) 1324,083 ops/s [Average]
[info]   (min, avg, max) = (148095,964, 148665,099, 148972,090), stdev = 343,860
[info]   CI (99.9%): [147341,017, 149989,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1816,441 ±(99.9%) 16,129 MB/sec [Average]
[info]   (min, avg, max) = (1809,659, 1816,441, 1820,362), stdev = 4,189
[info]   CI (99.9%): [1800,311, 1832,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19232,003, 19232,003, 19232,003), stdev = 0,001
[info]   CI (99.9%): [19232,002, 19232,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1898,470 ±(99.9%) 1167,178 MB/sec [Average]
[info]   (min, avg, max) = (1356,267, 1898,470, 2036,933), stdev = 303,112
[info]   CI (99.9%): [731,292, 3065,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20103,668 ±(99.9%) 12431,510 B/op [Average]
[info]   (min, avg, max) = (14328,866, 20103,668, 21579,439), stdev = 3228,424
[info]   CI (99.9%): [7672,158, 32535,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,441 ±(99.9%) 0,604 B/op [Average]
[info]   (min, avg, max) = (0,220, 0,441, 0,664), stdev = 0,157
[info]   CI (99.9%): [≈ 0, 1,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,12% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 364100,607 ops/s
[info] # Warmup Iteration   2: 387908,917 ops/s
[info] # Warmup Iteration   3: 389827,301 ops/s
[info] # Warmup Iteration   4: 390885,977 ops/s
[info] # Warmup Iteration   5: 383949,918 ops/s
[info] Iteration   1: 384049,495 ops/s
[info]                  ·gc.alloc.rate:               1829,056 MB/sec
[info]                  ·gc.alloc.rate.norm:          7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5511,207 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 388820,023 ops/s
[info]                  ·gc.alloc.rate:                   1851,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8174,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 386664,565 ops/s
[info]                  ·gc.alloc.rate:                   1841,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8234,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 389736,375 ops/s
[info]                  ·gc.alloc.rate:                   1856,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8179,980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 390108,825 ops/s
[info]                  ·gc.alloc.rate:                   1857,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5458,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   387875,857 ±(99.9%) 9712,366 ops/s [Average]
[info]   (min, avg, max) = (384049,495, 387875,857, 390108,825), stdev = 2522,271
[info]   CI (99.9%): [378163,491, 397588,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1847,302 ±(99.9%) 46,292 MB/sec [Average]
[info]   (min, avg, max) = (1829,056, 1847,302, 1857,730), stdev = 12,022
[info]   CI (99.9%): [1801,010, 1893,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7496,001, 7496,001, 7496,001), stdev = 0,001
[info]   CI (99.9%): [7496,001, 7496,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1753,122 ±(99.9%) 1421,532 MB/sec [Average]
[info]   (min, avg, max) = (1344,758, 1753,122, 2025,755), stdev = 369,167
[info]   CI (99.9%): [331,590, 3174,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7111,675 ±(99.9%) 5720,068 B/op [Average]
[info]   (min, avg, max) = (5458,268, 7111,675, 8234,088), stdev = 1485,483
[info]   CI (99.9%): [1391,607, 12831,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,118 ±(99.9%) 0,370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,118, 0,253), stdev = 0,096
[info]   CI (99.9%): [≈ 0, 0,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81,33% complete, ETA 00:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431334,671 ops/s
[info] # Warmup Iteration   2: 457004,778 ops/s
[info] # Warmup Iteration   3: 463202,648 ops/s
[info] # Warmup Iteration   4: 460412,131 ops/s
[info] # Warmup Iteration   5: 461146,233 ops/s
[info] Iteration   1: 460158,872 ops/s
[info]                  ·gc.alloc.rate:                   1576,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4597,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 461035,524 ops/s
[info]                  ·gc.alloc.rate:               1579,425 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4590,850 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 462144,611 ops/s
[info]                  ·gc.alloc.rate:                   1583,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6878,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 460233,100 ops/s
[info]                  ·gc.alloc.rate:                   1576,776 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4610,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 459662,790 ops/s
[info]                  ·gc.alloc.rate:                   1574,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4620,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   460646,979 ±(99.9%) 3739,311 ops/s [Average]
[info]   (min, avg, max) = (459662,790, 460646,979, 462144,611), stdev = 971,087
[info]   CI (99.9%): [456907,669, 464386,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1578,093 ±(99.9%) 12,902 MB/sec [Average]
[info]   (min, avg, max) = (1574,621, 1578,093, 1583,239), stdev = 3,351
[info]   CI (99.9%): [1565,191, 1590,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,001, 5392,001, 5392,001), stdev = 0,001
[info]   CI (99.9%): [5392,001, 5392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1481,189 ±(99.9%) 1158,967 MB/sec [Average]
[info]   (min, avg, max) = (1344,081, 1481,189, 2019,584), stdev = 300,980
[info]   CI (99.9%): [322,222, 2640,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   5059,428 ±(99.9%) 3914,972 B/op [Average]
[info]   (min, avg, max) = (4590,850, 5059,428, 6878,050), stdev = 1016,706
[info]   CI (99.9%): [1144,456, 8974,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,156 ±(99.9%) 0,357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,156, 0,214), stdev = 0,093
[info]   CI (99.9%): [≈ 0, 0,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81,53% complete, ETA 00:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13578,234 ops/s
[info] # Warmup Iteration   2: 21893,106 ops/s
[info] # Warmup Iteration   3: 21782,388 ops/s
[info] # Warmup Iteration   4: 21905,974 ops/s
[info] # Warmup Iteration   5: 21980,639 ops/s
[info] Iteration   1: 22074,543 ops/s
[info]                  ·gc.alloc.rate:      553,952 MB/sec
[info]                  ·gc.alloc.rate.norm: 39496,025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22022,561 ops/s
[info]                  ·gc.alloc.rate:                   552,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48194,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,337 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 22176,211 ops/s
[info]                  ·gc.alloc.rate:                   556,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47862,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,954 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22117,463 ops/s
[info]                  ·gc.alloc.rate:                   555,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48037,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,481 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 22130,484 ops/s
[info]                  ·gc.alloc.rate:               555,260 MB/sec
[info]                  ·gc.alloc.rate.norm:          39496,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48007,037 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   22104,252 ±(99.9%) 224,502 ops/s [Average]
[info]   (min, avg, max) = (22022,561, 22104,252, 22176,211), stdev = 58,303
[info]   CI (99.9%): [21879,750, 22328,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   554,682 ±(99.9%) 5,565 MB/sec [Average]
[info]   (min, avg, max) = (552,662, 554,682, 556,492), stdev = 1,445
[info]   CI (99.9%): [549,116, 560,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39496,020 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (39496,018, 39496,020, 39496,025), stdev = 0,003
[info]   CI (99.9%): [39496,010, 39496,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   539,749 ±(99.9%) 1161,851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,749, 675,076), stdev = 301,729
[info]   CI (99.9%): [≈ 0, 1701,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   38420,325 ±(99.9%) 82703,896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38420,325, 48194,798), stdev = 21477,939
[info]   CI (99.9%): [≈ 0, 121124,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,271), stdev = 0,115
[info]   CI (99.9%): [≈ 0, 0,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,755 ±(99.9%) 31,743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,755, 19,337), stdev = 8,244
[info]   CI (99.9%): [≈ 0, 36,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81,73% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65555,812 ops/s
[info] # Warmup Iteration   2: 82219,593 ops/s
[info] # Warmup Iteration   3: 83173,889 ops/s
[info] # Warmup Iteration   4: 83790,859 ops/s
[info] # Warmup Iteration   5: 83426,501 ops/s
[info] Iteration   1: 83524,622 ops/s
[info]                  ·gc.alloc.rate:                   1727,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37991,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,784 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 83771,122 ops/s
[info]                  ·gc.alloc.rate:                   1731,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25266,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 83731,202 ops/s
[info]                  ·gc.alloc.rate:                   1731,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37971,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,174 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 83424,833 ops/s
[info]                  ·gc.alloc.rate:                   1725,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38169,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,393 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 83777,596 ops/s
[info]                  ·gc.alloc.rate:                   1732,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25376,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   83645,875 ±(99.9%) 620,538 ops/s [Average]
[info]   (min, avg, max) = (83424,833, 83645,875, 83777,596), stdev = 161,152
[info]   CI (99.9%): [83025,337, 84266,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1729,579 ±(99.9%) 12,386 MB/sec [Average]
[info]   (min, avg, max) = (1725,170, 1729,579, 1732,154), stdev = 3,217
[info]   CI (99.9%): [1717,193, 1741,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32544,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32544,005, 32544,005, 32544,005), stdev = 0,001
[info]   CI (99.9%): [32544,004, 32544,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,037 ±(99.9%) 1417,993 MB/sec [Average]
[info]   (min, avg, max) = (1344,660, 1751,037, 2023,377), stdev = 368,248
[info]   CI (99.9%): [333,044, 3169,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32955,135 ±(99.9%) 26835,739 B/op [Average]
[info]   (min, avg, max) = (25266,439, 32955,135, 38169,448), stdev = 6969,156
[info]   CI (99.9%): [6119,395, 59790,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,627 ±(99.9%) 1,348 B/op [Average]
[info]   (min, avg, max) = (0,391, 0,627, 1,174), stdev = 0,350
[info]   CI (99.9%): [≈ 0, 1,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,93% complete, ETA 00:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94442,095 ops/s
[info] # Warmup Iteration   2: 145636,559 ops/s
[info] # Warmup Iteration   3: 149855,239 ops/s
[info] # Warmup Iteration   4: 148301,564 ops/s
[info] # Warmup Iteration   5: 148685,223 ops/s
[info] Iteration   1: 149139,543 ops/s
[info]                  ·gc.alloc.rate:               733,814 MB/sec
[info]                  ·gc.alloc.rate.norm:          7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7117,032 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 148347,174 ops/s
[info]                  ·gc.alloc.rate:                   729,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7162,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,663 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 149115,215 ops/s
[info]                  ·gc.alloc.rate:               733,620 MB/sec
[info]                  ·gc.alloc.rate.norm:          7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7125,207 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 148902,573 ops/s
[info]                  ·gc.alloc.rate:                   732,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7142,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 148397,874 ops/s
[info]                  ·gc.alloc.rate:               730,230 MB/sec
[info]                  ·gc.alloc.rate.norm:          7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7166,593 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   148780,476 ±(99.9%) 1478,895 ops/s [Average]
[info]   (min, avg, max) = (148347,174, 148780,476, 149139,543), stdev = 384,064
[info]   CI (99.9%): [147301,580, 150259,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   732,049 ±(99.9%) 7,200 MB/sec [Average]
[info]   (min, avg, max) = (729,886, 732,049, 733,814), stdev = 1,870
[info]   CI (99.9%): [724,849, 739,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7744,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7744,003, 7744,003, 7744,003), stdev = 0,001
[info]   CI (99.9%): [7744,002, 7744,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,202 ±(99.9%) 2,251 MB/sec [Average]
[info]   (min, avg, max) = (674,403, 675,202, 675,782), stdev = 0,585
[info]   CI (99.9%): [672,951, 677,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7142,690 ±(99.9%) 84,303 B/op [Average]
[info]   (min, avg, max) = (7117,032, 7142,690, 7166,593), stdev = 21,893
[info]   CI (99.9%): [7058,387, 7226,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,177 ±(99.9%) 1,109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,177, 0,663), stdev = 0,288
[info]   CI (99.9%): [≈ 0, 1,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,13% complete, ETA 00:23:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227579,618 ops/s
[info] # Warmup Iteration   2: 249743,831 ops/s
[info] # Warmup Iteration   3: 249861,546 ops/s
[info] # Warmup Iteration   4: 251358,346 ops/s
[info] # Warmup Iteration   5: 250196,783 ops/s
[info] Iteration   1: 250982,259 ops/s
[info]                  ·gc.alloc.rate:               1033,294 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4218,630 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 251000,368 ops/s
[info]                  ·gc.alloc.rate:                   1033,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8428,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,261 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 251810,853 ops/s
[info]                  ·gc.alloc.rate:               1036,774 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4200,515 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 252025,924 ops/s
[info]                  ·gc.alloc.rate:                   1037,650 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8394,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,130 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 251006,064 ops/s
[info]                  ·gc.alloc.rate:               1033,454 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4214,185 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   251365,094 ±(99.9%) 1967,117 ops/s [Average]
[info]   (min, avg, max) = (250982,259, 251365,094, 252025,924), stdev = 510,854
[info]   CI (99.9%): [249397,976, 253332,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1034,913 ±(99.9%) 8,172 MB/sec [Average]
[info]   (min, avg, max) = (1033,294, 1034,913, 1037,650), stdev = 2,122
[info]   CI (99.9%): [1026,741, 1043,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6480,002, 6480,002, 6480,002), stdev = 0,001
[info]   CI (99.9%): [6480,001, 6480,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,034 ±(99.9%) 1417,031 MB/sec [Average]
[info]   (min, avg, max) = (672,065, 941,034, 1344,199), stdev = 367,999
[info]   CI (99.9%): [≈ 0, 2358,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5891,220 ±(99.9%) 8858,891 B/op [Average]
[info]   (min, avg, max) = (4200,515, 5891,220, 8428,403), stdev = 2300,626
[info]   CI (99.9%): [≈ 0, 14750,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,078 ±(99.9%) 0,449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,078, 0,261), stdev = 0,117
[info]   CI (99.9%): [≈ 0, 0,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82,33% complete, ETA 00:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12197,983 ops/s
[info] # Warmup Iteration   2: 26819,969 ops/s
[info] # Warmup Iteration   3: 26978,920 ops/s
[info] # Warmup Iteration   4: 26851,092 ops/s
[info] # Warmup Iteration   5: 26829,608 ops/s
[info] Iteration   1: 27048,698 ops/s
[info]                  ·gc.alloc.rate:                   1547,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              90064,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78680,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,634 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 27121,088 ops/s
[info]                  ·gc.alloc.rate:                   1551,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              90064,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117837,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,624 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 27056,712 ops/s
[info]                  ·gc.alloc.rate:                   1548,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              90064,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78814,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,211 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 27000,888 ops/s
[info]                  ·gc.alloc.rate:               1544,943 MB/sec
[info]                  ·gc.alloc.rate.norm:          90064,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79030,490 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 27048,925 ops/s
[info]                  ·gc.alloc.rate:                   1547,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              90064,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118441,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,633 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   27055,262 ±(99.9%) 165,341 ops/s [Average]
[info]   (min, avg, max) = (27000,888, 27055,262, 27121,088), stdev = 42,939
[info]   CI (99.9%): [26889,921, 27220,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1548,077 ±(99.9%) 9,609 MB/sec [Average]
[info]   (min, avg, max) = (1544,943, 1548,077, 1551,905), stdev = 2,495
[info]   CI (99.9%): [1538,468, 1557,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90064,016 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (90064,015, 90064,016, 90064,017), stdev = 0,001
[info]   CI (99.9%): [90064,012, 90064,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1625,653 ±(99.9%) 1431,156 MB/sec [Average]
[info]   (min, avg, max) = (1352,167, 1625,653, 2035,097), stdev = 371,667
[info]   CI (99.9%): [194,497, 3056,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   94560,979 ±(99.9%) 82888,573 B/op [Average]
[info]   (min, avg, max) = (78680,021, 94560,979, 118441,998), stdev = 21525,899
[info]   CI (99.9%): [11672,407, 177449,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,420 ±(99.9%) 6,589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,420, 3,634), stdev = 1,711
[info]   CI (99.9%): [≈ 0, 9,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,53% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125579,472 ops/s
[info] # Warmup Iteration   2: 189831,441 ops/s
[info] # Warmup Iteration   3: 191335,423 ops/s
[info] # Warmup Iteration   4: 190997,690 ops/s
[info] # Warmup Iteration   5: 190372,008 ops/s
[info] Iteration   1: 190280,451 ops/s
[info]                  ·gc.alloc.rate:                   1224,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11172,940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,517 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 190841,295 ops/s
[info]                  ·gc.alloc.rate:                   1228,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11152,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,172 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 190133,760 ops/s
[info]                  ·gc.alloc.rate:               1223,474 MB/sec
[info]                  ·gc.alloc.rate.norm:          10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11203,748 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 189923,944 ops/s
[info]                  ·gc.alloc.rate:                   1222,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11221,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,345 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 190002,039 ops/s
[info]                  ·gc.alloc.rate:               1222,584 MB/sec
[info]                  ·gc.alloc.rate.norm:          10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5614,307 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   190236,298 ±(99.9%) 1402,880 ops/s [Average]
[info]   (min, avg, max) = (189923,944, 190236,298, 190841,295), stdev = 364,324
[info]   CI (99.9%): [188833,417, 191639,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1224,153 ±(99.9%) 9,039 MB/sec [Average]
[info]   (min, avg, max) = (1222,256, 1224,153, 1228,087), stdev = 2,347
[info]   CI (99.9%): [1215,114, 1233,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10128,002, 10128,002, 10128,002), stdev = 0,001
[info]   CI (99.9%): [10128,002, 10128,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,665 ±(99.9%) 1162,282 MB/sec [Average]
[info]   (min, avg, max) = (677,721, 1217,665, 1354,232), stdev = 301,841
[info]   CI (99.9%): [55,384, 2379,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10072,935 ±(99.9%) 9598,090 B/op [Average]
[info]   (min, avg, max) = (5614,307, 10072,935, 11221,594), stdev = 2492,594
[info]   CI (99.9%): [474,844, 19671,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,207 ±(99.9%) 0,865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,207, 0,517), stdev = 0,225
[info]   CI (99.9%): [≈ 0, 1,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,73% complete, ETA 00:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 554778,787 ops/s
[info] # Warmup Iteration   2: 561415,573 ops/s
[info] # Warmup Iteration   3: 582111,962 ops/s
[info] # Warmup Iteration   4: 575130,854 ops/s
[info] # Warmup Iteration   5: 582365,877 ops/s
[info] Iteration   1: 581884,424 ops/s
[info]                  ·gc.alloc.rate:                   647,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1825,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,540 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 578872,280 ops/s
[info]                  ·gc.alloc.rate:                   644,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1834,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 580697,233 ops/s
[info]                  ·gc.alloc.rate:               646,337 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1823,356 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 579223,541 ops/s
[info]                  ·gc.alloc.rate:                   644,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1827,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 578471,203 ops/s
[info]                  ·gc.alloc.rate:               643,983 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1828,574 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   579829,736 ±(99.9%) 5480,949 ops/s [Average]
[info]   (min, avg, max) = (578471,203, 579829,736, 581884,424), stdev = 1423,385
[info]   CI (99.9%): [574348,787, 585310,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   645,440 ±(99.9%) 5,935 MB/sec [Average]
[info]   (min, avg, max) = (643,983, 645,440, 647,687), stdev = 1,541
[info]   CI (99.9%): [639,504, 651,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1752,001, 1752,001, 1752,001), stdev = 0,001
[info]   CI (99.9%): [1752,001, 1752,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,398 ±(99.9%) 4,697 MB/sec [Average]
[info]   (min, avg, max) = (672,130, 673,398, 674,729), stdev = 1,220
[info]   CI (99.9%): [668,702, 678,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1827,898 ±(99.9%) 16,496 B/op [Average]
[info]   (min, avg, max) = (1823,356, 1827,898, 1834,536), stdev = 4,284
[info]   CI (99.9%): [1811,402, 1844,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,648 ±(99.9%) 5,402 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,648, 3,157), stdev = 1,403
[info]   CI (99.9%): [≈ 0, 6,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,753 ±(99.9%) 14,612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,753, 8,540), stdev = 3,795
[info]   CI (99.9%): [≈ 0, 16,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82,93% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 650324,683 ops/s
[info] # Warmup Iteration   2: 691945,668 ops/s
[info] # Warmup Iteration   3: 691851,904 ops/s
[info] # Warmup Iteration   4: 691372,644 ops/s
[info] # Warmup Iteration   5: 690096,038 ops/s
[info] Iteration   1: 692773,792 ops/s
[info]                  ·gc.alloc.rate:      14,085 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 693488,181 ops/s
[info]                  ·gc.alloc.rate:      14,100 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 692368,954 ops/s
[info]                  ·gc.alloc.rate:      14,077 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 691024,619 ops/s
[info]                  ·gc.alloc.rate:      14,051 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 691021,231 ops/s
[info]                  ·gc.alloc.rate:      14,049 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   692135,355 ±(99.9%) 4203,784 ops/s [Average]
[info]   (min, avg, max) = (691021,231, 692135,355, 693488,181), stdev = 1091,709
[info]   CI (99.9%): [687931,571, 696339,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   14,073 ±(99.9%) 0,085 MB/sec [Average]
[info]   (min, avg, max) = (14,049, 14,073, 14,100), stdev = 0,022
[info]   CI (99.9%): [13,987, 14,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,001, 32,001, 32,001), stdev = 0,001
[info]   CI (99.9%): [32,001, 32,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,13% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14568,294 ops/s
[info] # Warmup Iteration   2: 23298,921 ops/s
[info] # Warmup Iteration   3: 23242,359 ops/s
[info] # Warmup Iteration   4: 23229,844 ops/s
[info] # Warmup Iteration   5: 23575,310 ops/s
[info] Iteration   1: 23574,899 ops/s
[info]                  ·gc.alloc.rate:               483,284 MB/sec
[info]                  ·gc.alloc.rate.norm:          32264,713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34150,645 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 23580,370 ops/s
[info]                  ·gc.alloc.rate:                   483,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45015,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23656,648 ops/s
[info]                  ·gc.alloc.rate:      484,928 MB/sec
[info]                  ·gc.alloc.rate.norm: 32264,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23518,196 ops/s
[info]                  ·gc.alloc.rate:                   482,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45131,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,393 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23607,331 ops/s
[info]                  ·gc.alloc.rate:               483,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          32264,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45006,216 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   23587,489 ±(99.9%) 194,328 ops/s [Average]
[info]   (min, avg, max) = (23518,196, 23587,489, 23656,648), stdev = 50,466
[info]   CI (99.9%): [23393,161, 23781,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   483,525 ±(99.9%) 3,883 MB/sec [Average]
[info]   (min, avg, max) = (482,146, 483,525, 484,928), stdev = 1,008
[info]   CI (99.9%): [479,643, 487,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32264,157 ±(99.9%) 1,197 B/op [Average]
[info]   (min, avg, max) = (32264,017, 32264,157, 32264,713), stdev = 0,311
[info]   CI (99.9%): [32262,960, 32265,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   507,077 ±(99.9%) 1124,884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,077, 674,971), stdev = 292,129
[info]   CI (99.9%): [≈ 0, 1631,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33860,793 ±(99.9%) 75120,046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33860,793, 45131,916), stdev = 19508,437
[info]   CI (99.9%): [≈ 0, 108980,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,271), stdev = 0,119
[info]   CI (99.9%): [≈ 0, 0,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,891 ±(99.9%) 30,592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,891, 18,062), stdev = 7,945
[info]   CI (99.9%): [≈ 0, 34,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83,33% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74208,082 ops/s
[info] # Warmup Iteration   2: 84819,574 ops/s
[info] # Warmup Iteration   3: 86787,185 ops/s
[info] # Warmup Iteration   4: 87172,994 ops/s
[info] # Warmup Iteration   5: 87140,961 ops/s
[info] Iteration   1: 87214,352 ops/s
[info]                  ·gc.alloc.rate:                   1525,360 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24256,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,502 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 86881,859 ops/s
[info]                  ·gc.alloc.rate:                   1519,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36538,945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,377 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 87137,825 ops/s
[info]                  ·gc.alloc.rate:                   1524,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24307,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,376 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 86927,707 ops/s
[info]                  ·gc.alloc.rate:                   1520,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24390,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,377 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87029,356 ops/s
[info]                  ·gc.alloc.rate:               1522,008 MB/sec
[info]                  ·gc.alloc.rate.norm:          27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24392,492 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   87038,220 ±(99.9%) 536,623 ops/s [Average]
[info]   (min, avg, max) = (86881,859, 87038,220, 87214,352), stdev = 139,359
[info]   CI (99.9%): [86501,597, 87574,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1522,319 ±(99.9%) 9,137 MB/sec [Average]
[info]   (min, avg, max) = (1519,719, 1522,319, 1525,360), stdev = 2,373
[info]   CI (99.9%): [1513,182, 1531,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27528,005, 27528,005, 27528,005), stdev = 0,001
[info]   CI (99.9%): [27528,004, 27528,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,563 ±(99.9%) 1155,126 MB/sec [Average]
[info]   (min, avg, max) = (1344,073, 1480,563, 2017,179), stdev = 299,983
[info]   CI (99.9%): [325,437, 2635,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26777,150 ±(99.9%) 21014,177 B/op [Average]
[info]   (min, avg, max) = (24256,343, 26777,150, 36538,945), stdev = 5457,315
[info]   CI (99.9%): [5762,972, 47791,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,526 ±(99.9%) 2,193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,526, 1,502), stdev = 0,569
[info]   CI (99.9%): [≈ 0, 2,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,53% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99471,235 ops/s
[info] # Warmup Iteration   2: 155810,523 ops/s
[info] # Warmup Iteration   3: 154467,403 ops/s
[info] # Warmup Iteration   4: 155334,626 ops/s
[info] # Warmup Iteration   5: 155829,459 ops/s
[info] Iteration   1: 156014,022 ops/s
[info]                  ·gc.alloc.rate:                   662,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6803,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,310 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 156249,541 ops/s
[info]                  ·gc.alloc.rate:                   663,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6793,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,210 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 155558,433 ops/s
[info]                  ·gc.alloc.rate:               660,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6829,940 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 155414,478 ops/s
[info]                  ·gc.alloc.rate:                   660,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6836,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,632 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 155807,779 ops/s
[info]                  ·gc.alloc.rate:                   661,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6825,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,631 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   155808,850 ±(99.9%) 1298,049 ops/s [Average]
[info]   (min, avg, max) = (155414,478, 155808,850, 156249,541), stdev = 337,099
[info]   CI (99.9%): [154510,802, 157106,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   662,062 ±(99.9%) 5,535 MB/sec [Average]
[info]   (min, avg, max) = (660,422, 662,062, 663,978), stdev = 1,438
[info]   CI (99.9%): [656,526, 667,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6688,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6688,003, 6688,003, 6688,003), stdev = 0,001
[info]   CI (99.9%): [6688,003, 6688,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,908 ±(99.9%) 1,954 MB/sec [Average]
[info]   (min, avg, max) = (674,363, 674,908, 675,616), stdev = 0,508
[info]   CI (99.9%): [672,954, 676,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6817,808 ±(99.9%) 70,649 B/op [Average]
[info]   (min, avg, max) = (6793,685, 6817,808, 6836,354), stdev = 18,347
[info]   CI (99.9%): [6747,159, 6888,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,229), stdev = 0,090
[info]   CI (99.9%): [≈ 0, 0,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,757 ±(99.9%) 3,506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,757, 2,310), stdev = 0,910
[info]   CI (99.9%): [≈ 0, 4,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,73% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216407,858 ops/s
[info] # Warmup Iteration   2: 222389,300 ops/s
[info] # Warmup Iteration   3: 225672,523 ops/s
[info] # Warmup Iteration   4: 225786,536 ops/s
[info] # Warmup Iteration   5: 225629,336 ops/s
[info] Iteration   1: 226388,410 ops/s
[info]                  ·gc.alloc.rate:                   806,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4690,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,145 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 226282,612 ops/s
[info]                  ·gc.alloc.rate:                   806,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4679,137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,145 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 226654,853 ops/s
[info]                  ·gc.alloc.rate:                   807,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9338,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,578 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 226283,047 ops/s
[info]                  ·gc.alloc.rate:               806,279 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4674,463 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 226352,472 ops/s
[info]                  ·gc.alloc.rate:               806,419 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4673,059 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   226392,279 ±(99.9%) 591,871 ops/s [Average]
[info]   (min, avg, max) = (226282,612, 226392,279, 226654,853), stdev = 153,707
[info]   CI (99.9%): [225800,408, 226984,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   806,616 ±(99.9%) 2,152 MB/sec [Average]
[info]   (min, avg, max) = (806,235, 806,616, 807,590), stdev = 0,559
[info]   CI (99.9%): [804,464, 808,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5608,002, 5608,002, 5608,002), stdev = 0,001
[info]   CI (99.9%): [5608,002, 5608,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,232 ±(99.9%) 1157,073 MB/sec [Average]
[info]   (min, avg, max) = (671,976, 807,232, 1344,759), stdev = 300,488
[info]   CI (99.9%): [≈ 0, 1964,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5611,162 ±(99.9%) 8022,709 B/op [Average]
[info]   (min, avg, max) = (4673,059, 5611,162, 9338,169), stdev = 2083,472
[info]   CI (99.9%): [≈ 0, 13633,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,174 ±(99.9%) 0,914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,174, 0,578), stdev = 0,237
[info]   CI (99.9%): [≈ 0, 1,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,94% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33124,184 ops/s
[info] # Warmup Iteration   2: 47034,033 ops/s
[info] # Warmup Iteration   3: 46482,895 ops/s
[info] # Warmup Iteration   4: 47295,764 ops/s
[info] # Warmup Iteration   5: 47331,909 ops/s
[info] Iteration   1: 47370,720 ops/s
[info]                  ·gc.alloc.rate:               1963,088 MB/sec
[info]                  ·gc.alloc.rate.norm:          65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67284,217 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 47138,183 ops/s
[info]                  ·gc.alloc.rate:                   1953,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67740,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,695 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 47319,922 ops/s
[info]                  ·gc.alloc.rate:                   1961,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67567,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,692 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47196,084 ops/s
[info]                  ·gc.alloc.rate:                   1955,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67846,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,082 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 47263,641 ops/s
[info]                  ·gc.alloc.rate:                   1958,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67791,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,386 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   47257,710 ±(99.9%) 358,965 ops/s [Average]
[info]   (min, avg, max) = (47138,183, 47257,710, 47370,720), stdev = 93,222
[info]   CI (99.9%): [46898,745, 47616,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1958,401 ±(99.9%) 14,840 MB/sec [Average]
[info]   (min, avg, max) = (1953,432, 1958,401, 1963,088), stdev = 3,854
[info]   CI (99.9%): [1943,561, 1973,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65224,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65224,009, 65224,009, 65224,009), stdev = 0,001
[info]   CI (99.9%): [65224,008, 65224,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2031,110 ±(99.9%) 16,544 MB/sec [Average]
[info]   (min, avg, max) = (2025,095, 2031,110, 2035,576), stdev = 4,296
[info]   CI (99.9%): [2014,566, 2047,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67645,848 ±(99.9%) 876,323 B/op [Average]
[info]   (min, avg, max) = (67284,217, 67645,848, 67846,030), stdev = 227,578
[info]   CI (99.9%): [66769,525, 68522,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,971 ±(99.9%) 3,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,971, 2,082), stdev = 0,791
[info]   CI (99.9%): [≈ 0, 4,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84,14% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126828,004 ops/s
[info] # Warmup Iteration   2: 138809,916 ops/s
[info] # Warmup Iteration   3: 138880,743 ops/s
[info] # Warmup Iteration   4: 140609,688 ops/s
[info] # Warmup Iteration   5: 140378,321 ops/s
[info] Iteration   1: 140081,211 ops/s
[info]                  ·gc.alloc.rate:                   1297,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7550,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 140367,514 ops/s
[info]                  ·gc.alloc.rate:                   1300,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15071,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,934 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 140519,816 ops/s
[info]                  ·gc.alloc.rate:                   1302,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15054,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,699 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 140151,125 ops/s
[info]                  ·gc.alloc.rate:                   1298,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15109,380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,701 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 140694,168 ops/s
[info]                  ·gc.alloc.rate:                   1303,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15066,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   140362,767 ±(99.9%) 979,040 ops/s [Average]
[info]   (min, avg, max) = (140081,211, 140362,767, 140694,168), stdev = 254,254
[info]   CI (99.9%): [139383,727, 141341,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1300,530 ±(99.9%) 8,513 MB/sec [Average]
[info]   (min, avg, max) = (1297,974, 1300,530, 1303,280), stdev = 2,211
[info]   CI (99.9%): [1292,016, 1309,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   14584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14584,003, 14584,003, 14584,003), stdev = 0,001
[info]   CI (99.9%): [14584,003, 14584,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,419 ±(99.9%) 1158,916 MB/sec [Average]
[info]   (min, avg, max) = (672,036, 1210,419, 1346,419), stdev = 300,967
[info]   CI (99.9%): [51,503, 2369,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13570,574 ±(99.9%) 12957,869 B/op [Average]
[info]   (min, avg, max) = (7550,981, 13570,574, 15109,380), stdev = 3365,117
[info]   CI (99.9%): [612,705, 26528,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,560 ±(99.9%) 1,206 B/op [Average]
[info]   (min, avg, max) = (0,233, 0,560, 0,934), stdev = 0,313
[info]   CI (99.9%): [≈ 0, 1,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84,34% complete, ETA 00:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247081,719 ops/s
[info] # Warmup Iteration   2: 284700,719 ops/s
[info] # Warmup Iteration   3: 301267,843 ops/s
[info] # Warmup Iteration   4: 303674,983 ops/s
[info] # Warmup Iteration   5: 303500,165 ops/s
[info] Iteration   1: 302188,999 ops/s
[info]                  ·gc.alloc.rate:                   1422,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6994,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,325 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 303678,134 ops/s
[info]                  ·gc.alloc.rate:                   1429,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6959,965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 303745,317 ops/s
[info]                  ·gc.alloc.rate:                   1429,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10444,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 302003,497 ops/s
[info]                  ·gc.alloc.rate:                   1421,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7012,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,217 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 303469,989 ops/s
[info]                  ·gc.alloc.rate:                   1428,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6985,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   303017,187 ±(99.9%) 3270,508 ops/s [Average]
[info]   (min, avg, max) = (302003,497, 303017,187, 303745,317), stdev = 849,341
[info]   CI (99.9%): [299746,679, 306287,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1426,283 ±(99.9%) 15,207 MB/sec [Average]
[info]   (min, avg, max) = (1421,593, 1426,283, 1429,504), stdev = 3,949
[info]   CI (99.9%): [1411,076, 1441,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7408,001, 7408,001, 7408,001), stdev = 0,001
[info]   CI (99.9%): [7408,001, 7408,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1478,785 ±(99.9%) 1155,207 MB/sec [Average]
[info]   (min, avg, max) = (1342,944, 1478,785, 2015,439), stdev = 300,004
[info]   CI (99.9%): [323,578, 2633,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7679,162 ±(99.9%) 5952,919 B/op [Average]
[info]   (min, avg, max) = (6959,965, 7679,162, 10444,445), stdev = 1545,954
[info]   CI (99.9%): [1726,243, 13632,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,216 ±(99.9%) 0,296 B/op [Average]
[info]   (min, avg, max) = (0,108, 0,216, 0,325), stdev = 0,077
[info]   CI (99.9%): [≈ 0, 0,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,54% complete, ETA 00:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 386014,524 ops/s
[info] # Warmup Iteration   2: 573533,989 ops/s
[info] # Warmup Iteration   3: 567507,531 ops/s
[info] # Warmup Iteration   4: 571750,281 ops/s
[info] # Warmup Iteration   5: 569186,549 ops/s
[info] Iteration   1: 568721,916 ops/s
[info]                  ·gc.alloc.rate:                   456,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415,674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 575415,779 ops/s
[info]                  ·gc.alloc.rate:      462,114 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 571358,520 ops/s
[info]                  ·gc.alloc.rate:                   458,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1857,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,917 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 573330,320 ops/s
[info]                  ·gc.alloc.rate:                   460,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1851,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 571088,820 ops/s
[info]                  ·gc.alloc.rate:      458,495 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   571983,071 ±(99.9%) 9707,794 ops/s [Average]
[info]   (min, avg, max) = (568721,916, 571983,071, 575415,779), stdev = 2521,083
[info]   CI (99.9%): [562275,277, 581690,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   459,333 ±(99.9%) 7,869 MB/sec [Average]
[info]   (min, avg, max) = (456,741, 459,333, 462,114), stdev = 2,044
[info]   CI (99.9%): [451,464, 467,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   372,072 ±(99.9%) 1332,709 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,072, 674,442), stdev = 346,100
[info]   CI (99.9%): [≈ 0, 1704,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1024,950 ±(99.9%) 3668,315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1024,950, 1857,746), stdev = 952,650
[info]   CI (99.9%): [≈ 0, 4693,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,547 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,333), stdev = 0,142
[info]   CI (99.9%): [≈ 0, 0,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,229 ±(99.9%) 1,506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,229, 0,917), stdev = 0,391
[info]   CI (99.9%): [≈ 0, 1,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,74% complete, ETA 00:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 634615,284 ops/s
[info] # Warmup Iteration   2: 670376,254 ops/s
[info] # Warmup Iteration   3: 676937,981 ops/s
[info] # Warmup Iteration   4: 675169,796 ops/s
[info] # Warmup Iteration   5: 673524,802 ops/s
[info] Iteration   1: 673828,659 ops/s
[info]                  ·gc.alloc.rate:               356,197 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1194,843 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 674294,956 ops/s
[info]                  ·gc.alloc.rate:      356,495 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 676234,510 ops/s
[info]                  ·gc.alloc.rate:               357,479 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1190,528 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 671966,460 ops/s
[info]                  ·gc.alloc.rate:               355,228 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1198,141 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 677088,403 ops/s
[info]                  ·gc.alloc.rate:      357,898 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   674682,598 ±(99.9%) 7809,599 ops/s [Average]
[info]   (min, avg, max) = (671966,460, 674682,598, 677088,403), stdev = 2028,128
[info]   CI (99.9%): [666872,999, 682492,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   356,660 ±(99.9%) 4,083 MB/sec [Average]
[info]   (min, avg, max) = (355,228, 356,660, 357,898), stdev = 1,060
[info]   CI (99.9%): [352,577, 360,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (832,001, 832,001, 832,001), stdev = 0,001
[info]   CI (99.9%): [832,001, 832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,923 ±(99.9%) 1078,879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,923, 511,554), stdev = 280,181
[info]   CI (99.9%): [≈ 0, 1385,802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   716,702 ±(99.9%) 2519,331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 716,702, 1198,141), stdev = 654,262
[info]   CI (99.9%): [≈ 0, 3236,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84,94% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 796008,255 ops/s
[info] # Warmup Iteration   2: 853201,015 ops/s
[info] # Warmup Iteration   3: 878759,659 ops/s
[info] # Warmup Iteration   4: 873186,056 ops/s
[info] # Warmup Iteration   5: 875266,697 ops/s
[info] Iteration   1: 875878,007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 877920,876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 876031,327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 877053,291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 874387,907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   876254,282 ±(99.9%) 5126,782 ops/s [Average]
[info]   (min, avg, max) = (874387,907, 876254,282, 877920,876), stdev = 1331,409
[info]   CI (99.9%): [871127,500, 881381,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85,14% complete, ETA 00:19:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28032,234 ops/s
[info] # Warmup Iteration   2: 36860,131 ops/s
[info] # Warmup Iteration   3: 37338,380 ops/s
[info] # Warmup Iteration   4: 37537,370 ops/s
[info] # Warmup Iteration   5: 37522,339 ops/s
[info] Iteration   1: 37485,996 ops/s
[info]                  ·gc.alloc.rate:                   1867,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84428,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,622 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37675,080 ops/s
[info]                  ·gc.alloc.rate:                   1877,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84151,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,739 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 37811,641 ops/s
[info]                  ·gc.alloc.rate:                   1883,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84003,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 37768,322 ops/s
[info]                  ·gc.alloc.rate:                   1881,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56164,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,867 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 37766,913 ops/s
[info]                  ·gc.alloc.rate:                   1881,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84367,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,602 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   37701,590 ±(99.9%) 502,119 ops/s [Average]
[info]   (min, avg, max) = (37485,996, 37701,590, 37811,641), stdev = 130,399
[info]   CI (99.9%): [37199,472, 38203,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1878,388 ±(99.9%) 24,952 MB/sec [Average]
[info]   (min, avg, max) = (1867,626, 1878,388, 1883,860), stdev = 6,480
[info]   CI (99.9%): [1853,436, 1903,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (78416,011, 78416,011, 78416,012), stdev = 0,001
[info]   CI (99.9%): [78416,010, 78416,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1883,098 ±(99.9%) 1152,418 MB/sec [Average]
[info]   (min, avg, max) = (1347,804, 1883,098, 2024,245), stdev = 299,279
[info]   CI (99.9%): [730,680, 3035,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   78623,085 ±(99.9%) 48347,598 B/op [Average]
[info]   (min, avg, max) = (56164,793, 78623,085, 84428,616), stdev = 12555,718
[info]   CI (99.9%): [30275,487, 126970,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,739 ±(99.9%) 3,360 B/op [Average]
[info]   (min, avg, max) = (0,866, 1,739, 2,622), stdev = 0,873
[info]   CI (99.9%): [≈ 0, 5,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85,34% complete, ETA 00:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139398,769 ops/s
[info] # Warmup Iteration   2: 154048,832 ops/s
[info] # Warmup Iteration   3: 153826,671 ops/s
[info] # Warmup Iteration   4: 154497,296 ops/s
[info] # Warmup Iteration   5: 154757,317 ops/s
[info] Iteration   1: 154650,747 ops/s
[info]                  ·gc.alloc.rate:                   1150,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13687,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,636 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 154779,974 ops/s
[info]                  ·gc.alloc.rate:                   1151,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13669,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,635 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 154424,362 ops/s
[info]                  ·gc.alloc.rate:                   1148,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13699,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,424 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 154912,071 ops/s
[info]                  ·gc.alloc.rate:               1152,007 MB/sec
[info]                  ·gc.alloc.rate.norm:          11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6828,359 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 154664,172 ops/s
[info]                  ·gc.alloc.rate:                   1149,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13692,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,424 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   154686,265 ±(99.9%) 694,484 ops/s [Average]
[info]   (min, avg, max) = (154424,362, 154686,265, 154912,071), stdev = 180,355
[info]   CI (99.9%): [153991,781, 155380,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1150,257 ±(99.9%) 5,529 MB/sec [Average]
[info]   (min, avg, max) = (1148,192, 1150,257, 1152,007), stdev = 1,436
[info]   CI (99.9%): [1144,728, 1155,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11704,003, 11704,003, 11704,003), stdev = 0,001
[info]   CI (99.9%): [11704,002, 11704,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,129 ±(99.9%) 1158,140 MB/sec [Average]
[info]   (min, avg, max) = (672,105, 1210,129, 1345,257), stdev = 300,765
[info]   CI (99.9%): [51,989, 2368,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12315,306 ±(99.9%) 11811,145 B/op [Average]
[info]   (min, avg, max) = (6828,359, 12315,306, 13699,599), stdev = 3067,317
[info]   CI (99.9%): [504,160, 24126,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,424 ±(99.9%) 0,999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,424, 0,636), stdev = 0,259
[info]   CI (99.9%): [≈ 0, 1,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85,54% complete, ETA 00:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54336,506 ops/s
[info] # Warmup Iteration   2: 69920,828 ops/s
[info] # Warmup Iteration   3: 68674,228 ops/s
[info] # Warmup Iteration   4: 70643,961 ops/s
[info] # Warmup Iteration   5: 70176,615 ops/s
[info] Iteration   1: 70526,821 ops/s
[info]                  ·gc.alloc.rate:                   3194,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60310,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,929 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 70525,243 ops/s
[info]                  ·gc.alloc.rate:                   3194,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75572,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,323 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 70154,292 ops/s
[info]                  ·gc.alloc.rate:                   3177,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76105,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,203 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 70631,633 ops/s
[info]                  ·gc.alloc.rate:                   3199,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60558,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,319 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 70598,930 ops/s
[info]                  ·gc.alloc.rate:                   3197,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75803,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,392 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   70487,384 ±(99.9%) 738,655 ops/s [Average]
[info]   (min, avg, max) = (70154,292, 70487,384, 70631,633), stdev = 191,826
[info]   CI (99.9%): [69748,729, 71226,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3192,604 ±(99.9%) 32,841 MB/sec [Average]
[info]   (min, avg, max) = (3177,853, 3192,604, 3199,269), stdev = 8,529
[info]   CI (99.9%): [3159,763, 3225,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71288,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71288,006, 71288,006, 71288,007), stdev = 0,001
[info]   CI (99.9%): [71288,004, 71288,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3119,776 ±(99.9%) 1440,647 MB/sec [Average]
[info]   (min, avg, max) = (2702,294, 3119,776, 3399,990), stdev = 374,132
[info]   CI (99.9%): [1679,128, 4560,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69669,995 ±(99.9%) 32474,327 B/op [Average]
[info]   (min, avg, max) = (60310,662, 69669,995, 76105,599), stdev = 8433,480
[info]   CI (99.9%): [37195,667, 102144,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,215 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,100, 0,187), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,233 ±(99.9%) 4,834 B/op [Average]
[info]   (min, avg, max) = (0,929, 2,233, 4,203), stdev = 1,255
[info]   CI (99.9%): [≈ 0, 7,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,74% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98779,540 ops/s
[info] # Warmup Iteration   2: 153784,813 ops/s
[info] # Warmup Iteration   3: 151947,406 ops/s
[info] # Warmup Iteration   4: 153119,468 ops/s
[info] # Warmup Iteration   5: 154588,615 ops/s
[info] Iteration   1: 154911,900 ops/s
[info]                  ·gc.alloc.rate:                   1381,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              14032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13731,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 153713,699 ops/s
[info]                  ·gc.alloc.rate:                   1370,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              14032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13851,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 154609,939 ops/s
[info]                  ·gc.alloc.rate:                   1378,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              14032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13781,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,212 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 152539,621 ops/s
[info]                  ·gc.alloc.rate:                   1359,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              14032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13978,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,215 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 151741,348 ops/s
[info]                  ·gc.alloc.rate:                   1352,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              14032,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14062,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   153503,301 ±(99.9%) 5197,023 ops/s [Average]
[info]   (min, avg, max) = (151741,348, 153503,301, 154911,900), stdev = 1349,650
[info]   CI (99.9%): [148306,278, 158700,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1368,512 ±(99.9%) 46,572 MB/sec [Average]
[info]   (min, avg, max) = (1352,648, 1368,512, 1381,119), stdev = 12,095
[info]   CI (99.9%): [1321,940, 1415,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14032,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14032,003, 14032,003, 14032,003), stdev = 0,001
[info]   CI (99.9%): [14032,002, 14032,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,685 ±(99.9%) 6,225 MB/sec [Average]
[info]   (min, avg, max) = (1351,517, 1353,685, 1355,614), stdev = 1,617
[info]   CI (99.9%): [1347,460, 1359,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13880,941 ±(99.9%) 530,035 B/op [Average]
[info]   (min, avg, max) = (13731,248, 13880,941, 14062,767), stdev = 137,648
[info]   CI (99.9%): [13350,906, 14410,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,298 ±(99.9%) 0,444 B/op [Average]
[info]   (min, avg, max) = (0,212, 0,298, 0,426), stdev = 0,115
[info]   CI (99.9%): [≈ 0, 0,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,94% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522479,042 ops/s
[info] # Warmup Iteration   2: 554342,740 ops/s
[info] # Warmup Iteration   3: 554695,541 ops/s
[info] # Warmup Iteration   4: 555816,245 ops/s
[info] # Warmup Iteration   5: 557583,842 ops/s
[info] Iteration   1: 556710,220 ops/s
[info]                  ·gc.alloc.rate:                   1454,475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3799,993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 557627,758 ops/s
[info]                  ·gc.alloc.rate:                   1457,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3794,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 559709,666 ops/s
[info]                  ·gc.alloc.rate:                   1462,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3783,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 557884,100 ops/s
[info]                  ·gc.alloc.rate:               1457,639 MB/sec
[info]                  ·gc.alloc.rate.norm:          4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3799,522 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 557164,081 ops/s
[info]                  ·gc.alloc.rate:                   1455,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5714,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   557819,165 ±(99.9%) 4421,431 ops/s [Average]
[info]   (min, avg, max) = (556710,220, 557819,165, 559709,666), stdev = 1148,232
[info]   CI (99.9%): [553397,734, 562240,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1457,420 ±(99.9%) 11,690 MB/sec [Average]
[info]   (min, avg, max) = (1454,475, 1457,420, 1462,374), stdev = 3,036
[info]   CI (99.9%): [1445,730, 1469,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,716 ±(99.9%) 1166,703 MB/sec [Average]
[info]   (min, avg, max) = (1344,113, 1480,716, 2022,715), stdev = 302,989
[info]   CI (99.9%): [314,013, 2647,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4178,229 ±(99.9%) 3306,467 B/op [Average]
[info]   (min, avg, max) = (3783,357, 4178,229, 5714,234), stdev = 858,679
[info]   CI (99.9%): [871,762, 7484,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,106 ±(99.9%) 0,334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,106, 0,234), stdev = 0,087
[info]   CI (99.9%): [≈ 0, 0,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86,14% complete, ETA 00:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8750,420 ops/s
[info] # Warmup Iteration   2: 18073,969 ops/s
[info] # Warmup Iteration   3: 18193,203 ops/s
[info] # Warmup Iteration   4: 18133,231 ops/s
[info] # Warmup Iteration   5: 18186,414 ops/s
[info] Iteration   1: 18198,752 ops/s
[info]                  ·gc.alloc.rate:                   2318,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234408,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,200 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 17999,442 ops/s
[info]                  ·gc.alloc.rate:                   2292,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177985,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,280 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18266,401 ops/s
[info]                  ·gc.alloc.rate:                   2326,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175508,780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,761 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 18219,355 ops/s
[info]                  ·gc.alloc.rate:                   2321,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234826,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,991 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18104,275 ops/s
[info]                  ·gc.alloc.rate:                   2305,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177348,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,619 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   18157,645 ±(99.9%) 409,339 ops/s [Average]
[info]   (min, avg, max) = (17999,442, 18157,645, 18266,401), stdev = 106,304
[info]   CI (99.9%): [17748,306, 18566,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2312,968 ±(99.9%) 52,270 MB/sec [Average]
[info]   (min, avg, max) = (2292,929, 2312,968, 2326,781), stdev = 13,574
[info]   CI (99.9%): [2260,698, 2365,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200488,024 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (200488,022, 200488,024, 200488,028), stdev = 0,003
[info]   CI (99.9%): [200488,014, 200488,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2308,245 ±(99.9%) 1428,233 MB/sec [Average]
[info]   (min, avg, max) = (2035,572, 2308,245, 2718,627), stdev = 370,908
[info]   CI (99.9%): [880,012, 3736,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   200015,636 ±(99.9%) 121682,447 B/op [Average]
[info]   (min, avg, max) = (175508,780, 200015,636, 234826,245), stdev = 31600,545
[info]   CI (99.9%): [78333,190, 321698,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,125), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,570 ±(99.9%) 10,194 B/op [Average]
[info]   (min, avg, max) = (3,619, 7,570, 10,761), stdev = 2,647
[info]   CI (99.9%): [≈ 0, 17,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86,35% complete, ETA 00:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37313,041 ops/s
[info] # Warmup Iteration   2: 48974,743 ops/s
[info] # Warmup Iteration   3: 49298,560 ops/s
[info] # Warmup Iteration   4: 49596,789 ops/s
[info] # Warmup Iteration   5: 49623,948 ops/s
[info] Iteration   1: 49742,327 ops/s
[info]                  ·gc.alloc.rate:                   2646,203 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85291,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,952 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 49571,509 ops/s
[info]                  ·gc.alloc.rate:                   2637,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85782,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,305 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 49842,613 ops/s
[info]                  ·gc.alloc.rate:                   2651,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64101,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,657 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 49771,107 ops/s
[info]                  ·gc.alloc.rate:                   2647,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85720,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,633 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 49700,678 ops/s
[info]                  ·gc.alloc.rate:                   2643,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              83728,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85968,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,955 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   49725,647 ±(99.9%) 387,023 ops/s [Average]
[info]   (min, avg, max) = (49571,509, 49725,647, 49842,613), stdev = 100,509
[info]   CI (99.9%): [49338,624, 50112,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2645,415 ±(99.9%) 20,354 MB/sec [Average]
[info]   (min, avg, max) = (2637,549, 2645,415, 2651,705), stdev = 5,286
[info]   CI (99.9%): [2625,061, 2665,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83728,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (83728,008, 83728,008, 83728,009), stdev = 0,001
[info]   CI (99.9%): [83728,007, 83728,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2570,678 ±(99.9%) 1163,913 MB/sec [Average]
[info]   (min, avg, max) = (2030,131, 2570,678, 2714,369), stdev = 302,265
[info]   CI (99.9%): [1406,765, 3734,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81372,940 ±(99.9%) 37189,830 B/op [Average]
[info]   (min, avg, max) = (64101,730, 81372,940, 85968,044), stdev = 9658,081
[info]   CI (99.9%): [44183,109, 118562,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,092, 0,125), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,900 ±(99.9%) 5,267 B/op [Average]
[info]   (min, avg, max) = (0,657, 2,900, 3,955), stdev = 1,368
[info]   CI (99.9%): [≈ 0, 8,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,55% complete, ETA 00:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e724a5b0/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 164564,033 ops/s
[info] # Warmup Iteration   2: 252973,405 ops/s
[info] # Warmup Iteration   3: 255363,156 ops/s
[info] # Warmup Iteration   4: 253525,032 ops/s
[info] # Warmup Iteration   5: 253962,275 ops/s
[info] Iteration   1: 251799,465 ops/s
[info]                  ·gc.alloc.rate:                   1171,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8444,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,390 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 255158,649 ops/s
[info]                  ·gc.alloc.rate:               1186,684 MB/sec
[info]                  ·gc.alloc.rate.norm:          7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4168,516 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 252689,500 ops/s
[info]                  ·gc.alloc.rate:                   1175,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8421,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,130 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 253509,634 ops/s
[info]                  ·gc.alloc.rate:               1179,096 MB/sec
[info]                  ·gc.alloc.rate.norm:          7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8400,898 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 253411,646 ops/s
[info]                  ·gc.alloc.rate:                   1178,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8410,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   253313,779 ±(99.9%) 4768,566 ops/s [Average]
[info]   (min, avg, max) = (251799,465, 253313,779, 255158,649), stdev = 1238,381
[info]   CI (99.9%): [248545,213, 258082,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1178,079 ±(99.9%) 22,214 MB/sec [Average]
[info]   (min, avg, max) = (1171,059, 1178,079, 1186,684), stdev = 5,769
[info]   CI (99.9%): [1155,866, 1200,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7320,002, 7320,002, 7320,002), stdev = 0,001
[info]   CI (99.9%): [7320,001, 7320,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,166 ±(99.9%) 1165,384 MB/sec [Average]
[info]   (min, avg, max) = (675,780, 1217,166, 1353,933), stdev = 302,646
[info]   CI (99.9%): [51,783, 2382,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7569,113 ±(99.9%) 7320,306 B/op [Average]
[info]   (min, avg, max) = (4168,516, 7569,113, 8444,136), stdev = 1901,060
[info]   CI (99.9%): [248,808, 14889,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,130 ±(99.9%) 0,614 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,130, 0,390), stdev = 0,159
[info]   CI (99.9%): [≈ 0, 0,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,75% complete, ETA 00:17:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1232954,193 ops/s
[info] # Warmup Iteration   2: 1051642,270 ops/s
[info] # Warmup Iteration   3: 1259774,293 ops/s
[info] # Warmup Iteration   4: 1264532,713 ops/s
[info] # Warmup Iteration   5: 1254439,294 ops/s
[info] Iteration   1: 1255222,890 ops/s
[info]                  ·gc.alloc.rate:                   631,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,900 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1257482,750 ops/s
[info]                  ·gc.alloc.rate:      632,828 MB/sec
[info]                  ·gc.alloc.rate.norm: 792,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1260650,316 ops/s
[info]                  ·gc.alloc.rate:                   634,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     842,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1260255,492 ops/s
[info]                  ·gc.alloc.rate:               634,218 MB/sec
[info]                  ·gc.alloc.rate.norm:          792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840,141 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1258841,912 ops/s
[info]                  ·gc.alloc.rate:                   633,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1258490,672 ±(99.9%) 8522,964 ops/s [Average]
[info]   (min, avg, max) = (1255222,890, 1258490,672, 1260650,316), stdev = 2213,387
[info]   CI (99.9%): [1249967,708, 1267013,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   633,285 ±(99.9%) 4,300 MB/sec [Average]
[info]   (min, avg, max) = (631,623, 633,285, 634,348), stdev = 1,117
[info]   CI (99.9%): [628,985, 637,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (792,000, 792,000, 792,000), stdev = 0,001
[info]   CI (99.9%): [792,000, 792,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,977 ±(99.9%) 1160,194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,977, 674,722), stdev = 301,299
[info]   CI (99.9%): [≈ 0, 1699,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   673,937 ±(99.9%) 1450,726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 673,937, 846,043), stdev = 376,749
[info]   CI (99.9%): [≈ 0, 2124,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,110), stdev = 1,380
[info]   CI (99.9%): [≈ 0, 5,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,806 ±(99.9%) 6,661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,806, 3,900), stdev = 1,730
[info]   CI (99.9%): [≈ 0, 7,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86,95% complete, ETA 00:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270622,732 ops/s
[info] # Warmup Iteration   2: 1291465,952 ops/s
[info] # Warmup Iteration   3: 1293276,692 ops/s
[info] # Warmup Iteration   4: 1292564,103 ops/s
[info] # Warmup Iteration   5: 1292935,283 ops/s
[info] Iteration   1: 1298116,799 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1296012,135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1299532,306 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1295573,355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1297738,933 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1297394,706 ±(99.9%) 6220,330 ops/s [Average]
[info]   (min, avg, max) = (1295573,355, 1297394,706, 1299532,306), stdev = 1615,400
[info]   CI (99.9%): [1291174,376, 1303615,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87,15% complete, ETA 00:17:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23965,672 ops/s
[info] # Warmup Iteration   2: 37523,948 ops/s
[info] # Warmup Iteration   3: 37059,206 ops/s
[info] # Warmup Iteration   4: 37128,187 ops/s
[info] # Warmup Iteration   5: 37547,287 ops/s
[info] Iteration   1: 37398,679 ops/s
[info]                  ·gc.alloc.rate:                   2075,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              87352,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85493,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,504 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37372,225 ops/s
[info]                  ·gc.alloc.rate:                   2074,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              87352,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85637,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,630 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 37755,256 ops/s
[info]                  ·gc.alloc.rate:                   2095,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              87352,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84852,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,338 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37362,083 ops/s
[info]                  ·gc.alloc.rate:                   2073,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              87352,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85803,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,630 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37379,557 ops/s
[info]                  ·gc.alloc.rate:                   2074,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              87352,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85831,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,629 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   37453,560 ±(99.9%) 651,464 ops/s [Average]
[info]   (min, avg, max) = (37362,083, 37453,560, 37755,256), stdev = 169,183
[info]   CI (99.9%): [36802,096, 38105,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2078,636 ±(99.9%) 36,102 MB/sec [Average]
[info]   (min, avg, max) = (2073,811, 2078,636, 2095,370), stdev = 9,376
[info]   CI (99.9%): [2042,534, 2114,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   87352,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87352,011, 87352,011, 87352,012), stdev = 0,001
[info]   CI (99.9%): [87352,009, 87352,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2035,098 ±(99.9%) 10,444 MB/sec [Average]
[info]   (min, avg, max) = (2031,357, 2035,098, 2038,130), stdev = 2,712
[info]   CI (99.9%): [2024,654, 2045,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85523,736 ±(99.9%) 1537,328 B/op [Average]
[info]   (min, avg, max) = (84852,330, 85523,736, 85831,845), stdev = 399,239
[info]   CI (99.9%): [83986,409, 87061,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,104), stdev = 0,019
[info]   CI (99.9%): [0,003, 0,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,146 ±(99.9%) 2,951 B/op [Average]
[info]   (min, avg, max) = (2,629, 3,146, 4,338), stdev = 0,766
[info]   CI (99.9%): [0,195, 6,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87,35% complete, ETA 00:16:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 364533,382 ops/s
[info] # Warmup Iteration   2: 677235,924 ops/s
[info] # Warmup Iteration   3: 685075,800 ops/s
[info] # Warmup Iteration   4: 686815,505 ops/s
[info] # Warmup Iteration   5: 684558,415 ops/s
[info] Iteration   1: 678174,439 ops/s
[info]                  ·gc.alloc.rate:                   2057,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4680,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,145 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 675693,053 ops/s
[info]                  ·gc.alloc.rate:                   2050,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4704,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,145 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 682393,213 ops/s
[info]                  ·gc.alloc.rate:                   2070,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4664,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 686160,487 ops/s
[info]                  ·gc.alloc.rate:                   2082,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4649,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 677627,339 ops/s
[info]                  ·gc.alloc.rate:                   2056,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4714,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   680009,706 ±(99.9%) 16244,810 ops/s [Average]
[info]   (min, avg, max) = (675693,053, 680009,706, 686160,487), stdev = 4218,726
[info]   CI (99.9%): [663764,896, 696254,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2063,484 ±(99.9%) 49,547 MB/sec [Average]
[info]   (min, avg, max) = (2050,412, 2063,484, 2082,351), stdev = 12,867
[info]   CI (99.9%): [2013,937, 2113,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4776,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4776,001, 4776,001, 4776,001), stdev = 0,001
[info]   CI (99.9%): [4776,001, 4776,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,202 ±(99.9%) 19,920 MB/sec [Average]
[info]   (min, avg, max) = (2016,929, 2023,202, 2029,546), stdev = 5,173
[info]   CI (99.9%): [2003,282, 2043,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4682,889 ±(99.9%) 103,857 B/op [Average]
[info]   (min, avg, max) = (4649,493, 4682,889, 4714,248), stdev = 26,971
[info]   CI (99.9%): [4579,032, 4786,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,096 ±(99.9%) 0,187 B/op [Average]
[info]   (min, avg, max) = (0,048, 0,096, 0,145), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87,55% complete, ETA 00:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 781014,669 ops/s
[info] # Warmup Iteration   2: 1704748,805 ops/s
[info] # Warmup Iteration   3: 1711643,131 ops/s
[info] # Warmup Iteration   4: 1712051,794 ops/s
[info] # Warmup Iteration   5: 1712833,152 ops/s
[info] Iteration   1: 1708079,530 ops/s
[info]                  ·gc.alloc.rate:                   1215,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1716146,896 ops/s
[info]                  ·gc.alloc.rate:               1221,262 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 620,033 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1699504,186 ops/s
[info]                  ·gc.alloc.rate:                   1209,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1706254,966 ops/s
[info]                  ·gc.alloc.rate:                   1214,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1249,100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1708598,406 ops/s
[info]                  ·gc.alloc.rate:               1215,743 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1248,284 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1707716,797 ±(99.9%) 22907,230 ops/s [Average]
[info]   (min, avg, max) = (1699504,186, 1707716,797, 1716146,896), stdev = 5948,935
[info]   CI (99.9%): [1684809,567, 1730624,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1215,224 ±(99.9%) 16,355 MB/sec [Average]
[info]   (min, avg, max) = (1209,355, 1215,224, 1221,262), stdev = 4,247
[info]   CI (99.9%): [1198,869, 1231,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,912 ±(99.9%) 1166,321 MB/sec [Average]
[info]   (min, avg, max) = (676,091, 1217,912, 1354,993), stdev = 302,890
[info]   CI (99.9%): [51,590, 2384,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1123,107 ±(99.9%) 1082,954 B/op [Average]
[info]   (min, avg, max) = (620,033, 1123,107, 1252,820), stdev = 281,240
[info]   CI (99.9%): [40,153, 2206,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,031, 0,077), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87,75% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7868370,494 ops/s
[info] # Warmup Iteration   2: 8482074,936 ops/s
[info] # Warmup Iteration   3: 8549379,439 ops/s
[info] # Warmup Iteration   4: 8494561,283 ops/s
[info] # Warmup Iteration   5: 8523560,072 ops/s
[info] Iteration   1: 8519696,044 ops/s
[info]                  ·gc.alloc.rate:               259,816 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94,500 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 8549544,172 ops/s
[info]                  ·gc.alloc.rate:      260,772 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8444649,504 ops/s
[info]                  ·gc.alloc.rate:                   257,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8524983,516 ops/s
[info]                  ·gc.alloc.rate:      260,029 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8510410,072 ops/s
[info]                  ·gc.alloc.rate:               259,509 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94,603 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8509856,662 ±(99.9%) 151024,461 ops/s [Average]
[info]   (min, avg, max) = (8444649,504, 8509856,662, 8549544,172), stdev = 39220,573
[info]   CI (99.9%): [8358832,201, 8660881,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   259,534 ±(99.9%) 4,648 MB/sec [Average]
[info]   (min, avg, max) = (257,541, 259,534, 260,772), stdev = 1,207
[info]   CI (99.9%): [254,885, 264,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,904 ±(99.9%) 1078,809 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,904, 511,540), stdev = 280,163
[info]   CI (99.9%): [≈ 0, 1385,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   56,889 ±(99.9%) 199,975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56,889, 95,340), stdev = 51,933
[info]   CI (99.9%): [≈ 0, 256,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,017), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87,95% complete, ETA 00:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86912,140 ops/s
[info] # Warmup Iteration   2: 254373,134 ops/s
[info] # Warmup Iteration   3: 254774,672 ops/s
[info] # Warmup Iteration   4: 254529,882 ops/s
[info] # Warmup Iteration   5: 253194,074 ops/s
[info] Iteration   1: 254179,401 ops/s
[info]                  ·gc.alloc.rate:                   1750,612 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12568,294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 252681,346 ops/s
[info]                  ·gc.alloc.rate:                   1740,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8431,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,389 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 253901,912 ops/s
[info]                  ·gc.alloc.rate:                   1748,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12605,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 253475,117 ops/s
[info]                  ·gc.alloc.rate:                   1745,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8424,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 252966,474 ops/s
[info]                  ·gc.alloc.rate:               1742,127 MB/sec
[info]                  ·gc.alloc.rate.norm:          10840,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2036,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12668,896 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   253440,850 ±(99.9%) 2405,566 ops/s [Average]
[info]   (min, avg, max) = (252681,346, 253440,850, 254179,401), stdev = 624,718
[info]   CI (99.9%): [251035,284, 255846,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1745,610 ±(99.9%) 16,152 MB/sec [Average]
[info]   (min, avg, max) = (1740,728, 1745,610, 1750,612), stdev = 4,195
[info]   CI (99.9%): [1729,458, 1761,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10840,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10840,002, 10840,002, 10840,002), stdev = 0,001
[info]   CI (99.9%): [10840,001, 10840,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,015 ±(99.9%) 1429,289 MB/sec [Average]
[info]   (min, avg, max) = (1353,936, 1762,015, 2036,054), stdev = 371,182
[info]   CI (99.9%): [332,726, 3191,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10939,735 ±(99.9%) 8830,287 B/op [Average]
[info]   (min, avg, max) = (8424,606, 10939,735, 12668,896), stdev = 2293,197
[info]   CI (99.9%): [2109,448, 19770,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,181 ±(99.9%) 0,569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,181, 0,389), stdev = 0,148
[info]   CI (99.9%): [≈ 0, 0,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88,15% complete, ETA 00:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556781,927 ops/s
[info] # Warmup Iteration   2: 1052834,072 ops/s
[info] # Warmup Iteration   3: 1062067,367 ops/s
[info] # Warmup Iteration   4: 1071570,691 ops/s
[info] # Warmup Iteration   5: 1061155,854 ops/s
[info] Iteration   1: 1064169,829 ops/s
[info]                  ·gc.alloc.rate:                   1563,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1986,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1065177,517 ops/s
[info]                  ·gc.alloc.rate:                   1564,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1984,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1067897,844 ops/s
[info]                  ·gc.alloc.rate:                   1568,669 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2972,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1070575,924 ops/s
[info]                  ·gc.alloc.rate:               1573,199 MB/sec
[info]                  ·gc.alloc.rate.norm:          2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1979,116 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1052472,606 ops/s
[info]                  ·gc.alloc.rate:                   1545,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2015,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1064058,744 ±(99.9%) 26727,664 ops/s [Average]
[info]   (min, avg, max) = (1052472,606, 1064058,744, 1070575,924), stdev = 6941,090
[info]   CI (99.9%): [1037331,080, 1090786,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1563,185 ±(99.9%) 39,849 MB/sec [Average]
[info]   (min, avg, max) = (1545,995, 1563,185, 1573,199), stdev = 10,349
[info]   CI (99.9%): [1523,336, 1603,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2312,000, 2312,000, 2312,000), stdev = 0,001
[info]   CI (99.9%): [2312,000, 2312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,492 ±(99.9%) 1157,078 MB/sec [Average]
[info]   (min, avg, max) = (1342,909, 1479,492, 2017,009), stdev = 300,489
[info]   CI (99.9%): [322,414, 2636,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2187,599 ±(99.9%) 1691,092 B/op [Average]
[info]   (min, avg, max) = (1979,116, 2187,599, 2972,793), stdev = 439,171
[info]   CI (99.9%): [496,507, 3878,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,062 ±(99.9%) 0,145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,092), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88,35% complete, ETA 00:15:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e724a5b0/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1202083,120 ops/s
[info] # Warmup Iteration   2: 2753680,384 ops/s
[info] # Warmup Iteration   3: 2785259,011 ops/s
[info] # Warmup Iteration   4: 2786677,017 ops/s
[info] # Warmup Iteration   5: 2780495,598 ops/s
[info] Iteration   1: 2779836,732 ops/s
[info]                  ·gc.alloc.rate:                   1144,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2773837,156 ops/s
[info]                  ·gc.alloc.rate:                   1142,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2786603,470 ops/s
[info]                  ·gc.alloc.rate:               1147,286 MB/sec
[info]                  ·gc.alloc.rate.norm:          648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381,655 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2760244,109 ops/s
[info]                  ·gc.alloc.rate:               1136,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 771,364 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2786435,151 ops/s
[info]                  ·gc.alloc.rate:                   1147,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     764,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2777391,324 ±(99.9%) 42150,639 ops/s [Average]
[info]   (min, avg, max) = (2760244,109, 2777391,324, 2786603,470), stdev = 10946,387
[info]   CI (99.9%): [2735240,685, 2819541,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1143,512 ±(99.9%) 17,132 MB/sec [Average]
[info]   (min, avg, max) = (1136,519, 1143,512, 1147,286), stdev = 4,449
[info]   CI (99.9%): [1126,380, 1160,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1216,689 ±(99.9%) 1164,484 MB/sec [Average]
[info]   (min, avg, max) = (675,722, 1216,689, 1353,355), stdev = 302,413
[info]   CI (99.9%): [52,205, 2381,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   689,730 ±(99.9%) 663,242 B/op [Average]
[info]   (min, avg, max) = (381,655, 689,730, 771,364), stdev = 172,242
[info]   CI (99.9%): [26,487, 1352,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,035), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88,55% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5069273,045 ops/s
[info] # Warmup Iteration   2: 6525017,112 ops/s
[info] # Warmup Iteration   3: 6608608,169 ops/s
[info] # Warmup Iteration   4: 6659702,636 ops/s
[info] # Warmup Iteration   5: 6635577,488 ops/s
[info] Iteration   1: 6674115,363 ops/s
[info]                  ·gc.alloc.rate:                   746,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,742 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6666079,869 ops/s
[info]                  ·gc.alloc.rate:                   745,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 6680345,332 ops/s
[info]                  ·gc.alloc.rate:               747,057 MB/sec
[info]                  ·gc.alloc.rate.norm:          176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158,495 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 6681668,614 ops/s
[info]                  ·gc.alloc.rate:                   747,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 6653571,887 ops/s
[info]                  ·gc.alloc.rate:                   743,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6671156,213 ±(99.9%) 44685,924 ops/s [Average]
[info]   (min, avg, max) = (6653571,887, 6671156,213, 6681668,614), stdev = 11604,792
[info]   CI (99.9%): [6626470,289, 6715842,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   745,996 ±(99.9%) 5,119 MB/sec [Average]
[info]   (min, avg, max) = (743,939, 745,996, 747,162), stdev = 1,329
[info]   CI (99.9%): [740,877, 751,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,852 ±(99.9%) 1162,119 MB/sec [Average]
[info]   (min, avg, max) = (672,001, 807,852, 1347,722), stdev = 301,799
[info]   CI (99.9%): [≈ 0, 1969,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   190,615 ±(99.9%) 274,583 B/op [Average]
[info]   (min, avg, max) = (158,308, 190,615, 318,174), stdev = 71,308
[info]   CI (99.9%): [≈ 0, 465,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,654 ±(99.9%) 5,368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,147), stdev = 1,394
[info]   CI (99.9%): [≈ 0, 6,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 1,266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,154, 0,742), stdev = 0,329
[info]   CI (99.9%): [≈ 0, 1,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88,76% complete, ETA 00:14:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5133224,059 ops/s
[info] # Warmup Iteration   2: 6582993,641 ops/s
[info] # Warmup Iteration   3: 6632591,969 ops/s
[info] # Warmup Iteration   4: 6597977,364 ops/s
[info] # Warmup Iteration   5: 6626026,465 ops/s
[info] Iteration   1: 6617533,864 ops/s
[info]                  ·gc.alloc.rate:               403,614 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121,665 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 6640601,792 ops/s
[info]                  ·gc.alloc.rate:                   405,044 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6625903,014 ops/s
[info]                  ·gc.alloc.rate:                   404,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121,512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6631331,159 ops/s
[info]                  ·gc.alloc.rate:      404,517 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6642480,332 ops/s
[info]                  ·gc.alloc.rate:                   405,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,748 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6631570,032 ±(99.9%) 39914,739 ops/s [Average]
[info]   (min, avg, max) = (6617533,864, 6631570,032, 6642480,332), stdev = 10365,731
[info]   CI (99.9%): [6591655,293, 6671484,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   404,487 ±(99.9%) 2,422 MB/sec [Average]
[info]   (min, avg, max) = (403,614, 404,487, 405,115), stdev = 0,629
[info]   CI (99.9%): [402,065, 406,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   441,864 ±(99.9%) 989,264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,864, 674,664), stdev = 256,909
[info]   CI (99.9%): [≈ 0, 1431,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   104,861 ±(99.9%) 234,626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104,861, 159,875), stdev = 60,932
[info]   CI (99.9%): [≈ 0, 339,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,636 ±(99.9%) 5,422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,636, 3,155), stdev = 1,408
[info]   CI (99.9%): [≈ 0, 6,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,151 ±(99.9%) 1,285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,151, 0,748), stdev = 0,334
[info]   CI (99.9%): [≈ 0, 1,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88,96% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102840,850 ops/s
[info] # Warmup Iteration   2: 382817,170 ops/s
[info] # Warmup Iteration   3: 382779,941 ops/s
[info] # Warmup Iteration   4: 382472,341 ops/s
[info] # Warmup Iteration   5: 378844,746 ops/s
[info] Iteration   1: 381358,179 ops/s
[info]                  ·gc.alloc.rate:                   1942,287 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8380,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 381211,345 ops/s
[info]                  ·gc.alloc.rate:                   1941,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8391,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 379337,029 ops/s
[info]                  ·gc.alloc.rate:                   1931,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8442,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 378817,730 ops/s
[info]                  ·gc.alloc.rate:                   1929,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8462,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 381340,715 ops/s
[info]                  ·gc.alloc.rate:                   1941,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5607,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,172 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   380413,000 ±(99.9%) 4752,844 ops/s [Average]
[info]   (min, avg, max) = (378817,730, 380413,000, 381358,179), stdev = 1234,299
[info]   CI (99.9%): [375660,155, 385165,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1937,467 ±(99.9%) 23,851 MB/sec [Average]
[info]   (min, avg, max) = (1929,540, 1937,467, 1942,287), stdev = 6,194
[info]   CI (99.9%): [1913,616, 1961,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8016,001, 8016,001, 8016,001), stdev = 0,001
[info]   CI (99.9%): [8016,001, 8016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,714 ±(99.9%) 1162,725 MB/sec [Average]
[info]   (min, avg, max) = (1358,576, 1898,714, 2037,062), stdev = 301,956
[info]   CI (99.9%): [735,989, 3061,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7857,044 ±(99.9%) 4843,097 B/op [Average]
[info]   (min, avg, max) = (5607,976, 7857,044, 8462,686), stdev = 1257,737
[info]   CI (99.9%): [3013,947, 12700,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,189 ±(99.9%) 0,276 B/op [Average]
[info]   (min, avg, max) = (0,086, 0,189, 0,258), stdev = 0,072
[info]   CI (99.9%): [≈ 0, 0,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89,16% complete, ETA 00:14:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67262,287 ops/s
[info] # Warmup Iteration   2: 78344,570 ops/s
[info] # Warmup Iteration   3: 79085,879 ops/s
[info] # Warmup Iteration   4: 79130,207 ops/s
[info] # Warmup Iteration   5: 79011,114 ops/s
[info] Iteration   1: 78747,035 ops/s
[info]                  ·gc.alloc.rate:                   2251,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53816,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,664 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 78847,222 ops/s
[info]                  ·gc.alloc.rate:                   2253,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40386,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,246 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 78567,960 ops/s
[info]                  ·gc.alloc.rate:                   2245,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40602,865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,417 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 79207,351 ops/s
[info]                  ·gc.alloc.rate:                   2264,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53790,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,827 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 78676,172 ops/s
[info]                  ·gc.alloc.rate:               2248,796 MB/sec
[info]                  ·gc.alloc.rate.norm:          44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2033,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40681,423 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   78809,148 ±(99.9%) 942,676 ops/s [Average]
[info]   (min, avg, max) = (78567,960, 78809,148, 79207,351), stdev = 244,810
[info]   CI (99.9%): [77866,472, 79751,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2252,834 ±(99.9%) 27,228 MB/sec [Average]
[info]   (min, avg, max) = (2245,929, 2252,834, 2264,315), stdev = 7,071
[info]   CI (99.9%): [2225,606, 2280,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (44992,005, 44992,006, 44992,006), stdev = 0,001
[info]   CI (99.9%): [44992,004, 44992,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296,645 ±(99.9%) 1417,714 MB/sec [Average]
[info]   (min, avg, max) = (2023,245, 2296,645, 2707,131), stdev = 368,176
[info]   CI (99.9%): [878,931, 3714,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   45855,563 ±(99.9%) 27941,996 B/op [Average]
[info]   (min, avg, max) = (40386,098, 45855,563, 53816,651), stdev = 7256,448
[info]   CI (99.9%): [17913,566, 73797,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,831 ±(99.9%) 2,531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,831, 1,664), stdev = 0,657
[info]   CI (99.9%): [≈ 0, 3,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,36% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78890,456 ops/s
[info] # Warmup Iteration   2: 123183,736 ops/s
[info] # Warmup Iteration   3: 123921,372 ops/s
[info] # Warmup Iteration   4: 124374,079 ops/s
[info] # Warmup Iteration   5: 123656,916 ops/s
[info] Iteration   1: 123988,906 ops/s
[info]                  ·gc.alloc.rate:                   1906,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25790,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,793 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 123958,257 ops/s
[info]                  ·gc.alloc.rate:                   1906,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25823,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,793 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 124324,661 ops/s
[info]                  ·gc.alloc.rate:               1911,637 MB/sec
[info]                  ·gc.alloc.rate.norm:          24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17180,440 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 123682,212 ops/s
[info]                  ·gc.alloc.rate:                   1901,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25920,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,060 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 123931,068 ops/s
[info]                  ·gc.alloc.rate:                   1905,310 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25888,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,529 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   123977,021 ±(99.9%) 883,072 ops/s [Average]
[info]   (min, avg, max) = (123682,212, 123977,021, 124324,661), stdev = 229,331
[info]   CI (99.9%): [123093,949, 124860,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1906,239 ±(99.9%) 13,580 MB/sec [Average]
[info]   (min, avg, max) = (1901,803, 1906,239, 1911,637), stdev = 3,527
[info]   CI (99.9%): [1892,659, 1919,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24200,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24200,003, 24200,003, 24200,004), stdev = 0,001
[info]   CI (99.9%): [24200,003, 24200,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,599 ±(99.9%) 1167,728 MB/sec [Average]
[info]   (min, avg, max) = (1357,139, 1899,599, 2038,217), stdev = 303,255
[info]   CI (99.9%): [731,871, 3067,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24120,651 ±(99.9%) 14940,621 B/op [Average]
[info]   (min, avg, max) = (17180,440, 24120,651, 25920,066), stdev = 3880,032
[info]   CI (99.9%): [9180,030, 39061,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,635 ±(99.9%) 1,546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,635, 1,060), stdev = 0,401
[info]   CI (99.9%): [≈ 0, 2,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,56% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165383,237 ops/s
[info] # Warmup Iteration   2: 179453,361 ops/s
[info] # Warmup Iteration   3: 180089,652 ops/s
[info] # Warmup Iteration   4: 180187,243 ops/s
[info] # Warmup Iteration   5: 180116,003 ops/s
[info] Iteration   1: 179254,989 ops/s
[info]                  ·gc.alloc.rate:                   2633,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23685,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,366 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 180005,544 ops/s
[info]                  ·gc.alloc.rate:                   2644,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23635,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,728 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 179975,593 ops/s
[info]                  ·gc.alloc.rate:                   2643,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23684,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,546 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 179896,278 ops/s
[info]                  ·gc.alloc.rate:                   2642,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23735,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,546 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 180360,664 ops/s
[info]                  ·gc.alloc.rate:                   2648,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23704,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   179898,614 ±(99.9%) 1546,393 ops/s [Average]
[info]   (min, avg, max) = (179254,989, 179898,614, 180360,664), stdev = 401,593
[info]   CI (99.9%): [178352,221, 181445,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2642,640 ±(99.9%) 22,305 MB/sec [Average]
[info]   (min, avg, max) = (2633,072, 2642,640, 2648,749), stdev = 5,792
[info]   CI (99.9%): [2620,335, 2664,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23120,002, 23120,002, 23120,002), stdev = 0,001
[info]   CI (99.9%): [23120,002, 23120,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2707,686 ±(99.9%) 28,518 MB/sec [Average]
[info]   (min, avg, max) = (2697,471, 2707,686, 2715,751), stdev = 7,406
[info]   CI (99.9%): [2679,167, 2736,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23689,076 ±(99.9%) 141,401 B/op [Average]
[info]   (min, avg, max) = (23635,099, 23689,076, 23735,912), stdev = 36,722
[info]   CI (99.9%): [23547,675, 23830,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,510 ±(99.9%) 0,586 B/op [Average]
[info]   (min, avg, max) = (0,363, 0,510, 0,728), stdev = 0,152
[info]   CI (99.9%): [≈ 0, 1,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89,76% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39688,019 ops/s
[info] # Warmup Iteration   2: 57981,403 ops/s
[info] # Warmup Iteration   3: 58275,015 ops/s
[info] # Warmup Iteration   4: 58668,968 ops/s
[info] # Warmup Iteration   5: 58553,247 ops/s
[info] Iteration   1: 58942,605 ops/s
[info]                  ·gc.alloc.rate:                   3097,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90529,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,112 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 58664,335 ops/s
[info]                  ·gc.alloc.rate:                   3083,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72872,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,117 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 58623,386 ops/s
[info]                  ·gc.alloc.rate:                   3081,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91252,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,353 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 58004,759 ops/s
[info]                  ·gc.alloc.rate:                   3048,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73834,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,130 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 58396,205 ops/s
[info]                  ·gc.alloc.rate:                   3068,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91733,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,244 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   58526,258 ±(99.9%) 1348,714 ops/s [Average]
[info]   (min, avg, max) = (58004,759, 58526,258, 58942,605), stdev = 350,257
[info]   CI (99.9%): [57177,544, 59874,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3076,075 ±(99.9%) 70,923 MB/sec [Average]
[info]   (min, avg, max) = (3048,887, 3076,075, 3097,837), stdev = 18,418
[info]   CI (99.9%): [3005,152, 3146,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82720,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82720,007, 82720,007, 82720,008), stdev = 0,001
[info]   CI (99.9%): [82720,006, 82720,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3126,107 ±(99.9%) 1431,865 MB/sec [Average]
[info]   (min, avg, max) = (2716,217, 3126,107, 3402,787), stdev = 371,851
[info]   CI (99.9%): [1694,241, 4557,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84044,491 ±(99.9%) 37639,152 B/op [Average]
[info]   (min, avg, max) = (72872,628, 84044,491, 91733,122), stdev = 9774,768
[info]   CI (99.9%): [46405,340, 121683,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,125), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,791 ±(99.9%) 3,850 B/op [Average]
[info]   (min, avg, max) = (1,112, 1,791, 3,353), stdev = 1,000
[info]   CI (99.9%): [≈ 0, 5,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89,96% complete, ETA 00:13:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74878,507 ops/s
[info] # Warmup Iteration   2: 87845,894 ops/s
[info] # Warmup Iteration   3: 87797,872 ops/s
[info] # Warmup Iteration   4: 87180,854 ops/s
[info] # Warmup Iteration   5: 87373,486 ops/s
[info] Iteration   1: 87870,062 ops/s
[info]                  ·gc.alloc.rate:               1791,907 MB/sec
[info]                  ·gc.alloc.rate.norm:          32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36125,293 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 87755,907 ops/s
[info]                  ·gc.alloc.rate:               1789,339 MB/sec
[info]                  ·gc.alloc.rate.norm:          32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24142,956 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 88135,545 ops/s
[info]                  ·gc.alloc.rate:                   1797,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36103,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,743 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 88182,361 ops/s
[info]                  ·gc.alloc.rate:                   1798,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36140,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87778,556 ops/s
[info]                  ·gc.alloc.rate:               1789,923 MB/sec
[info]                  ·gc.alloc.rate.norm:          32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24232,175 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   87944,486 ±(99.9%) 774,261 ops/s [Average]
[info]   (min, avg, max) = (87755,907, 87944,486, 88182,361), stdev = 201,073
[info]   CI (99.9%): [87170,225, 88718,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1793,386 ±(99.9%) 16,260 MB/sec [Average]
[info]   (min, avg, max) = (1789,339, 1793,386, 1798,308), stdev = 4,223
[info]   CI (99.9%): [1777,126, 1809,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   32096,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32096,005, 32096,005, 32096,005), stdev = 0,001
[info]   CI (99.9%): [32096,004, 32096,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1752,201 ±(99.9%) 1418,542 MB/sec [Average]
[info]   (min, avg, max) = (1345,960, 1752,201, 2024,921), stdev = 368,391
[info]   CI (99.9%): [333,660, 3170,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   31348,929 ±(99.9%) 25173,547 B/op [Average]
[info]   (min, avg, max) = (24142,956, 31348,929, 36140,575), stdev = 6537,490
[info]   CI (99.9%): [6175,382, 56522,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,223 ±(99.9%) 1,280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,223, 0,743), stdev = 0,332
[info]   CI (99.9%): [≈ 0, 1,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90,16% complete, ETA 00:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216328,153 ops/s
[info] # Warmup Iteration   2: 277809,098 ops/s
[info] # Warmup Iteration   3: 276993,270 ops/s
[info] # Warmup Iteration   4: 275735,479 ops/s
[info] # Warmup Iteration   5: 275297,260 ops/s
[info] Iteration   1: 277473,992 ops/s
[info]                  ·gc.alloc.rate:                   1320,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7616,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 277782,269 ops/s
[info]                  ·gc.alloc.rate:                   1321,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7608,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 277758,724 ops/s
[info]                  ·gc.alloc.rate:                   1321,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7608,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 277473,707 ops/s
[info]                  ·gc.alloc.rate:                   1320,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7624,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 278431,155 ops/s
[info]                  ·gc.alloc.rate:                   1324,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7605,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,235 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   277783,969 ±(99.9%) 1505,988 ops/s [Average]
[info]   (min, avg, max) = (277473,707, 277783,969, 278431,155), stdev = 391,100
[info]   CI (99.9%): [276277,982, 279289,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1321,570 ±(99.9%) 6,789 MB/sec [Average]
[info]   (min, avg, max) = (1320,122, 1321,570, 1324,480), stdev = 1,763
[info]   CI (99.9%): [1314,781, 1328,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7488,001, 7488,002, 7488,002), stdev = 0,001
[info]   CI (99.9%): [7488,001, 7488,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1343,613 ±(99.9%) 4,303 MB/sec [Average]
[info]   (min, avg, max) = (1342,779, 1343,613, 1345,287), stdev = 1,117
[info]   CI (99.9%): [1339,310, 1347,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7612,905 ±(99.9%) 29,209 B/op [Average]
[info]   (min, avg, max) = (7605,634, 7612,905, 7624,331), stdev = 7,586
[info]   CI (99.9%): [7583,696, 7642,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,236 ±(99.9%) 0,321 B/op [Average]
[info]   (min, avg, max) = (0,118, 0,236, 0,354), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,36% complete, ETA 00:12:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 385758,869 ops/s
[info] # Warmup Iteration   2: 609539,130 ops/s
[info] # Warmup Iteration   3: 606948,851 ops/s
[info] # Warmup Iteration   4: 605878,101 ops/s
[info] # Warmup Iteration   5: 606159,791 ops/s
[info] Iteration   1: 608420,049 ops/s
[info]                  ·gc.alloc.rate:                   525,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1323,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 610572,881 ops/s
[info]                  ·gc.alloc.rate:                   527,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1738,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,805 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 608911,543 ops/s
[info]                  ·gc.alloc.rate:                   526,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1743,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 607607,622 ops/s
[info]                  ·gc.alloc.rate:               525,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1748,622 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 607561,803 ops/s
[info]                  ·gc.alloc.rate:      524,951 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   608614,780 ±(99.9%) 4748,671 ops/s [Average]
[info]   (min, avg, max) = (607561,803, 608614,780, 610572,881), stdev = 1233,215
[info]   CI (99.9%): [603866,108, 613363,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   525,888 ±(99.9%) 4,089 MB/sec [Average]
[info]   (min, avg, max) = (524,951, 525,888, 527,560), stdev = 1,062
[info]   CI (99.9%): [521,798, 529,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1360,001, 1360,001, 1360,001), stdev = 0,001
[info]   CI (99.9%): [1360,001, 1360,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507,113 ±(99.9%) 1125,022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,113, 675,120), stdev = 292,165
[info]   CI (99.9%): [≈ 0, 1632,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1310,788 ±(99.9%) 2907,285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1310,788, 1748,622), stdev = 755,013
[info]   CI (99.9%): [≈ 0, 4218,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,312), stdev = 0,132
[info]   CI (99.9%): [≈ 0, 0,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,204 ±(99.9%) 1,310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,204, 0,805), stdev = 0,340
[info]   CI (99.9%): [≈ 0, 1,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,56% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 557525,384 ops/s
[info] # Warmup Iteration   2: 561992,309 ops/s
[info] # Warmup Iteration   3: 549041,102 ops/s
[info] # Warmup Iteration   4: 533725,584 ops/s
[info] # Warmup Iteration   5: 541512,110 ops/s
[info] Iteration   1: 523647,064 ops/s
[info]                  ·gc.alloc.rate:      282,111 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 530401,648 ops/s
[info]                  ·gc.alloc.rate:                   285,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1518,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 534246,467 ops/s
[info]                  ·gc.alloc.rate:      287,848 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 549032,169 ops/s
[info]                  ·gc.alloc.rate:                   295,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1466,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 553513,339 ops/s
[info]                  ·gc.alloc.rate:      298,174 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   538168,137 ±(99.9%) 48709,573 ops/s [Average]
[info]   (min, avg, max) = (523647,064, 538168,137, 553513,339), stdev = 12649,722
[info]   CI (99.9%): [489458,564, 586877,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   289,941 ±(99.9%) 26,214 MB/sec [Average]
[info]   (min, avg, max) = (282,111, 289,941, 298,174), stdev = 6,808
[info]   CI (99.9%): [263,727, 316,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,001, 848,001, 848,001), stdev = 0,001
[info]   CI (99.9%): [848,001, 848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,621 ±(99.9%) 1078,907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,621, 511,560), stdev = 280,189
[info]   CI (99.9%): [≈ 0, 1283,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   596,902 ±(99.9%) 3148,075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 596,902, 1518,017), stdev = 817,545
[info]   CI (99.9%): [≈ 0, 3744,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,021 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,031), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90,76% complete, ETA 00:12:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 673815,464 ops/s
[info] # Warmup Iteration   2: 696312,846 ops/s
[info] # Warmup Iteration   3: 692171,430 ops/s
[info] # Warmup Iteration   4: 693496,402 ops/s
[info] # Warmup Iteration   5: 693797,593 ops/s
[info] Iteration   1: 695535,790 ops/s
[info]                  ·gc.alloc.rate:      7,071 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 693801,341 ops/s
[info]                  ·gc.alloc.rate:      7,054 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 697719,322 ops/s
[info]                  ·gc.alloc.rate:      7,093 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 693884,593 ops/s
[info]                  ·gc.alloc.rate:      7,055 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 697400,453 ops/s
[info]                  ·gc.alloc.rate:      7,089 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   695668,300 ±(99.9%) 7175,990 ops/s [Average]
[info]   (min, avg, max) = (693801,341, 695668,300, 697719,322), stdev = 1863,582
[info]   CI (99.9%): [688492,310, 702844,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7,072 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (7,054, 7,072, 7,093), stdev = 0,019
[info]   CI (99.9%): [7,001, 7,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90,96% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27149,412 ops/s
[info] # Warmup Iteration   2: 37512,717 ops/s
[info] # Warmup Iteration   3: 37959,877 ops/s
[info] # Warmup Iteration   4: 38178,456 ops/s
[info] # Warmup Iteration   5: 38048,634 ops/s
[info] Iteration   1: 37991,674 ops/s
[info]                  ·gc.alloc.rate:                   1892,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83304,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,587 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38139,349 ops/s
[info]                  ·gc.alloc.rate:                   1900,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83118,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,859 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 38181,813 ops/s
[info]                  ·gc.alloc.rate:                   1902,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83194,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,716 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38159,502 ops/s
[info]                  ·gc.alloc.rate:                   1901,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83409,142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,859 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 38183,181 ops/s
[info]                  ·gc.alloc.rate:                   1902,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83507,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   38131,104 ±(99.9%) 308,043 ops/s [Average]
[info]   (min, avg, max) = (37991,674, 38131,104, 38183,181), stdev = 79,998
[info]   CI (99.9%): [37823,060, 38439,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1899,880 ±(99.9%) 15,639 MB/sec [Average]
[info]   (min, avg, max) = (1892,775, 1899,880, 1902,408), stdev = 4,061
[info]   CI (99.9%): [1884,241, 1915,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (78416,011, 78416,011, 78416,012), stdev = 0,001
[info]   CI (99.9%): [78416,009, 78416,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2018,377 ±(99.9%) 23,504 MB/sec [Average]
[info]   (min, avg, max) = (2010,769, 2018,377, 2025,936), stdev = 6,104
[info]   CI (99.9%): [1994,873, 2041,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83306,824 ±(99.9%) 605,594 B/op [Average]
[info]   (min, avg, max) = (83118,662, 83306,824, 83507,735), stdev = 157,271
[info]   CI (99.9%): [82701,230, 83912,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,719 ±(99.9%) 3,315 B/op [Average]
[info]   (min, avg, max) = (0,859, 1,719, 2,587), stdev = 0,861
[info]   CI (99.9%): [≈ 0, 5,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91,16% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143824,728 ops/s
[info] # Warmup Iteration   2: 154117,922 ops/s
[info] # Warmup Iteration   3: 153643,178 ops/s
[info] # Warmup Iteration   4: 154392,777 ops/s
[info] # Warmup Iteration   5: 154307,423 ops/s
[info] Iteration   1: 148280,444 ops/s
[info]                  ·gc.alloc.rate:               1110,519 MB/sec
[info]                  ·gc.alloc.rate.norm:          11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7133,892 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 154620,318 ops/s
[info]                  ·gc.alloc.rate:                   1157,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13683,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,636 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 154263,124 ops/s
[info]                  ·gc.alloc.rate:                   1154,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13713,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 154226,806 ops/s
[info]                  ·gc.alloc.rate:               1154,787 MB/sec
[info]                  ·gc.alloc.rate.norm:          11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6858,280 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 154243,321 ops/s
[info]                  ·gc.alloc.rate:                   1154,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13729,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,637 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   153126,803 ±(99.9%) 10451,080 ops/s [Average]
[info]   (min, avg, max) = (148280,444, 153126,803, 154620,318), stdev = 2714,112
[info]   CI (99.9%): [142675,722, 163577,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1146,537 ±(99.9%) 77,688 MB/sec [Average]
[info]   (min, avg, max) = (1110,519, 1146,537, 1157,743), stdev = 20,175
[info]   CI (99.9%): [1068,849, 1224,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11784,003, 11784,003, 11784,003), stdev = 0,001
[info]   CI (99.9%): [11784,002, 11784,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,619 ±(99.9%) 1418,112 MB/sec [Average]
[info]   (min, avg, max) = (672,085, 1075,619, 1345,305), stdev = 368,279
[info]   CI (99.9%): [≈ 0, 2493,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11023,673 ±(99.9%) 14162,650 B/op [Average]
[info]   (min, avg, max) = (6858,280, 11023,673, 13729,176), stdev = 3677,995
[info]   CI (99.9%): [≈ 0, 25186,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,340 ±(99.9%) 1,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,340, 0,637), stdev = 0,322
[info]   CI (99.9%): [≈ 0, 1,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91,37% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5052433,237 ops/s
[info] # Warmup Iteration   2: 5731496,816 ops/s
[info] # Warmup Iteration   3: 5780485,487 ops/s
[info] # Warmup Iteration   4: 5749874,589 ops/s
[info] # Warmup Iteration   5: 5763290,541 ops/s
[info] Iteration   1: 5755087,830 ops/s
[info]                  ·gc.alloc.rate:                   4241,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5672932,476 ops/s
[info]                  ·gc.alloc.rate:                   4180,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4077,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1131,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   3: 5716731,258 ops/s
[info]                  ·gc.alloc.rate:                   4213,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1123,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 5768301,747 ops/s
[info]                  ·gc.alloc.rate:                   4251,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4766,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1300,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 5787387,858 ops/s
[info]                  ·gc.alloc.rate:                   4265,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1111,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5740088,234 ±(99.9%) 175549,761 ops/s [Average]
[info]   (min, avg, max) = (5672932,476, 5740088,234, 5787387,858), stdev = 45589,716
[info]   CI (99.9%): [5564538,472, 5915637,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   4230,503 ±(99.9%) 129,522 MB/sec [Average]
[info]   (min, avg, max) = (4180,841, 4230,503, 4265,090), stdev = 33,637
[info]   CI (99.9%): [4100,981, 4360,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,000, 1160,000, 1160,000), stdev = 0,001
[info]   CI (99.9%): [1160,000, 1160,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4216,922 ±(99.9%) 1182,326 MB/sec [Average]
[info]   (min, avg, max) = (4070,340, 4216,922, 4766,061), stdev = 307,046
[info]   CI (99.9%): [3034,597, 5399,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1156,143 ±(99.9%) 311,998 B/op [Average]
[info]   (min, avg, max) = (1111,844, 1156,143, 1300,367), stdev = 81,025
[info]   CI (99.9%): [844,145, 1468,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,019, 0,028), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 4,200, 10,000), stdev = 3,271
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91,57% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2219981,294 ops/s
[info] # Warmup Iteration   2: 8241234,748 ops/s
[info] # Warmup Iteration   3: 8595659,585 ops/s
[info] # Warmup Iteration   4: 8541249,863 ops/s
[info] # Warmup Iteration   5: 8572483,100 ops/s
[info] Iteration   1: 8622509,058 ops/s
[info]                  ·gc.alloc.rate:               920,264 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,688 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 8606198,058 ops/s
[info]                  ·gc.alloc.rate:               918,671 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,921 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 8489506,048 ops/s
[info]                  ·gc.alloc.rate:                   906,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     249,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8586204,827 ops/s
[info]                  ·gc.alloc.rate:               916,549 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123,193 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 8605655,328 ops/s
[info]                  ·gc.alloc.rate:                   918,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   8582014,664 ±(99.9%) 205197,371 ops/s [Average]
[info]   (min, avg, max) = (8489506,048, 8582014,664, 8622509,058), stdev = 53289,106
[info]   CI (99.9%): [8376817,293, 8787212,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   916,038 ±(99.9%) 21,795 MB/sec [Average]
[info]   (min, avg, max) = (906,191, 916,038, 920,264), stdev = 5,660
[info]   CI (99.9%): [894,243, 937,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   806,503 ±(99.9%) 1157,347 MB/sec [Average]
[info]   (min, avg, max) = (672,037, 806,503, 1344,160), stdev = 300,559
[info]   CI (99.9%): [≈ 0, 1963,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   148,183 ±(99.9%) 217,438 B/op [Average]
[info]   (min, avg, max) = (122,688, 148,183, 249,196), stdev = 56,468
[info]   CI (99.9%): [≈ 0, 365,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,019), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,77% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3660346,939 ops/s
[info] # Warmup Iteration   2: 5342520,192 ops/s
[info] # Warmup Iteration   3: 5349905,498 ops/s
[info] # Warmup Iteration   4: 5363743,997 ops/s
[info] # Warmup Iteration   5: 5310671,780 ops/s
[info] Iteration   1: 5388373,955 ops/s
[info]                  ·gc.alloc.rate:                   2547,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5402051,208 ops/s
[info]                  ·gc.alloc.rate:                   2553,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     789,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5350944,777 ops/s
[info]                  ·gc.alloc.rate:                   2529,287 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     798,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5329014,122 ops/s
[info]                  ·gc.alloc.rate:                   2519,231 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     601,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5308603,555 ops/s
[info]                  ·gc.alloc.rate:               2509,207 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2719,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 806,499 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5355797,523 ±(99.9%) 151218,047 ops/s [Average]
[info]   (min, avg, max) = (5308603,555, 5355797,523, 5402051,208), stdev = 39270,847
[info]   CI (99.9%): [5204579,476, 5507015,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2531,729 ±(99.9%) 71,872 MB/sec [Average]
[info]   (min, avg, max) = (2509,207, 2531,729, 2553,807), stdev = 18,665
[info]   CI (99.9%): [2459,857, 2603,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2578,361 ±(99.9%) 1162,625 MB/sec [Average]
[info]   (min, avg, max) = (2038,321, 2578,361, 2719,989), stdev = 301,930
[info]   CI (99.9%): [1415,736, 3740,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   757,549 ±(99.9%) 335,889 B/op [Average]
[info]   (min, avg, max) = (601,974, 757,549, 806,499), stdev = 87,229
[info]   CI (99.9%): [421,659, 1093,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,016 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,016, 0,024), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,97% complete, ETA 00:10:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8596872,715 ops/s
[info] # Warmup Iteration   2: 8929117,781 ops/s
[info] # Warmup Iteration   3: 8987661,397 ops/s
[info] # Warmup Iteration   4: 9079822,424 ops/s
[info] # Warmup Iteration   5: 9130749,480 ops/s
[info] Iteration   1: 9129246,656 ops/s
[info]                  ·gc.alloc.rate:                   974,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9014859,521 ops/s
[info]                  ·gc.alloc.rate:               962,362 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117,344 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9000842,931 ops/s
[info]                  ·gc.alloc.rate:                   960,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117,517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8982590,988 ops/s
[info]                  ·gc.alloc.rate:                   958,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 9001887,431 ops/s
[info]                  ·gc.alloc.rate:               960,710 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117,510 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   9025885,505 ±(99.9%) 226849,610 ops/s [Average]
[info]   (min, avg, max) = (8982590,988, 9025885,505, 9129246,656), stdev = 58912,123
[info]   CI (99.9%): [8799035,895, 9252735,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   963,426 ±(99.9%) 24,202 MB/sec [Average]
[info]   (min, avg, max) = (958,879, 963,426, 974,451), stdev = 6,285
[info]   CI (99.9%): [939,225, 987,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,169 ±(99.9%) 1418,894 MB/sec [Average]
[info]   (min, avg, max) = (671,980, 941,169, 1345,436), stdev = 368,482
[info]   CI (99.9%): [≈ 0, 2360,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   163,968 ±(99.9%) 245,289 B/op [Average]
[info]   (min, avg, max) = (117,344, 163,968, 235,511), stdev = 63,701
[info]   CI (99.9%): [≈ 0, 409,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92,17% complete, ETA 00:10:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5059186,559 ops/s
[info] # Warmup Iteration   2: 6298929,543 ops/s
[info] # Warmup Iteration   3: 6327775,694 ops/s
[info] # Warmup Iteration   4: 6352495,322 ops/s
[info] # Warmup Iteration   5: 6358939,331 ops/s
[info] Iteration   1: 6344097,446 ops/s
[info]                  ·gc.alloc.rate:                   3321,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     837,596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 6301965,986 ops/s
[info]                  ·gc.alloc.rate:                   3299,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 6344616,065 ops/s
[info]                  ·gc.alloc.rate:                   3321,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     841,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6346437,937 ops/s
[info]                  ·gc.alloc.rate:                   3322,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6319501,687 ops/s
[info]                  ·gc.alloc.rate:                   3308,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   6331323,824 ±(99.9%) 76285,791 ops/s [Average]
[info]   (min, avg, max) = (6301965,986, 6331323,824, 6346437,937), stdev = 19811,178
[info]   CI (99.9%): [6255038,032, 6407609,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3314,692 ±(99.9%) 40,238 MB/sec [Average]
[info]   (min, avg, max) = (3299,417, 3314,692, 3322,976), stdev = 10,450
[info]   CI (99.9%): [3274,454, 3354,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3254,448 ±(99.9%) 1155,530 MB/sec [Average]
[info]   (min, avg, max) = (2717,875, 3254,448, 3400,470), stdev = 300,087
[info]   CI (99.9%): [2098,918, 4409,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   809,115 ±(99.9%) 291,291 B/op [Average]
[info]   (min, avg, max) = (673,953, 809,115, 846,998), stdev = 75,647
[info]   CI (99.9%): [517,824, 1100,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,017, 0,026), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92,37% complete, ETA 00:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4700310,938 ops/s
[info] # Warmup Iteration   2: 4889701,629 ops/s
[info] # Warmup Iteration   3: 4956315,686 ops/s
[info] # Warmup Iteration   4: 4890601,381 ops/s
[info] # Warmup Iteration   5: 4935291,198 ops/s
[info] Iteration   1: 4942455,136 ops/s
[info]                  ·gc.alloc.rate:                   2662,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     859,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4926474,523 ops/s
[info]                  ·gc.alloc.rate:                   2654,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 4917227,818 ops/s
[info]                  ·gc.alloc.rate:                   2649,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     866,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4916492,485 ops/s
[info]                  ·gc.alloc.rate:                   2649,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4912411,140 ops/s
[info]                  ·gc.alloc.rate:                   2646,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     870,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   4923012,220 ±(99.9%) 46302,440 ops/s [Average]
[info]   (min, avg, max) = (4912411,140, 4923012,220, 4942455,136), stdev = 12024,597
[info]   CI (99.9%): [4876709,780, 4969314,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2652,406 ±(99.9%) 24,231 MB/sec [Average]
[info]   (min, avg, max) = (2646,560, 2652,406, 2662,541), stdev = 6,293
[info]   CI (99.9%): [2628,176, 2676,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   848,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,000, 848,000, 848,000), stdev = 0,001
[info]   CI (99.9%): [848,000, 848,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2573,168 ±(99.9%) 1173,402 MB/sec [Average]
[info]   (min, avg, max) = (2028,189, 2573,168, 2716,253), stdev = 304,729
[info]   CI (99.9%): [1399,766, 3746,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   822,704 ±(99.9%) 376,401 B/op [Average]
[info]   (min, avg, max) = (648,001, 822,704, 870,331), stdev = 97,750
[info]   CI (99.9%): [446,303, 1199,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,022, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,019, 0,020), stdev = 0,003
[info]   CI (99.9%): [0,007, 0,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92,57% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2778181,852 ops/s
[info] # Warmup Iteration   2: 3427379,005 ops/s
[info] # Warmup Iteration   3: 3450388,944 ops/s
[info] # Warmup Iteration   4: 3441962,077 ops/s
[info] # Warmup Iteration   5: 3455661,168 ops/s
[info] Iteration   1: 3457337,528 ops/s
[info]                  ·gc.alloc.rate:                   825,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3457160,759 ops/s
[info]                  ·gc.alloc.rate:               825,902 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 305,999 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 3458714,284 ops/s
[info]                  ·gc.alloc.rate:                   826,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     611,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3459846,645 ops/s
[info]                  ·gc.alloc.rate:               826,496 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 305,437 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 3459371,138 ops/s
[info]                  ·gc.alloc.rate:                   826,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3458486,071 ±(99.9%) 4621,652 ops/s [Average]
[info]   (min, avg, max) = (3457160,759, 3458486,071, 3459846,645), stdev = 1200,228
[info]   CI (99.9%): [3453864,419, 3463107,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   826,137 ±(99.9%) 0,968 MB/sec [Average]
[info]   (min, avg, max) = (825,890, 826,137, 826,496), stdev = 0,251
[info]   CI (99.9%): [825,170, 827,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (376,000, 376,000, 376,000), stdev = 0,001
[info]   CI (99.9%): [376,000, 376,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   806,605 ±(99.9%) 1155,713 MB/sec [Average]
[info]   (min, avg, max) = (671,238, 806,605, 1343,497), stdev = 300,135
[info]   CI (99.9%): [≈ 0, 1962,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   367,106 ±(99.9%) 525,904 B/op [Average]
[info]   (min, avg, max) = (305,437, 367,106, 611,416), stdev = 136,576
[info]   CI (99.9%): [≈ 0, 893,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,028), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92,77% complete, ETA 00:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1837919,508 ops/s
[info] # Warmup Iteration   2: 6399765,039 ops/s
[info] # Warmup Iteration   3: 6456181,440 ops/s
[info] # Warmup Iteration   4: 6445603,858 ops/s
[info] # Warmup Iteration   5: 6458399,708 ops/s
[info] Iteration   1: 6467076,075 ops/s
[info]                  ·gc.alloc.rate:                   624,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,644 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6483759,458 ops/s
[info]                  ·gc.alloc.rate:                   626,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6480087,155 ops/s
[info]                  ·gc.alloc.rate:               625,789 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163,415 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 6478542,704 ops/s
[info]                  ·gc.alloc.rate:                   625,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6486915,203 ops/s
[info]                  ·gc.alloc.rate:      626,348 MB/sec
[info]                  ·gc.alloc.rate.norm: 152,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6479276,119 ±(99.9%) 29103,118 ops/s [Average]
[info]   (min, avg, max) = (6467076,075, 6479276,119, 6486915,203), stdev = 7557,987
[info]   CI (99.9%): [6450173,001, 6508379,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   625,702 ±(99.9%) 2,723 MB/sec [Average]
[info]   (min, avg, max) = (624,533, 625,702, 626,348), stdev = 0,707
[info]   CI (99.9%): [622,980, 628,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,764 ±(99.9%) 1159,733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,764, 674,129), stdev = 301,179
[info]   CI (99.9%): [≈ 0, 1698,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   130,914 ±(99.9%) 281,805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130,914, 164,067), stdev = 73,184
[info]   CI (99.9%): [≈ 0, 412,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,537 ±(99.9%) 4,538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,537, 2,645), stdev = 1,178
[info]   CI (99.9%): [≈ 0, 5,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,131 ±(99.9%) 1,104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,131, 0,644), stdev = 0,287
[info]   CI (99.9%): [≈ 0, 1,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92,97% complete, ETA 00:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1739894,381 ops/s
[info] # Warmup Iteration   2: 2158303,732 ops/s
[info] # Warmup Iteration   3: 2165204,146 ops/s
[info] # Warmup Iteration   4: 2161741,338 ops/s
[info] # Warmup Iteration   5: 2157369,036 ops/s
[info] Iteration   1: 2145352,572 ops/s
[info]                  ·gc.alloc.rate:                   665,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2163277,761 ops/s
[info]                  ·gc.alloc.rate:                   670,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     489,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2162301,247 ops/s
[info]                  ·gc.alloc.rate:               670,413 MB/sec
[info]                  ·gc.alloc.rate.norm:          488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 489,426 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2158443,526 ops/s
[info]                  ·gc.alloc.rate:               669,275 MB/sec
[info]                  ·gc.alloc.rate.norm:          488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 490,786 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2161194,165 ops/s
[info]                  ·gc.alloc.rate:                   670,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     490,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2158113,854 ±(99.9%) 28338,719 ops/s [Average]
[info]   (min, avg, max) = (2145352,572, 2158113,854, 2163277,761), stdev = 7359,475
[info]   CI (99.9%): [2129775,135, 2186452,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   669,133 ±(99.9%) 8,646 MB/sec [Average]
[info]   (min, avg, max) = (665,237, 669,133, 670,734), stdev = 2,245
[info]   CI (99.9%): [660,487, 677,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (488,000, 488,000, 488,000), stdev = 0,001
[info]   CI (99.9%): [488,000, 488,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   672,482 ±(99.9%) 2,404 MB/sec [Average]
[info]   (min, avg, max) = (671,519, 672,482, 673,095), stdev = 0,624
[info]   CI (99.9%): [670,078, 674,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   490,446 ±(99.9%) 5,219 B/op [Average]
[info]   (min, avg, max) = (489,248, 490,446, 492,608), stdev = 1,355
[info]   CI (99.9%): [485,227, 495,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,061), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93,17% complete, ETA 00:09:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10003055,723 ops/s
[info] # Warmup Iteration   2: 10588756,014 ops/s
[info] # Warmup Iteration   3: 10720486,988 ops/s
[info] # Warmup Iteration   4: 10769694,230 ops/s
[info] # Warmup Iteration   5: 10749479,907 ops/s
[info] Iteration   1: 10743904,593 ops/s
[info]                  ·gc.alloc.rate:               1037,619 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98,551 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 10757037,825 ops/s
[info]                  ·gc.alloc.rate:                   1038,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10755786,380 ops/s
[info]                  ·gc.alloc.rate:               1038,701 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98,344 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 10737925,376 ops/s
[info]                  ·gc.alloc.rate:                   1037,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10710515,527 ops/s
[info]                  ·gc.alloc.rate:               1034,270 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98,759 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   10741033,940 ±(99.9%) 72629,212 ops/s [Average]
[info]   (min, avg, max) = (10710515,527, 10741033,940, 10757037,825), stdev = 18861,576
[info]   CI (99.9%): [10668404,728, 10813663,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1037,300 ±(99.9%) 7,114 MB/sec [Average]
[info]   (min, avg, max) = (1034,270, 1037,300, 1038,836), stdev = 1,847
[info]   CI (99.9%): [1030,186, 1044,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,041 ±(99.9%) 1417,199 MB/sec [Average]
[info]   (min, avg, max) = (671,997, 941,041, 1344,216), stdev = 368,042
[info]   CI (99.9%): [≈ 0, 2358,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   137,870 ±(99.9%) 207,320 B/op [Average]
[info]   (min, avg, max) = (98,344, 137,870, 197,015), stdev = 53,840
[info]   CI (99.9%): [≈ 0, 345,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,009), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93,37% complete, ETA 00:08:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8861850,924 ops/s
[info] # Warmup Iteration   2: 9235203,020 ops/s
[info] # Warmup Iteration   3: 9085941,016 ops/s
[info] # Warmup Iteration   4: 9089102,291 ops/s
[info] # Warmup Iteration   5: 9096065,525 ops/s
[info] Iteration   1: 9111093,821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9088578,091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9083113,705 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9092125,894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9110755,852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9097133,473 ±(99.9%) 50031,885 ops/s [Average]
[info]   (min, avg, max) = (9083113,705, 9097133,473, 9111093,821), stdev = 12993,122
[info]   CI (99.9%): [9047101,588, 9147165,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93,57% complete, ETA 00:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3124402,409 ops/s
[info] # Warmup Iteration   2: 3692039,746 ops/s
[info] # Warmup Iteration   3: 3875548,015 ops/s
[info] # Warmup Iteration   4: 3867037,551 ops/s
[info] # Warmup Iteration   5: 3887359,750 ops/s
[info] Iteration   1: 3891675,359 ops/s
[info]                  ·gc.alloc.rate:                   1246,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3904195,140 ops/s
[info]                  ·gc.alloc.rate:                   1250,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     540,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3896721,736 ops/s
[info]                  ·gc.alloc.rate:                   1247,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3893436,390 ops/s
[info]                  ·gc.alloc.rate:               1246,848 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 271,140 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 3897904,400 ops/s
[info]                  ·gc.alloc.rate:                   1248,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3896786,605 ±(99.9%) 18615,867 ops/s [Average]
[info]   (min, avg, max) = (3891675,359, 3896786,605, 3904195,140), stdev = 4834,482
[info]   CI (99.9%): [3878170,738, 3915402,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1247,829 ±(99.9%) 5,817 MB/sec [Average]
[info]   (min, avg, max) = (1246,209, 1247,829, 1250,166), stdev = 1,511
[info]   CI (99.9%): [1242,011, 1253,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,836 ±(99.9%) 1153,918 MB/sec [Average]
[info]   (min, avg, max) = (670,775, 1206,836, 1342,379), stdev = 299,669
[info]   CI (99.9%): [52,918, 2360,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   487,401 ±(99.9%) 465,526 B/op [Average]
[info]   (min, avg, max) = (271,140, 487,401, 542,067), stdev = 120,896
[info]   CI (99.9%): [21,875, 952,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,025), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93,78% complete, ETA 00:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 426412,981 ops/s
[info] # Warmup Iteration   2: 442843,276 ops/s
[info] # Warmup Iteration   3: 440059,110 ops/s
[info] # Warmup Iteration   4: 444056,271 ops/s
[info] # Warmup Iteration   5: 433450,049 ops/s
[info] Iteration   1: 441647,495 ops/s
[info]                  ·gc.alloc.rate:      213,256 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 442732,226 ops/s
[info]                  ·gc.alloc.rate:               213,778 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1818,553 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 443383,364 ops/s
[info]                  ·gc.alloc.rate:      214,102 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 442146,625 ops/s
[info]                  ·gc.alloc.rate:      213,515 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 442066,833 ops/s
[info]                  ·gc.alloc.rate:               213,435 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1821,260 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   442395,309 ±(99.9%) 2596,495 ops/s [Average]
[info]   (min, avg, max) = (441647,495, 442395,309, 443383,364), stdev = 674,302
[info]   CI (99.9%): [439798,813, 444991,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   213,617 ±(99.9%) 1,270 MB/sec [Average]
[info]   (min, avg, max) = (213,256, 213,617, 214,102), stdev = 0,330
[info]   CI (99.9%): [212,347, 214,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   760,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,001, 760,001, 760,001), stdev = 0,001
[info]   CI (99.9%): [760,001, 760,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,602 ±(99.9%) 1078,807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,602, 511,534), stdev = 280,163
[info]   CI (99.9%): [≈ 0, 1283,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   727,963 ±(99.9%) 3838,338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 727,963, 1821,260), stdev = 996,804
[info]   CI (99.9%): [≈ 0, 4566,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93,98% complete, ETA 00:08:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1268937,512 ops/s
[info] # Warmup Iteration   2: 1652022,717 ops/s
[info] # Warmup Iteration   3: 1685383,290 ops/s
[info] # Warmup Iteration   4: 1673353,139 ops/s
[info] # Warmup Iteration   5: 1683823,762 ops/s
[info] Iteration   1: 1685101,790 ops/s
[info]                  ·gc.alloc.rate:                   2980,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2522,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1684428,349 ops/s
[info]                  ·gc.alloc.rate:                   2979,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3161,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1681192,634 ops/s
[info]                  ·gc.alloc.rate:                   2974,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2539,107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1671689,984 ops/s
[info]                  ·gc.alloc.rate:                   2957,027 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3196,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1678573,060 ops/s
[info]                  ·gc.alloc.rate:                   2968,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2549,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1680197,163 ±(99.9%) 20910,723 ops/s [Average]
[info]   (min, avg, max) = (1671689,984, 1680197,163, 1685101,790), stdev = 5430,448
[info]   CI (99.9%): [1659286,441, 1701107,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2971,880 ±(99.9%) 36,462 MB/sec [Average]
[info]   (min, avg, max) = (2957,027, 2971,880, 2980,199), stdev = 9,469
[info]   CI (99.9%): [2935,418, 3008,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2784,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2784,000, 2784,000, 2784,000), stdev = 0,001
[info]   CI (99.9%): [2784,000, 2784,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2981,768 ±(99.9%) 1431,408 MB/sec [Average]
[info]   (min, avg, max) = (2700,005, 2981,768, 3394,713), stdev = 371,732
[info]   CI (99.9%): [1550,360, 4413,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2793,622 ±(99.9%) 1354,922 B/op [Average]
[info]   (min, avg, max) = (2522,253, 2793,622, 3196,075), stdev = 351,869
[info]   CI (99.9%): [1438,699, 4148,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,051 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (0,039, 0,051, 0,058), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94,18% complete, ETA 00:07:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305854,720 ops/s
[info] # Warmup Iteration   2: 2425446,809 ops/s
[info] # Warmup Iteration   3: 2431964,359 ops/s
[info] # Warmup Iteration   4: 2423580,673 ops/s
[info] # Warmup Iteration   5: 2412238,174 ops/s
[info] Iteration   1: 2410186,670 ops/s
[info]                  ·gc.alloc.rate:                   673,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,720 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2390173,342 ops/s
[info]                  ·gc.alloc.rate:                   668,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2375018,054 ops/s
[info]                  ·gc.alloc.rate:               663,971 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 445,866 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2384479,333 ops/s
[info]                  ·gc.alloc.rate:                   666,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     444,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2384445,407 ops/s
[info]                  ·gc.alloc.rate:                   666,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2388860,561 ±(99.9%) 50457,766 ops/s [Average]
[info]   (min, avg, max) = (2375018,054, 2388860,561, 2410186,670), stdev = 13103,722
[info]   CI (99.9%): [2338402,795, 2439318,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   667,795 ±(99.9%) 14,147 MB/sec [Average]
[info]   (min, avg, max) = (663,971, 667,795, 673,783), stdev = 3,674
[info]   CI (99.9%): [653,648, 681,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   673,141 ±(99.9%) 3,635 MB/sec [Average]
[info]   (min, avg, max) = (671,931, 673,141, 674,140), stdev = 0,944
[info]   CI (99.9%): [669,507, 676,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   443,532 ±(99.9%) 7,963 B/op [Average]
[info]   (min, avg, max) = (440,182, 443,532, 445,866), stdev = 2,068
[info]   CI (99.9%): [435,569, 451,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,544 ±(99.9%) 4,501 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,544, 2,635), stdev = 1,169
[info]   CI (99.9%): [≈ 0, 5,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,355 ±(99.9%) 2,939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,355, 1,720), stdev = 0,763
[info]   CI (99.9%): [≈ 0, 3,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,38% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846261,379 ops/s
[info] # Warmup Iteration   2: 1535294,739 ops/s
[info] # Warmup Iteration   3: 1562566,067 ops/s
[info] # Warmup Iteration   4: 1560681,779 ops/s
[info] # Warmup Iteration   5: 1559283,647 ops/s
[info] Iteration   1: 1553902,965 ops/s
[info]                  ·gc.alloc.rate:                   1113,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              1128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1368,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1552902,696 ops/s
[info]                  ·gc.alloc.rate:                   1112,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              1128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1370,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1556878,380 ops/s
[info]                  ·gc.alloc.rate:               1115,778 MB/sec
[info]                  ·gc.alloc.rate.norm:          1128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 683,792 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1544174,207 ops/s
[info]                  ·gc.alloc.rate:                   1106,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1380,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1556950,295 ops/s
[info]                  ·gc.alloc.rate:                   1115,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1369,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1552961,708 ±(99.9%) 20134,005 ops/s [Average]
[info]   (min, avg, max) = (1544174,207, 1552961,708, 1556950,295), stdev = 5228,737
[info]   CI (99.9%): [1532827,703, 1573095,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1112,987 ±(99.9%) 14,337 MB/sec [Average]
[info]   (min, avg, max) = (1106,710, 1112,987, 1115,778), stdev = 3,723
[info]   CI (99.9%): [1098,650, 1127,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1128,000, 1128,000, 1128,000), stdev = 0,001
[info]   CI (99.9%): [1128,000, 1128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,848 ±(99.9%) 1165,555 MB/sec [Average]
[info]   (min, avg, max) = (676,383, 1217,848, 1354,688), stdev = 302,691
[info]   CI (99.9%): [52,293, 2383,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1234,632 ±(99.9%) 1185,858 B/op [Average]
[info]   (min, avg, max) = (683,792, 1234,632, 1380,236), stdev = 307,964
[info]   CI (99.9%): [48,774, 2420,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,038, 0,063), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,58% complete, ETA 00:07:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2683405,875 ops/s
[info] # Warmup Iteration   2: 2845219,775 ops/s
[info] # Warmup Iteration   3: 2862342,903 ops/s
[info] # Warmup Iteration   4: 2863461,071 ops/s
[info] # Warmup Iteration   5: 2834622,631 ops/s
[info] Iteration   1: 2871166,308 ops/s
[info]                  ·gc.alloc.rate:                   802,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2880211,329 ops/s
[info]                  ·gc.alloc.rate:               805,152 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368,022 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2879522,369 ops/s
[info]                  ·gc.alloc.rate:                   805,069 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2873485,256 ops/s
[info]                  ·gc.alloc.rate:               803,321 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368,114 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2867645,075 ops/s
[info]                  ·gc.alloc.rate:               801,559 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368,863 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2874406,067 ±(99.9%) 20819,538 ops/s [Average]
[info]   (min, avg, max) = (2867645,075, 2874406,067, 2880211,329), stdev = 5406,768
[info]   CI (99.9%): [2853586,529, 2895225,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   803,541 ±(99.9%) 6,023 MB/sec [Average]
[info]   (min, avg, max) = (801,559, 803,541, 805,152), stdev = 1,564
[info]   CI (99.9%): [797,519, 809,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,714 ±(99.9%) 1158,153 MB/sec [Average]
[info]   (min, avg, max) = (671,966, 807,714, 1345,740), stdev = 300,769
[info]   CI (99.9%): [≈ 0, 1965,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   442,146 ±(99.9%) 631,468 B/op [Average]
[info]   (min, avg, max) = (368,022, 442,146, 735,497), stdev = 163,990
[info]   CI (99.9%): [≈ 0, 1073,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,046), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94,78% complete, ETA 00:06:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 893538,422 ops/s
[info] # Warmup Iteration   2: 1285532,631 ops/s
[info] # Warmup Iteration   3: 1292742,502 ops/s
[info] # Warmup Iteration   4: 1290749,370 ops/s
[info] # Warmup Iteration   5: 1292415,530 ops/s
[info] Iteration   1: 1293739,685 ops/s
[info]                  ·gc.alloc.rate:                   868,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     819,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1295716,315 ops/s
[info]                  ·gc.alloc.rate:                   869,346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1629,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1295603,907 ops/s
[info]                  ·gc.alloc.rate:                   869,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     814,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1292961,244 ops/s
[info]                  ·gc.alloc.rate:                   867,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1291155,916 ops/s
[info]                  ·gc.alloc.rate:                   866,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1633,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1293835,413 ±(99.9%) 7361,280 ops/s [Average]
[info]   (min, avg, max) = (1291155,916, 1293835,413, 1295716,315), stdev = 1911,701
[info]   CI (99.9%): [1286474,133, 1301196,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   868,058 ±(99.9%) 5,066 MB/sec [Average]
[info]   (min, avg, max) = (866,150, 868,058, 869,346), stdev = 1,316
[info]   CI (99.9%): [862,992, 873,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1056,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1056,000, 1056,000, 1056,000), stdev = 0,001
[info]   CI (99.9%): [1056,000, 1056,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   938,984 ±(99.9%) 1412,075 MB/sec [Average]
[info]   (min, avg, max) = (670,031, 938,984, 1341,475), stdev = 366,711
[info]   CI (99.9%): [≈ 0, 2351,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1142,400 ±(99.9%) 1719,458 B/op [Average]
[info]   (min, avg, max) = (814,009, 1142,400, 1633,605), stdev = 446,538
[info]   CI (99.9%): [≈ 0, 2861,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,035 ±(99.9%) 0,054 B/op [Average]
[info]   (min, avg, max) = (0,025, 0,035, 0,051), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94,98% complete, ETA 00:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 990446,835 ops/s
[info] # Warmup Iteration   2: 1212252,184 ops/s
[info] # Warmup Iteration   3: 1218271,868 ops/s
[info] # Warmup Iteration   4: 1214202,255 ops/s
[info] # Warmup Iteration   5: 1226224,425 ops/s
[info] Iteration   1: 1221181,289 ops/s
[info]                  ·gc.alloc.rate:                   1657,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1732,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1219739,241 ops/s
[info]                  ·gc.alloc.rate:                   1655,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2603,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1227035,736 ops/s
[info]                  ·gc.alloc.rate:                   1665,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1727,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1222447,267 ops/s
[info]                  ·gc.alloc.rate:                   1659,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2604,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1224064,224 ops/s
[info]                  ·gc.alloc.rate:               1660,994 MB/sec
[info]                  ·gc.alloc.rate.norm:          2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1736,074 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1222893,551 ±(99.9%) 10824,497 ops/s [Average]
[info]   (min, avg, max) = (1219739,241, 1222893,551, 1227035,736), stdev = 2811,087
[info]   CI (99.9%): [1212069,054, 1233718,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1659,624 ±(99.9%) 14,781 MB/sec [Average]
[info]   (min, avg, max) = (1655,343, 1659,624, 1665,369), stdev = 3,839
[info]   CI (99.9%): [1644,843, 1674,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2136,000, 2136,000, 2136,000), stdev = 0,001
[info]   CI (99.9%): [2136,000, 2136,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,347 ±(99.9%) 1420,017 MB/sec [Average]
[info]   (min, avg, max) = (1344,091, 1616,347, 2022,932), stdev = 368,774
[info]   CI (99.9%): [196,331, 3036,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2080,805 ±(99.9%) 1838,981 B/op [Average]
[info]   (min, avg, max) = (1727,697, 2080,805, 2604,358), stdev = 477,577
[info]   CI (99.9%): [241,824, 3919,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,037 ±(99.9%) 0,117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,080), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95,18% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1318460,214 ops/s
[info] # Warmup Iteration   2: 1954017,970 ops/s
[info] # Warmup Iteration   3: 1952395,796 ops/s
[info] # Warmup Iteration   4: 1959626,849 ops/s
[info] # Warmup Iteration   5: 1961007,028 ops/s
[info] Iteration   1: 1963587,294 ops/s
[info]                  ·gc.alloc.rate:                   1646,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1076,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1955394,646 ops/s
[info]                  ·gc.alloc.rate:               1639,900 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1081,348 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1955467,809 ops/s
[info]                  ·gc.alloc.rate:                   1640,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1623,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1953304,906 ops/s
[info]                  ·gc.alloc.rate:                   1638,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1085,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1960552,910 ops/s
[info]                  ·gc.alloc.rate:               1644,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1624,771 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1957661,513 ±(99.9%) 16382,906 ops/s [Average]
[info]   (min, avg, max) = (1953304,906, 1957661,513, 1963587,294), stdev = 4254,589
[info]   CI (99.9%): [1941278,607, 1974044,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1641,811 ±(99.9%) 13,526 MB/sec [Average]
[info]   (min, avg, max) = (1638,279, 1641,811, 1646,814), stdev = 3,513
[info]   CI (99.9%): [1628,285, 1655,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1320,000, 1320,000, 1320,000), stdev = 0,001
[info]   CI (99.9%): [1320,000, 1320,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,988 ±(99.9%) 1425,777 MB/sec [Average]
[info]   (min, avg, max) = (1342,789, 1614,988, 2023,631), stdev = 370,270
[info]   CI (99.9%): [189,211, 3040,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1298,410 ±(99.9%) 1145,670 B/op [Average]
[info]   (min, avg, max) = (1076,310, 1298,410, 1624,771), stdev = 297,527
[info]   CI (99.9%): [152,741, 2444,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,050), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95,38% complete, ETA 00:06:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308088,248 ops/s
[info] # Warmup Iteration   2: 2859664,617 ops/s
[info] # Warmup Iteration   3: 2886907,731 ops/s
[info] # Warmup Iteration   4: 2881194,521 ops/s
[info] # Warmup Iteration   5: 2853620,147 ops/s
[info] Iteration   1: 2879226,954 ops/s
[info]                  ·gc.alloc.rate:                   746,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,422 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2888992,755 ops/s
[info]                  ·gc.alloc.rate:                   748,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     733,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2889607,316 ops/s
[info]                  ·gc.alloc.rate:               749,066 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366,428 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2880722,539 ops/s
[info]                  ·gc.alloc.rate:                   746,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2885451,833 ops/s
[info]                  ·gc.alloc.rate:                   747,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366,590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2884800,280 ±(99.9%) 18142,918 ops/s [Average]
[info]   (min, avg, max) = (2879226,954, 2884800,280, 2889607,316), stdev = 4711,658
[info]   CI (99.9%): [2866657,361, 2902943,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   747,841 ±(99.9%) 4,667 MB/sec [Average]
[info]   (min, avg, max) = (746,399, 747,841, 749,066), stdev = 1,212
[info]   CI (99.9%): [743,174, 752,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   807,605 ±(99.9%) 1161,159 MB/sec [Average]
[info]   (min, avg, max) = (672,029, 807,605, 1347,031), stdev = 301,549
[info]   CI (99.9%): [≈ 0, 1968,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   440,496 ±(99.9%) 631,359 B/op [Average]
[info]   (min, avg, max) = (366,428, 440,496, 733,797), stdev = 163,962
[info]   CI (99.9%): [≈ 0, 1071,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,541 ±(99.9%) 4,434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,541, 2,601), stdev = 1,152
[info]   CI (99.9%): [≈ 0, 4,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,296 ±(99.9%) 2,424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,296, 1,422), stdev = 0,629
[info]   CI (99.9%): [≈ 0, 2,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,58% complete, ETA 00:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1685573,513 ops/s
[info] # Warmup Iteration   2: 2956199,669 ops/s
[info] # Warmup Iteration   3: 2980695,664 ops/s
[info] # Warmup Iteration   4: 2974593,757 ops/s
[info] # Warmup Iteration   5: 2981528,242 ops/s
[info] Iteration   1: 2968669,055 ops/s
[info]                  ·gc.alloc.rate:                   1403,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1071,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2975162,934 ops/s
[info]                  ·gc.alloc.rate:               1406,559 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 713,590 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2977999,592 ops/s
[info]                  ·gc.alloc.rate:                   1407,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     713,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2972917,334 ops/s
[info]                  ·gc.alloc.rate:                   1405,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2963894,396 ops/s
[info]                  ·gc.alloc.rate:                   1400,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2971728,662 ±(99.9%) 21376,159 ops/s [Average]
[info]   (min, avg, max) = (2963894,396, 2971728,662, 2977999,592), stdev = 5551,320
[info]   CI (99.9%): [2950352,504, 2993104,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1404,767 ±(99.9%) 10,428 MB/sec [Average]
[info]   (min, avg, max) = (1400,896, 1404,767, 1407,712), stdev = 2,708
[info]   CI (99.9%): [1394,338, 1415,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1485,027 ±(99.9%) 1152,674 MB/sec [Average]
[info]   (min, avg, max) = (1349,068, 1485,027, 2020,504), stdev = 299,346
[info]   CI (99.9%): [332,353, 2637,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   786,585 ±(99.9%) 612,757 B/op [Average]
[info]   (min, avg, max) = (713,551, 786,585, 1071,222), stdev = 159,131
[info]   CI (99.9%): [173,828, 1399,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,033), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,78% complete, ETA 00:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2402866,500 ops/s
[info] # Warmup Iteration   2: 2964540,161 ops/s
[info] # Warmup Iteration   3: 2971382,458 ops/s
[info] # Warmup Iteration   4: 2989871,130 ops/s
[info] # Warmup Iteration   5: 2982178,980 ops/s
[info] Iteration   1: 2995448,173 ops/s
[info]                  ·gc.alloc.rate:                   776,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3000699,807 ops/s
[info]                  ·gc.alloc.rate:               777,895 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 352,886 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2980126,699 ops/s
[info]                  ·gc.alloc.rate:               772,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 355,301 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2985655,353 ops/s
[info]                  ·gc.alloc.rate:                   774,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2992570,219 ops/s
[info]                  ·gc.alloc.rate:                   775,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2990900,050 ±(99.9%) 31228,347 ops/s [Average]
[info]   (min, avg, max) = (2980126,699, 2990900,050, 3000699,807), stdev = 8109,902
[info]   CI (99.9%): [2959671,704, 3022128,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   775,321 ±(99.9%) 8,083 MB/sec [Average]
[info]   (min, avg, max) = (772,510, 775,321, 777,895), stdev = 2,099
[info]   CI (99.9%): [767,238, 783,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672,895 ±(99.9%) 4,042 MB/sec [Average]
[info]   (min, avg, max) = (672,077, 672,895, 674,679), stdev = 1,050
[info]   CI (99.9%): [668,853, 676,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   354,102 ±(99.9%) 3,611 B/op [Average]
[info]   (min, avg, max) = (352,886, 354,102, 355,301), stdev = 0,938
[info]   CI (99.9%): [350,491, 357,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,044), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95,98% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2454257,544 ops/s
[info] # Warmup Iteration   2: 2993441,324 ops/s
[info] # Warmup Iteration   3: 3049156,342 ops/s
[info] # Warmup Iteration   4: 3044597,125 ops/s
[info] # Warmup Iteration   5: 3042797,845 ops/s
[info] Iteration   1: 3046161,948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3058415,328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3054608,143 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3044226,665 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3049939,119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3050670,240 ±(99.9%) 22606,951 ops/s [Average]
[info]   (min, avg, max) = (3044226,665, 3050670,240, 3058415,328), stdev = 5870,953
[info]   CI (99.9%): [3028063,290, 3073277,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96,18% complete, ETA 00:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2365463,279 ops/s
[info] # Warmup Iteration   2: 2925579,225 ops/s
[info] # Warmup Iteration   3: 2916730,642 ops/s
[info] # Warmup Iteration   4: 2883722,046 ops/s
[info] # Warmup Iteration   5: 2913435,434 ops/s
[info] Iteration   1: 2923509,930 ops/s
[info]                  ·gc.alloc.rate:                   1411,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     722,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2904501,588 ops/s
[info]                  ·gc.alloc.rate:                   1402,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     726,913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2913280,741 ops/s
[info]                  ·gc.alloc.rate:                   1406,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     724,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2909147,688 ops/s
[info]                  ·gc.alloc.rate:                   1404,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1090,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2909859,780 ops/s
[info]                  ·gc.alloc.rate:                   1404,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     727,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2912059,945 ±(99.9%) 27434,536 ops/s [Average]
[info]   (min, avg, max) = (2904501,588, 2912059,945, 2923509,930), stdev = 7124,662
[info]   CI (99.9%): [2884625,409, 2939494,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1406,101 ±(99.9%) 13,247 MB/sec [Average]
[info]   (min, avg, max) = (1402,527, 1406,101, 1411,697), stdev = 3,440
[info]   CI (99.9%): [1392,854, 1419,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1477,058 ±(99.9%) 1158,804 MB/sec [Average]
[info]   (min, avg, max) = (1341,464, 1477,058, 2015,384), stdev = 300,938
[info]   CI (99.9%): [318,254, 2635,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   798,424 ±(99.9%) 628,406 B/op [Average]
[info]   (min, avg, max) = (722,189, 798,424, 1090,331), stdev = 163,195
[info]   CI (99.9%): [170,018, 1426,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,020, 0,034), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96,39% complete, ETA 00:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7527,330 ops/s
[info] # Warmup Iteration   2: 12477,948 ops/s
[info] # Warmup Iteration   3: 12815,111 ops/s
[info] # Warmup Iteration   4: 12891,846 ops/s
[info] # Warmup Iteration   5: 13736,124 ops/s
[info] Iteration   1: 13584,354 ops/s
[info]                  ·gc.alloc.rate:                   1977,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              229164,559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233381,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,645 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13500,896 ops/s
[info]                  ·gc.alloc.rate:                   1965,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              229168,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235083,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13582,156 ops/s
[info]                  ·gc.alloc.rate:                   1977,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              229168,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234166,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,707 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13598,611 ops/s
[info]                  ·gc.alloc.rate:                   1980,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              229160,702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234276,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,409 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13786,829 ops/s
[info]                  ·gc.alloc.rate:                   2006,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              229144,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231500,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,542 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   13610,569 ±(99.9%) 407,211 ops/s [Average]
[info]   (min, avg, max) = (13500,896, 13610,569, 13786,829), stdev = 105,751
[info]   CI (99.9%): [13203,359, 14017,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1981,676 ±(99.9%) 58,532 MB/sec [Average]
[info]   (min, avg, max) = (1965,734, 1981,676, 2006,927), stdev = 15,201
[info]   CI (99.9%): [1923,144, 2040,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229161,071 ±(99.9%) 38,487 B/op [Average]
[info]   (min, avg, max) = (229144,030, 229161,071, 229168,033), stdev = 9,995
[info]   CI (99.9%): [229122,583, 229199,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2020,696 ±(99.9%) 20,907 MB/sec [Average]
[info]   (min, avg, max) = (2014,382, 2020,696, 2027,565), stdev = 5,429
[info]   CI (99.9%): [1999,789, 2041,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   233681,375 ±(99.9%) 5237,675 B/op [Average]
[info]   (min, avg, max) = (231500,336, 233681,375, 235083,223), stdev = 1360,208
[info]   CI (99.9%): [228443,700, 238919,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,063 ±(99.9%) 0,293 MB/sec [Average]
[info]   (min, avg, max) = (0,001, 0,063, 0,187), stdev = 0,076
[info]   CI (99.9%): [≈ 0, 0,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7,295 ±(99.9%) 33,924 B/op [Average]
[info]   (min, avg, max) = (0,169, 7,295, 21,707), stdev = 8,810
[info]   CI (99.9%): [≈ 0, 41,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96,59% complete, ETA 00:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7249,779 ops/s
[info] # Warmup Iteration   2: 17237,891 ops/s
[info] # Warmup Iteration   3: 17365,931 ops/s
[info] # Warmup Iteration   4: 17588,890 ops/s
[info] # Warmup Iteration   5: 17469,932 ops/s
[info] Iteration   1: 17511,855 ops/s
[info]                  ·gc.alloc.rate:      240,953 MB/sec
[info]                  ·gc.alloc.rate.norm: 21656,025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17457,799 ops/s
[info]                  ·gc.alloc.rate:                   240,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              21653,889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46115,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,814 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17607,775 ops/s
[info]                  ·gc.alloc.rate:      242,096 MB/sec
[info]                  ·gc.alloc.rate.norm: 21640,025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17472,704 ops/s
[info]                  ·gc.alloc.rate:               240,263 MB/sec
[info]                  ·gc.alloc.rate.norm:          21640,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46075,430 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 17496,004 ops/s
[info]                  ·gc.alloc.rate:      240,549 MB/sec
[info]                  ·gc.alloc.rate.norm: 21640,023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   17509,227 ±(99.9%) 226,765 ops/s [Average]
[info]   (min, avg, max) = (17457,799, 17509,227, 17607,775), stdev = 58,890
[info]   CI (99.9%): [17282,462, 17735,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   240,810 ±(99.9%) 2,998 MB/sec [Average]
[info]   (min, avg, max) = (240,191, 240,810, 242,096), stdev = 0,779
[info]   CI (99.9%): [237,812, 243,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21645,998 ±(99.9%) 31,628 B/op [Average]
[info]   (min, avg, max) = (21640,023, 21645,998, 21656,025), stdev = 8,214
[info]   CI (99.9%): [21614,369, 21677,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,617 ±(99.9%) 1078,884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,617, 511,562), stdev = 280,183
[info]   CI (99.9%): [≈ 0, 1283,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18438,087 ±(99.9%) 97218,728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18438,087, 46115,007), stdev = 25247,395
[info]   CI (99.9%): [≈ 0, 115656,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,031), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,563 ±(99.9%) 4,845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,563, 2,814), stdev = 1,258
[info]   CI (99.9%): [≈ 0, 5,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96,79% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21599,308 ops/s
[info] # Warmup Iteration   2: 27859,589 ops/s
[info] # Warmup Iteration   3: 43213,532 ops/s
[info] # Warmup Iteration   4: 44320,799 ops/s
[info] # Warmup Iteration   5: 44590,432 ops/s
[info] Iteration   1: 44645,218 ops/s
[info]                  ·gc.alloc.rate:                   408,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18033,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,855 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44812,029 ops/s
[info]                  ·gc.alloc.rate:               410,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          14416,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17967,968 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 44813,285 ops/s
[info]                  ·gc.alloc.rate:      410,482 MB/sec
[info]                  ·gc.alloc.rate.norm: 14416,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 44675,285 ops/s
[info]                  ·gc.alloc.rate:                   409,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18021,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,778 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 44692,433 ops/s
[info]                  ·gc.alloc.rate:                   409,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23760,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113,916 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   44727,650 ±(99.9%) 305,820 ops/s [Average]
[info]   (min, avg, max) = (44645,218, 44727,650, 44813,285), stdev = 79,420
[info]   CI (99.9%): [44421,830, 45033,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   409,680 ±(99.9%) 2,866 MB/sec [Average]
[info]   (min, avg, max) = (408,894, 409,680, 410,482), stdev = 0,744
[info]   CI (99.9%): [406,814, 412,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14416,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (14416,009, 14416,010, 14416,010), stdev = 0,001
[info]   CI (99.9%): [14416,008, 14416,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,872 ±(99.9%) 989,285 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,872, 674,680), stdev = 256,914
[info]   CI (99.9%): [≈ 0, 1431,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15556,855 ±(99.9%) 34834,277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15556,855, 23760,905), stdev = 9046,351
[info]   CI (99.9%): [≈ 0, 50391,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,668 ±(99.9%) 5,527 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,668, 3,235), stdev = 1,435
[info]   CI (99.9%): [≈ 0, 6,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23,510 ±(99.9%) 194,658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23,510, 113,916), stdev = 50,552
[info]   CI (99.9%): [≈ 0, 218,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96,99% complete, ETA 00:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1507,281 ops/s
[info] # Warmup Iteration   2: 3562,193 ops/s
[info] # Warmup Iteration   3: 3136,480 ops/s
[info] # Warmup Iteration   4: 3388,708 ops/s
[info] # Warmup Iteration   5: 3865,124 ops/s
[info] Iteration   1: 3854,171 ops/s
[info]                  ·gc.alloc.rate:                   1244,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              508144,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551352,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,000 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 3880,925 ops/s
[info]                  ·gc.alloc.rate:                   1253,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              508144,113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547922,827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,441 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3849,562 ops/s
[info]                  ·gc.alloc.rate:                   1243,398 MB/sec
[info]                  ·gc.alloc.rate.norm:              508144,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552741,958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,527 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3845,462 ops/s
[info]                  ·gc.alloc.rate:                   1242,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              508144,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     553725,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,036 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 3864,673 ops/s
[info]                  ·gc.alloc.rate:               1248,221 MB/sec
[info]                  ·gc.alloc.rate.norm:          508144,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 275569,895 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3858,959 ±(99.9%) 54,747 ops/s [Average]
[info]   (min, avg, max) = (3845,462, 3858,959, 3880,925), stdev = 14,218
[info]   CI (99.9%): [3804,211, 3913,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1246,435 ±(99.9%) 17,617 MB/sec [Average]
[info]   (min, avg, max) = (1242,149, 1246,435, 1253,540), stdev = 4,575
[info]   CI (99.9%): [1228,818, 1264,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   508144,107 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (508144,106, 508144,107, 508144,113), stdev = 0,003
[info]   CI (99.9%): [508144,094, 508144,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1217,082 ±(99.9%) 1162,748 MB/sec [Average]
[info]   (min, avg, max) = (676,919, 1217,082, 1353,572), stdev = 301,962
[info]   CI (99.9%): [54,333, 2379,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   496262,526 ±(99.9%) 475132,808 B/op [Average]
[info]   (min, avg, max) = (275569,895, 496262,526, 553725,538), stdev = 123390,481
[info]   CI (99.9%): [21129,719, 971395,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13,601 ±(99.9%) 37,392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13,601, 25,527), stdev = 9,711
[info]   CI (99.9%): [≈ 0, 50,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,000, 9,000), stdev = 3,391
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97,19% complete, ETA 00:03:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_e724a5b0/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 34665,467 ops/s
[info] # Warmup Iteration   2: 69609,265 ops/s
[info] # Warmup Iteration   3: 69440,406 ops/s
[info] # Warmup Iteration   4: 69936,660 ops/s
[info] # Warmup Iteration   5: 69932,516 ops/s
[info] Iteration   1: 69908,784 ops/s
[info]                  ·gc.alloc.rate:               892,811 MB/sec
[info]                  ·gc.alloc.rate.norm:          20099,974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15175,456 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 69943,983 ops/s
[info]                  ·gc.alloc.rate:                   893,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15167,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,468 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 70145,834 ops/s
[info]                  ·gc.alloc.rate:                   895,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30263,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,401 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 69880,930 ops/s
[info]                  ·gc.alloc.rate:               892,526 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15196,101 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 68918,399 ops/s
[info]                  ·gc.alloc.rate:               880,028 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15408,380 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   69759,586 ±(99.9%) 1854,485 ops/s [Average]
[info]   (min, avg, max) = (68918,399, 69759,586, 70145,834), stdev = 481,604
[info]   CI (99.9%): [67905,101, 71614,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   890,885 ±(99.9%) 23,898 MB/sec [Average]
[info]   (min, avg, max) = (880,028, 890,885, 895,795), stdev = 6,206
[info]   CI (99.9%): [866,988, 914,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100,015 ±(99.9%) 0,113 B/op [Average]
[info]   (min, avg, max) = (20099,974, 20100,015, 20100,052), stdev = 0,029
[info]   CI (99.9%): [20099,903, 20100,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   809,255 ±(99.9%) 1161,288 MB/sec [Average]
[info]   (min, avg, max) = (674,071, 809,255, 1348,743), stdev = 301,583
[info]   CI (99.9%): [≈ 0, 1970,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18242,227 ±(99.9%) 25879,179 B/op [Average]
[info]   (min, avg, max) = (15167,864, 18242,227, 30263,335), stdev = 6720,741
[info]   CI (99.9%): [≈ 0, 44121,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,374 ±(99.9%) 2,345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,374, 1,401), stdev = 0,609
[info]   CI (99.9%): [≈ 0, 2,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97,39% complete, ETA 00:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79433,294 ops/s
[info] # Warmup Iteration   2: 90139,788 ops/s
[info] # Warmup Iteration   3: 93450,344 ops/s
[info] # Warmup Iteration   4: 93585,848 ops/s
[info] # Warmup Iteration   5: 93273,056 ops/s
[info] Iteration   1: 93338,131 ops/s
[info]                  ·gc.alloc.rate:               612,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8626,280 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 93425,903 ops/s
[info]                  ·gc.alloc.rate:                   612,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11367,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54,393 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 93684,230 ops/s
[info]                  ·gc.alloc.rate:                   614,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11335,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 93640,125 ops/s
[info]                  ·gc.alloc.rate:               614,055 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11307,031 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 92636,366 ops/s
[info]                  ·gc.alloc.rate:                   607,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11429,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   93344,951 ±(99.9%) 1623,368 ops/s [Average]
[info]   (min, avg, max) = (92636,366, 93344,951, 93684,230), stdev = 421,584
[info]   CI (99.9%): [91721,583, 94968,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   612,063 ±(99.9%) 10,725 MB/sec [Average]
[info]   (min, avg, max) = (607,378, 612,063, 614,251), stdev = 2,785
[info]   CI (99.9%): [601,338, 622,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10320,004, 10320,005, 10320,005), stdev = 0,001
[info]   CI (99.9%): [10320,003, 10320,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,308 ±(99.9%) 279,322 MB/sec [Average]
[info]   (min, avg, max) = (511,559, 641,308, 674,808), stdev = 72,539
[info]   CI (99.9%): [361,986, 920,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10813,215 ±(99.9%) 4710,821 B/op [Average]
[info]   (min, avg, max) = (8626,280, 10813,215, 11429,793), stdev = 1223,385
[info]   CI (99.9%): [6102,394, 15524,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,662 ±(99.9%) 5,525 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 3,229), stdev = 1,435
[info]   CI (99.9%): [≈ 0, 6,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11,159 ±(99.9%) 93,078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,159, 54,393), stdev = 24,172
[info]   CI (99.9%): [≈ 0, 104,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97,59% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94137,543 ops/s
[info] # Warmup Iteration   2: 107549,621 ops/s
[info] # Warmup Iteration   3: 107304,832 ops/s
[info] # Warmup Iteration   4: 107301,909 ops/s
[info] # Warmup Iteration   5: 107320,092 ops/s
[info] Iteration   1: 107603,486 ops/s
[info]                  ·gc.alloc.rate:      16,407 MB/sec
[info]                  ·gc.alloc.rate.norm: 240,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 107422,218 ops/s
[info]                  ·gc.alloc.rate:      16,381 MB/sec
[info]                  ·gc.alloc.rate.norm: 240,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 106775,208 ops/s
[info]                  ·gc.alloc.rate:      16,280 MB/sec
[info]                  ·gc.alloc.rate.norm: 240,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 107556,940 ops/s
[info]                  ·gc.alloc.rate:      16,403 MB/sec
[info]                  ·gc.alloc.rate.norm: 240,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 107343,370 ops/s
[info]                  ·gc.alloc.rate:      16,371 MB/sec
[info]                  ·gc.alloc.rate.norm: 240,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   107340,244 ±(99.9%) 1280,373 ops/s [Average]
[info]   (min, avg, max) = (106775,208, 107340,244, 107603,486), stdev = 332,509
[info]   CI (99.9%): [106059,872, 108620,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   16,368 ±(99.9%) 0,199 MB/sec [Average]
[info]   (min, avg, max) = (16,280, 16,368, 16,407), stdev = 0,052
[info]   CI (99.9%): [16,169, 16,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   240,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (240,004, 240,004, 240,004), stdev = 0,001
[info]   CI (99.9%): [240,003, 240,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97,79% complete, ETA 00:02:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377367,619 ops/s
[info] # Warmup Iteration   2: 422784,188 ops/s
[info] # Warmup Iteration   3: 427375,553 ops/s
[info] # Warmup Iteration   4: 429266,664 ops/s
[info] # Warmup Iteration   5: 430508,198 ops/s
[info] Iteration   1: 430010,860 ops/s
[info]                  ·gc.alloc.rate:                   2292,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              8392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7392,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 429673,467 ops/s
[info]                  ·gc.alloc.rate:                   2291,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              8392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7411,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 430990,500 ops/s
[info]                  ·gc.alloc.rate:                   2297,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              8392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9870,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 430726,682 ops/s
[info]                  ·gc.alloc.rate:                   2296,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              8392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7420,794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,228 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 428283,665 ops/s
[info]                  ·gc.alloc.rate:                   2283,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              8392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9965,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   429937,035 ±(99.9%) 4103,187 ops/s [Average]
[info]   (min, avg, max) = (428283,665, 429937,035, 430990,500), stdev = 1065,585
[info]   CI (99.9%): [425833,848, 434040,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2292,411 ±(99.9%) 22,398 MB/sec [Average]
[info]   (min, avg, max) = (2283,246, 2292,411, 2297,988), stdev = 5,817
[info]   CI (99.9%): [2270,013, 2314,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8392,001, 8392,001, 8392,001), stdev = 0,001
[info]   CI (99.9%): [8392,001, 8392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2297,741 ±(99.9%) 1439,314 MB/sec [Average]
[info]   (min, avg, max) = (2019,859, 2297,741, 2711,486), stdev = 373,785
[info]   CI (99.9%): [858,427, 3737,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8412,357 ±(99.9%) 5295,124 B/op [Average]
[info]   (min, avg, max) = (7392,957, 8412,357, 9965,982), stdev = 1375,127
[info]   CI (99.9%): [3117,233, 13707,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,152 ±(99.9%) 0,207 B/op [Average]
[info]   (min, avg, max) = (0,076, 0,152, 0,228), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97,99% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301899,475 ops/s
[info] # Warmup Iteration   2: 500647,242 ops/s
[info] # Warmup Iteration   3: 501954,610 ops/s
[info] # Warmup Iteration   4: 499610,036 ops/s
[info] # Warmup Iteration   5: 499666,939 ops/s
[info] Iteration   1: 499931,899 ops/s
[info]                  ·gc.alloc.rate:                   597,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2123,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,983 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 499900,778 ops/s
[info]                  ·gc.alloc.rate:               597,129 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2123,298 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 499824,738 ops/s
[info]                  ·gc.alloc.rate:               596,971 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2125,808 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 497996,369 ops/s
[info]                  ·gc.alloc.rate:      594,893 MB/sec
[info]                  ·gc.alloc.rate.norm: 1880,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 498851,871 ops/s
[info]                  ·gc.alloc.rate:                   595,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2129,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   499301,131 ±(99.9%) 3298,906 ops/s [Average]
[info]   (min, avg, max) = (497996,369, 499301,131, 499931,899), stdev = 856,716
[info]   CI (99.9%): [496002,224, 502600,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   596,425 ±(99.9%) 3,836 MB/sec [Average]
[info]   (min, avg, max) = (594,893, 596,425, 597,194), stdev = 0,996
[info]   CI (99.9%): [592,590, 600,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1880,001, 1880,001, 1880,001), stdev = 0,001
[info]   CI (99.9%): [1880,001, 1880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,802 ±(99.9%) 1161,965 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,802, 675,141), stdev = 301,758
[info]   CI (99.9%): [≈ 0, 1701,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1700,427 ±(99.9%) 3660,311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1700,427, 2129,860), stdev = 950,571
[info]   CI (99.9%): [≈ 0, 5360,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,312), stdev = 0,138
[info]   CI (99.9%): [≈ 0, 0,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,210 ±(99.9%) 1,668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,210, 0,983), stdev = 0,433
[info]   CI (99.9%): [≈ 0, 1,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,19% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1360878,020 ops/s
[info] # Warmup Iteration   2: 1431446,092 ops/s
[info] # Warmup Iteration   3: 1419445,752 ops/s
[info] # Warmup Iteration   4: 1430750,317 ops/s
[info] # Warmup Iteration   5: 1418402,687 ops/s
[info] Iteration   1: 1428921,684 ops/s
[info]                  ·gc.alloc.rate:                   748,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     743,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1430556,476 ops/s
[info]                  ·gc.alloc.rate:               748,964 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 740,145 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1429956,826 ops/s
[info]                  ·gc.alloc.rate:               748,590 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 740,463 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1425805,291 ops/s
[info]                  ·gc.alloc.rate:                   746,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     741,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1409982,742 ops/s
[info]                  ·gc.alloc.rate:               738,213 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 750,189 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1425044,604 ±(99.9%) 33179,322 ops/s [Average]
[info]   (min, avg, max) = (1409982,742, 1425044,604, 1430556,476), stdev = 8616,564
[info]   CI (99.9%): [1391865,282, 1458223,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   746,067 ±(99.9%) 17,285 MB/sec [Average]
[info]   (min, avg, max) = (738,213, 746,067, 748,964), stdev = 4,489
[info]   CI (99.9%): [728,782, 763,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672,877 ±(99.9%) 4,198 MB/sec [Average]
[info]   (min, avg, max) = (672,086, 672,877, 674,745), stdev = 1,090
[info]   CI (99.9%): [668,679, 677,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   743,183 ±(99.9%) 15,809 B/op [Average]
[info]   (min, avg, max) = (740,145, 743,183, 750,189), stdev = 4,106
[info]   CI (99.9%): [727,374, 758,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,069), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98,39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85343,577 ops/s
[info] # Warmup Iteration   2: 123993,670 ops/s
[info] # Warmup Iteration   3: 124954,053 ops/s
[info] # Warmup Iteration   4: 123898,717 ops/s
[info] # Warmup Iteration   5: 123190,510 ops/s
[info] Iteration   1: 124985,828 ops/s
[info]                  ·gc.alloc.rate:                   4340,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51368,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,786 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 125485,779 ops/s
[info]                  ·gc.alloc.rate:                   4358,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51223,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,522 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 124169,436 ops/s
[info]                  ·gc.alloc.rate:                   4312,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4766,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60416,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,319 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 125244,183 ops/s
[info]                  ·gc.alloc.rate:                   4350,304 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51377,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,262 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 123679,956 ops/s
[info]                  ·gc.alloc.rate:                   4295,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60697,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,060 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   124713,036 ±(99.9%) 2930,300 ops/s [Average]
[info]   (min, avg, max) = (123679,956, 124713,036, 125485,779), stdev = 760,990
[info]   CI (99.9%): [121782,737, 127643,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4331,618 ±(99.9%) 102,509 MB/sec [Average]
[info]   (min, avg, max) = (4295,564, 4331,618, 4358,700), stdev = 26,621
[info]   CI (99.9%): [4229,108, 4434,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54664,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54664,003, 54664,003, 54664,004), stdev = 0,001
[info]   CI (99.9%): [54664,003, 54664,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,674 ±(99.9%) 1442,443 MB/sec [Average]
[info]   (min, avg, max) = (4079,292, 4357,674, 4769,700), stdev = 374,598
[info]   CI (99.9%): [2915,232, 5800,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55016,511 ±(99.9%) 19480,329 B/op [Average]
[info]   (min, avg, max) = (51223,204, 55016,511, 60697,708), stdev = 5058,980
[info]   CI (99.9%): [35536,181, 74496,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,790 ±(99.9%) 1,615 B/op [Average]
[info]   (min, avg, max) = (0,262, 0,790, 1,319), stdev = 0,419
[info]   CI (99.9%): [≈ 0, 2,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98,59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 601447,961 ops/s
[info] # Warmup Iteration   2: 649143,053 ops/s
[info] # Warmup Iteration   3: 650673,324 ops/s
[info] # Warmup Iteration   4: 659328,561 ops/s
[info] # Warmup Iteration   5: 657081,419 ops/s
[info] Iteration   1: 656536,257 ops/s
[info]                  ·gc.alloc.rate:                   1915,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4836,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 660175,622 ops/s
[info]                  ·gc.alloc.rate:                   1926,117 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4818,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 659319,286 ops/s
[info]                  ·gc.alloc.rate:                   1923,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4830,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 659343,517 ops/s
[info]                  ·gc.alloc.rate:                   1923,814 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3224,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 654332,191 ops/s
[info]                  ·gc.alloc.rate:                   1908,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4880,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   657941,375 ±(99.9%) 9403,984 ops/s [Average]
[info]   (min, avg, max) = (654332,191, 657941,375, 660175,622), stdev = 2442,185
[info]   CI (99.9%): [648537,391, 667345,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1919,557 ±(99.9%) 27,904 MB/sec [Average]
[info]   (min, avg, max) = (1908,785, 1919,557, 1926,117), stdev = 7,247
[info]   CI (99.9%): [1891,654, 1947,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4592,001, 4592,001, 4592,001), stdev = 0,001
[info]   CI (99.9%): [4592,001, 4592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1888,306 ±(99.9%) 1156,964 MB/sec [Average]
[info]   (min, avg, max) = (1350,874, 1888,306, 2028,557), stdev = 300,460
[info]   CI (99.9%): [731,341, 3045,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4518,018 ±(99.9%) 2785,980 B/op [Average]
[info]   (min, avg, max) = (3224,436, 4518,018, 4880,138), stdev = 723,510
[info]   CI (99.9%): [1732,038, 7303,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,129 ±(99.9%) 0,172 B/op [Average]
[info]   (min, avg, max) = (0,099, 0,129, 0,200), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98,80% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349553,915 ops/s
[info] # Warmup Iteration   2: 440736,996 ops/s
[info] # Warmup Iteration   3: 441446,176 ops/s
[info] # Warmup Iteration   4: 439975,817 ops/s
[info] # Warmup Iteration   5: 443481,227 ops/s
[info] Iteration   1: 440627,286 ops/s
[info]                  ·gc.alloc.rate:                   701,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2410,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,977 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 437949,901 ops/s
[info]                  ·gc.alloc.rate:               696,857 MB/sec
[info]                  ·gc.alloc.rate.norm:          2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2425,076 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 442755,733 ops/s
[info]                  ·gc.alloc.rate:                   704,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2389,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 443060,345 ops/s
[info]                  ·gc.alloc.rate:               704,955 MB/sec
[info]                  ·gc.alloc.rate.norm:          2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2387,462 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 443485,041 ops/s
[info]                  ·gc.alloc.rate:                   705,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2382,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   441575,661 ±(99.9%) 8883,257 ops/s [Average]
[info]   (min, avg, max) = (437949,901, 441575,661, 443485,041), stdev = 2306,954
[info]   CI (99.9%): [432692,404, 450458,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   702,538 ±(99.9%) 13,954 MB/sec [Average]
[info]   (min, avg, max) = (696,857, 702,538, 705,496), stdev = 3,624
[info]   CI (99.9%): [688,583, 716,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2504,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2504,001, 2504,001, 2504,001), stdev = 0,001
[info]   CI (99.9%): [2504,001, 2504,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,029 ±(99.9%) 6,379 MB/sec [Average]
[info]   (min, avg, max) = (671,339, 673,029, 674,893), stdev = 1,657
[info]   CI (99.9%): [666,650, 679,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2398,901 ±(99.9%) 69,376 B/op [Average]
[info]   (min, avg, max) = (2382,767, 2398,901, 2425,076), stdev = 18,017
[info]   CI (99.9%): [2329,525, 2468,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,683 ±(99.9%) 5,748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,683, 3,353), stdev = 1,493
[info]   CI (99.9%): [≈ 0, 6,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,440 ±(99.9%) 20,531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,440, 11,977), stdev = 5,332
[info]   CI (99.9%): [≈ 0, 22,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532838,009 ops/s
[info] # Warmup Iteration   2: 814163,567 ops/s
[info] # Warmup Iteration   3: 814305,830 ops/s
[info] # Warmup Iteration   4: 805737,981 ops/s
[info] # Warmup Iteration   5: 812499,370 ops/s
[info] Iteration   1: 813578,284 ops/s
[info]                  ·gc.alloc.rate:                   620,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1304,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,564 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 812561,844 ops/s
[info]                  ·gc.alloc.rate:               619,560 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1306,386 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 813313,078 ops/s
[info]                  ·gc.alloc.rate:                   620,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1306,360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 811229,959 ops/s
[info]                  ·gc.alloc.rate:               618,518 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1309,731 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 815185,763 ops/s
[info]                  ·gc.alloc.rate:                   621,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1304,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   813173,786 ±(99.9%) 5574,798 ops/s [Average]
[info]   (min, avg, max) = (811229,959, 813173,786, 815185,763), stdev = 1447,757
[info]   CI (99.9%): [807598,987, 818748,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   619,974 ±(99.9%) 4,112 MB/sec [Average]
[info]   (min, avg, max) = (618,518, 619,974, 621,445), stdev = 1,068
[info]   CI (99.9%): [615,862, 624,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1200,001, 1200,001, 1200,001), stdev = 0,001
[info]   CI (99.9%): [1200,000, 1200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,853 ±(99.9%) 1,542 MB/sec [Average]
[info]   (min, avg, max) = (674,378, 674,853, 675,305), stdev = 0,400
[info]   CI (99.9%): [673,311, 676,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1306,225 ±(99.9%) 8,561 B/op [Average]
[info]   (min, avg, max) = (1304,002, 1306,225, 1309,731), stdev = 2,223
[info]   CI (99.9%): [1297,664, 1314,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,291), stdev = 0,126
[info]   CI (99.9%): [≈ 0, 0,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,129 ±(99.9%) 0,939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,129, 0,564), stdev = 0,244
[info]   CI (99.9%): [≈ 0, 1,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2122309,275 ops/s
[info] # Warmup Iteration   2: 2256393,214 ops/s
[info] # Warmup Iteration   3: 2267420,654 ops/s
[info] # Warmup Iteration   4: 2252450,619 ops/s
[info] # Warmup Iteration   5: 2275683,853 ops/s
[info] Iteration   1: 2272889,061 ops/s
[info]                  ·gc.alloc.rate:               1051,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 465,848 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2270485,354 ops/s
[info]                  ·gc.alloc.rate:                   1050,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     931,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2275066,053 ops/s
[info]                  ·gc.alloc.rate:               1052,299 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464,940 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2269018,766 ops/s
[info]                  ·gc.alloc.rate:                   1049,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2269278,733 ops/s
[info]                  ·gc.alloc.rate:               1049,527 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932,735 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   2271347,593 ±(99.9%) 9939,239 ops/s [Average]
[info]   (min, avg, max) = (2269018,766, 2271347,593, 2275066,053), stdev = 2581,189
[info]   CI (99.9%): [2261408,354, 2281286,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1050,586 ±(99.9%) 4,607 MB/sec [Average]
[info]   (min, avg, max) = (1049,527, 1050,586, 1052,299), stdev = 1,197
[info]   CI (99.9%): [1045,978, 1055,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,571 ±(99.9%) 1417,215 MB/sec [Average]
[info]   (min, avg, max) = (672,055, 1075,571, 1344,685), stdev = 368,046
[info]   CI (99.9%): [≈ 0, 2492,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   745,532 ±(99.9%) 984,724 B/op [Average]
[info]   (min, avg, max) = (464,940, 745,532, 932,735), stdev = 255,730
[info]   CI (99.9%): [≈ 0, 1730,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,043), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99,40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2230937,781 ops/s
[info] # Warmup Iteration   2: 2393042,578 ops/s
[info] # Warmup Iteration   3: 2386148,256 ops/s
[info] # Warmup Iteration   4: 2386119,765 ops/s
[info] # Warmup Iteration   5: 2388346,151 ops/s
[info] Iteration   1: 2392673,865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2386278,751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2393608,496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2384315,347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2391674,769 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2389710,245 ±(99.9%) 15960,308 ops/s [Average]
[info]   (min, avg, max) = (2384315,347, 2389710,245, 2393608,496), stdev = 4144,841
[info]   CI (99.9%): [2373749,938, 2405670,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99,60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342005,235 ops/s
[info] # Warmup Iteration   2: 416701,242 ops/s
[info] # Warmup Iteration   3: 419042,339 ops/s
[info] # Warmup Iteration   4: 417980,662 ops/s
[info] # Warmup Iteration   5: 416507,517 ops/s
[info] Iteration   1: 418801,840 ops/s
[info]                  ·gc.alloc.rate:      619,439 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 418141,224 ops/s
[info]                  ·gc.alloc.rate:                   618,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2534,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,410 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 420383,822 ops/s
[info]                  ·gc.alloc.rate:                   621,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2521,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 419652,983 ops/s
[info]                  ·gc.alloc.rate:               620,751 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2515,565 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 419536,733 ops/s
[info]                  ·gc.alloc.rate:                   620,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2516,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   419303,320 ±(99.9%) 3304,707 ops/s [Average]
[info]   (min, avg, max) = (418141,224, 419303,320, 420383,822), stdev = 858,222
[info]   CI (99.9%): [415998,613, 422608,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   620,184 ±(99.9%) 4,850 MB/sec [Average]
[info]   (min, avg, max) = (618,486, 620,184, 621,765), stdev = 1,260
[info]   CI (99.9%): [615,334, 625,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2328,001, 2328,001, 2328,001), stdev = 0,001
[info]   CI (99.9%): [2328,001, 2328,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,638 ±(99.9%) 1157,318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,638, 673,394), stdev = 300,552
[info]   CI (99.9%): [≈ 0, 1694,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2017,548 ±(99.9%) 4343,025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2017,548, 2534,676), stdev = 1127,870
[info]   CI (99.9%): [≈ 0, 6360,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,786 ±(99.9%) 6,549 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,786, 3,828), stdev = 1,701
[info]   CI (99.9%): [≈ 0, 7,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,960 ±(99.9%) 24,651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,960, 14,410), stdev = 6,402
[info]   CI (99.9%): [≈ 0, 27,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 3,000), stdev = 1,304
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, Java HotSpot(TM) 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/oraclejdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99,80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206984,236 ops/s
[info] # Warmup Iteration   2: 215450,359 ops/s
[info] # Warmup Iteration   3: 216026,731 ops/s
[info] # Warmup Iteration   4: 218166,604 ops/s
[info] # Warmup Iteration   5: 218241,721 ops/s
[info] Iteration   1: 217412,289 ops/s
[info]                  ·gc.alloc.rate:                   563,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3703,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 217825,062 ops/s
[info]                  ·gc.alloc.rate:                   564,679 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4875,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,566 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 218418,803 ops/s
[info]                  ·gc.alloc.rate:                   566,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4862,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,150 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 217108,692 ops/s
[info]                  ·gc.alloc.rate:               562,856 MB/sec
[info]                  ·gc.alloc.rate.norm:          4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4877,255 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 218358,656 ops/s
[info]                  ·gc.alloc.rate:      565,988 MB/sec
[info]                  ·gc.alloc.rate.norm: 4080,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   217824,700 ±(99.9%) 2212,712 ops/s [Average]
[info]   (min, avg, max) = (217108,692, 217824,700, 218418,803), stdev = 574,634
[info]   CI (99.9%): [215611,989, 220037,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   564,664 ±(99.9%) 5,634 MB/sec [Average]
[info]   (min, avg, max) = (562,856, 564,664, 566,209), stdev = 1,463
[info]   CI (99.9%): [559,030, 570,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4080,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4080,002, 4080,002, 4080,002), stdev = 0,001
[info]   CI (99.9%): [4080,002, 4080,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,796 ±(99.9%) 1124,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,796, 674,828), stdev = 291,927
[info]   CI (99.9%): [≈ 0, 1630,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3663,723 ±(99.9%) 8123,604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3663,723, 4877,255), stdev = 2109,674
[info]   CI (99.9%): [≈ 0, 11787,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,634 ±(99.9%) 5,357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,634, 3,123), stdev = 1,391
[info]   CI (99.9%): [≈ 0, 5,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,584 ±(99.9%) 38,709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,584, 22,566), stdev = 10,053
[info]   CI (99.9%): [≈ 0, 43,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # Run complete. Total time: 02:12:49
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    826108,879 ±   13248,885   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2170,869 ±      34,427  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4136,001 ±       0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      2158,803 ±    1172,079  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5      4114,930 ±    2308,666    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,058 ±       0,067  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,111 ±       0,128    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        16,000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5         6,000                    ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1865335,322 ±   11168,294   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1242,077 ±       7,298  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1048,000 ±       0,001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1217,739 ±    1164,610  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      1027,594 ±     984,296    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,029 ±       0,108  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,025 ±       0,091    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5         9,000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         4,000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   4143149,058 ±   44565,347   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       273,765 ±       3,038  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104,000 ±       0,001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       306,904 ±    1078,811  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       116,803 ±     410,579    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,005 ±       0,031  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,002 ±       0,012    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3,000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         5,000                    ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    193659,968 ±     603,762   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1617,356 ±       4,552  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     13144,002 ±       0,001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1625,892 ±    1425,965  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5     13214,430 ±   11612,889    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,037 ±       0,119  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,305 ±       0,967    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        12,000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         5,000                    ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    633720,582 ±    4723,426   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1974,501 ±      14,441  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4904,001 ±       0,001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2021,171 ±      19,377  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5      5019,924 ±      50,294    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,050 ±       0,072  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,124 ±       0,178    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        15,000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         7,000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2358740,763 ±   17744,969   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       839,236 ±       6,512  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       560,000 ±       0,001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       945,143 ±    1423,119  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       631,024 ±     954,583    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,021 ±       0,113  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,014 ±       0,076    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         7,000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         3,000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  16505110,628 ±  916842,014   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       839,015 ±      46,729  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80,000 ±       0,001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       807,366 ±    1157,028  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        76,856 ±     107,689    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,029 ±       0,122  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,003 ±       0,012    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         6,000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  18760038,829 ±   57455,930   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    353791,077 ±    3913,297   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1140,128 ±      12,651  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      5072,001 ±       0,001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1217,139 ±    1164,660  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      5416,815 ±    5209,725    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,017 ±       0,105  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,074 ±       0,467    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         9,000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         4,000                    ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1832995,090 ±   21693,043   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2832,021 ±      34,236  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2708,208 ±      27,685  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      2325,695 ±      36,956    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,054 ±       0,091  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,046 ±       0,079    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        20,000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         8,000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  11431642,676 ± 1623353,253   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1394,560 ±     197,795  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1480,270 ±    1154,446  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       203,730 ±     152,305    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,079 ±       0,174  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,011 ±       0,023    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5        11,000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   3017183,352 ±   44780,134   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1978,348 ±      28,954  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1032,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2035,493 ±      10,480  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      1061,820 ±      13,865    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,054 ±       0,091  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,028 ±       0,048    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        15,000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         7,000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  12418133,365 ±  274302,055   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1577,965 ±      34,884  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1615,862 ±    1417,262  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       204,754 ±     178,427    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,033 ±       0,072  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,004 ±       0,009    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        12,000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         5,000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    720352,777 ±   23530,760   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1885,728 ±      61,509  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4120,001 ±       0,001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1898,822 ±    1164,329  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4145,401 ±    2464,020    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,037 ±       0,067  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,082 ±       0,144    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        14,000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2280640,309 ±   47611,346   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1924,371 ±      39,846  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1328,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2021,360 ±      19,938  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1394,976 ±      40,643    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,042 ±       0,080  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,029 ±       0,056    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        15,000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         7,000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  21157307,460 ±  467113,844   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       645,224 ±      14,134  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       538,765 ±    1159,735  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40,124 ±      86,378    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,526 ±       4,532  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,040 ±       0,341    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4,000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         3,000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6622202,908 ±   77270,967   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1817,651 ±      21,130  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1762,155 ±    1428,053  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       418,940 ±     342,097    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,054 ±       0,072  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,013 ±       0,017    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        13,000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         5,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  26299366,042 ±  419876,251   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       802,031 ±      13,115  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       807,286 ±    1155,800  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        48,320 ±      69,262    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,001 ±       0,006    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         6,000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  26379449,599 ± 2620022,352   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1442352,425 ±    9353,000   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2206,689 ±      14,181  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2408,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2308,019 ±    1430,268  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2518,690 ±    1564,310    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,071 ±       0,122  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,077 ±       0,133    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        17,000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5         8,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    411195,325 ±    4114,883   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2263,548 ±      23,035  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2296,920 ±    1410,738  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8791,735 ±    5398,746    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,159 ±       0,484    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        17,000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    524461,526 ±    4934,179   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       701,118 ±       6,618  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2104,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       675,120 ±       1,552  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2025,991 ±      17,206    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,025 ±       0,132    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         1,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1337846,830 ±   25961,714   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       890,860 ±      17,201  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806,818 ±    1156,653  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       949,084 ±    1359,450    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,021 ±       0,139  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,024 ±       0,163    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         2,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    124928,752 ±    1691,389   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4318,790 ±      58,947  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54408,003 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4357,778 ±    1440,463  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     54903,161 ±   18360,452    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,054 ±       0,044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,682 ±       0,551    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32,000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        12,000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    692629,451 ±    4088,224   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      2119,346 ±      12,539  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      2025,745 ±      17,688  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4603,316 ±      59,431    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,104 ±       0,152    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        15,000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    417275,124 ±    1069,182   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       646,890 ±       1,574  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2440,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       673,014 ±       6,313  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2538,537 ±      20,171    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,689 ±       5,713  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,599 ±      21,535    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         5,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    692376,688 ±   21761,275   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       510,286 ±      15,951  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       506,883 ±    1124,337  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1149,855 ±    2552,533    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,083 ±       0,544  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,189 ±       1,229    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3109712,903 ±   30836,272   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1438,416 ±      14,044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1345,856 ±       6,226  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       681,156 ±       4,922    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,019 ±       0,034    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3345281,792 ±   80265,810   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    443209,202 ±    4394,803   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       637,533 ±       6,287  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264,001 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       537,663 ±    1157,371  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1909,731 ±    4110,945    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,770 ±       6,586  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,726 ±      23,310    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    216718,234 ±    9127,019   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       552,961 ±      23,412  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5      4016,002 ±       0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       506,730 ±    1123,967  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3686,597 ±    8176,583    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,637 ±       5,319  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4,582 ±      38,272    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     27005,142 ±     178,045   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1689,787 ±      11,277  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     98480,016 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1750,948 ±    1421,243  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    102062,691 ±   83210,152    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,214 ±       5,720    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     42505,004 ±     547,104   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1063,664 ±      13,433  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39384,010 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1082,200 ±    1426,182  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     40067,718 ±   52773,551    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,925 ±       2,480    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     50037,562 ±     700,706   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       745,434 ±      10,541  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448,009 ±       0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       807,783 ±    1165,777  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     25431,027 ±   37086,506    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,661 ±       5,555  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        20,884 ±     175,617    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6,000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     31025,082 ±     630,873   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1643,940 ±      33,259  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83392,013 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1627,394 ±    1431,252  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     82626,123 ±   74242,703    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,062 ±       5,789    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     34302,382 ±     165,533   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1915,145 ±       9,493  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     87872,012 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1885,939 ±    1150,948  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     86525,428 ±   52649,818    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,046 ±       0,183  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,099 ±       8,375    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     33519,205 ±     251,977   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1803,166 ±      13,482  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84672,012 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1762,874 ±    1432,107  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     82755,902 ±   66736,366    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1,758 ±       5,571    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     37161,653 ±     507,061   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1881,480 ±      25,597  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     79688,012 ±       0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1887,360 ±    1152,460  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     79954,613 ±   49220,622    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1,765 ±       5,369    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        14,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         6,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     37307,831 ±     540,164   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1815,936 ±      25,901  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     76608,011 ±       0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5      1752,051 ±    1417,979  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     73943,369 ±   60451,467    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1,056 ±       4,429    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        13,000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5         5,000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5     10045,369 ±      95,015   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1294,619 ±      12,336  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202832,042 ±       0,007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1341,057 ±       5,290  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    210108,598 ±    2218,367    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,612 ±      16,381    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     25583,752 ±     199,102   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1953,707 ±      12,733  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    120240,016 ±       0,003    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1887,233 ±    1160,118  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    116152,501 ±   71479,612    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,037 ±       0,104  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         2,303 ±       6,415    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14,000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     51290,273 ±     401,881   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1262,865 ±      10,172  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38752,008 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1218,734 ±    1168,532  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     37407,539 ±   35981,834    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,255 ±       1,346    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     72826,817 ±    1563,523   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       941,009 ±      20,299  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336,006 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,186 ±    1417,893  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     20334,392 ±   30560,557    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,269 ±       1,545    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     38565,423 ±     224,305   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2575,365 ±      15,076  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105104,011 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2581,789 ±    1165,643  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    105370,246 ±   47708,598    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,050 ±       0,134  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,040 ±       5,479    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19,000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     38526,781 ±     247,352   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2106,883 ±      13,617  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     86072,011 ±       0,003    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2172,321 ±    1174,025  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     88742,840 ±   47854,714    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,041 ±       2,930    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        16,000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     52318,452 ±     551,878   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2010,414 ±      21,349  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     60480,008 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2024,740 ±      17,455  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     60911,474 ±     962,350    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,502 ±       2,148    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        15,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     54001,144 ±     442,696   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1980,965 ±      16,430  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     57736,008 ±       0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1889,316 ±    1170,711  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     55067,199 ±   34175,374    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,067 ±       0,036  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1,941 ±       1,042    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        14,000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    424877,977 ±    4414,608   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2148,607 ±      23,320  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2161,018 ±    1179,377  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      8007,892 ±    4445,050    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,139 ±       0,249    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        16,000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1714425,386 ±   11515,134   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       540,298 ±       3,761  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,516 ±    1123,318  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       465,118 ±    1031,059    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,541 ±       4,518  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,496 ±       4,139    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    718323,557 ±    4530,144   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       576,900 ±       3,601  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1264,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       539,940 ±    1162,264  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1183,649 ±    2547,899    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,055 ±       0,229    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         2,000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1911282,910 ±   26042,981   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       369,162 ±       5,006  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       441,878 ±     989,286  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       364,014 ±     813,859    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,634 ±       5,351  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,520 ±       4,394    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         7,000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    115472,556 ±     971,599   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      4191,898 ±      35,197  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57136,004 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4220,805 ±    1181,978  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     57528,235 ±   15972,097    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,046 ±       0,088  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,624 ±       1,196    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        31,000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        13,000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    711602,869 ±   11080,695   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1859,148 ±      28,917  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1753,048 ±    1422,556  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3878,837 ±    3177,627    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,065 ±       0,202    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    365377,937 ±    3569,322   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       562,724 ±       5,683  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2424,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       506,628 ±    1123,682  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2182,038 ±    4834,983    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,687 ±       5,777  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,955 ±      24,871    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1273703,493 ±    4128,461   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       589,122 ±       1,899  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5       641,056 ±     278,925  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       792,184 ±     344,907    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,540 ±       4,512  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,667 ±       5,581    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         5,000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1132756,110 ±   12821,797   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       800,321 ±       9,067  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       807,206 ±    1155,003  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1122,501 ±    1622,808    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,046 ±       0,268  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,064 ±       0,375    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         6,000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   1743793,949 ±   16119,155   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       806,610 ±       7,431  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728,000 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,316 ±    1156,769  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       728,374 ±    1038,875    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,026 ±       0,082    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   2887085,027 ±   12619,592   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    441482,561 ±   11474,647   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       509,370 ±      13,263  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1816,001 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       473,979 ±    1066,785  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1690,981 ±    3796,922    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,772 ±       6,517  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,747 ±      23,177    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    201683,796 ±    8456,611   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       514,596 ±      21,588  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4016,002 ±       0,001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       506,730 ±    1123,928  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3940,789 ±    8707,038    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,642 ±       5,440  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4,989 ±      42,267    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    159535,304 ±    1721,433   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1915,344 ±      21,336  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18896,003 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1888,364 ±    1161,401  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     18631,338 ±   11493,870    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,493 ±       0,705    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        14,000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5         6,000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    486249,261 ±    2295,721   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       390,514 ±       1,806  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1264,001 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,513 ±    1220,592  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1099,281 ±    3953,862    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±       0,251  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,095 ±       0,814    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5    928924,703 ±   10264,660   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       179,423 ±       1,993  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,617 ±    1078,886  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       347,748 ±    1833,576    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2,000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     96983,522 ±    1265,966   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4129,459 ±      53,892  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67016,004 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4220,233 ±    1174,667  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     68483,873 ±   18648,362    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,096 ±       0,091  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,555 ±       1,500    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        31,000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12,000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    271599,836 ±    1263,778   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1239,678 ±       5,755  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7184,002 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1210,270 ±    1155,801  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      7012,890 ±    6688,995    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,217 ±       0,509    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    364779,476 ±    6287,026   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1614,973 ±      27,850  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968,001 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1614,937 ±    1426,386  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      6969,665 ±    6194,148    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,126 ±       0,527    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        12,000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   2219555,385 ±    5651,972   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1139,440 ±       3,316  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1083,043 ±    1428,753  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       768,098 ±    1014,259    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,018 ±       0,062    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8,000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   2314233,461 ±    9267,999   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       623,443 ±       2,568  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424,000 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       539,119 ±    1160,502  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       366,539 ±     789,014    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,633 ±       5,274  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,431 ±       3,589    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2178513,956 ±    9934,788   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     51988,921 ±     632,624   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2191,243 ±      26,670  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     66336,008 ±       0,002    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2157,375 ±    1172,207  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     65309,837 ±   35438,620    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,037 ±       0,132  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,135 ±       3,994    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        16,000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         7,000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5    168533,389 ±     982,919   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       897,740 ±       5,316  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      8384,002 ±       0,001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       806,781 ±    1157,106  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7533,320 ±   10782,462    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,012 ±       0,108  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,117 ±       1,003    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         6,000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         3,000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    253890,698 ±    2948,640   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2613,232 ±      29,323  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2571,646 ±    1156,048  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     15938,745 ±    7042,987    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,083 ±       0,080  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,516 ±       0,493    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        19,000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8,000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    355675,938 ±    1730,804   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1713,961 ±       8,265  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7584,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1763,463 ±    1434,880  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7803,676 ±    6362,462    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±       0,119  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,166 ±       0,526    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        13,000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1395406,818 ±   81968,401   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       482,300 ±      28,353  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,515 ±    1068,699  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       531,506 ±    1196,037    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,634 ±       5,320  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,710 ±       5,954    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     94814,957 ±    1234,280   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3982,149 ±      51,661  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66104,004 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3949,243 ±    1183,185  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     65565,086 ±   20028,868    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,087 ±       0,191  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,453 ±       3,193    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        29,000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        11,000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    259017,565 ±    1990,475   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2743,619 ±      21,244  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16672,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2708,615 ±      26,847  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     16459,382 ±     256,777    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,228 ±       0,406    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        20,000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         8,000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    253296,188 ±    1027,770   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2146,148 ±       8,595  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13336,002 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2158,699 ±    1142,652  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     13415,394 ±    7157,878    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,054 ±       0,091  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,336 ±       0,569    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        16,000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1407158,582 ±   14334,339   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       822,587 ±       8,606  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       811,080 ±    1166,225  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       907,784 ±    1316,893    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,033 ±       0,150    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2962678,117 ±   21740,758   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1008,958 ±       7,339  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941,074 ±    1417,158  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       499,934 ±     752,791    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,013 ±       0,055    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2882745,804 ±   13642,405   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    338120,761 ±    2468,621   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2766,938 ±      20,959  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880,001 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2719,245 ±      12,483  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12658,028 ±     100,189    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,058 ±       0,036  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,271 ±       0,168    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        20,000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5     88064,626 ±    5156,623   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       653,529 ±      38,375  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     11680,005 ±       0,001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       673,428 ±       4,891  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     12037,719 ±     663,814    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,649 ±       5,320  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        11,483 ±      94,071    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     30962,089 ±      91,539   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1813,657 ±       5,546  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     92192,013 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1751,794 ±    1417,861  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     89040,805 ±   71932,562    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,693 ±       6,175    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5    105158,655 ±    1406,537   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       947,168 ±      12,671  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176,004 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940,978 ±    1417,698  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     14076,195 ±   21116,204    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±       0,132  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,684 ±       1,966    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     67704,699 ±     739,660   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1115,653 ±      12,459  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     25936,006 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1082,584 ±    1427,637  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     25185,440 ±   33410,909    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,134  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,776 ±       3,125    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    145767,517 ±    5431,573   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       939,490 ±      34,912  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144,003 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,196 ±    1418,130  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     10176,987 ±   15514,241    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,105  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,180 ±       1,121    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     40265,379 ±     523,113   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2102,320 ±      27,163  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82176,011 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2036,997 ±       9,554  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     79623,369 ±    1074,139    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,113  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,626 ±       4,421    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     75852,225 ±     454,355   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1364,492 ±       8,218  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     28312,006 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1345,223 ±       4,566  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     27912,275 ±     250,799    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,604 ±       1,893    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10,000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     42022,225 ±    1070,041   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       552,149 ±      14,153  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     20680,010 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       506,634 ±    1123,660  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     18982,567 ±   42126,286    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,689 ±       5,751  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        26,079 ±     217,931    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     45105,156 ±     532,327   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       407,415 ±       4,662  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14216,010 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,385 ±    1068,169  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16536,083 ±   37230,128    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,209  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,017 ±       7,301    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     52149,245 ±     240,750   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       471,023 ±       2,171  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     14216,008 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       474,493 ±    1068,597  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     14321,907 ±   32235,723    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,643 ±       5,422  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        19,371 ±     163,424    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     49317,776 ±     421,312   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       377,018 ±       3,200  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032,009 ±       0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5       441,866 ±     989,265  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     14109,601 ±   31584,741    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,634 ±       5,438  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        20,246 ±     173,592    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         7,000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     38105,949 ±     142,298   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       578,701 ±       2,185  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     23904,012 ±       0,002    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       506,746 ±    1124,010  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20927,826 ±   46406,157    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,646 ±       5,425  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        26,672 ±     224,120    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     23461,842 ±     589,639   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       880,150 ±      22,246  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59040,018 ±       0,005    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941,782 ±    1420,903  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     63105,848 ±   94330,318    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,679 ±       7,026    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         2,000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     23459,589 ±     113,944   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       664,940 ±       3,308  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44608,250 ±       2,005    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       675,205 ±       2,595  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     45296,952 ±     360,390    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,793 ±      10,060    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     97556,134 ±     823,929   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       253,896 ±       2,180  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,004 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       306,921 ±    1078,871  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4956,548 ±   17422,982    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,001 ±       0,006    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     19581,720 ±     166,383   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1269,151 ±      10,787  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    102008,022 ±       0,009    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1214,297 ±    1163,680  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     97632,746 ±   93961,450    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,667 ±       5,744    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     18358,397 ±     375,672   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5       632,933 ±      12,530  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     54261,738 ±      40,103    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       539,539 ±    1161,404  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     46277,938 ±   99626,452    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,589 ±       4,809  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        50,993 ±     416,226    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     73926,702 ±     165,998   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       975,813 ±       2,356  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     20776,006 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       940,263 ±    1416,426  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20020,232 ±   30172,633    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,021 ±       0,113  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,443 ±       2,414    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         7,000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5    100046,088 ±     831,604   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1186,332 ±       9,954  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664,004 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1218,283 ±    1165,200  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     19170,287 ±   18378,008    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,037 ±       0,104  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,590 ±       1,645    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    228761,088 ±    2330,842   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       362,788 ±       3,695  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496,002 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       306,947 ±    1078,962  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2113,664 ±    7429,893    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,057 ±       0,493    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    275876,579 ±    6374,654   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     79159,052 ±    1689,545   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1234,387 ±      26,202  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     24544,005 ±       0,001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1206,831 ±    1154,746  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     24006,721 ±   23096,976    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,330 ±       1,330    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     19902,789 ±      65,358   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       383,076 ±       1,330  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     30296,023 ±       0,008    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       441,977 ±     989,790  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     34967,821 ±   78306,486    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,570 ±       4,841  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        45,089 ±     382,944    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         8,000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     29303,146 ±     625,993   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       704,858 ±      15,084  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     37856,015 ±       0,004    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       673,050 ±       6,336  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     36148,749 ±     977,032    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,702 ±       5,773  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        38,031 ±     313,142    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         5,000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     78550,789 ±     774,461   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       926,681 ±       9,078  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     18568,006 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       946,314 ±    1424,289  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     18974,488 ±   28721,769    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,502 ±       2,879    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7,000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    137106,903 ±    2015,680   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       535,204 ±       7,788  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144,003 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       506,786 ±    1124,075  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5822,632 ±   12903,656    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,650 ±       5,362  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         7,487 ±      61,769    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     24517,362 ±      59,069   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1353,446 ±       2,989  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86880,017 ±       0,003    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1353,806 ±       6,172  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     86903,145 ±     349,362    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,012 ±       0,044  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,802 ±       2,819    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        10,000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     29548,237 ±     169,307   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       563,971 ±       3,275  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30040,014 ±       0,004    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       506,736 ±    1123,940  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     27002,035 ±   59879,916    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,657 ±       5,495  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        35,058 ±     293,092    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         5,000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    207097,201 ±    1148,543   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       720,023 ±       3,844  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472,002 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       807,290 ±    1154,484  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      6135,560 ±    8780,445    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,697 ±       5,693  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5,296 ±      43,227    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6,000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         3,000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    303324,778 ±    3068,596   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       306,804 ±       3,046  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,621 ±    1078,908  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1064,713 ±    5613,927    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         2,000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    572604,562 ±    6896,376   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       439,468 ±       5,260  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       474,763 ±    1069,582  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1304,470 ±    2934,915    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,643 ±       5,357  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,767 ±      14,732    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    603859,973 ±   11166,268   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    333419,836 ±    3814,088   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       921,925 ±      10,794  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352,001 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       946,118 ±    1423,901  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4465,565 ±    6712,212    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±       0,185  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,157 ±       0,870    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         3,000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     41191,158 ±     412,708   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       190,944 ±       1,964  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      7296,010 ±       0,001    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       204,608 ±    1078,841  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7827,365 ±   41271,534    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         2,000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         3,000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     44972,557 ±     542,655   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2005,973 ±      24,272  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200,009 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1889,066 ±    1171,445  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     66103,727 ±   40876,322    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±       0,234  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,452 ±       8,136    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14,000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         5,000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    329773,034 ±    2816,055   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       341,961 ±       2,915  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,457 ±    1220,280  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1622,084 ±    5830,563    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,527 ±       4,528  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,520 ±      21,630    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    113789,665 ±     949,641   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1252,223 ±      10,509  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17320,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1218,734 ±    1168,805  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     16853,507 ±   16123,769    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,036  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,230 ±       0,496    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         9,000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    466354,795 ±    3710,629   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       303,428 ±       2,397  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       306,961 ±    1079,013  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1037,433 ±    3646,724    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,004 ±       0,020  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,014 ±       0,067    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     46164,651 ±     663,799   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2463,092 ±      35,511  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     83976,009 ±       0,002    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2442,321 ±    1435,871  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     83289,397 ±   49579,841    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,080  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,129 ±       2,736    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        18,000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     88579,589 ±     628,976   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1620,003 ±      11,665  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     28784,005 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1616,292 ±    1423,144  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     28717,934 ±   25283,279    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,444 ±       1,191    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5    100092,173 ±     835,682   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       483,320 ±       4,034  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      7600,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       474,490 ±    1068,577  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      7464,286 ±   16793,681    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,696 ±       5,817  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        10,936 ±      91,376    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         7,000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    124635,305 ±    1028,759   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       381,368 ±       3,035  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       339,446 ±    1220,270  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4290,420 ±   15433,779    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,532 ±       4,531  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6,743 ±      57,409    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5    108874,617 ±     540,595   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       359,720 ±       1,724  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200,004 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,497 ±    1220,556  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4906,642 ±   17645,628    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,179  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,301 ±       2,593    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    125379,878 ±    1160,978   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       383,651 ±       3,511  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       441,858 ±     989,247  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5543,472 ±   12422,942    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,632 ±       5,385  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         7,952 ±      67,719    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8,000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    123477,893 ±    2853,577   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       280,551 ±       6,503  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576,003 ±       0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5       306,931 ±    1078,906  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3901,987 ±   13716,057    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,013 ±       0,071  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,164 ±       0,909    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3,000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5     11410,848 ±     263,617   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1876,710 ±      42,988  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    258856,048 ±       0,085    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1886,789 ±    1155,993  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    260330,220 ±  161373,855    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,012 ±       0,044  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,727 ±       6,071    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        14,000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     11577,902 ±     276,198   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1791,010 ±      42,988  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243466,941 ±      36,323    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1763,396 ±    1428,448  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    239554,691 ±  190710,140    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4,525 ±      12,376    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    208183,558 ±     758,819   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       541,781 ±       1,901  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096,002 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       507,301 ±    1125,497  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3835,810 ±    8508,719    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,568 ±       4,789  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         4,292 ±      36,188    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6701,225 ±      80,806   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1779,705 ±      21,769  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    417985,244 ±      10,178    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1763,813 ±    1434,450  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    414383,889 ±  339625,847    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3,912 ±      15,721    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5         7,000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5     11337,746 ±      91,154   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1823,743 ±      14,369  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    253172,417 ±      27,816    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1754,061 ±    1419,993  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    243466,001 ±  196409,094    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4,048 ±      12,700    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     29318,615 ±     177,407   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1519,477 ±       9,201  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81568,015 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1479,378 ±    1157,805  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     79433,499 ±   62693,475    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,565 ±       4,912    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     34785,173 ±     547,558   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1700,523 ±      27,045  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944,012 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1627,555 ±    1429,496  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     73665,298 ±   65186,655    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,509 ±       5,504    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         6,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    389339,663 ±    1605,399   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       860,858 ±       3,651  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       943,416 ±    1422,357  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3814,824 ±    5765,061    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,135 ±       0,370    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7,000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    452787,326 ±    2551,736   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     30824,280 ±     284,135   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1622,021 ±      15,022  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824,014 ±       0,002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1612,134 ±    1425,078  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     82340,942 ±   73255,061    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±       0,104  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,277 ±       5,347    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5     11687,746 ±     165,965   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       653,628 ±       9,231  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     88016,037 ±       0,015    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       674,059 ±       4,518  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     90768,157 ±    1436,316    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,589 ±       4,852  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        79,613 ±     655,613    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5,000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5    112758,204 ±    1115,907   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1836,982 ±      18,569  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640,004 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1887,562 ±    1156,422  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     26345,606 ±   16130,872    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,054 ±       0,091  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,755 ±       1,269    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14,000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    555109,328 ±    2106,565   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       575,622 ±       2,158  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       641,094 ±     278,842  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1817,474 ±     785,034    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,536 ±       4,513  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,518 ±      12,794    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    332466,491 ±    2572,114   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       461,337 ±       3,579  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2184,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       507,074 ±    1124,870  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2402,113 ±    5326,541    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±       0,174  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,118 ±       0,822    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    773651,232 ±   11493,807   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       503,317 ±       7,384  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024,001 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       506,755 ±    1124,001  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1030,199 ±    2285,723    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,642 ±       5,349  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,303 ±      10,858    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     85463,303 ±     669,880   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3740,285 ±      29,431  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68880,005 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3674,119 ±    1436,310  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     67664,645 ±   26598,417    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,075 ±       0,091  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,380 ±       1,684    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        27,000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        11,000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    220976,142 ±    4513,859   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1678,025 ±      34,812  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11952,002 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1751,370 ±    1420,217  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     12476,798 ±   10162,924    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,237 ±       0,648    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        13,000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         4,000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    273877,995 ±    1606,975   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1631,574 ±       9,916  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9376,002 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1615,046 ±    1423,127  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9281,269 ±    8183,836    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,037 ±       0,105  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,215 ±       0,600    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12,000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         5,000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1057857,937 ±   51255,983   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       575,332 ±      27,941  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       538,710 ±    1159,616  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       805,872 ±    1734,777    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,532 ±       4,494  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,794 ±       6,702    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    921171,417 ±    4518,787   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       725,756 ±       3,485  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       675,381 ±       2,763  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1153,932 ±       5,499    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,036 ±       0,168    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         2,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1252708,390 ±   17547,282   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       681,329 ±       9,583  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856,000 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,454 ±       4,785  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       846,118 ±      16,129    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,649 ±       5,317  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,818 ±       6,706    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1187291,494 ±    9173,267   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     37580,375 ±     557,806   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1962,577 ±      30,338  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     82200,012 ±       0,002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2019,389 ±      21,979  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     84581,084 ±    2007,937    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,092 ±       2,996    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15,000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5         9,000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5    137626,018 ±     552,644   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1466,945 ±       6,079  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16776,003 ±       0,001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1480,723 ±    1163,023  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     16934,683 ±   13333,428    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,428 ±       0,766    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5        11,000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5         4,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    141275,677 ±    2116,773   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1927,405 ±      28,749  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     21472,003 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1887,053 ±    1160,932  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     21025,636 ±   13007,350    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±       0,127  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,696 ±       1,412    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        14,000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    210085,031 ±    1953,607   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1111,610 ±      10,656  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8328,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1082,512 ±    1428,225  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      8106,706 ±   10659,371    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,218 ±       0,910    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    303095,634 ±    6847,208   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       788,761 ±      17,730  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,378 ±    1155,696  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4191,478 ±    5976,689    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,151 ±       0,809    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     79230,316 ±    1120,219   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3342,110 ±      49,432  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66408,005 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3400,780 ±      11,190  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     67574,542 ±     966,875    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,075 ±       0,072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,488 ±       1,421    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        25,000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        10,000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    160614,715 ±    1224,943   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1811,534 ±      13,744  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17752,003 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1887,217 ±    1160,636  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18497,886 ±   11473,041    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,285 ±       0,702    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    190460,017 ±    1850,189   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       662,200 ±       6,378  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472,002 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,039 ±       6,240  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      5561,589 ±      70,577    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,700 ±       5,846  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,797 ±      48,431    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    546195,893 ±   85189,430   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       552,449 ±      86,131  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       539,748 ±    1161,848  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1565,364 ±    3383,590    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,046 ±       0,268  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,139 ±       0,836    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    590179,838 ±   19242,177   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       452,951 ±      14,692  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       474,501 ±    1068,651  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1268,151 ±    2861,712    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,642 ±       5,287  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,736 ±      14,309    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    624390,046 ±    4355,304   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    333959,849 ±    3908,508   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       920,023 ±      10,536  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336,001 ±       0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       946,104 ±    1423,838  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4458,719 ±    6707,595    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,137 ±       0,630    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     41662,736 ±     905,137   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       193,123 ±       4,184  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      7296,010 ±       0,002    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       204,608 ±    1078,836  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7768,036 ±   40959,271    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         2,000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     12460,923 ±     124,561   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1593,560 ±      15,890  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    201280,041 ±       0,046    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1614,717 ±    1416,313  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    203972,296 ±  179338,469    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3,152 ±      16,604    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        12,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     12889,228 ±     127,915   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1527,548 ±      14,915  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    186528,552 ±      53,183    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1626,333 ±    1428,398  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    198624,858 ±  175176,268    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         2,037 ±       8,211    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        12,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    224854,003 ±    2061,553   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1462,943 ±      13,449  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240,002 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1483,195 ±    1168,705  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     10382,768 ±    8209,754    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,046 ±       0,088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,320 ±       0,612    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      9359,679 ±      64,551   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1742,742 ±      11,933  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293056,568 ±       3,359    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1627,929 ±    1431,575  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    273798,401 ±  241828,292    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         9,808 ±      25,951    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        12,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         6,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     12176,369 ±     285,040   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1438,712 ±      34,061  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    185962,984 ±      33,293    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1481,770 ±    1154,870  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    191544,450 ±  149632,086    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,042 ±       0,127  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5,365 ±      16,287    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        11,000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     26622,157 ±     199,121   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1117,751 ±       8,193  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66080,016 ±       0,003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1074,537 ±    1415,944  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     63527,693 ±   83737,953    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,984 ±       3,958    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     30985,335 ±     264,754   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1192,022 ±      10,185  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552,013 ±       0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1218,285 ±    1165,182  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     61908,223 ±   59472,909    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2,116 ±       4,984    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         9,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    795814,382 ±    7311,314   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1435,987 ±      13,623  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840,001 ±       0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1347,747 ±       3,992  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      2665,499 ±      30,242    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,099 ±       0,142    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    918191,677 ±    5438,793   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     28212,938 ±     206,819   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1190,540 ±       8,668  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66416,015 ±       0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1072,509 ±    1413,660  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     59843,189 ±   79006,641    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,162 ±       5,477    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5     16153,353 ±      95,556   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       586,704 ±       3,560  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     57168,028 ±       0,009    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       641,798 ±     280,573  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     62529,445 ±   27086,029    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,579 ±       4,801  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        56,443 ±     467,901    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         5,000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     31766,321 ±     736,849   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1723,948 ±      40,358  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     85416,014 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1751,060 ±    1421,493  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     86797,904 ±   71230,163    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,054 ±       0,166  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,683 ±       8,222    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        13,000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     36117,728 ±     296,314   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1648,757 ±      13,879  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     71848,012 ±       0,003    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1627,123 ±    1427,438  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     70902,504 ±   62136,095    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,044  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,270 ±       1,908    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    410120,670 ±    1064,019   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1067,321 ±       2,687  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1077,669 ±    1419,855  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4135,978 ±    5452,182    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,096 ±       0,337    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     20233,534 ±     304,134   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2016,561 ±      29,906  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    156864,022 ±       0,011    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1901,037 ±    1169,109  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    147904,454 ±   91566,131    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,940 ±       8,110    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     33486,015 ±     193,958   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1622,123 ±       9,409  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     76248,013 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1617,950 ±    1427,968  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     76044,159 ±   66945,340    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,173 ±       6,187    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     61689,160 ±     644,043   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1496,214 ±      15,359  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38176,007 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,292 ±    1161,661  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     37744,582 ±   29646,838    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,044  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,744 ±       1,121    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    149053,633 ±    1187,283   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1262,910 ±      10,055  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     13336,003 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1218,665 ±    1167,271  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     12872,891 ±   12378,616    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,308 ±       1,418    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1228839,669 ±    6697,874   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1317,975 ±       7,104  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688,000 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1212,782 ±    1160,926  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1553,657 ±    1491,777    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±       0,113  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,053 ±       0,145    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1011920,321 ±    5034,226   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     62111,073 ±    1190,849   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1526,095 ±      29,171  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     38672,007 ±       0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1476,640 ±    1149,928  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     37415,474 ±   29026,206    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,635 ±       2,665    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11,000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     31476,377 ±     157,482   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       390,367 ±       2,069  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     19520,013 ±       0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       441,982 ±     989,802  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22108,232 ±   49526,732    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,569 ±       4,761  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        28,495 ±     238,309    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         8,000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     18442,424 ±     263,395   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1646,037 ±      22,872  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    140480,029 ±       0,042    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1615,719 ±    1419,307  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    137854,862 ±  120248,413    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,046 ±       0,104  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3,904 ±       8,883    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     19034,023 ±     634,634   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1537,377 ±      50,586  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127119,658 ±      53,458    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1626,573 ±    1428,821  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    134659,789 ±  121783,842    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2,765 ±       7,652    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    461959,714 ±    3150,413   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1202,222 ±       8,141  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1212,491 ±    1160,150  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4131,195 ±    3955,327    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,099 ±       0,311    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     13823,695 ±     128,632   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1908,701 ±      17,161  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    217320,032 ±       0,017    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1900,320 ±    1170,860  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    216361,045 ±  133190,272    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,062 ±       0,204  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         7,105 ±      23,258    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     18824,337 ±     188,192   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1572,609 ±      15,671  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    131484,808 ±      41,205    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1617,346 ±    1419,050  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    135275,524 ±  119780,922    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,742 ±       6,703    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     44707,794 ±     388,040   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1389,873 ±      12,171  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928,009 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1344,037 ±       5,142  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     47314,671 ±     527,084    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±       0,072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,026 ±       2,523    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     53074,879 ±     379,608   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1407,924 ±      10,085  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752,008 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,910 ±       6,140  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     40179,933 ±     166,539    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,741 ±       3,907    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1376946,716 ±   19251,355   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1252,797 ±      17,420  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432,000 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1347,331 ±       3,381  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1540,073 ±      21,771    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,052 ±       0,077    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1464793,904 ±    9444,775   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     40932,214 ±     524,289   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1238,357 ±      15,857  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     47616,010 ±       0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207,007 ±    1155,131  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     46424,691 ±   44597,192    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,641 ±       2,581    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     33544,375 ±     179,706   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       470,545 ±       2,591  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     22080,013 ±       0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,745 ±    1069,537  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22290,325 ±   50234,832    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,583 ±       4,815  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        27,368 ±     226,222    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     89673,461 ±    2936,476   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1538,260 ±      49,892  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     27000,005 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1615,448 ±    1420,798  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     28337,827 ±   24523,662    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,367 ±       1,415    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12,000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         4,000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    389829,416 ±    7203,985   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       780,724 ±      14,488  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       807,225 ±    1155,944  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3262,555 ±    4735,022    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,101 ±       0,580    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    296205,396 ±    1270,813   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       642,850 ±       2,724  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3416,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       674,896 ±       2,023  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3586,296 ±      21,371    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±       0,227  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,221 ±       1,206    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         2,000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    521544,876 ±    4514,508   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       657,411 ±       5,721  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,412 ±       4,867  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2032,291 ±       8,754    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,653 ±       5,355  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,967 ±      16,128    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     79144,707 ±    1133,608   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3529,578 ±      50,802  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70192,006 ±       0,002    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3536,490 ±    1167,189  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     70322,296 ±   22729,031    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,079 ±       0,105  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,571 ±       2,060    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26,000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        10,000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    209612,253 ±   16497,885   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1474,565 ±     116,014  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11072,002 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1479,394 ±    1157,782  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     11100,627 ±    8385,830    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,037 ±       0,088  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,279 ±       0,653    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11,000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    754831,231 ±    6664,797   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       590,874 ±       5,184  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       538,746 ±    1159,693  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1124,420 ±    2420,410    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,531 ±       4,439  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,109 ±       9,271    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    510024,324 ±    7557,906   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       523,639 ±       7,786  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       403,022 ±    1416,679  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1240,721 ±    4361,348    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,051 ±       0,270    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3,000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         1,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    662436,085 ±    7775,250   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       518,534 ±       6,247  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,739 ±    1123,938  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1205,584 ±    2673,861    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,645 ±       5,331  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,536 ±      12,701    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    807144,181 ±   11984,606   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     34005,426 ±     623,765   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1743,636 ±      31,478  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     80704,012 ±       0,002    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1747,211 ±    1409,297  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     80919,187 ±   66265,557    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,183  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,128 ±       8,507    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         7,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      8953,863 ±      23,370   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1378,376 ±       3,431  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    242289,168 ±      32,279    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1344,891 ±       4,972  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    236403,367 ±    1365,003    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,927 ±      11,782    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      9181,783 ±      52,595   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1323,249 ±       7,269  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226824,045 ±       0,006    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1354,359 ±       6,261  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    232157,141 ±    1556,689    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         4,995 ±      15,677    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    174103,166 ±    4818,710   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1686,843 ±      46,693  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248,002 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1753,820 ±    1422,851  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     15865,637 ±   13111,709    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,225 ±       0,940    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        13,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      8317,749 ±     112,264   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1512,736 ±      20,243  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286241,497 ±      10,204    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1490,958 ±    1164,262  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    282165,140 ±  221599,203    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         3,943 ±      10,768    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      9589,857 ±      88,330   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1328,750 ±      12,244  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    218087,725 ±      44,716    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5      1346,285 ±       4,086  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    220966,450 ±    1547,183    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4,092 ±      17,119    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     20376,251 ±     232,557   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       924,520 ±      10,767  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71410,637 ±      22,524    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5       940,197 ±    1414,852  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     72649,347 ±  109671,612    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,930 ±      11,070    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     24039,185 ±     420,257   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1018,674 ±      17,593  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696,018 ±       0,003    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       946,695 ±    1426,639  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     62033,422 ±   94103,322    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1,642 ±       9,438    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    508649,372 ±    2955,658   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1153,098 ±       6,646  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1077,571 ±    1420,705  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3334,675 ±    4400,652    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,042 ±       0,150  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,129 ±       0,464    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         8,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         6,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    575390,605 ±    2671,715   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     22074,618 ±     259,406   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1017,671 ±      12,116  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72560,729 ±       6,111    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1072,305 ±    1413,804  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     76487,394 ±  101186,700    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2,078 ±       9,557    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5     11304,286 ±     290,799   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5       633,961 ±      16,168  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5     88264,633 ±       5,108    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5       539,514 ±    1161,352  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     75211,829 ±  161922,365    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,579 ±       4,852  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        81,143 ±     679,995    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5         4,000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     15273,157 ±      75,968   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1514,427 ±       7,262  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    156064,029 ±       0,011    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,907 ±    1158,147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    152516,694 ±  119650,163    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,576 ±      13,582    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     15288,577 ±     164,781   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1399,077 ±      14,501  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144032,640 ±      61,840    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1489,877 ±    1162,067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    153430,011 ±  121114,363    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4,717 ±      12,257    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    277853,502 ±    1448,077   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1607,124 ±       8,553  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104,002 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1616,339 ±    1423,268  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      9157,976 ±    8102,711    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,058 ±       0,088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,330 ±       0,497    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        12,000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     13610,147 ±     191,953   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1703,329 ±      24,198  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    196976,032 ±       0,014    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1761,998 ±    1428,801  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    203845,534 ±  166989,316    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,058 ±       0,154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6,742 ±      17,837    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        13,000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     14743,644 ±     125,968   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1439,330 ±      12,762  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    153644,651 ±      46,520    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1479,767 ±    1155,386  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    157932,115 ±  122441,854    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,332 ±       7,639    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     31796,363 ±     403,433   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1097,238 ±      13,747  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312,013 ±       0,003    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1074,439 ±    1416,591  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     53143,857 ±   69628,017    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,235 ±       6,511    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         8,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     89292,626 ±     823,674   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1595,777 ±      14,707  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28128,005 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1627,096 ±    1431,246  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28672,977 ±   25064,746    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±       0,057  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,734 ±       0,997    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        12,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    759859,143 ±   11114,637   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1042,790 ±      15,267  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160,001 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1075,566 ±    1417,278  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2226,901 ±    2923,274    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,025 ±       0,105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,052 ±       0,216    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         8,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         4,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    898299,633 ±    4150,536   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     81483,756 ±     913,314   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1598,310 ±      18,012  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     30872,005 ±       0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1626,498 ±    1432,237  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     31427,337 ±   27907,958    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,563 ±       1,769    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        12,000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     18708,192 ±     168,031   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       413,632 ±       3,637  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     34800,024 ±       0,012    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,558 ±    1220,872  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     28572,211 ±  102818,979    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,646 ±       5,497  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        54,531 ±     463,990    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     21499,326 ±     129,415   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       805,189 ±       4,807  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     58944,020 ±       0,011    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       807,307 ±    1155,305  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     59098,658 ±   84564,451    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,523 ±       7,178    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         6,000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     18841,862 ±     219,011   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       527,326 ±       6,140  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44048,170 ±       1,268    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       507,102 ±    1124,961  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     42360,227 ±   93871,741    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,201  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2,781 ±      16,775    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    118794,444 ±     577,348   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       298,284 ±       1,422  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952,003 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204,634 ±    1078,974  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2713,216 ±   14306,007    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,008 ±       0,073  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,112 ±       0,962    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2,000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     17187,452 ±     390,857   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1084,945 ±      24,958  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99352,026 ±       0,010    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1078,016 ±    1420,985  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     98675,575 ±  129601,959    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,033 ±       0,166  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3,039 ±      15,113    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         8,000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     18488,707 ±     133,791   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       595,113 ±       3,900  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     50662,551 ±      40,280    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       641,818 ±     280,471  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     54632,208 ±   23646,381    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,585 ±       4,861  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        49,816 ±     413,719    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         5,000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     67368,275 ±    1010,205   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1076,271 ±      16,124  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     25144,006 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1074,527 ±    1415,796  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     25117,132 ±   33245,997    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,779 ±       2,845    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8,000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         3,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     82751,048 ±     417,585   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1337,473 ±       6,770  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     25440,005 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1354,571 ±       6,461  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     25765,293 ±     228,609    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,008 ±       0,044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,158 ±       0,834    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        10,000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    260734,176 ±    9101,765   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       499,624 ±      17,466  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016,002 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       507,258 ±    1125,385  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3063,037 ±    6769,558    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,581 ±       4,825  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3,496 ±      29,030    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5,000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    328477,996 ±    2414,325   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     77529,165 ±    1224,698   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1391,433 ±      21,723  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     28248,006 ±       0,001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1341,800 ±       6,098  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     27240,802 ±     496,516    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,338 ±       1,360    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        10,000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     17401,901 ±     218,715   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       381,655 ±       4,857  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     34520,025 ±       0,013    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       441,972 ±     989,796  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     40011,672 ±   89753,060    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,567 ±       4,868  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        51,569 ±     442,432    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    137697,133 ±    1307,166   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1994,722 ±      19,173  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2023,554 ±      18,795  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23129,627 ±     239,293    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,033 ±       0,072  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,381 ±       0,820    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    747060,391 ±    6945,979   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       413,910 ±       3,774  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,270 ±    1067,739  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       999,888 ±    2249,897    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,533 ±       4,538  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,125 ±       9,575    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    414216,354 ±   15771,545   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       412,683 ±      15,770  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1568,001 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,414 ±    1068,290  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1804,840 ±    4044,324    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±       0,176  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,110 ±       0,662    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    992537,784 ±   10953,929   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       343,028 ±       3,794  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       306,906 ±    1078,818  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       487,391 ±    1713,261    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,007 ±       0,042  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,011 ±       0,067    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     91203,688 ±     803,119   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3907,503 ±      34,661  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67432,005 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3946,922 ±    1175,379  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     68119,155 ±   20658,187    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,083 ±       0,127  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,437 ±       2,187    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        29,000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        12,000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    245611,038 ±    3337,381   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1551,763 ±      21,112  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9944,002 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1615,638 ±    1417,492  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10359,193 ±    9215,754    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±       0,104  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,240 ±       0,670    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         4,000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    253815,117 ±    1615,392   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1322,378 ±       8,341  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200,002 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1209,178 ±    1157,628  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      7498,913 ±    7189,593    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,155 ±       0,416    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9,000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1634039,568 ±   11676,140   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       556,501 ±       3,896  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       641,061 ±     278,747  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       617,397 ±     266,733    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,538 ±       4,495  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,519 ±       4,336    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         5,000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1590371,155 ±   20469,360   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       929,641 ±      11,939  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       942,585 ±    1417,419  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       933,763 ±    1416,050    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,029 ±       0,121    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1563291,871 ±    4718,162   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       532,382 ±       1,633  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536,000 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,761 ±    1124,018  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       510,256 ±    1131,422    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,640 ±       5,375  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,644 ±       5,412    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1540851,708 ±   21883,158   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     44401,092 ±    1568,762   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2059,175 ±      72,725  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     72992,009 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2020,838 ±      22,846  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     71639,365 ±    3303,927    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,329 ±       2,401    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         6,000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5    153955,053 ±    2712,364   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1039,155 ±      18,127  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     10624,003 ±       0,001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       941,069 ±    1417,292  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      9617,819 ±   14440,970    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±       0,067  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,255 ±       0,687    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         7,000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5         2,000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     65774,584 ±     635,627   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1312,250 ±      12,886  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31400,007 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1344,829 ±       3,366  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     32179,755 ±     357,167    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,050 ±       0,122  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,197 ±       2,915    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10,000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         4,000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     91822,996 ±     766,741   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       963,806 ±       7,941  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16520,005 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       946,724 ±    1428,534  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     16234,848 ±   24592,379    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,214 ±       1,229    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    294945,441 ±    1874,935   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       959,478 ±       6,077  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941,171 ±    1418,835  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5024,698 ±    7604,626    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,143  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,134 ±       0,767    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         2,000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     38026,449 ±     469,743   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1785,740 ±      21,595  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73904,011 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1759,277 ±    1421,161  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     72808,510 ±   58804,435    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,378 ±       5,013    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        13,000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     54311,118 ±     496,290   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       906,274 ±       8,339  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26264,008 ±       0,002    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       806,718 ±    1156,703  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     23380,567 ±   33553,103    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,121 ±       1,039    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         6,000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         2,000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     66029,603 ±     570,587   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       979,703 ±       8,455  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352,006 ±       0,002    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       940,264 ±    1417,542  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     22414,308 ±   33821,119    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,012 ±       0,044  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,298 ±       1,047    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7,000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         3,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5    106637,621 ±     670,480   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1460,691 ±       8,888  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560,000 ±       0,060    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1490,461 ±    1170,780  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     21996,320 ±   17187,354    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,368 ±       1,294    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    305946,493 ±    4884,973   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       975,072 ±      15,584  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,597 ±    1418,180  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5532,824 ±    7291,357    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±       0,174  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,236 ±       0,894    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    361648,594 ±    2015,489   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     81698,898 ±     807,637   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1211,691 ±      11,941  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344,010 ±       0,042    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1206,863 ±    1155,434  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     23251,648 ±   22269,057    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,091  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,562 ±       1,768    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         9,000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         4,000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5     11065,895 ±     215,849   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       274,246 ±       5,408  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     39008,646 ±       5,209    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       306,879 ±    1078,724  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     43775,224 ±  153878,906    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,005 ±       0,040  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,670 ±       5,765    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     29111,934 ±     413,922   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1516,460 ±      21,231  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     81984,014 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1480,317 ±    1158,017  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     80070,165 ±   63792,511    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,803 ±       7,878    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     33924,457 ±     315,168   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1327,946 ±      12,372  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61608,012 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1354,422 ±       6,294  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     62836,538 ±     517,641    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,042 ±       0,080  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,932 ±       3,727    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    558217,867 ±    6679,598   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1452,771 ±      17,383  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1480,789 ±    1167,057  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4174,290 ±    3268,665    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,042 ±       0,098  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,117 ±       0,277    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     26809,135 ±     332,283   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2002,313 ±      24,821  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    117552,015 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2035,069 ±      11,527  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    119476,104 ±    1713,830    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,050 ±       0,072  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,930 ±       4,191    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     32716,967 ±     450,829   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1476,666 ±      21,112  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     71032,013 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1480,326 ±    1165,346  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     71220,285 ±   56407,550    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±       0,072  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,600 ±       3,419    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     80082,295 ±    1288,152   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1694,970 ±      27,532  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33312,005 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1749,526 ±    1419,903  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     34399,814 ±   28230,399    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,037 ±       0,067  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,736 ±       1,309    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        13,000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    141492,994 ±    1071,236   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1348,469 ±      10,000  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     15000,003 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,760 ±       5,854  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     15070,011 ±      81,546    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,046 ±       0,067  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,509 ±       0,747    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         4,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1330046,178 ±    5024,555   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1102,004 ±       4,309  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304,000 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1075,681 ±    1417,290  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1273,095 ±    1680,051    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,044 ±       0,170    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8,000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1532032,104 ±   17465,080   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    138720,615 ±     911,617   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1563,926 ±      10,665  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     17744,003 ±       0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1490,730 ±    1167,177  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16912,323 ±   13204,969    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,378 ±       1,035    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11,000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     33067,976 ±     339,804   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       436,996 ±       4,404  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     20800,013 ±       0,002    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,490 ±    1068,593  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22598,113 ±   50926,720    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,650 ±       5,461  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        31,068 ±     261,133    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     41320,656 ±     203,651   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1482,219 ±       7,253  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56456,010 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1490,687 ±    1167,136  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     56771,808 ±   44250,809    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,792 ±       2,156    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        11,000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    773672,123 ±   16664,424   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1510,131 ±      32,608  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072,001 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1480,723 ±    1154,108  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3012,691 ±    2361,887    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,068 ±       0,186    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        11,000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     30979,443 ±     263,363   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2253,980 ±      18,221  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114520,013 ±       0,002    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2308,146 ±    1435,429  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    117274,534 ±   73002,379    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±       0,044  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,693 ±       2,242    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        17,000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     41997,201 ±     425,743   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1753,574 ±      18,246  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     65720,010 ±       0,003    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1751,746 ±    1428,790  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     65643,665 ±   53379,948    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,714 ±       4,450    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        13,000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         5,000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    399623,502 ±    1965,187   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1111,111 ±       5,471  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376,001 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1082,917 ±    1428,330  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4266,437 ±    5643,408    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,131 ±       0,479    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8,000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1701511,886 ±   17806,843   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       994,635 ±      10,596  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,678 ±    1418,315  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       995,369 ±    1316,860    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,019 ±       0,074    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1769165,825 ±   54441,729   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    255175,713 ±    1682,410   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1652,353 ±      10,620  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192,002 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1626,423 ±    1424,021  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10032,033 ±    8782,769    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±       0,122  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,206 ±       0,750    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        12,000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     59788,379 ±     437,798   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       400,522 ±       2,877  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     10544,007 ±       0,001    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       339,550 ±    1220,799  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      8944,496 ±   32171,663    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,642 ±       5,483  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        16,926 ±     144,638    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     88212,573 ±    1162,157   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1657,669 ±      21,500  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     29576,005 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1611,318 ±    1416,184  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     28766,209 ±   25655,029    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,037 ±       0,143  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,670 ±       2,563    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12,000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     94144,079 ±    2130,031   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1091,071 ±      24,904  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     18240,004 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1216,682 ±    1164,333  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     20343,874 ±   19516,789    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,279 ±       1,120    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    118598,860 ±     529,552   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1249,063 ±       5,566  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576,004 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,722 ±    1152,385  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16015,176 ±   15306,905    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,276 ±       1,063    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9,000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     55511,177 ±     444,110   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2651,462 ±      21,433  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75176,007 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2582,407 ±    1162,956  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     73208,860 ±   32646,009    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,054 ±       0,108  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,533 ±       3,037    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19,000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         9,000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     84497,426 ±     930,285   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1466,754 ±      16,207  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     27320,005 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1475,913 ±    1165,150  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     27489,170 ±   21655,550    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,119  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,852 ±       2,213    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        11,000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    139920,503 ±    5281,950   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       618,753 ±      23,380  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6960,003 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       639,435 ±     275,366  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7187,129 ±    2877,196    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,846 ±       7,063  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         9,526 ±      79,529    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         5,000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         7,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    192543,676 ±    4437,248   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       285,761 ±       6,609  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336,002 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306,913 ±    1078,843  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2505,978 ±    8809,141    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,034 ±       0,293    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    776727,364 ±    5778,991   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       963,288 ±       6,780  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       938,345 ±    1414,754  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1902,318 ±    2878,900    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,051 ±       0,267    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    799714,621 ±    8683,719   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    227233,742 ±    2943,286   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       742,598 ±       9,588  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144,002 ±       0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       803,803 ±    1157,592  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5566,387 ±    7987,220    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,913 ±       7,730  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6,358 ±      53,818    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6,000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     30129,036 ±     285,559   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       168,137 ±       1,618  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      8784,014 ±       0,004    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204,600 ±    1078,798  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10708,162 ±   56461,105    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,005 ±       0,044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,267 ±       2,298    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         2,000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    156937,861 ±    2877,845   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1932,851 ±      35,700  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19384,003 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1886,923 ±    1155,355  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18924,906 ±   11621,366    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,058 ±       0,105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,584 ±       1,046    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        14,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    201915,143 ±    1678,056   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1068,388 ±       9,209  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8328,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1082,060 ±    1426,262  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      8437,214 ±   11149,969    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,033 ±       0,146  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,260 ±       1,136    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    534659,540 ±    3526,535   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1038,105 ±       6,752  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       941,018 ±    1417,154  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2770,431 ±    4175,139    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,021 ±       0,098  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,061 ±       0,289    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     76298,761 ±    1169,771   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3219,363 ±      49,793  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66408,006 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3265,018 ±    1165,611  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67360,097 ±   24492,535    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,062 ±       0,113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,287 ±       2,327    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        10,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    144316,512 ±     369,556   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1624,784 ±       4,127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17720,003 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1616,115 ±    1423,596  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17623,803 ±   15488,114    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±       0,091  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,363 ±       0,997    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        12,000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    208699,690 ±    1811,297   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       718,170 ±       6,201  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5416,002 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       807,312 ±    1154,389  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      6088,307 ±    8706,178    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,693 ±       5,697  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5,240 ±      43,104    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    321479,302 ±    3325,192   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       316,990 ±       3,197  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204,620 ±    1078,903  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1004,158 ±    5294,645    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,004 ±       0,036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,020 ±       0,176    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         2,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         2,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1329134,749 ±    9814,343   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       986,362 ±       7,525  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168,000 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1075,582 ±    1418,074  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1274,290 ±    1687,036    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±       0,122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,035 ±       0,144    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         8,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1400136,643 ±    9517,300   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    319510,352 ±    2246,495   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       872,112 ±       5,971  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296,001 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       810,742 ±    1163,924  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3992,879 ±    5717,623    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,082 ±       0,432    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         6,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     42834,960 ±      94,312   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       133,249 ±       0,264  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4896,010 ±       0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102,301 ±     880,840  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3759,249 ±   32368,270    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         1,000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      5935,082 ±      40,261   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1169,105 ±       7,983  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    310024,070 ±       0,009    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1197,787 ±    1146,159  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    317688,734 ±  304699,315    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6,627 ±      23,298    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         9,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         5,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      5872,779 ±      30,840   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1091,127 ±       5,201  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    292384,072 ±       0,012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1077,805 ±    1418,911  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    288806,717 ±  380122,706    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,017 ±       0,067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4,461 ±      17,982    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         3,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     40955,501 ±    1192,147   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       672,393 ±      19,633  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840,010 ±       0,002    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       668,065 ±       9,615  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     25675,399 ±    1107,150    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1,089 ±       9,243  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        42,320 ±     359,239    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      5261,768 ±      22,910   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1340,624 ±       6,032  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    400984,079 ±       0,010    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1349,807 ±       9,402  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    403731,559 ±    4380,036    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±       0,057  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         6,225 ±      16,946    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        10,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5      5916,636 ±      56,307   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1066,674 ±      10,263  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    283728,073 ±       0,010    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1064,766 ±    1402,796  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    283229,937 ±  373233,146    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,021 ±       0,080  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         5,542 ±      21,330    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     16171,706 ±     355,962   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       906,191 ±      20,291  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88193,259 ±      51,997    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       931,638 ±    1401,976  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     90632,360 ±  135890,870    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±       0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,214 ±       6,966    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     18671,379 ±      60,065   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       972,074 ±       3,182  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944,027 ±       0,271    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       942,660 ±    1421,343  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     79470,807 ±  119905,416    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2,107 ±      11,115    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    288812,560 ±    2706,849   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1046,695 ±       9,821  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704,001 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1065,251 ±    1402,542  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5806,497 ±    7660,093    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,029 ±       0,156  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,159 ±       0,853    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    331469,416 ±    2634,515   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±       0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     16768,697 ±    2746,501   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       935,485 ±     152,771  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     87800,006 ±       0,210    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       796,732 ±    1144,280  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     74636,363 ±  103156,356    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,008 ±       0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,767 ±       6,602    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5        46,000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      8316,584 ±      54,059   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       546,430 ±       3,612  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    103408,855 ±       6,924    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       503,701 ±    1115,594  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     95320,172 ±  210968,563    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1,104 ±       9,338  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       208,798 ±    1765,885    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         7,000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5    986006,419 ±    6010,968   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        40,095 ±       0,244  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64,000 ±       0,001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     81709,812 ±    1392,020   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3684,320 ±      63,116  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     70968,005 ±       0,001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5      3675,466 ±    1440,121  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     70816,039 ±   28609,744    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,075 ±       0,156  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,444 ±       3,010    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        27,000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        13,000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1195326,324 ±   26026,392   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       686,578 ±      14,893  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5       675,261 ±       2,198  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5       889,123 ±      20,482    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,017 ±       0,088  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,022 ±       0,116    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5,000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         3,000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5   1612879,204 ±    5521,132   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       450,892 ±       1,601  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       440,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       474,520 ±    1068,651  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5       463,155 ±    1043,027    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,638 ±       5,403  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,623 ±       5,275    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         4,000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1634943,957 ±   10482,218   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        16,621 ±       0,108  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16,000 ±       0,001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     50222,093 ±     723,891   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      2116,461 ±      30,417  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66328,008 ±       0,001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2171,865 ±    1164,697  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     68054,269 ±   36065,595    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,033 ±       0,091  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1,042 ±       2,854    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        16,000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5         6,000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    885197,549 ±    8988,111   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2812,176 ±      27,286  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5000,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2708,587 ±      28,197  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      4815,833 ±      49,546    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,046 ±       0,088  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,081 ±       0,157    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        20,000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   6044505,092 ±   32712,211   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       368,691 ±       1,971  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       339,427 ±    1220,168  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        88,415 ±     317,934    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,535 ±       4,542  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,140 ±       1,184    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         6,000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5   1099957,678 ±   12836,240   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1313,896 ±      15,129  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1880,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      1353,475 ±       6,498  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      1936,647 ±      24,361    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,036 ±       0,150    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        10,000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         4,000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   9006581,644 ±   38354,824   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       412,018 ±       1,725  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       339,723 ±    1221,640  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        59,412 ±     213,662    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,612 ±       5,251  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,107 ±       0,919    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3,000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         6,000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    349280,526 ±    5460,594   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1915,604 ±      30,039  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8632,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1898,835 ±    1168,317  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      8556,812 ±    5272,890    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,033 ±       0,072  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,150 ±       0,323    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        14,000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         7,000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    819012,055 ±    7820,639   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1286,323 ±      12,166  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      2472,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1344,627 ±       3,176  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2584,060 ±      24,512    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,029 ±       0,072  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,056 ±       0,138    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5        10,000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         4,000                    ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      4426,769 ±      95,125   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2017,158 ±      43,442  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    717152,098 ±       0,025    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1900,219 ±    1166,406  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5    675264,819 ±  407060,158    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,100 ±       0,394  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5        35,438 ±     139,549    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        14,000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         7,000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5559,986 ±      43,879   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2297,817 ±      18,661  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650496,076 ±       0,012    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2306,686 ±    1425,937  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    653056,920 ±  405213,113    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,075 ±       0,122  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        21,216 ±      34,420    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        17,000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         7,000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     47790,011 ±    2655,696   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       795,061 ±      43,959  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184,009 ±       0,002    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       808,100 ±    1156,724  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     26590,512 ±   37589,654    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,025 ±       0,105  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,819 ±       3,421    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         2,000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4561,212 ±     119,896   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       838,738 ±      21,908  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    289408,096 ±       0,017    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       808,413 ±    1161,615  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    279465,713 ±  410728,626    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,012 ±       0,108  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         4,289 ±      36,930    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6,000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      5446,123 ±      31,640   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       546,295 ±       3,096  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    157877,406 ±       0,964    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       539,178 ±    1160,622  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    155831,114 ±  335440,021    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,194 ±       1,497  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        56,240 ±     433,461    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         4,000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         2,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      7146,894 ±      97,665   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       190,977 ±       2,641  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056,059 ±       0,010    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       204,605 ±    1078,823  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     45121,611 ±  237913,618    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2,000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      7172,776 ±      60,956   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       139,247 ±       1,181  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552,059 ±       0,009    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       102,325 ±     881,046  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     22406,966 ±  192930,737    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1,000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         2,000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      8919,707 ±      88,122   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2077,383 ±      20,017  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366557,821 ±      48,666    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2022,926 ±      20,431  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    356950,972 ±    5524,369    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,060 ±       0,225  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        10,580 ±      39,557    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        15,000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     15600,967 ±     234,232   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       359,633 ±       5,466  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     36280,028 ±       0,015    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       339,424 ±    1220,190  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     34303,421 ±  123192,000    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,616 ±       5,256  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        61,988 ±     529,205    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     17414,673 ±     384,928   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       442,052 ±       9,733  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     39952,025 ±       0,011    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       371,909 ±    1332,013  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     33562,199 ±  120137,491    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,117 ±       0,917  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        10,521 ±      82,768    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         3,000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     25493,477 ±     157,689   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       477,759 ±       2,998  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     29496,016 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       474,482 ±    1068,580  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     29290,103 ±   65930,086    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,668 ±       5,659  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        41,176 ±     349,039    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2635,951 ±      15,891   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1674,423 ±      10,135  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    999760,160 ±       0,025    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1625,203 ±    1428,372  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    970576,730 ±  857485,434    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,042 ±       0,150  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        24,855 ±      89,554    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        12,000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      8997,950 ±     110,768   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1104,890 ±      13,842  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    193262,980 ±      52,649    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1074,602 ±    1416,149  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    188007,865 ±  248231,511    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,029 ±       0,122  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         5,102 ±      21,288    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         8,000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         4,000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      9147,960 ±     125,331   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1691,814 ±      22,639  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    291077,123 ±      99,784    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1755,496 ±    1423,951  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    301895,812 ±  242036,928    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,037 ±       0,132  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         6,437 ±      22,586    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        13,000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5         7,000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     56049,150 ±    1044,380   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       523,936 ±       9,711  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712,008 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       506,363 ±    1122,894  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     14234,767 ±   31547,628    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,613 ±       5,188  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        17,316 ±     146,590    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     45357,683 ±     286,920   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       675,292 ±       4,195  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431,838 ±       0,358    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       674,378 ±       1,032  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     23400,159 ±     176,450    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,171 ±       1,207  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         5,934 ±      41,870    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         5,000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         3,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     84640,568 ±     461,406   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       636,320 ±       3,564  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832,005 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       539,059 ±    1160,372  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     10024,331 ±   21578,377    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,666 ±       5,557  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5        12,413 ±     103,565    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4,000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         3,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5    112975,524 ±    1872,109   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0,004 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      6889,210 ±      97,389   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      2123,919 ±      30,923  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    485207,904 ±       1,645    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      2170,198 ±    1177,122  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5    495988,704 ±  277153,794    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,058 ±       0,236  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        13,328 ±      53,997    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        16,000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5         8,000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      4870,165 ±      88,272   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5       270,120 ±       4,940  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5     87296,085 ±       0,012    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306,853 ±    1078,631  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     99394,947 ±  349394,620    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,002 ±       0,018  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,672 ±       5,789    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5         3,000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         6,000                    ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   6143489,323 ±  132447,852   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3808,576 ±      78,812  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976,000 ±       0,001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      3803,520 ±    1439,011  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       974,546 ±     360,703    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,071 ±       0,072  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,018 ±       0,018    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        28,000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        11,000                    ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  47231154,263 ±  376165,734   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       480,161 ±       3,789  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16,000 ±       0,001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       474,126 ±    1067,298  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        15,794 ±      35,511    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,535 ±       4,564  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,018 ±       0,152    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         4,000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         5,000                    ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   9614835,182 ±  179211,665   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3616,424 ±      67,226  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592,000 ±       0,001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      3673,038 ±    1426,698  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       601,482 ±     243,651    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,071 ±       0,122  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,012 ±       0,020    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        27,000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        10,000                    ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  55570126,441 ± 8575498,264   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  47351792,274 ±  838149,208   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1684,831 ±      29,359  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56,000 ±       0,001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1616,641 ±    1420,576  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        53,774 ±      48,127    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,029 ±       0,091  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,001 ±       0,003    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5        12,000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         4,000                    ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   9280895,913 ±   88632,551   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      4104,178 ±      38,851  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       696,000 ±       0,001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      4075,849 ±      37,002  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       691,198 ±       7,480    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,079 ±       0,088  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,013 ±       0,015    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        30,000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        11,000                    ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5  11398851,996 ±  109801,710   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4808,918 ±      46,152  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       664,000 ±       0,001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      4900,563 ±    1176,389  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5       676,627 ±     160,035    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,046 ±       0,067  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,006 ±       0,009    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        36,000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        15,000                    ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  23314578,916 ±  266711,188   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2133,109 ±      24,367  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       144,000 ±       0,001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2158,761 ±    1179,353  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       145,731 ±      79,542    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,062 ±       0,150  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,004 ±       0,010    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        16,000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         6,000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  64015948,433 ± 1167374,823   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1952,374 ±      35,534  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48,000 ±       0,001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2022,808 ±      17,706  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        49,732 ±       0,621    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,071 ±       0,091  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,002 ±       0,002    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        15,000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5         6,000                    ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  15282737,706 ±  185933,341   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      3029,548 ±      36,559  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312,000 ±       0,001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2992,379 ±    1437,220  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       308,241 ±     150,709    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,058 ±       0,119  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,006 ±       0,012    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        22,000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         8,000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  50275737,481 ±  193104,891   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5      1022,184 ±       4,156  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32,000 ±       0,001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      1075,568 ±    1418,081  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        33,676 ±      44,458    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,021 ±       0,080  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,001 ±       0,003    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         8,000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  58027111,807 ±  301184,493   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  45126290,703 ±  416930,606   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2293,616 ±      20,001  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80,000 ±       0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2298,934 ±    1419,946  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        80,182 ±      49,415    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,046 ±       0,036  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,002 ±       0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        17,000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5         6,000                    ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2533387,778 ±   26677,679   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2073,181 ±      21,875  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288,000 ±       0,001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2021,349 ±      22,806  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      1255,814 ±      26,895    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,046 ±       0,067  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,028 ±       0,041    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        15,000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         6,000                    ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5  14074400,169 ±  170997,312   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5      2718,477 ±      33,218  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5       304,000 ±       0,001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2707,712 ±      29,279  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       302,800 ±       6,559    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,050 ±       0,072  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,006 ±       0,008    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        20,000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5         9,000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    189473,896 ±    3125,140   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      3475,720 ±      56,444  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872,002 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      3395,418 ±      27,747  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28205,259 ±     403,532    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,054 ±       0,108  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,449 ±       0,889    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        25,000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        10,000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     29270,226 ±     247,901   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2275,079 ±      19,323  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122336,014 ±       0,002    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2308,316 ±    1436,428  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    124152,993 ±   78165,641    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±       0,127  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,240 ±       6,831    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        17,000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    165853,545 ±    1201,092   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1541,870 ±      11,361  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     14632,003 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1490,538 ±    1169,880  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     14144,171 ±   11079,833    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,091  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,277 ±       0,868    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11,000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         5,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    478496,252 ±    5992,027   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       989,903 ±      12,330  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       941,060 ±    1418,201  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3097,350 ±    4692,661    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±       0,132  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,082 ±       0,434    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    585287,154 ±    5062,234   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       571,189 ±       4,872  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536,001 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5       641,336 ±     279,330  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1724,332 ±     740,023    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,649 ±       5,343  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1,745 ±      14,374    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         5,000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         6,000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     61680,151 ±     658,882   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1348,316 ±      14,481  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34408,007 ±       0,001    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1353,407 ±       5,996  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     34538,068 ±     278,150    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±       0,088  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,425 ±       2,240    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10,000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    431657,070 ±    5183,926   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2929,083 ±      35,354  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2981,781 ±    1437,713  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10872,036 ±    5236,061    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,058 ±       0,067  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,212 ±       0,243    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        22,000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9,000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    350927,177 ±    5752,340   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       920,430 ±      14,981  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4128,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       946,167 ±    1425,382  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4241,941 ±    6371,276    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±       0,134  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,131 ±       0,606    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1351560,823 ±    4408,254   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      2637,963 ±       9,311  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3072,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2707,671 ±      29,316  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3153,176 ±      30,947    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,054 ±       0,108  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,063 ±       0,125    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        20,000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8,000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    122655,975 ±    1774,558   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4437,866 ±      63,806  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56944,003 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      4358,019 ±    1440,306  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     55918,715 ±   18418,382    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,050 ±       0,091  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,641 ±       1,177    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        32,000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        11,000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    619638,705 ±   14461,736   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2705,472 ±      63,829  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2708,728 ±      27,697  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      6880,495 ±     189,958    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±       0,088  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,116 ±       0,222    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        20,000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    360732,609 ±    1232,811   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       550,097 ±       1,939  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2400,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       506,671 ±    1123,738  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      2211,158 ±    4903,779    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,690 ±       5,740  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3,013 ±      25,069    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         6,000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    663498,509 ±    9837,875   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       485,623 ±       7,136  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,867 ±    1124,319  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1203,407 ±    2670,818    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,071 ±       0,486  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,169 ±       1,161    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2207219,465 ±   18775,961   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1020,937 ±       8,682  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728,000 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       941,058 ±    1417,198  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       671,185 ±    1012,569    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±       0,132  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,018 ±       0,094    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         2,000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2238669,617 ±  220825,597   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    427997,624 ±    3138,596   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       615,659 ±       4,513  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264,001 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537,654 ±    1157,353  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1977,038 ±    4255,838    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,772 ±       6,470  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,848 ±      23,869    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    196334,512 ±    1226,136   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       500,959 ±       3,157  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4016,002 ±       0,001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       474,514 ±    1068,663  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3805,854 ±    8568,336    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,641 ±       5,314  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,135 ±      42,585    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     66986,623 ±     889,391   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2256,403 ±      29,674  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53016,007 ±       0,002    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2296,578 ±    1417,513  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     53964,224 ±   33434,634    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±       0,057  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,979 ±       1,338    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        17,000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     79619,935 ±    4558,121   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1429,960 ±      81,766  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28264,005 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1354,577 ±       6,280  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     26779,046 ±    1633,003    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,033 ±       0,091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,660 ±       1,804    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        10,000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         6,000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5    110497,074 ±    1434,238   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1694,530 ±      22,387  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24136,004 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1751,409 ±    1420,599  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24953,072 ±   20377,012    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,050 ±       0,091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,712 ±       1,304    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13,000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         6,000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     20507,020 ±     212,306   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1428,762 ±      14,612  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109656,022 ±       0,011    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1354,012 ±       6,017  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    103919,411 ±     774,008    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±       0,143  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,274 ±      10,973    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10,000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         4,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    183837,030 ±    1568,417   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1357,727 ±      11,452  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     11624,002 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1353,521 ±       5,844  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     11588,049 ±     116,937    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,033 ±       0,072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,285 ±       0,615    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         4,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    520889,598 ±    9728,443   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       574,504 ±      10,766  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       641,262 ±     279,323  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1938,259 ±     862,677    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,650 ±       5,465  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1,968 ±      16,540    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5,000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         5,000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    573860,023 ±    1536,487   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5,834 ±       0,015  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16,001 ±       0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     23459,595 ±     218,099   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       447,896 ±       4,125  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30048,158 ±       1,205    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       372,075 ±    1332,724  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     25000,698 ±   89534,447    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,104 ±       0,852  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6,985 ±      57,175    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         3,000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         2,000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2552413,905 ±   55931,855   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3451,027 ±      75,455  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2128,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      3393,346 ±      31,503  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2092,468 ±      31,922    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,050 ±       0,091  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,031 ±       0,057    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        25,000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        10,000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    884077,472 ±   11374,937   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       561,725 ±       7,158  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       506,521 ±    1123,332  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       902,598 ±    2002,450    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,536 ±       4,497  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,958 ±       8,047    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    316600,632 ±   10619,556   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       616,314 ±      20,744  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3064,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       539,752 ±    1161,857  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      2690,972 ±    5793,106    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,067 ±       0,440  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0,329 ±       2,171    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         4,000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         2,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    784752,077 ±   10186,465   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       590,364 ±       7,843  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       641,895 ±     280,599  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1287,449 ±     566,198    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0,628 ±       5,178  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         1,258 ±      10,379    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         6,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4856634,827 ±   64986,963   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1555,210 ±      20,777  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5      1615,935 ±    1417,354  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       523,825 ±     462,593    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,046 ±       0,105  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,015 ±       0,034    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        12,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9354567,996 ±  160145,103   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       760,764 ±      12,911  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       673,007 ±       5,381  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       113,237 ±       2,178    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0,025 ±       0,132  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0,004 ±       0,022    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         6,000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    214148,487 ±    2508,797   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1447,696 ±      16,800  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10640,002 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1489,345 ±    1169,473  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     10949,560 ±    8697,359    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,033 ±       0,108  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,245 ±       0,791    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        11,000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         5,000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    333488,753 ±    3254,885   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       659,404 ±       6,328  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      3112,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       673,446 ±       5,083  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      3178,285 ±      34,718    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,658 ±       5,489  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         3,101 ±      25,856    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         5,000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5         3,000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5   1011103,388 ±   31962,518   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        56,536 ±       1,790  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102,319 ±     880,996  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       161,598 ±    1391,404    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1,000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     72356,309 ±    1773,375   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3359,933 ±      82,110  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73080,006 ±       0,001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3402,106 ±      11,592  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     73999,644 ±    1793,324    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,067 ±       0,067  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,448 ±       1,441    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25,000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         9,000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1205377,496 ±   14031,143   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       692,289 ±       8,245  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       675,155 ±       2,156  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       881,633 ±      11,398    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±       0,132  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,033 ±       0,172    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5,000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5   1612462,197 ±    9886,942   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       450,768 ±       2,717  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,511 ±    1068,657  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       463,447 ±    1044,136    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,635 ±       5,348  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,621 ±       5,231    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6,000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1029739,648 ±    4755,953   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        10,468 ±       0,048  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16,000 ±       0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     49458,747 ±    1469,841   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2083,871 ±      61,689  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66312,009 ±       0,002    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2036,030 ±       9,789  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     64792,433 ±    1769,437    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,050 ±       0,091  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,594 ±       2,964    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    299153,443 ±    4683,710   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1170,773 ±      18,307  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075,519 ±    1417,392  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      5661,354 ±    7488,479    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,029 ±       0,108  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,153 ±       0,568    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8,000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         3,000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     21942,318 ±      36,219   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1197,843 ±       2,028  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85920,021 ±       0,012    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1217,617 ±    1165,790  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     87331,712 ±   83534,927    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±       0,122  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         2,090 ±       8,717    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5         9,000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5         4,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    148665,099 ±    1324,083   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1816,441 ±      16,129  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232,003 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1898,470 ±    1167,178  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     20103,668 ±   12431,510    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,042 ±       0,057  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,441 ±       0,604    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        14,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         7,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    387875,857 ±    9712,366   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1847,302 ±      46,292  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1753,122 ±    1421,532  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7111,675 ±    5720,068    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,029 ±       0,091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,118 ±       0,370    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        13,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5         4,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    460646,979 ±    3739,311   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1578,093 ±      12,902  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392,001 ±       0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1481,189 ±    1158,967  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      5059,428 ±    3914,972    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0,046 ±       0,104  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0,156 ±       0,357    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        11,000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         4,000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     22104,252 ±     224,502   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       554,682 ±       5,565  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39496,020 ±       0,010    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       539,749 ±    1161,851  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     38420,325 ±   82703,896    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,067 ±       0,444  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4,755 ±      31,743    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4,000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     83645,875 ±     620,538   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1729,579 ±      12,386  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32544,005 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5      1751,037 ±    1417,993  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     32955,135 ±   26835,739    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,033 ±       0,072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,627 ±       1,348    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        13,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5         6,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    148780,476 ±    1478,895   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       732,049 ±       7,200  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7744,003 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       675,202 ±       2,251  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7142,690 ±      84,303    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,017 ±       0,105  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,177 ±       1,109    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         2,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    251365,094 ±    1967,117   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5      1034,913 ±       8,172  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480,002 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       941,034 ±    1417,031  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      5891,220 ±    8858,891    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,012 ±       0,072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,078 ±       0,449    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         7,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     27055,262 ±     165,341   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1548,077 ±       9,609  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90064,016 ±       0,004    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1625,653 ±    1431,156  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     94560,979 ±   82888,573    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,042 ±       0,113  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2,420 ±       6,589    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5        12,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         5,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    190236,298 ±    1402,880   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1224,153 ±       9,039  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     10128,002 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1217,665 ±    1162,282  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     10072,935 ±    9598,090    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,025 ±       0,104  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,207 ±       0,865    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5         9,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    579829,736 ±    5480,949   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       645,440 ±       5,935  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       673,398 ±       4,697  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1827,898 ±      16,496    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,648 ±       5,402  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1,753 ±      14,612    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         3,000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    692135,355 ±    4203,784   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        14,073 ±       0,085  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32,001 ±       0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     23587,489 ±     194,328   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       483,525 ±       3,883  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32264,157 ±       1,197    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       507,077 ±    1124,884  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     33860,793 ±   75120,046    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,058 ±       0,458  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3,891 ±      30,592    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         4,000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     87038,220 ±     536,623   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1522,319 ±       9,137  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27528,005 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1480,563 ±    1155,126  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     26777,150 ±   21014,177    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±       0,122  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,526 ±       2,193    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    155808,850 ±    1298,049   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       662,062 ±       5,535  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6688,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       674,908 ±       1,954  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6817,808 ±      70,649    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,075 ±       0,348  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,757 ±       3,506    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    226392,279 ±     591,871   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       806,616 ±       2,152  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608,002 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,232 ±    1157,073  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      5611,162 ±    8022,709    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±       0,132  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,174 ±       0,914    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     47257,710 ±     358,965   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1958,401 ±      14,840  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65224,009 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2031,110 ±      16,544  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     67645,848 ±     876,323    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±       0,091  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,971 ±       3,047    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        15,000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         7,000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    140362,767 ±     979,040   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1300,530 ±       8,513  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     14584,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1210,419 ±    1158,916  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     13570,574 ±   12957,869    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,050 ±       0,108  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,560 ±       1,206    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    303017,187 ±    3270,508   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1426,283 ±      15,207  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7408,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1478,785 ±    1155,207  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7679,162 ±    5952,919    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±       0,057  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,216 ±       0,296    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        11,000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    571983,071 ±    9707,794   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       459,333 ±       7,869  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       372,072 ±    1332,709  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1024,950 ±    3668,315    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,083 ±       0,547  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,229 ±       1,506    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    674682,598 ±    7809,599   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       356,660 ±       4,083  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832,001 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       306,923 ±    1078,879  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       716,702 ±    2519,331    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    876254,282 ±    5126,782   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     37701,590 ±     502,119   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1878,388 ±      24,952  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     78416,011 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1883,098 ±    1152,418  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     78623,085 ±   48347,598    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,042 ±       0,080  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,739 ±       3,360    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14,000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         6,000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5    154686,265 ±     694,484   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1150,257 ±       5,529  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     11704,003 ±       0,001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1210,129 ±    1158,140  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12315,306 ±   11811,145    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±       0,098  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,424 ±       0,999    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         9,000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         4,000                    ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     70487,384 ±     738,655   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      3192,604 ±      32,841  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     71288,006 ±       0,002    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3119,776 ±    1440,647  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     69669,995 ±   32474,327    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,100 ±       0,215  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         2,233 ±       4,834    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        23,000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         9,000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    153503,301 ±    5197,023   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1368,512 ±      46,572  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     14032,003 ±       0,001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1353,685 ±       6,225  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     13880,941 ±     530,035    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±       0,044  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,298 ±       0,444    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        10,000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         5,000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    557819,165 ±    4421,431   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1457,420 ±      11,690  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112,001 ±       0,001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1480,716 ±    1166,703  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4178,229 ±    3306,467    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±       0,119  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,106 ±       0,334    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        11,000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     18157,645 ±     409,339   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2312,968 ±      52,270  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    200488,024 ±       0,011    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2308,245 ±    1428,233  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    200015,636 ±  121682,447    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,087 ±       0,119  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         7,570 ±      10,194    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        17,000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        10,000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     49725,647 ±     387,023   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2645,415 ±      20,354  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     83728,008 ±       0,001    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2570,678 ±    1163,913  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     81372,940 ±   37189,830    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,092 ±       0,166  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         2,900 ±       5,267    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        19,000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8,000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    253313,779 ±    4768,566   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1178,079 ±      22,214  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320,002 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1217,166 ±    1165,384  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      7569,113 ±    7320,306    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±       0,098  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,130 ±       0,614    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         9,000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1258490,672 ±    8522,964   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       633,285 ±       4,300  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792,000 ±       0,001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       538,977 ±    1160,194  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       673,937 ±    1450,726    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,643 ±       5,312  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,806 ±       6,661    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         3,000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1297394,706 ±    6220,330   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻³                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     37453,560 ±     651,464   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2078,636 ±      36,102  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     87352,011 ±       0,002    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2035,098 ±      10,444  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     85523,736 ±    1537,328    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,075 ±       0,072  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3,146 ±       2,951    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         7,000                    ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    680009,706 ±   16244,810   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2063,484 ±      49,547  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4776,001 ±       0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2023,202 ±      19,920  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4682,889 ±     103,857    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,042 ±       0,080  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,096 ±       0,187    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        15,000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         6,000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1707716,797 ±   22907,230   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1215,224 ±      16,355  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1120,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1217,912 ±    1166,321  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1123,107 ±    1082,954    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,033 ±       0,134  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,031 ±       0,124    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         9,000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   8509856,662 ±  151024,461   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       259,534 ±       4,648  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       306,904 ±    1078,809  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        56,889 ±     199,975    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,003 ±       0,030  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,001 ±       0,006    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    253440,850 ±    2405,566   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1745,610 ±      16,152  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     10840,002 ±       0,001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1762,015 ±    1429,289  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     10939,735 ±    8830,287    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,029 ±       0,091  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,181 ±       0,569    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        13,000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5   1064058,744 ±   26727,664   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1563,185 ±      39,849  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2312,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1479,492 ±    1157,078  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2187,599 ±    1691,092    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,042 ±       0,098  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,062 ±       0,145    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        11,000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2777391,324 ±   42150,639   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1143,512 ±      17,132  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1216,689 ±    1164,484  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5       689,730 ±     663,242    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,033 ±       0,122  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,019 ±       0,069    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         9,000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         3,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   6671156,213 ±   44685,924   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       745,996 ±       5,119  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       807,852 ±    1162,119  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       190,615 ±     274,583    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,654 ±       5,368  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,154 ±       1,266    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         6,000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         4,000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   6631570,032 ±   39914,739   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       404,487 ±       2,422  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       441,864 ±     989,264  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       104,861 ±     234,626    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,636 ±       5,422  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,151 ±       1,285    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         4,000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         8,000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    380413,000 ±    4752,844   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1937,467 ±      23,851  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8016,001 ±       0,001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1898,714 ±    1162,725  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      7857,044 ±    4843,097    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,046 ±       0,067  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,189 ±       0,276    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        14,000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     78809,148 ±     942,676   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      2252,834 ±      27,228  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     44992,006 ±       0,001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2296,645 ±    1417,714  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     45855,563 ±   27941,996    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,042 ±       0,127  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         0,831 ±       2,531    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        17,000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    123977,021 ±     883,072   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1906,239 ±      13,580  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24200,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1899,599 ±    1167,728  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     24120,651 ±   14940,621    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,050 ±       0,122  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,635 ±       1,546    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        14,000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    179898,614 ±    1546,393   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2642,640 ±      22,305  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120,002 ±       0,001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2707,686 ±      28,518  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     23689,076 ±     141,401    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,058 ±       0,067  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,510 ±       0,586    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        20,000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         8,000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     58526,258 ±    1348,714   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3076,075 ±      70,923  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82720,007 ±       0,001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3126,107 ±    1431,865  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     84044,491 ±   37639,152    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,067 ±       0,143  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,791 ±       3,850    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23,000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        10,000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     87944,486 ±     774,261   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1793,386 ±      16,260  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     32096,005 ±       0,001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1752,201 ±    1418,542  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     31348,929 ±   25173,547    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,012 ±       0,072  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,223 ±       1,280    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        13,000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    277783,969 ±    1505,988   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1321,570 ±       6,789  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7488,002 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1343,613 ±       4,303  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5      7612,905 ±      29,209    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,042 ±       0,057  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,236 ±       0,321    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        10,000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         4,000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    608614,780 ±    4748,671   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       525,888 ±       4,089  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       507,113 ±    1125,022  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1310,788 ±    2907,285    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,079 ±       0,508  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,204 ±       1,310    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4,000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         3,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    538168,137 ±   48709,573   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       289,941 ±      26,214  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       204,621 ±    1078,907  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       596,902 ±    3148,075    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,004 ±       0,021  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,011 ±       0,060    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         2,000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         3,000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    695668,300 ±    7175,990   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         7,072 ±       0,072  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16,001 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     38131,104 ±     308,043   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1899,880 ±      15,639  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     78416,011 ±       0,001    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2018,377 ±      23,504  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     83306,824 ±     605,594    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±       0,080  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,719 ±       3,315    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        15,000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5         6,000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    153126,803 ±   10451,080   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1146,537 ±      77,688  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     11784,003 ±       0,001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1075,619 ±    1418,112  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11023,673 ±   14162,650    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,033 ±       0,122  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,340 ±       1,239    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5         8,000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5740088,234 ±  175549,761   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      4230,503 ±     129,522  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1160,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4216,922 ±    1182,326  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1156,143 ±     311,998    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,071 ±       0,091  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,019 ±       0,025    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        31,000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        21,000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   8582014,664 ±  205197,371   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       916,038 ±      21,795  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       806,503 ±    1157,347  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       148,183 ±     217,438    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,176  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,005 ±       0,033    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6,000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   5355797,523 ±  151218,047   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2531,729 ±      71,872  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       744,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2578,361 ±    1162,625  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       757,549 ±     335,889    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,054 ±       0,122  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,016 ±       0,036    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        19,000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         8,000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   9025885,505 ±  226849,610   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       963,426 ±      24,202  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       941,169 ±    1418,894  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       163,968 ±     245,289    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,017 ±       0,067  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,003 ±       0,012    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7,000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   6331323,824 ±   76285,791   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3314,692 ±      40,238  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       824,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3254,448 ±    1155,530  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       809,115 ±     291,291    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,067 ±       0,143  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,017 ±       0,036    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        11,000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   4923012,220 ±   46302,440   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2652,406 ±      24,231  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       848,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2573,168 ±    1173,402  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       822,704 ±     376,401    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,058 ±       0,036  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,019 ±       0,011    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        19,000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         7,000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3458486,071 ±    4621,652   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       826,137 ±       0,968  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806,605 ±    1155,713  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       367,106 ±     525,904    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±       0,122  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,015 ±       0,055    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   6479276,119 ±   29103,118   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       625,702 ±       2,723  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       538,764 ±    1159,733  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       130,914 ±     281,805    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,537 ±       4,538  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,131 ±       1,104    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         4,000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         4,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2158113,854 ±   28338,719   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       669,133 ±       8,646  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       672,482 ±       2,404  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       490,446 ±       5,219    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,029 ±       0,134  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,021 ±       0,098    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5,000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5  10741033,940 ±   72629,212   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1037,300 ±       7,114  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941,041 ±    1417,199  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       137,870 ±     207,320    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,017 ±       0,105  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,002 ±       0,015    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9097133,473 ±   50031,885   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3896786,605 ±   18615,867   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1247,829 ±       5,817  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504,000 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,836 ±    1153,918  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       487,401 ±     465,526    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±       0,088  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,015 ±       0,035    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9,000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         3,000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    442395,309 ±    2596,495   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       213,617 ±       1,270  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5       760,001 ±       0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,602 ±    1078,807  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       727,963 ±    3838,338    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         2,000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5   1680197,163 ±   20910,723   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2971,880 ±      36,462  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2784,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2981,768 ±    1431,408  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2793,622 ±    1354,922    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,054 ±       0,044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,051 ±       0,041    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        22,000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         9,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   2388860,561 ±   50457,766   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       667,795 ±      14,147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       673,141 ±       3,635  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       443,532 ±       7,963    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,544 ±       4,501  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,355 ±       2,939    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1552961,708 ±   20134,005   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1112,987 ±      14,337  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1128,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1217,848 ±    1165,555  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1234,632 ±    1185,858    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,037 ±       0,105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,038 ±       0,106    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         9,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2874406,067 ±   20819,538   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       803,541 ±       6,023  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       807,714 ±    1158,153  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       442,146 ±     631,468    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±       0,143  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,014 ±       0,079    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1293835,413 ±    7361,280   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       868,058 ±       5,066  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1056,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       938,984 ±    1412,075  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1142,400 ±    1719,458    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±       0,044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,035 ±       0,054    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7,000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1222893,551 ±   10824,497   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1659,624 ±      14,781  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      2136,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1616,347 ±    1420,017  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2080,805 ±    1838,981    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,029 ±       0,091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,037 ±       0,117    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1957661,513 ±   16382,906   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1641,811 ±      13,526  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1614,988 ±    1425,777  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1298,410 ±    1145,670    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±       0,108  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,023 ±       0,087    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2884800,280 ±   18142,918   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       747,841 ±       4,667  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5       807,605 ±    1161,159  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       440,496 ±     631,359    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,541 ±       4,434  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,296 ±       2,424    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         6,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         4,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2971728,662 ±   21376,159   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1404,767 ±      10,428  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1485,027 ±    1152,674  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       786,585 ±     612,757    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±       0,091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,015 ±       0,048    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        11,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   2990900,050 ±   31228,347   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       775,321 ±       8,083  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       672,895 ±       4,042  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       354,102 ±       3,611    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,029 ±       0,134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,015 ±       0,070    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5,000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3050670,240 ±   22606,951   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2912059,945 ±   27434,536   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1406,101 ±      13,247  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       760,000 ±       0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1477,058 ±    1158,804  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       798,424 ±     628,406    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,037 ±       0,067  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,020 ±       0,036    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        11,000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     13610,569 ±     407,211   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1981,676 ±      58,532  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    229161,071 ±      38,487    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2020,696 ±      20,907  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5    233681,375 ±    5237,675    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,063 ±       0,293  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         7,295 ±      33,924    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        15,000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     17509,227 ±     226,765   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       240,810 ±       2,998  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     21645,998 ±      31,628    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       204,617 ±    1078,884  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     18438,087 ±   97218,728    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,006 ±       0,054  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,563 ±       4,845    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         2,000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         2,000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     44727,650 ±     305,820   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       409,680 ±       2,866  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14416,010 ±       0,002    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       441,872 ±     989,285  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     15556,855 ±   34834,277    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,668 ±       5,527  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        23,510 ±     194,658    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         4,000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         7,000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      3858,959 ±      54,747   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1246,435 ±      17,617  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    508144,107 ±       0,013    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1217,082 ±    1162,748  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    496262,526 ±  475132,808    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,033 ±       0,091  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        13,601 ±      37,392    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5         9,000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        15,000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     69759,586 ±    1854,485   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       890,885 ±      23,898  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100,015 ±       0,113    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       809,255 ±    1161,288  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     18242,227 ±   25879,179    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,017 ±       0,104  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,374 ±       2,345    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6,000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         2,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     93344,951 ±    1623,368   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       612,063 ±      10,725  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10320,005 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       641,308 ±     279,322  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     10813,215 ±    4710,821    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,662 ±       5,525  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        11,159 ±      93,078    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         5,000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5    107340,244 ±    1280,373   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        16,368 ±       0,199  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       240,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    429937,035 ±    4103,187   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2292,411 ±      22,398  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8392,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2297,741 ±    1439,314  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      8412,357 ±    5295,124    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±       0,057  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,152 ±       0,207    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        17,000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5         8,000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    499301,131 ±    3298,906   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       596,425 ±       3,836  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1880,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       539,802 ±    1161,965  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1700,427 ±    3660,311    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,067 ±       0,530  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,210 ±       1,668    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         2,000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1425044,604 ±   33179,322   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       746,067 ±      17,285  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       672,877 ±       4,198  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       743,183 ±      15,809    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±       0,105  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,018 ±       0,115    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    124713,036 ±    2930,300   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      4331,618 ±     102,509  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54664,003 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      4357,674 ±    1442,443  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     55016,511 ±   19480,329    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,062 ±       0,127  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,790 ±       1,615    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        32,000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        13,000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    657941,375 ±    9403,984   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1919,557 ±      27,904  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1888,306 ±    1156,964  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4518,018 ±    2785,980    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,054 ±       0,072  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,129 ±       0,172    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         5,000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    441575,661 ±    8883,257   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       702,538 ±      13,954  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2504,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,029 ±       6,379  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      2398,901 ±      69,376    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,683 ±       5,748  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,440 ±      20,531    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         4,000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    813173,786 ±    5574,798   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       619,974 ±       4,112  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       674,853 ±       1,542  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1306,225 ±       8,561    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,067 ±       0,486  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,129 ±       0,939    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         5,000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   2271347,593 ±    9939,239   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1050,586 ±       4,607  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728,000 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1075,571 ±    1417,215  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       745,532 ±     984,724    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±       0,132  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,017 ±       0,091    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         8,000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         3,000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   2389710,245 ±   15960,308   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    419303,320 ±    3304,707   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       620,184 ±       4,850  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328,001 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       537,638 ±    1157,318  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2017,548 ±    4343,025    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,786 ±       6,549  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,960 ±      24,651    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    217824,700 ±    2212,712   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       564,664 ±       5,634  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      4080,002 ±       0,001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       506,796 ±    1124,108  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3663,723 ±    8123,604    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,634 ±       5,357  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4,584 ±      38,709    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5,000                    ms
[info] Benchmark result is saved to oraclejdk11.json
[success] Total time: 8109 s, completed 6 лип. 2018 10:35:46
